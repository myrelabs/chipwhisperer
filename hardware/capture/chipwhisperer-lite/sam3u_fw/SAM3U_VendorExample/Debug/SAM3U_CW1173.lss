
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cf5c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008cf5c  0008cf5c  0001cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001538  20000000  0008cf64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001384  20001538  0008e49c  00021538  2**2
                  ALLOC
  4 .mpssemem     000000d0  20080000  20080000  00030000  2**2
                  ALLOC
  5 .stack        00001500  200800d0  200800d0  00030000  2**0
                  ALLOC
  6 .ARM.attributes 00000029  00000000  00000000  00021538  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00021561  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003d8d0  00000000  00000000  000215ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000084f1  00000000  00000000  0005ee8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d404  00000000  00000000  0006737b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000015d8  00000000  00000000  0007477f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016b0  00000000  00000000  00075d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000218bf  00000000  00000000  00077407  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000292ba  00000000  00000000  00098cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0006140a  00000000  00000000  000c1f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000047bc  00000000  00000000  0012338c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 15 08 20 31 62 08 00 2f 62 08 00 2f 62 08 00     ... 1b../b../b..
   80010:	2f 62 08 00 2f 62 08 00 2f 62 08 00 00 00 00 00     /b../b../b......
	...
   8002c:	2f 62 08 00 2f 62 08 00 00 00 00 00 2f 62 08 00     /b../b....../b..
   8003c:	2f 62 08 00 2f 62 08 00 2f 62 08 00 2f 62 08 00     /b../b../b../b..
   8004c:	2f 62 08 00 2f 62 08 00 2f 62 08 00 2f 62 08 00     /b../b../b../b..
   8005c:	2f 62 08 00 2f 62 08 00 2f 62 08 00 e1 48 08 00     /b../b../b...H..
   8006c:	f5 48 08 00 2f 62 08 00 99 24 08 00 2f 62 08 00     .H../b...$../b..
   8007c:	2f 62 08 00 2f 62 08 00 2f 62 08 00 2f 62 08 00     /b../b../b../b..
   8008c:	2f 62 08 00 2f 62 08 00 2f 62 08 00 ed 40 08 00     /b../b../b...@..
   8009c:	2f 62 08 00 2f 62 08 00 2f 62 08 00 2f 62 08 00     /b../b../b../b..
   800ac:	2f 62 08 00 2f 62 08 00 59 50 08 00 2f 62 08 00     /b../b..YP../b..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20001538 	.word	0x20001538
   800d8:	00000000 	.word	0x00000000
   800dc:	0008cf64 	.word	0x0008cf64

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	0008cf64 	.word	0x0008cf64
   8011c:	2000153c 	.word	0x2000153c
   80120:	0008cf64 	.word	0x0008cf64
   80124:	00000000 	.word	0x00000000

00080128 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80128:	4a02      	ldr	r2, [pc, #8]	; (80134 <udi_cdc_comm_disable+0xc>)
   8012a:	7813      	ldrb	r3, [r2, #0]
   8012c:	3b01      	subs	r3, #1
   8012e:	b2db      	uxtb	r3, r3
   80130:	7013      	strb	r3, [r2, #0]
   80132:	4770      	bx	lr
   80134:	2000155f 	.word	0x2000155f

00080138 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80138:	2000      	movs	r0, #0
   8013a:	4770      	bx	lr

0008013c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   8013c:	2000      	movs	r0, #0
   8013e:	4770      	bx	lr

00080140 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80140:	4b1d      	ldr	r3, [pc, #116]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80142:	781b      	ldrb	r3, [r3, #0]
   80144:	f013 0f80 	tst.w	r3, #128	; 0x80
   80148:	d105      	bne.n	80156 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8014a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8014e:	2b20      	cmp	r3, #32
   80150:	d018      	beq.n	80184 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
   80152:	2000      	movs	r0, #0
   80154:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80156:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8015a:	2b20      	cmp	r3, #32
   8015c:	d001      	beq.n	80162 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
   8015e:	2000      	movs	r0, #0
   80160:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80162:	4b15      	ldr	r3, [pc, #84]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80164:	785b      	ldrb	r3, [r3, #1]
   80166:	2b21      	cmp	r3, #33	; 0x21
   80168:	d124      	bne.n	801b4 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
   8016a:	4b13      	ldr	r3, [pc, #76]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   8016c:	88db      	ldrh	r3, [r3, #6]
   8016e:	2b07      	cmp	r3, #7
   80170:	d001      	beq.n	80176 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
   80172:	2000      	movs	r0, #0
   80174:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80176:	4b10      	ldr	r3, [pc, #64]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80178:	4a10      	ldr	r2, [pc, #64]	; (801bc <udi_cdc_comm_setup+0x7c>)
   8017a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   8017c:	2207      	movs	r2, #7
   8017e:	819a      	strh	r2, [r3, #12]
				return true;
   80180:	2001      	movs	r0, #1
   80182:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80184:	4b0c      	ldr	r3, [pc, #48]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80186:	7858      	ldrb	r0, [r3, #1]
   80188:	2820      	cmp	r0, #32
   8018a:	d004      	beq.n	80196 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
   8018c:	2822      	cmp	r0, #34	; 0x22
   8018e:	bf14      	ite	ne
   80190:	2000      	movne	r0, #0
   80192:	2001      	moveq	r0, #1
   80194:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80196:	4b08      	ldr	r3, [pc, #32]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80198:	88db      	ldrh	r3, [r3, #6]
   8019a:	2b07      	cmp	r3, #7
   8019c:	d001      	beq.n	801a2 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
   8019e:	2000      	movs	r0, #0
}
   801a0:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   801a2:	4b05      	ldr	r3, [pc, #20]	; (801b8 <udi_cdc_comm_setup+0x78>)
   801a4:	4a06      	ldr	r2, [pc, #24]	; (801c0 <udi_cdc_comm_setup+0x80>)
   801a6:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   801a8:	4a04      	ldr	r2, [pc, #16]	; (801bc <udi_cdc_comm_setup+0x7c>)
   801aa:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   801ac:	2207      	movs	r2, #7
   801ae:	819a      	strh	r2, [r3, #12]
				return true;
   801b0:	2001      	movs	r0, #1
   801b2:	4770      	bx	lr
	return false;  // request Not supported
   801b4:	2000      	movs	r0, #0
   801b6:	4770      	bx	lr
   801b8:	2000287c 	.word	0x2000287c
   801bc:	20001558 	.word	0x20001558
   801c0:	000803dd 	.word	0x000803dd

000801c4 <udi_cdc_comm_enable>:
{
   801c4:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   801c6:	2400      	movs	r4, #0
   801c8:	4b12      	ldr	r3, [pc, #72]	; (80214 <udi_cdc_comm_enable+0x50>)
   801ca:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801cc:	4b12      	ldr	r3, [pc, #72]	; (80218 <udi_cdc_comm_enable+0x54>)
   801ce:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801d0:	4b12      	ldr	r3, [pc, #72]	; (8021c <udi_cdc_comm_enable+0x58>)
   801d2:	22a1      	movs	r2, #161	; 0xa1
   801d4:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801d6:	2220      	movs	r2, #32
   801d8:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801da:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801dc:	2201      	movs	r2, #1
   801de:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801e0:	2202      	movs	r2, #2
   801e2:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801e4:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801e6:	490e      	ldr	r1, [pc, #56]	; (80220 <udi_cdc_comm_enable+0x5c>)
   801e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801ec:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801ee:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801f0:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801f2:	2308      	movs	r3, #8
   801f4:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801f6:	4620      	mov	r0, r4
   801f8:	4b0a      	ldr	r3, [pc, #40]	; (80224 <udi_cdc_comm_enable+0x60>)
   801fa:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801fc:	4620      	mov	r0, r4
   801fe:	4b0a      	ldr	r3, [pc, #40]	; (80228 <udi_cdc_comm_enable+0x64>)
   80200:	4798      	blx	r3
   80202:	4602      	mov	r2, r0
   80204:	b120      	cbz	r0, 80210 <udi_cdc_comm_enable+0x4c>
	udi_cdc_nb_comm_enabled++;
   80206:	4903      	ldr	r1, [pc, #12]	; (80214 <udi_cdc_comm_enable+0x50>)
   80208:	780b      	ldrb	r3, [r1, #0]
   8020a:	3301      	adds	r3, #1
   8020c:	b2db      	uxtb	r3, r3
   8020e:	700b      	strb	r3, [r1, #0]
}
   80210:	4610      	mov	r0, r2
   80212:	bd10      	pop	{r4, pc}
   80214:	2000155f 	.word	0x2000155f
   80218:	20001974 	.word	0x20001974
   8021c:	20001d8c 	.word	0x20001d8c
   80220:	20001558 	.word	0x20001558
   80224:	000829b1 	.word	0x000829b1
   80228:	00082905 	.word	0x00082905

0008022c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8022c:	4b42      	ldr	r3, [pc, #264]	; (80338 <udi_cdc_tx_send+0x10c>)
   8022e:	781b      	ldrb	r3, [r3, #0]
   80230:	b103      	cbz	r3, 80234 <udi_cdc_tx_send+0x8>
   80232:	4770      	bx	lr
{
   80234:	b570      	push	{r4, r5, r6, lr}
   80236:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80238:	4b40      	ldr	r3, [pc, #256]	; (8033c <udi_cdc_tx_send+0x110>)
   8023a:	4798      	blx	r3
   8023c:	2800      	cmp	r0, #0
   8023e:	d03d      	beq.n	802bc <udi_cdc_tx_send+0x90>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80240:	4b3f      	ldr	r3, [pc, #252]	; (80340 <udi_cdc_tx_send+0x114>)
   80242:	881c      	ldrh	r4, [r3, #0]
   80244:	4b3f      	ldr	r3, [pc, #252]	; (80344 <udi_cdc_tx_send+0x118>)
   80246:	4798      	blx	r3
   80248:	4284      	cmp	r4, r0
   8024a:	d072      	beq.n	80332 <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8024c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80250:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80252:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   80256:	2200      	movs	r2, #0
   80258:	4b3b      	ldr	r3, [pc, #236]	; (80348 <udi_cdc_tx_send+0x11c>)
   8025a:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8025c:	4b3b      	ldr	r3, [pc, #236]	; (8034c <udi_cdc_tx_send+0x120>)
   8025e:	781c      	ldrb	r4, [r3, #0]
   80260:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80262:	4b3b      	ldr	r3, [pc, #236]	; (80350 <udi_cdc_tx_send+0x124>)
   80264:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80268:	2b00      	cmp	r3, #0
   8026a:	d02e      	beq.n	802ca <udi_cdc_tx_send+0x9e>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   8026c:	2200      	movs	r2, #0
   8026e:	4b39      	ldr	r3, [pc, #228]	; (80354 <udi_cdc_tx_send+0x128>)
   80270:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80272:	4b39      	ldr	r3, [pc, #228]	; (80358 <udi_cdc_tx_send+0x12c>)
   80274:	781b      	ldrb	r3, [r3, #0]
   80276:	2b00      	cmp	r3, #0
   80278:	d143      	bne.n	80302 <udi_cdc_tx_send+0xd6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8027a:	fab4 f384 	clz	r3, r4
   8027e:	095b      	lsrs	r3, r3, #5
   80280:	4a32      	ldr	r2, [pc, #200]	; (8034c <udi_cdc_tx_send+0x120>)
   80282:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80284:	2201      	movs	r2, #1
   80286:	4b2c      	ldr	r3, [pc, #176]	; (80338 <udi_cdc_tx_send+0x10c>)
   80288:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8028a:	b925      	cbnz	r5, 80296 <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   8028c:	4b2e      	ldr	r3, [pc, #184]	; (80348 <udi_cdc_tx_send+0x11c>)
   8028e:	701a      	strb	r2, [r3, #0]
   80290:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80294:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   80296:	4626      	mov	r6, r4
   80298:	4b2d      	ldr	r3, [pc, #180]	; (80350 <udi_cdc_tx_send+0x124>)
   8029a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8029e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   802a2:	bf14      	ite	ne
   802a4:	2501      	movne	r5, #1
   802a6:	2500      	moveq	r5, #0
	if (b_short_packet) {
   802a8:	d034      	beq.n	80314 <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
   802aa:	4b24      	ldr	r3, [pc, #144]	; (8033c <udi_cdc_tx_send+0x110>)
   802ac:	4798      	blx	r3
   802ae:	2800      	cmp	r0, #0
   802b0:	d02b      	beq.n	8030a <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802b2:	4b24      	ldr	r3, [pc, #144]	; (80344 <udi_cdc_tx_send+0x118>)
   802b4:	4798      	blx	r3
   802b6:	4b22      	ldr	r3, [pc, #136]	; (80340 <udi_cdc_tx_send+0x114>)
   802b8:	8018      	strh	r0, [r3, #0]
   802ba:	e02e      	b.n	8031a <udi_cdc_tx_send+0xee>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802bc:	4b20      	ldr	r3, [pc, #128]	; (80340 <udi_cdc_tx_send+0x114>)
   802be:	881c      	ldrh	r4, [r3, #0]
   802c0:	4b26      	ldr	r3, [pc, #152]	; (8035c <udi_cdc_tx_send+0x130>)
   802c2:	4798      	blx	r3
   802c4:	4284      	cmp	r4, r0
   802c6:	d1c1      	bne.n	8024c <udi_cdc_tx_send+0x20>
   802c8:	e033      	b.n	80332 <udi_cdc_tx_send+0x106>
		sof_zlp_counter++;
   802ca:	4a22      	ldr	r2, [pc, #136]	; (80354 <udi_cdc_tx_send+0x128>)
   802cc:	8813      	ldrh	r3, [r2, #0]
   802ce:	3301      	adds	r3, #1
   802d0:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802d2:	4b1a      	ldr	r3, [pc, #104]	; (8033c <udi_cdc_tx_send+0x110>)
   802d4:	4798      	blx	r3
   802d6:	b918      	cbnz	r0, 802e0 <udi_cdc_tx_send+0xb4>
   802d8:	4b1e      	ldr	r3, [pc, #120]	; (80354 <udi_cdc_tx_send+0x128>)
   802da:	881b      	ldrh	r3, [r3, #0]
   802dc:	2b63      	cmp	r3, #99	; 0x63
   802de:	d908      	bls.n	802f2 <udi_cdc_tx_send+0xc6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802e0:	4b16      	ldr	r3, [pc, #88]	; (8033c <udi_cdc_tx_send+0x110>)
   802e2:	4798      	blx	r3
   802e4:	2800      	cmp	r0, #0
   802e6:	d0c1      	beq.n	8026c <udi_cdc_tx_send+0x40>
   802e8:	4b1a      	ldr	r3, [pc, #104]	; (80354 <udi_cdc_tx_send+0x128>)
   802ea:	881b      	ldrh	r3, [r3, #0]
   802ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802f0:	d2bc      	bcs.n	8026c <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802f2:	b9f5      	cbnz	r5, 80332 <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
   802f4:	2201      	movs	r2, #1
   802f6:	4b14      	ldr	r3, [pc, #80]	; (80348 <udi_cdc_tx_send+0x11c>)
   802f8:	701a      	strb	r2, [r3, #0]
   802fa:	f3bf 8f5f 	dmb	sy
   802fe:	b662      	cpsie	i
   80300:	e017      	b.n	80332 <udi_cdc_tx_send+0x106>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   80302:	fab4 f484 	clz	r4, r4
   80306:	0964      	lsrs	r4, r4, #5
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x58>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8030a:	4b14      	ldr	r3, [pc, #80]	; (8035c <udi_cdc_tx_send+0x130>)
   8030c:	4798      	blx	r3
   8030e:	4b0c      	ldr	r3, [pc, #48]	; (80340 <udi_cdc_tx_send+0x114>)
   80310:	8018      	strh	r0, [r3, #0]
   80312:	e002      	b.n	8031a <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80314:	2200      	movs	r2, #0
   80316:	4b0a      	ldr	r3, [pc, #40]	; (80340 <udi_cdc_tx_send+0x114>)
   80318:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8031a:	4b0d      	ldr	r3, [pc, #52]	; (80350 <udi_cdc_tx_send+0x124>)
	udd_ep_run( ep,
   8031c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   80320:	4a0f      	ldr	r2, [pc, #60]	; (80360 <udi_cdc_tx_send+0x134>)
   80322:	9200      	str	r2, [sp, #0]
   80324:	4a0f      	ldr	r2, [pc, #60]	; (80364 <udi_cdc_tx_send+0x138>)
   80326:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8032a:	4629      	mov	r1, r5
   8032c:	2085      	movs	r0, #133	; 0x85
   8032e:	4c0e      	ldr	r4, [pc, #56]	; (80368 <udi_cdc_tx_send+0x13c>)
   80330:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   80332:	b002      	add	sp, #8
   80334:	bd70      	pop	{r4, r5, r6, pc}
   80336:	bf00      	nop
   80338:	20001d88 	.word	0x20001d88
   8033c:	0008589d 	.word	0x0008589d
   80340:	20001d84 	.word	0x20001d84
   80344:	000858f5 	.word	0x000858f5
   80348:	20000b60 	.word	0x20000b60
   8034c:	20001d80 	.word	0x20001d80
   80350:	20001d7c 	.word	0x20001d7c
   80354:	20001554 	.word	0x20001554
   80358:	20001978 	.word	0x20001978
   8035c:	000858e5 	.word	0x000858e5
   80360:	0008036d 	.word	0x0008036d
   80364:	2000197c 	.word	0x2000197c
   80368:	00085b59 	.word	0x00085b59

0008036c <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   8036c:	b100      	cbz	r0, 80370 <udi_cdc_data_sent+0x4>
   8036e:	4770      	bx	lr
{
   80370:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80372:	4b07      	ldr	r3, [pc, #28]	; (80390 <udi_cdc_data_sent+0x24>)
   80374:	781b      	ldrb	r3, [r3, #0]
   80376:	fab3 f383 	clz	r3, r3
   8037a:	095b      	lsrs	r3, r3, #5
   8037c:	4a05      	ldr	r2, [pc, #20]	; (80394 <udi_cdc_data_sent+0x28>)
   8037e:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80382:	4b05      	ldr	r3, [pc, #20]	; (80398 <udi_cdc_data_sent+0x2c>)
   80384:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80386:	4b05      	ldr	r3, [pc, #20]	; (8039c <udi_cdc_data_sent+0x30>)
   80388:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8038a:	4b05      	ldr	r3, [pc, #20]	; (803a0 <udi_cdc_data_sent+0x34>)
   8038c:	4798      	blx	r3
   8038e:	bd08      	pop	{r3, pc}
   80390:	20001d80 	.word	0x20001d80
   80394:	20001d7c 	.word	0x20001d7c
   80398:	20001978 	.word	0x20001978
   8039c:	20001d88 	.word	0x20001d88
   803a0:	0008022d 	.word	0x0008022d

000803a4 <udi_cdc_data_sof_notify>:
{
   803a4:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   803a6:	2000      	movs	r0, #0
   803a8:	4b01      	ldr	r3, [pc, #4]	; (803b0 <udi_cdc_data_sof_notify+0xc>)
   803aa:	4798      	blx	r3
   803ac:	bd08      	pop	{r3, pc}
   803ae:	bf00      	nop
   803b0:	0008022d 	.word	0x0008022d

000803b4 <udi_cdc_data_disable>:
{
   803b4:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   803b6:	4a06      	ldr	r2, [pc, #24]	; (803d0 <udi_cdc_data_disable+0x1c>)
   803b8:	7813      	ldrb	r3, [r2, #0]
   803ba:	3b01      	subs	r3, #1
   803bc:	b2db      	uxtb	r3, r3
   803be:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   803c0:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   803c2:	4b04      	ldr	r3, [pc, #16]	; (803d4 <udi_cdc_data_disable+0x20>)
   803c4:	4798      	blx	r3
	udi_cdc_data_running = false;
   803c6:	2200      	movs	r2, #0
   803c8:	4b03      	ldr	r3, [pc, #12]	; (803d8 <udi_cdc_data_disable+0x24>)
   803ca:	701a      	strb	r2, [r3, #0]
   803cc:	bd08      	pop	{r3, pc}
   803ce:	bf00      	nop
   803d0:	20001560 	.word	0x20001560
   803d4:	00082921 	.word	0x00082921
   803d8:	20001556 	.word	0x20001556

000803dc <udi_cdc_line_coding_received>:
{
   803dc:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803de:	4902      	ldr	r1, [pc, #8]	; (803e8 <udi_cdc_line_coding_received+0xc>)
   803e0:	2000      	movs	r0, #0
   803e2:	4b02      	ldr	r3, [pc, #8]	; (803ec <udi_cdc_line_coding_received+0x10>)
   803e4:	4798      	blx	r3
   803e6:	bd08      	pop	{r3, pc}
   803e8:	20001558 	.word	0x20001558
   803ec:	000829b1 	.word	0x000829b1

000803f0 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   803f4:	b672      	cpsid	i
   803f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803fa:	2100      	movs	r1, #0
   803fc:	4a0a      	ldr	r2, [pc, #40]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   803fe:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80400:	4a0a      	ldr	r2, [pc, #40]	; (8042c <udi_cdc_multi_get_nb_received_data+0x3c>)
   80402:	8810      	ldrh	r0, [r2, #0]
   80404:	b282      	uxth	r2, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   80406:	490a      	ldr	r1, [pc, #40]	; (80430 <udi_cdc_multi_get_nb_received_data+0x40>)
   80408:	7809      	ldrb	r1, [r1, #0]
   8040a:	b2c9      	uxtb	r1, r1
   8040c:	4809      	ldr	r0, [pc, #36]	; (80434 <udi_cdc_multi_get_nb_received_data+0x44>)
   8040e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
   80412:	b280      	uxth	r0, r0
   80414:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
   80416:	b92b      	cbnz	r3, 80424 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   80418:	2201      	movs	r2, #1
   8041a:	4b03      	ldr	r3, [pc, #12]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   8041c:	701a      	strb	r2, [r3, #0]
   8041e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80422:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   80424:	4770      	bx	lr
   80426:	bf00      	nop
   80428:	20000b60 	.word	0x20000b60
   8042c:	2000196c 	.word	0x2000196c
   80430:	20001968 	.word	0x20001968
   80434:	20001964 	.word	0x20001964

00080438 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   80438:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8043a:	4b03      	ldr	r3, [pc, #12]	; (80448 <udi_cdc_multi_is_rx_ready+0x10>)
   8043c:	4798      	blx	r3
}
   8043e:	3000      	adds	r0, #0
   80440:	bf18      	it	ne
   80442:	2001      	movne	r0, #1
   80444:	bd08      	pop	{r3, pc}
   80446:	bf00      	nop
   80448:	000803f1 	.word	0x000803f1

0008044c <udi_cdc_rx_start>:
{
   8044c:	b510      	push	{r4, lr}
   8044e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80450:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   80454:	b672      	cpsid	i
   80456:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8045a:	2100      	movs	r1, #0
   8045c:	4a21      	ldr	r2, [pc, #132]	; (804e4 <udi_cdc_rx_start+0x98>)
   8045e:	7011      	strb	r1, [r2, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80460:	4a21      	ldr	r2, [pc, #132]	; (804e8 <udi_cdc_rx_start+0x9c>)
   80462:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80464:	4a21      	ldr	r2, [pc, #132]	; (804ec <udi_cdc_rx_start+0xa0>)
   80466:	7812      	ldrb	r2, [r2, #0]
   80468:	b94a      	cbnz	r2, 8047e <udi_cdc_rx_start+0x32>
   8046a:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8046c:	4a20      	ldr	r2, [pc, #128]	; (804f0 <udi_cdc_rx_start+0xa4>)
   8046e:	8811      	ldrh	r1, [r2, #0]
   80470:	b289      	uxth	r1, r1
   80472:	4a20      	ldr	r2, [pc, #128]	; (804f4 <udi_cdc_rx_start+0xa8>)
   80474:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   80478:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   8047a:	4291      	cmp	r1, r2
   8047c:	d20a      	bcs.n	80494 <udi_cdc_rx_start+0x48>
	if (cpu_irq_is_enabled_flags(flags))
   8047e:	2b00      	cmp	r3, #0
   80480:	d12d      	bne.n	804de <udi_cdc_rx_start+0x92>
		cpu_irq_enable();
   80482:	2201      	movs	r2, #1
   80484:	4b17      	ldr	r3, [pc, #92]	; (804e4 <udi_cdc_rx_start+0x98>)
   80486:	701a      	strb	r2, [r3, #0]
   80488:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8048c:	b662      	cpsie	i
		return false;
   8048e:	2000      	movs	r0, #0
}
   80490:	b002      	add	sp, #8
   80492:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
   80494:	2100      	movs	r1, #0
   80496:	4a16      	ldr	r2, [pc, #88]	; (804f0 <udi_cdc_rx_start+0xa4>)
   80498:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8049a:	fab4 f284 	clz	r2, r4
   8049e:	0952      	lsrs	r2, r2, #5
   804a0:	4911      	ldr	r1, [pc, #68]	; (804e8 <udi_cdc_rx_start+0x9c>)
   804a2:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   804a4:	2101      	movs	r1, #1
   804a6:	4a11      	ldr	r2, [pc, #68]	; (804ec <udi_cdc_rx_start+0xa0>)
   804a8:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   804aa:	b923      	cbnz	r3, 804b6 <udi_cdc_rx_start+0x6a>
		cpu_irq_enable();
   804ac:	4b0d      	ldr	r3, [pc, #52]	; (804e4 <udi_cdc_rx_start+0x98>)
   804ae:	7019      	strb	r1, [r3, #0]
   804b0:	f3bf 8f5f 	dmb	sy
   804b4:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   804b6:	2000      	movs	r0, #0
   804b8:	4b0f      	ldr	r3, [pc, #60]	; (804f8 <udi_cdc_rx_start+0xac>)
   804ba:	4798      	blx	r3
   804bc:	b958      	cbnz	r0, 804d6 <udi_cdc_rx_start+0x8a>
	return udd_ep_run(ep,
   804be:	4b0f      	ldr	r3, [pc, #60]	; (804fc <udi_cdc_rx_start+0xb0>)
   804c0:	9300      	str	r3, [sp, #0]
   804c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   804c6:	4a0e      	ldr	r2, [pc, #56]	; (80500 <udi_cdc_rx_start+0xb4>)
   804c8:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   804cc:	2101      	movs	r1, #1
   804ce:	2006      	movs	r0, #6
   804d0:	4c0c      	ldr	r4, [pc, #48]	; (80504 <udi_cdc_rx_start+0xb8>)
   804d2:	47a0      	blx	r4
   804d4:	e7dc      	b.n	80490 <udi_cdc_rx_start+0x44>
		UDI_CDC_RX_NOTIFY(port);
   804d6:	2000      	movs	r0, #0
   804d8:	4b0b      	ldr	r3, [pc, #44]	; (80508 <udi_cdc_rx_start+0xbc>)
   804da:	4798      	blx	r3
   804dc:	e7ef      	b.n	804be <udi_cdc_rx_start+0x72>
		return false;
   804de:	2000      	movs	r0, #0
   804e0:	e7d6      	b.n	80490 <udi_cdc_rx_start+0x44>
   804e2:	bf00      	nop
   804e4:	20000b60 	.word	0x20000b60
   804e8:	20001968 	.word	0x20001968
   804ec:	20001970 	.word	0x20001970
   804f0:	2000196c 	.word	0x2000196c
   804f4:	20001964 	.word	0x20001964
   804f8:	00080439 	.word	0x00080439
   804fc:	000805a1 	.word	0x000805a1
   80500:	20001564 	.word	0x20001564
   80504:	00085b59 	.word	0x00085b59
   80508:	00082939 	.word	0x00082939

0008050c <udi_cdc_data_enable>:
{
   8050c:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   8050e:	2400      	movs	r4, #0
   80510:	4b16      	ldr	r3, [pc, #88]	; (8056c <udi_cdc_data_enable+0x60>)
   80512:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80514:	4b16      	ldr	r3, [pc, #88]	; (80570 <udi_cdc_data_enable+0x64>)
   80516:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80518:	4b16      	ldr	r3, [pc, #88]	; (80574 <udi_cdc_data_enable+0x68>)
   8051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   8051c:	4b16      	ldr	r3, [pc, #88]	; (80578 <udi_cdc_data_enable+0x6c>)
   8051e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80520:	4b16      	ldr	r3, [pc, #88]	; (8057c <udi_cdc_data_enable+0x70>)
   80522:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   80524:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   80526:	4b16      	ldr	r3, [pc, #88]	; (80580 <udi_cdc_data_enable+0x74>)
   80528:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   8052a:	4620      	mov	r0, r4
   8052c:	4b15      	ldr	r3, [pc, #84]	; (80584 <udi_cdc_data_enable+0x78>)
   8052e:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80530:	4b15      	ldr	r3, [pc, #84]	; (80588 <udi_cdc_data_enable+0x7c>)
   80532:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80534:	4b15      	ldr	r3, [pc, #84]	; (8058c <udi_cdc_data_enable+0x80>)
   80536:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80538:	4b15      	ldr	r3, [pc, #84]	; (80590 <udi_cdc_data_enable+0x84>)
   8053a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8053c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8053e:	4b15      	ldr	r3, [pc, #84]	; (80594 <udi_cdc_data_enable+0x88>)
   80540:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80542:	4620      	mov	r0, r4
   80544:	4b14      	ldr	r3, [pc, #80]	; (80598 <udi_cdc_data_enable+0x8c>)
   80546:	4798      	blx	r3
   80548:	4601      	mov	r1, r0
   8054a:	b140      	cbz	r0, 8055e <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
   8054c:	4a07      	ldr	r2, [pc, #28]	; (8056c <udi_cdc_data_enable+0x60>)
   8054e:	7813      	ldrb	r3, [r2, #0]
   80550:	3301      	adds	r3, #1
   80552:	b2db      	uxtb	r3, r3
   80554:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80556:	7813      	ldrb	r3, [r2, #0]
   80558:	b2db      	uxtb	r3, r3
   8055a:	2b01      	cmp	r3, #1
   8055c:	d001      	beq.n	80562 <udi_cdc_data_enable+0x56>
}
   8055e:	4608      	mov	r0, r1
   80560:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   80562:	2201      	movs	r2, #1
   80564:	4b0d      	ldr	r3, [pc, #52]	; (8059c <udi_cdc_data_enable+0x90>)
   80566:	701a      	strb	r2, [r3, #0]
   80568:	e7f9      	b.n	8055e <udi_cdc_data_enable+0x52>
   8056a:	bf00      	nop
   8056c:	20001560 	.word	0x20001560
   80570:	20001d88 	.word	0x20001d88
   80574:	20001978 	.word	0x20001978
   80578:	20001d80 	.word	0x20001d80
   8057c:	20001d7c 	.word	0x20001d7c
   80580:	20001d84 	.word	0x20001d84
   80584:	0008022d 	.word	0x0008022d
   80588:	20001970 	.word	0x20001970
   8058c:	20001968 	.word	0x20001968
   80590:	20001964 	.word	0x20001964
   80594:	2000196c 	.word	0x2000196c
   80598:	0008044d 	.word	0x0008044d
   8059c:	20001556 	.word	0x20001556

000805a0 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   805a0:	b9f0      	cbnz	r0, 805e0 <udi_cdc_data_received+0x40>
{
   805a2:	b510      	push	{r4, lr}
   805a4:	b082      	sub	sp, #8
   805a6:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   805a8:	4b0e      	ldr	r3, [pc, #56]	; (805e4 <udi_cdc_data_received+0x44>)
   805aa:	781c      	ldrb	r4, [r3, #0]
   805ac:	fab4 f484 	clz	r4, r4
   805b0:	0964      	lsrs	r4, r4, #5
	if (!n) {
   805b2:	b151      	cbz	r1, 805ca <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   805b4:	b289      	uxth	r1, r1
   805b6:	4b0c      	ldr	r3, [pc, #48]	; (805e8 <udi_cdc_data_received+0x48>)
   805b8:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   805bc:	2000      	movs	r0, #0
   805be:	4b0b      	ldr	r3, [pc, #44]	; (805ec <udi_cdc_data_received+0x4c>)
   805c0:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   805c2:	4b0b      	ldr	r3, [pc, #44]	; (805f0 <udi_cdc_data_received+0x50>)
   805c4:	4798      	blx	r3
}
   805c6:	b002      	add	sp, #8
   805c8:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
   805ca:	4b0a      	ldr	r3, [pc, #40]	; (805f4 <udi_cdc_data_received+0x54>)
   805cc:	9300      	str	r3, [sp, #0]
   805ce:	f44f 7300 	mov.w	r3, #512	; 0x200
   805d2:	4a09      	ldr	r2, [pc, #36]	; (805f8 <udi_cdc_data_received+0x58>)
   805d4:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805d8:	2101      	movs	r1, #1
   805da:	4c08      	ldr	r4, [pc, #32]	; (805fc <udi_cdc_data_received+0x5c>)
   805dc:	47a0      	blx	r4
		return;
   805de:	e7f2      	b.n	805c6 <udi_cdc_data_received+0x26>
   805e0:	4770      	bx	lr
   805e2:	bf00      	nop
   805e4:	20001968 	.word	0x20001968
   805e8:	20001964 	.word	0x20001964
   805ec:	20001970 	.word	0x20001970
   805f0:	0008044d 	.word	0x0008044d
   805f4:	000805a1 	.word	0x000805a1
   805f8:	20001564 	.word	0x20001564
   805fc:	00085b59 	.word	0x00085b59

00080600 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   80600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80604:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   80606:	4688      	mov	r8, r1
	cpu_irq_disable();
   80608:	4f20      	ldr	r7, [pc, #128]	; (8068c <udi_cdc_multi_read_buf+0x8c>)
   8060a:	f04f 0b00 	mov.w	fp, #0
   8060e:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80610:	4e1f      	ldr	r6, [pc, #124]	; (80690 <udi_cdc_multi_read_buf+0x90>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   80612:	f8df 9094 	ldr.w	r9, [pc, #148]	; 806a8 <udi_cdc_multi_read_buf+0xa8>
   80616:	e019      	b.n	8064c <udi_cdc_multi_read_buf+0x4c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80618:	4a1e      	ldr	r2, [pc, #120]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   8061a:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   8061e:	b2a4      	uxth	r4, r4
   80620:	1a64      	subs	r4, r4, r1
   80622:	42ac      	cmp	r4, r5
   80624:	bf28      	it	cs
   80626:	462c      	movcs	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80628:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   8062c:	4622      	mov	r2, r4
   8062e:	4b1a      	ldr	r3, [pc, #104]	; (80698 <udi_cdc_multi_read_buf+0x98>)
   80630:	4419      	add	r1, r3
   80632:	4640      	mov	r0, r8
   80634:	4b19      	ldr	r3, [pc, #100]	; (8069c <udi_cdc_multi_read_buf+0x9c>)
   80636:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80638:	8833      	ldrh	r3, [r6, #0]
   8063a:	4423      	add	r3, r4
   8063c:	b29b      	uxth	r3, r3
   8063e:	8033      	strh	r3, [r6, #0]
	ptr_buf += copy_nb;
   80640:	44a0      	add	r8, r4
	size -= copy_nb;
   80642:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   80644:	4658      	mov	r0, fp
   80646:	4b16      	ldr	r3, [pc, #88]	; (806a0 <udi_cdc_multi_read_buf+0xa0>)
   80648:	4798      	blx	r3

	if (size) {
   8064a:	b1dd      	cbz	r5, 80684 <udi_cdc_multi_read_buf+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8064c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80650:	b672      	cpsid	i
   80652:	f3bf 8f5f 	dmb	sy
   80656:	f887 a000 	strb.w	sl, [r7]
	pos = udi_cdc_rx_pos[port];
   8065a:	8831      	ldrh	r1, [r6, #0]
   8065c:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8065e:	f899 3000 	ldrb.w	r3, [r9]
   80662:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80664:	4a0b      	ldr	r2, [pc, #44]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   80666:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   8066a:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8066c:	b920      	cbnz	r0, 80678 <udi_cdc_multi_read_buf+0x78>
		cpu_irq_enable();
   8066e:	2001      	movs	r0, #1
   80670:	7038      	strb	r0, [r7, #0]
   80672:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80676:	b662      	cpsie	i
	while (again) {
   80678:	4291      	cmp	r1, r2
   8067a:	d3cd      	bcc.n	80618 <udi_cdc_multi_read_buf+0x18>
		if (!udi_cdc_data_running) {
   8067c:	4b09      	ldr	r3, [pc, #36]	; (806a4 <udi_cdc_multi_read_buf+0xa4>)
   8067e:	781b      	ldrb	r3, [r3, #0]
   80680:	2b00      	cmp	r3, #0
   80682:	d1e3      	bne.n	8064c <udi_cdc_multi_read_buf+0x4c>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80684:	4628      	mov	r0, r5
   80686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8068a:	bf00      	nop
   8068c:	20000b60 	.word	0x20000b60
   80690:	2000196c 	.word	0x2000196c
   80694:	20001964 	.word	0x20001964
   80698:	20001564 	.word	0x20001564
   8069c:	00086ae1 	.word	0x00086ae1
   806a0:	0008044d 	.word	0x0008044d
   806a4:	20001556 	.word	0x20001556
   806a8:	20001968 	.word	0x20001968

000806ac <udi_cdc_multi_get_free_tx_buffer>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   806ac:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   806b0:	b672      	cpsid	i
   806b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   806b6:	2100      	movs	r1, #0
   806b8:	4b13      	ldr	r3, [pc, #76]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806ba:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   806bc:	4b13      	ldr	r3, [pc, #76]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806be:	781b      	ldrb	r3, [r3, #0]
   806c0:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   806c2:	4913      	ldr	r1, [pc, #76]	; (80710 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806c4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   806c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   806cc:	d009      	beq.n	806e2 <udi_cdc_multi_get_free_tx_buffer+0x36>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   806ce:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806d2:	b92a      	cbnz	r2, 806e0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806d4:	2201      	movs	r2, #1
   806d6:	4b0c      	ldr	r3, [pc, #48]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806d8:	701a      	strb	r2, [r3, #0]
   806da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806de:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806e0:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   806e2:	490c      	ldr	r1, [pc, #48]	; (80714 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   806e4:	7809      	ldrb	r1, [r1, #0]
   806e6:	2900      	cmp	r1, #0
   806e8:	d1f1      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806ea:	490b      	ldr	r1, [pc, #44]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806ec:	7809      	ldrb	r1, [r1, #0]
   806ee:	2900      	cmp	r1, #0
   806f0:	d1ed      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806f2:	2001      	movs	r0, #1
   806f4:	4908      	ldr	r1, [pc, #32]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806f6:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806f8:	fab3 f383 	clz	r3, r3
   806fc:	095b      	lsrs	r3, r3, #5
   806fe:	4903      	ldr	r1, [pc, #12]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   80700:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
   80702:	2000      	movs	r0, #0
   80704:	e7e3      	b.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
   80706:	bf00      	nop
   80708:	20000b60 	.word	0x20000b60
   8070c:	20001d80 	.word	0x20001d80
   80710:	20001d7c 	.word	0x20001d7c
   80714:	20001d88 	.word	0x20001d88
   80718:	20001978 	.word	0x20001978

0008071c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   8071c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   8071e:	4b03      	ldr	r3, [pc, #12]	; (8072c <udi_cdc_multi_is_tx_ready+0x10>)
   80720:	4798      	blx	r3
}
   80722:	3000      	adds	r0, #0
   80724:	bf18      	it	ne
   80726:	2001      	movne	r0, #1
   80728:	bd08      	pop	{r3, pc}
   8072a:	bf00      	nop
   8072c:	000806ad 	.word	0x000806ad

00080730 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80734:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   80736:	4b1b      	ldr	r3, [pc, #108]	; (807a4 <udi_cdc_multi_putc+0x74>)
   80738:	799d      	ldrb	r5, [r3, #6]
   8073a:	2d09      	cmp	r5, #9
   8073c:	bf14      	ite	ne
   8073e:	2500      	movne	r5, #0
   80740:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80742:	4e19      	ldr	r6, [pc, #100]	; (807a8 <udi_cdc_multi_putc+0x78>)
	cpu_irq_disable();
   80744:	4f19      	ldr	r7, [pc, #100]	; (807ac <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80746:	f8df 8074 	ldr.w	r8, [pc, #116]	; 807bc <udi_cdc_multi_putc+0x8c>
   8074a:	e01d      	b.n	80788 <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8074c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80750:	b672      	cpsid	i
   80752:	f3bf 8f5f 	dmb	sy
   80756:	2300      	movs	r3, #0
   80758:	703b      	strb	r3, [r7, #0]
   8075a:	f898 3000 	ldrb.w	r3, [r8]
   8075e:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80760:	4913      	ldr	r1, [pc, #76]	; (807b0 <udi_cdc_multi_putc+0x80>)
   80762:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
   80766:	f100 0e01 	add.w	lr, r0, #1
   8076a:	f821 e013 	strh.w	lr, [r1, r3, lsl #1]
   8076e:	4911      	ldr	r1, [pc, #68]	; (807b4 <udi_cdc_multi_putc+0x84>)
   80770:	eb01 2343 	add.w	r3, r1, r3, lsl #9
   80774:	541c      	strb	r4, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
   80776:	b922      	cbnz	r2, 80782 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   80778:	2301      	movs	r3, #1
   8077a:	703b      	strb	r3, [r7, #0]
   8077c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80780:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80782:	b15d      	cbz	r5, 8079c <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80784:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   80786:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80788:	2000      	movs	r0, #0
   8078a:	47b0      	blx	r6
   8078c:	2800      	cmp	r0, #0
   8078e:	d1dd      	bne.n	8074c <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80790:	4b09      	ldr	r3, [pc, #36]	; (807b8 <udi_cdc_multi_putc+0x88>)
   80792:	781b      	ldrb	r3, [r3, #0]
   80794:	2b00      	cmp	r3, #0
   80796:	d1f7      	bne.n	80788 <udi_cdc_multi_putc+0x58>
   80798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
   8079c:	2001      	movs	r0, #1
}
   8079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807a2:	bf00      	nop
   807a4:	20001558 	.word	0x20001558
   807a8:	0008071d 	.word	0x0008071d
   807ac:	20000b60 	.word	0x20000b60
   807b0:	20001d7c 	.word	0x20001d7c
   807b4:	2000197c 	.word	0x2000197c
   807b8:	20001556 	.word	0x20001556
   807bc:	20001d80 	.word	0x20001d80

000807c0 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   807c0:	2300      	movs	r3, #0
   807c2:	6043      	str	r3, [r0, #4]
   807c4:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   807c6:	6083      	str	r3, [r0, #8]
   807c8:	4770      	bx	lr

000807ca <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   807ca:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   807cc:	6804      	ldr	r4, [r0, #0]
    newhead++;
   807ce:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   807d0:	2cc8      	cmp	r4, #200	; 0xc8
   807d2:	bf28      	it	cs
   807d4:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   807d6:	6843      	ldr	r3, [r0, #4]
   807d8:	42a3      	cmp	r3, r4
   807da:	d105      	bne.n	807e8 <add_to_circ_buf+0x1e>
    {
        if (!block)
   807dc:	2a00      	cmp	r2, #0
   807de:	d1fa      	bne.n	807d6 <add_to_circ_buf+0xc>
        {
            cbuf->dropped++;
   807e0:	6883      	ldr	r3, [r0, #8]
   807e2:	3301      	adds	r3, #1
   807e4:	6083      	str	r3, [r0, #8]
            return;
   807e6:	e003      	b.n	807f0 <add_to_circ_buf+0x26>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   807e8:	6803      	ldr	r3, [r0, #0]
   807ea:	4403      	add	r3, r0
   807ec:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   807ee:	6004      	str	r4, [r0, #0]
}
   807f0:	bc10      	pop	{r4}
   807f2:	4770      	bx	lr

000807f4 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   807f4:	4602      	mov	r2, r0
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   807f6:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
   807f8:	6801      	ldr	r1, [r0, #0]
   807fa:	428b      	cmp	r3, r1
   807fc:	d007      	beq.n	8080e <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   807fe:	1c59      	adds	r1, r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   80800:	29c8      	cmp	r1, #200	; 0xc8
   80802:	bf28      	it	cs
   80804:	2100      	movcs	r1, #0
    uint8_t retval = cbuf->buf[newtail];
   80806:	4403      	add	r3, r0
   80808:	7b18      	ldrb	r0, [r3, #12]
    cbuf->tail = newtail;
   8080a:	6051      	str	r1, [r2, #4]

    return retval;
   8080c:	4770      	bx	lr
        return SERIAL_ERR;
   8080e:	20ff      	movs	r0, #255	; 0xff
}
   80810:	4770      	bx	lr

00080812 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   80812:	6802      	ldr	r2, [r0, #0]
    return (head != cbuf->tail);
   80814:	6840      	ldr	r0, [r0, #4]
}
   80816:	1a10      	subs	r0, r2, r0
   80818:	bf18      	it	ne
   8081a:	2001      	movne	r0, #1
   8081c:	4770      	bx	lr

0008081e <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   8081e:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   80820:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   80822:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   80824:	bf48      	it	mi
   80826:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   80828:	4770      	bx	lr
	...

0008082c <fpga_program_spi_setup1>:
#include <asf.h>
#include "fpga_program.h"
#include "spi.h"

void fpga_program_spi_setup1(uint32_t prog_freq)
{
   8082c:	b538      	push	{r3, r4, r5, lr}
   8082e:	4605      	mov	r5, r0
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
	#else
	spi_enable_clock(SPI);
   80830:	4c18      	ldr	r4, [pc, #96]	; (80894 <fpga_program_spi_setup1+0x68>)
   80832:	4620      	mov	r0, r4
   80834:	4b18      	ldr	r3, [pc, #96]	; (80898 <fpga_program_spi_setup1+0x6c>)
   80836:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   80838:	2380      	movs	r3, #128	; 0x80
   8083a:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8083c:	6863      	ldr	r3, [r4, #4]
   8083e:	f043 0301 	orr.w	r3, r3, #1
   80842:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80844:	6863      	ldr	r3, [r4, #4]
   80846:	f043 0310 	orr.w	r3, r3, #16
   8084a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8084c:	6863      	ldr	r3, [r4, #4]
   8084e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80852:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80854:	2200      	movs	r2, #0
   80856:	4611      	mov	r1, r2
   80858:	4620      	mov	r0, r4
   8085a:	4b10      	ldr	r3, [pc, #64]	; (8089c <fpga_program_spi_setup1+0x70>)
   8085c:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   8085e:	2201      	movs	r2, #1
   80860:	2100      	movs	r1, #0
   80862:	4620      	mov	r0, r4
   80864:	4b0e      	ldr	r3, [pc, #56]	; (808a0 <fpga_program_spi_setup1+0x74>)
   80866:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   80868:	490e      	ldr	r1, [pc, #56]	; (808a4 <fpga_program_spi_setup1+0x78>)
   8086a:	4628      	mov	r0, r5
   8086c:	4b0e      	ldr	r3, [pc, #56]	; (808a8 <fpga_program_spi_setup1+0x7c>)
   8086e:	4798      	blx	r3
   80870:	b2c2      	uxtb	r2, r0
   80872:	2100      	movs	r1, #0
   80874:	4620      	mov	r0, r4
   80876:	4b0d      	ldr	r3, [pc, #52]	; (808ac <fpga_program_spi_setup1+0x80>)
   80878:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8087a:	2301      	movs	r3, #1
   8087c:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   8087e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80882:	200e      	movs	r0, #14
   80884:	4c0a      	ldr	r4, [pc, #40]	; (808b0 <fpga_program_spi_setup1+0x84>)
   80886:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80888:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8088c:	200f      	movs	r0, #15
   8088e:	47a0      	blx	r4
   80890:	bd38      	pop	{r3, r4, r5, pc}
   80892:	bf00      	nop
   80894:	40008000 	.word	0x40008000
   80898:	00084b09 	.word	0x00084b09
   8089c:	00084b8b 	.word	0x00084b8b
   808a0:	00084ba9 	.word	0x00084ba9
   808a4:	05b8d800 	.word	0x05b8d800
   808a8:	00084bc7 	.word	0x00084bc7
   808ac:	00084bdd 	.word	0x00084bdd
   808b0:	00084725 	.word	0x00084725

000808b4 <fpga_program_spi_sendbyte>:
	#endif

}

void fpga_program_spi_sendbyte(uint8_t databyte)
{
   808b4:	b510      	push	{r4, lr}
	#if AVRISP_USEUART
	usart_putchar(AVRISP_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   808b6:	2300      	movs	r3, #0
   808b8:	461a      	mov	r2, r3
   808ba:	4601      	mov	r1, r0
   808bc:	4801      	ldr	r0, [pc, #4]	; (808c4 <fpga_program_spi_sendbyte+0x10>)
   808be:	4c02      	ldr	r4, [pc, #8]	; (808c8 <fpga_program_spi_sendbyte+0x14>)
   808c0:	47a0      	blx	r4
   808c2:	bd10      	pop	{r4, pc}
   808c4:	40008000 	.word	0x40008000
   808c8:	00084b57 	.word	0x00084b57

000808cc <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   808cc:	b538      	push	{r3, r4, r5, lr}
   808ce:	4605      	mov	r5, r0
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   808d0:	2008      	movs	r0, #8
   808d2:	4b19      	ldr	r3, [pc, #100]	; (80938 <fpga_program_setup1+0x6c>)
   808d4:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   808d6:	4c19      	ldr	r4, [pc, #100]	; (8093c <fpga_program_setup1+0x70>)
   808d8:	4620      	mov	r0, r4
   808da:	4b19      	ldr	r3, [pc, #100]	; (80940 <fpga_program_setup1+0x74>)
   808dc:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   808de:	2380      	movs	r3, #128	; 0x80
   808e0:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   808e2:	6863      	ldr	r3, [r4, #4]
   808e4:	f043 0301 	orr.w	r3, r3, #1
   808e8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   808ea:	6863      	ldr	r3, [r4, #4]
   808ec:	f043 0310 	orr.w	r3, r3, #16
   808f0:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   808f2:	6863      	ldr	r3, [r4, #4]
   808f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   808f8:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   808fa:	2200      	movs	r2, #0
   808fc:	4611      	mov	r1, r2
   808fe:	4620      	mov	r0, r4
   80900:	4b10      	ldr	r3, [pc, #64]	; (80944 <fpga_program_setup1+0x78>)
   80902:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80904:	2201      	movs	r2, #1
   80906:	2100      	movs	r1, #0
   80908:	4620      	mov	r0, r4
   8090a:	4b0f      	ldr	r3, [pc, #60]	; (80948 <fpga_program_setup1+0x7c>)
   8090c:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   8090e:	490f      	ldr	r1, [pc, #60]	; (8094c <fpga_program_setup1+0x80>)
   80910:	4628      	mov	r0, r5
   80912:	4b0f      	ldr	r3, [pc, #60]	; (80950 <fpga_program_setup1+0x84>)
   80914:	4798      	blx	r3
   80916:	b2c2      	uxtb	r2, r0
   80918:	2100      	movs	r1, #0
   8091a:	4620      	mov	r0, r4
   8091c:	4b0d      	ldr	r3, [pc, #52]	; (80954 <fpga_program_setup1+0x88>)
   8091e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80920:	2301      	movs	r3, #1
   80922:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80924:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80928:	200e      	movs	r0, #14
   8092a:	4c0b      	ldr	r4, [pc, #44]	; (80958 <fpga_program_setup1+0x8c>)
   8092c:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8092e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80932:	200f      	movs	r0, #15
   80934:	47a0      	blx	r4
   80936:	bd38      	pop	{r3, r4, r5, pc}
   80938:	000846e9 	.word	0x000846e9
   8093c:	40008000 	.word	0x40008000
   80940:	00084b09 	.word	0x00084b09
   80944:	00084b8b 	.word	0x00084b8b
   80948:	00084ba9 	.word	0x00084ba9
   8094c:	05b8d800 	.word	0x05b8d800
   80950:	00084bc7 	.word	0x00084bc7
   80954:	00084bdd 	.word	0x00084bdd
   80958:	00084725 	.word	0x00084725

0008095c <fpga_program_setup2>:
#endif
}

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   8095c:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   8095e:	2008      	movs	r0, #8
   80960:	4b01      	ldr	r3, [pc, #4]	; (80968 <fpga_program_setup2+0xc>)
   80962:	4798      	blx	r3
   80964:	bd08      	pop	{r3, pc}
   80966:	bf00      	nop
   80968:	000846cf 	.word	0x000846cf

0008096c <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   8096c:	b510      	push	{r4, lr}
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   8096e:	2300      	movs	r3, #0
   80970:	461a      	mov	r2, r3
   80972:	4601      	mov	r1, r0
   80974:	4801      	ldr	r0, [pc, #4]	; (8097c <fpga_program_sendbyte+0x10>)
   80976:	4c02      	ldr	r4, [pc, #8]	; (80980 <fpga_program_sendbyte+0x14>)
   80978:	47a0      	blx	r4
   8097a:	bd10      	pop	{r4, pc}
   8097c:	40008000 	.word	0x40008000
   80980:	00084b57 	.word	0x00084b57

00080984 <ISPProtocol_ProgramMemory>:
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   80984:	4b91      	ldr	r3, [pc, #580]	; (80bcc <ISPProtocol_ProgramMemory+0x248>)
   80986:	899b      	ldrh	r3, [r3, #12]
   80988:	2b09      	cmp	r3, #9
   8098a:	d000      	beq.n	8098e <ISPProtocol_ProgramMemory+0xa>
   8098c:	4770      	bx	lr
{
   8098e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80992:	b08d      	sub	sp, #52	; 0x34
   80994:	4602      	mov	r2, r0
   80996:	460c      	mov	r4, r1
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   80998:	4b8c      	ldr	r3, [pc, #560]	; (80bcc <ISPProtocol_ProgramMemory+0x248>)
   8099a:	689d      	ldr	r5, [r3, #8]
   8099c:	ab09      	add	r3, sp, #36	; 0x24
   8099e:	6828      	ldr	r0, [r5, #0]
   809a0:	6869      	ldr	r1, [r5, #4]
   809a2:	c303      	stmia	r3!, {r0, r1}
   809a4:	8929      	ldrh	r1, [r5, #8]
   809a6:	8019      	strh	r1, [r3, #0]

	if (Write_Memory_Params.BytesToWrite > 256)
   809a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   809ac:	9303      	str	r3, [sp, #12]
   809ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   809b2:	d909      	bls.n	809c8 <ISPProtocol_ProgramMemory+0x44>
	{
		avrisp_status_payload[0] = V2Command;
   809b4:	4b86      	ldr	r3, [pc, #536]	; (80bd0 <ISPProtocol_ProgramMemory+0x24c>)
   809b6:	701a      	strb	r2, [r3, #0]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   809b8:	22c0      	movs	r2, #192	; 0xc0
   809ba:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   809bc:	2202      	movs	r2, #2
   809be:	4b85      	ldr	r3, [pc, #532]	; (80bd4 <ISPProtocol_ProgramMemory+0x250>)
   809c0:	801a      	strh	r2, [r3, #0]
	////printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   809c2:	b00d      	add	sp, #52	; 0x34
   809c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   809c8:	2a13      	cmp	r2, #19
   809ca:	bf0c      	ite	eq
   809cc:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   809d0:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   809d4:	9304      	str	r3, [sp, #16]
   809d6:	9405      	str	r4, [sp, #20]
   809d8:	4615      	mov	r5, r2
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   809da:	4b7f      	ldr	r3, [pc, #508]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   809dc:	681b      	ldr	r3, [r3, #0]
   809de:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   809e0:	9b03      	ldr	r3, [sp, #12]
   809e2:	2b00      	cmp	r3, #0
   809e4:	d03e      	beq.n	80a64 <ISPProtocol_ProgramMemory+0xe0>
   809e6:	3b01      	subs	r3, #1
   809e8:	b29b      	uxth	r3, r3
   809ea:	3301      	adds	r3, #1
   809ec:	18e3      	adds	r3, r4, r3
   809ee:	9306      	str	r3, [sp, #24]
   809f0:	4627      	mov	r7, r4
   809f2:	2300      	movs	r3, #0
   809f4:	9303      	str	r3, [sp, #12]
			MustLoadExtendedAddress = false;
   809f6:	46ab      	mov	fp, r5
   809f8:	e092      	b.n	80b20 <ISPProtocol_ProgramMemory+0x19c>
			ISPTarget_LoadExtendedAddress();
   809fa:	4b78      	ldr	r3, [pc, #480]	; (80bdc <ISPProtocol_ProgramMemory+0x258>)
   809fc:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   809fe:	4b78      	ldr	r3, [pc, #480]	; (80be0 <ISPProtocol_ProgramMemory+0x25c>)
   80a00:	f04f 0200 	mov.w	r2, #0
   80a04:	701a      	strb	r2, [r3, #0]
   80a06:	e099      	b.n	80b3c <ISPProtocol_ProgramMemory+0x1b8>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   80a08:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80a0c:	f043 0308 	orr.w	r3, r3, #8
   80a10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80a14:	4b70      	ldr	r3, [pc, #448]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80a16:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80a18:	f019 0f01 	tst.w	r9, #1
   80a1c:	f000 80c6 	beq.w	80bac <ISPProtocol_ProgramMemory+0x228>
			PollAddress = (CurrentAddress & 0xFFFF);
   80a20:	9303      	str	r3, [sp, #12]
			CurrentAddress++;
   80a22:	4a6d      	ldr	r2, [pc, #436]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80a24:	6813      	ldr	r3, [r2, #0]
   80a26:	3301      	adds	r3, #1
   80a28:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80a2a:	f1bb 0f13 	cmp.w	fp, #19
   80a2e:	d174      	bne.n	80b1a <ISPProtocol_ProgramMemory+0x196>
   80a30:	b29b      	uxth	r3, r3
   80a32:	2b00      	cmp	r3, #0
   80a34:	d171      	bne.n	80b1a <ISPProtocol_ProgramMemory+0x196>
			  MustLoadExtendedAddress = true;
   80a36:	2301      	movs	r3, #1
   80a38:	4a69      	ldr	r2, [pc, #420]	; (80be0 <ISPProtocol_ProgramMemory+0x25c>)
   80a3a:	7013      	strb	r3, [r2, #0]
   80a3c:	e06d      	b.n	80b1a <ISPProtocol_ProgramMemory+0x196>
   80a3e:	9303      	str	r3, [sp, #12]
   80a40:	e056      	b.n	80af0 <ISPProtocol_ProgramMemory+0x16c>
			PollAddress = (CurrentAddress & 0xFFFF);
   80a42:	9303      	str	r3, [sp, #12]
   80a44:	e063      	b.n	80b0e <ISPProtocol_ProgramMemory+0x18a>
   80a46:	465d      	mov	r5, fp
   80a48:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   80a4a:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
   80a4e:	fa4f f488 	sxtb.w	r4, r8
   80a52:	2c00      	cmp	r4, #0
   80a54:	db0a      	blt.n	80a6c <ISPProtocol_ProgramMemory+0xe8>
	avrisp_status_payload[0] = V2Command;
   80a56:	4a5e      	ldr	r2, [pc, #376]	; (80bd0 <ISPProtocol_ProgramMemory+0x24c>)
   80a58:	7015      	strb	r5, [r2, #0]
	avrisp_status_payload[1] = ProgrammingStatus;
   80a5a:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80a5c:	2202      	movs	r2, #2
   80a5e:	4b5d      	ldr	r3, [pc, #372]	; (80bd4 <ISPProtocol_ProgramMemory+0x250>)
   80a60:	801a      	strh	r2, [r3, #0]
   80a62:	e7ae      	b.n	809c2 <ISPProtocol_ProgramMemory+0x3e>
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   80a64:	2300      	movs	r3, #0
   80a66:	e7f0      	b.n	80a4a <ISPProtocol_ProgramMemory+0xc6>
   80a68:	465d      	mov	r5, fp
   80a6a:	e7ee      	b.n	80a4a <ISPProtocol_ProgramMemory+0xc6>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   80a6c:	4f5d      	ldr	r7, [pc, #372]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80a6e:	2300      	movs	r3, #0
   80a70:	461a      	mov	r2, r3
   80a72:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   80a76:	4638      	mov	r0, r7
   80a78:	4e5b      	ldr	r6, [pc, #364]	; (80be8 <ISPProtocol_ProgramMemory+0x264>)
   80a7a:	47b0      	blx	r6
   80a7c:	2300      	movs	r3, #0
   80a7e:	461a      	mov	r2, r3
   80a80:	9907      	ldr	r1, [sp, #28]
   80a82:	f3c1 2107 	ubfx	r1, r1, #8, #8
   80a86:	4638      	mov	r0, r7
   80a88:	47b0      	blx	r6
   80a8a:	2300      	movs	r3, #0
   80a8c:	461a      	mov	r2, r3
   80a8e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   80a92:	4638      	mov	r0, r7
   80a94:	47b0      	blx	r6
   80a96:	2300      	movs	r3, #0
   80a98:	461a      	mov	r2, r3
   80a9a:	4619      	mov	r1, r3
   80a9c:	4638      	mov	r0, r7
   80a9e:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   80aa0:	f018 0f20 	tst.w	r8, #32
   80aa4:	d007      	beq.n	80ab6 <ISPProtocol_ProgramMemory+0x132>
   80aa6:	9b03      	ldr	r3, [sp, #12]
   80aa8:	b92b      	cbnz	r3, 80ab6 <ISPProtocol_ProgramMemory+0x132>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   80aaa:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   80aae:	f043 0310 	orr.w	r3, r3, #16
   80ab2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   80ab6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80aba:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   80abe:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   80ac2:	9200      	str	r2, [sp, #0]
   80ac4:	9a04      	ldr	r2, [sp, #16]
   80ac6:	9903      	ldr	r1, [sp, #12]
   80ac8:	4c48      	ldr	r4, [pc, #288]	; (80bec <ISPProtocol_ProgramMemory+0x268>)
   80aca:	47a0      	blx	r4
   80acc:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80ace:	2d13      	cmp	r5, #19
   80ad0:	d1c1      	bne.n	80a56 <ISPProtocol_ProgramMemory+0xd2>
   80ad2:	4a41      	ldr	r2, [pc, #260]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80ad4:	8812      	ldrh	r2, [r2, #0]
   80ad6:	2a00      	cmp	r2, #0
   80ad8:	d1bd      	bne.n	80a56 <ISPProtocol_ProgramMemory+0xd2>
		  MustLoadExtendedAddress = true;
   80ada:	2101      	movs	r1, #1
   80adc:	4a40      	ldr	r2, [pc, #256]	; (80be0 <ISPProtocol_ProgramMemory+0x25c>)
   80ade:	7011      	strb	r1, [r2, #0]
   80ae0:	e7b9      	b.n	80a56 <ISPProtocol_ProgramMemory+0xd2>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80ae2:	f019 0f01 	tst.w	r9, #1
   80ae6:	d064      	beq.n	80bb2 <ISPProtocol_ProgramMemory+0x22e>
   80ae8:	e011      	b.n	80b0e <ISPProtocol_ProgramMemory+0x18a>
   80aea:	f019 0f01 	tst.w	r9, #1
   80aee:	d10e      	bne.n	80b0e <ISPProtocol_ProgramMemory+0x18a>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   80af0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80af4:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   80af8:	9200      	str	r2, [sp, #0]
   80afa:	9a04      	ldr	r2, [sp, #16]
   80afc:	9903      	ldr	r1, [sp, #12]
   80afe:	4648      	mov	r0, r9
   80b00:	4c3a      	ldr	r4, [pc, #232]	; (80bec <ISPProtocol_ProgramMemory+0x268>)
   80b02:	47a0      	blx	r4
			if (ProgrammingStatus != STATUS_CMD_OK)
   80b04:	4603      	mov	r3, r0
   80b06:	2800      	cmp	r0, #0
   80b08:	d1ae      	bne.n	80a68 <ISPProtocol_ProgramMemory+0xe4>
			PollAddress = 0;
   80b0a:	2300      	movs	r3, #0
   80b0c:	9303      	str	r3, [sp, #12]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   80b0e:	f018 0f01 	tst.w	r8, #1
   80b12:	d186      	bne.n	80a22 <ISPProtocol_ProgramMemory+0x9e>
   80b14:	f1bb 0f15 	cmp.w	fp, #21
   80b18:	d053      	beq.n	80bc2 <ISPProtocol_ProgramMemory+0x23e>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80b1a:	9b06      	ldr	r3, [sp, #24]
   80b1c:	429f      	cmp	r7, r3
   80b1e:	d092      	beq.n	80a46 <ISPProtocol_ProgramMemory+0xc2>
   80b20:	9b05      	ldr	r3, [sp, #20]
   80b22:	eba7 0803 	sub.w	r8, r7, r3
   80b26:	fa1f f888 	uxth.w	r8, r8
		uint8_t ByteToWrite     = *(NextWriteByte++);
   80b2a:	f817 6b01 	ldrb.w	r6, [r7], #1
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   80b2e:	f89d 9026 	ldrb.w	r9, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   80b32:	4b2b      	ldr	r3, [pc, #172]	; (80be0 <ISPProtocol_ProgramMemory+0x25c>)
   80b34:	781b      	ldrb	r3, [r3, #0]
   80b36:	2b00      	cmp	r3, #0
   80b38:	f47f af5f 	bne.w	809fa <ISPProtocol_ProgramMemory+0x76>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   80b3c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   80b40:	2300      	movs	r3, #0
   80b42:	461a      	mov	r2, r3
   80b44:	4651      	mov	r1, sl
   80b46:	4827      	ldr	r0, [pc, #156]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80b48:	4c27      	ldr	r4, [pc, #156]	; (80be8 <ISPProtocol_ProgramMemory+0x264>)
   80b4a:	47a0      	blx	r4
		ISPTarget_SendByte(CurrentAddress >> 8);
   80b4c:	4d22      	ldr	r5, [pc, #136]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80b4e:	2300      	movs	r3, #0
   80b50:	461a      	mov	r2, r3
   80b52:	7869      	ldrb	r1, [r5, #1]
   80b54:	4823      	ldr	r0, [pc, #140]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80b56:	47a0      	blx	r4
   80b58:	2300      	movs	r3, #0
   80b5a:	461a      	mov	r2, r3
   80b5c:	7829      	ldrb	r1, [r5, #0]
   80b5e:	4821      	ldr	r0, [pc, #132]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80b60:	47a0      	blx	r4
   80b62:	2300      	movs	r3, #0
   80b64:	461a      	mov	r2, r3
   80b66:	4631      	mov	r1, r6
   80b68:	481e      	ldr	r0, [pc, #120]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80b6a:	47a0      	blx	r4
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   80b6c:	f1bb 0f13 	cmp.w	fp, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   80b70:	bf04      	itt	eq
   80b72:	f08a 0a08 	eoreq.w	sl, sl, #8
   80b76:	f88d a028 	strbeq.w	sl, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   80b7a:	9b03      	ldr	r3, [sp, #12]
   80b7c:	2b00      	cmp	r3, #0
   80b7e:	d1b4      	bne.n	80aea <ISPProtocol_ProgramMemory+0x166>
   80b80:	9b04      	ldr	r3, [sp, #16]
   80b82:	42b3      	cmp	r3, r6
   80b84:	d0ad      	beq.n	80ae2 <ISPProtocol_ProgramMemory+0x15e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   80b86:	f018 0f01 	tst.w	r8, #1
   80b8a:	d003      	beq.n	80b94 <ISPProtocol_ProgramMemory+0x210>
   80b8c:	f1bb 0f13 	cmp.w	fp, #19
   80b90:	f43f af3a 	beq.w	80a08 <ISPProtocol_ProgramMemory+0x84>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   80b94:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80b98:	f023 0308 	bic.w	r3, r3, #8
   80b9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80ba0:	4b0d      	ldr	r3, [pc, #52]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80ba2:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80ba4:	f019 0f01 	tst.w	r9, #1
   80ba8:	f47f af4b 	bne.w	80a42 <ISPProtocol_ProgramMemory+0xbe>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   80bac:	2b00      	cmp	r3, #0
   80bae:	f47f af46 	bne.w	80a3e <ISPProtocol_ProgramMemory+0xba>
   80bb2:	f019 0f08 	tst.w	r9, #8
   80bb6:	d19b      	bne.n	80af0 <ISPProtocol_ProgramMemory+0x16c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   80bb8:	f029 0906 	bic.w	r9, r9, #6
   80bbc:	f049 0902 	orr.w	r9, r9, #2
   80bc0:	e796      	b.n	80af0 <ISPProtocol_ProgramMemory+0x16c>
			CurrentAddress++;
   80bc2:	4a05      	ldr	r2, [pc, #20]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80bc4:	6813      	ldr	r3, [r2, #0]
   80bc6:	3301      	adds	r3, #1
   80bc8:	6013      	str	r3, [r2, #0]
   80bca:	e7a6      	b.n	80b1a <ISPProtocol_ProgramMemory+0x196>
   80bcc:	2000287c 	.word	0x2000287c
   80bd0:	2000283c 	.word	0x2000283c
   80bd4:	2000283a 	.word	0x2000283a
   80bd8:	2000285c 	.word	0x2000285c
   80bdc:	00081205 	.word	0x00081205
   80be0:	20002838 	.word	0x20002838
   80be4:	40008000 	.word	0x40008000
   80be8:	00084b57 	.word	0x00084b57
   80bec:	00081245 	.word	0x00081245

00080bf0 <ISPProtocol_ReadMemory>:
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   80bf0:	4b43      	ldr	r3, [pc, #268]	; (80d00 <ISPProtocol_ReadMemory+0x110>)
   80bf2:	899b      	ldrh	r3, [r3, #12]
   80bf4:	2b03      	cmp	r3, #3
   80bf6:	d000      	beq.n	80bfa <ISPProtocol_ReadMemory+0xa>
   80bf8:	4770      	bx	lr
{
   80bfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80bfe:	b085      	sub	sp, #20
		//printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   80c00:	4b3f      	ldr	r3, [pc, #252]	; (80d00 <ISPProtocol_ReadMemory+0x110>)
   80c02:	689b      	ldr	r3, [r3, #8]
   80c04:	681b      	ldr	r3, [r3, #0]
   80c06:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   80c08:	4a3e      	ldr	r2, [pc, #248]	; (80d04 <ISPProtocol_ReadMemory+0x114>)
   80c0a:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80c0c:	24c0      	movs	r4, #192	; 0xc0
   80c0e:	7054      	strb	r4, [r2, #1]
	avrisp_status_payload_size = 2;
   80c10:	2402      	movs	r4, #2
   80c12:	4a3d      	ldr	r2, [pc, #244]	; (80d08 <ISPProtocol_ReadMemory+0x118>)
   80c14:	8014      	strh	r4, [r2, #0]
		
	////printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   80c16:	b29b      	uxth	r3, r3
   80c18:	9301      	str	r3, [sp, #4]
   80c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80c1e:	d86c      	bhi.n	80cfa <ISPProtocol_ReadMemory+0x10a>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80c20:	2b00      	cmp	r3, #0
   80c22:	d064      	beq.n	80cee <ISPProtocol_ReadMemory+0xfe>
   80c24:	4682      	mov	sl, r0
   80c26:	1e4f      	subs	r7, r1, #1
   80c28:	2600      	movs	r6, #0
   80c2a:	4c38      	ldr	r4, [pc, #224]	; (80d0c <ISPProtocol_ReadMemory+0x11c>)
   80c2c:	46b9      	mov	r9, r7
   80c2e:	e023      	b.n	80c78 <ISPProtocol_ReadMemory+0x88>
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
   80c30:	4b37      	ldr	r3, [pc, #220]	; (80d10 <ISPProtocol_ReadMemory+0x120>)
   80c32:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80c34:	4b37      	ldr	r3, [pc, #220]	; (80d14 <ISPProtocol_ReadMemory+0x124>)
   80c36:	f04f 0200 	mov.w	r2, #0
   80c3a:	701a      	strb	r2, [r3, #0]
   80c3c:	e022      	b.n	80c84 <ISPProtocol_ReadMemory+0x94>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   80c3e:	f088 0808 	eor.w	r8, r8, #8
   80c42:	f88d 800e 	strb.w	r8, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80c46:	f01b 0f01 	tst.w	fp, #1
   80c4a:	d010      	beq.n	80c6e <ISPProtocol_ReadMemory+0x7e>
		{
			CurrentAddress++;
   80c4c:	4a32      	ldr	r2, [pc, #200]	; (80d18 <ISPProtocol_ReadMemory+0x128>)
   80c4e:	6813      	ldr	r3, [r2, #0]
   80c50:	3301      	adds	r3, #1
   80c52:	6013      	str	r3, [r2, #0]
   80c54:	e006      	b.n	80c64 <ISPProtocol_ReadMemory+0x74>
   80c56:	4a30      	ldr	r2, [pc, #192]	; (80d18 <ISPProtocol_ReadMemory+0x128>)
   80c58:	6813      	ldr	r3, [r2, #0]
   80c5a:	3301      	adds	r3, #1
   80c5c:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80c5e:	f1ba 0f16 	cmp.w	sl, #22
   80c62:	d004      	beq.n	80c6e <ISPProtocol_ReadMemory+0x7e>
   80c64:	b29b      	uxth	r3, r3
   80c66:	b913      	cbnz	r3, 80c6e <ISPProtocol_ReadMemory+0x7e>
			  MustLoadExtendedAddress = true;
   80c68:	2301      	movs	r3, #1
   80c6a:	4a2a      	ldr	r2, [pc, #168]	; (80d14 <ISPProtocol_ReadMemory+0x124>)
   80c6c:	7013      	strb	r3, [r2, #0]
   80c6e:	3601      	adds	r6, #1
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80c70:	b2b3      	uxth	r3, r6
   80c72:	9a01      	ldr	r2, [sp, #4]
   80c74:	429a      	cmp	r2, r3
   80c76:	d93a      	bls.n	80cee <ISPProtocol_ReadMemory+0xfe>
   80c78:	fa1f fb86 	uxth.w	fp, r6
		if (MustLoadExtendedAddress)
   80c7c:	4b25      	ldr	r3, [pc, #148]	; (80d14 <ISPProtocol_ReadMemory+0x124>)
   80c7e:	781b      	ldrb	r3, [r3, #0]
   80c80:	2b00      	cmp	r3, #0
   80c82:	d1d5      	bne.n	80c30 <ISPProtocol_ReadMemory+0x40>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   80c84:	f89d 800e 	ldrb.w	r8, [sp, #14]
   80c88:	2300      	movs	r3, #0
   80c8a:	461a      	mov	r2, r3
   80c8c:	4641      	mov	r1, r8
   80c8e:	4620      	mov	r0, r4
   80c90:	4d22      	ldr	r5, [pc, #136]	; (80d1c <ISPProtocol_ReadMemory+0x12c>)
   80c92:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80c94:	4f20      	ldr	r7, [pc, #128]	; (80d18 <ISPProtocol_ReadMemory+0x128>)
   80c96:	2300      	movs	r3, #0
   80c98:	461a      	mov	r2, r3
   80c9a:	7879      	ldrb	r1, [r7, #1]
   80c9c:	4620      	mov	r0, r4
   80c9e:	47a8      	blx	r5
   80ca0:	2300      	movs	r3, #0
   80ca2:	461a      	mov	r2, r3
   80ca4:	7839      	ldrb	r1, [r7, #0]
   80ca6:	4620      	mov	r0, r4
   80ca8:	47a8      	blx	r5
   80caa:	2300      	movs	r3, #0
   80cac:	461a      	mov	r2, r3
   80cae:	4619      	mov	r1, r3
   80cb0:	4620      	mov	r0, r4
   80cb2:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80cb4:	6923      	ldr	r3, [r4, #16]
		{
			ISPTarget_SendByte(data);
#if AVRISP_USEUART
			while(usart_is_tx_empty(AVRISP_USART) == 0);
#else
			while(spi_is_tx_empty(SPI) == 0);
   80cb6:	f413 7f00 	tst.w	r3, #512	; 0x200
   80cba:	d0fb      	beq.n	80cb4 <ISPProtocol_ReadMemory+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   80cbc:	f10d 0209 	add.w	r2, sp, #9
   80cc0:	f10d 010a 	add.w	r1, sp, #10
   80cc4:	4620      	mov	r0, r4
   80cc6:	4b16      	ldr	r3, [pc, #88]	; (80d20 <ISPProtocol_ReadMemory+0x130>)
   80cc8:	4798      	blx	r3
			return  ReceivedByte;
   80cca:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   80cce:	f809 3f01 	strb.w	r3, [r9, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   80cd2:	f1ba 0f14 	cmp.w	sl, #20
   80cd6:	d0b2      	beq.n	80c3e <ISPProtocol_ReadMemory+0x4e>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80cd8:	f01b 0f01 	tst.w	fp, #1
   80cdc:	d1bb      	bne.n	80c56 <ISPProtocol_ReadMemory+0x66>
   80cde:	f1ba 0f16 	cmp.w	sl, #22
   80ce2:	d1c4      	bne.n	80c6e <ISPProtocol_ReadMemory+0x7e>
			CurrentAddress++;
   80ce4:	4a0c      	ldr	r2, [pc, #48]	; (80d18 <ISPProtocol_ReadMemory+0x128>)
   80ce6:	6813      	ldr	r3, [r2, #0]
   80ce8:	3301      	adds	r3, #1
   80cea:	6013      	str	r3, [r2, #0]
   80cec:	e7bf      	b.n	80c6e <ISPProtocol_ReadMemory+0x7e>
		}
	}

	////printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80cee:	2200      	movs	r2, #0
   80cf0:	4b04      	ldr	r3, [pc, #16]	; (80d04 <ISPProtocol_ReadMemory+0x114>)
   80cf2:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80cf4:	2202      	movs	r2, #2
   80cf6:	4b04      	ldr	r3, [pc, #16]	; (80d08 <ISPProtocol_ReadMemory+0x118>)
   80cf8:	801a      	strh	r2, [r3, #0]
}
   80cfa:	b005      	add	sp, #20
   80cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d00:	2000287c 	.word	0x2000287c
   80d04:	2000283c 	.word	0x2000283c
   80d08:	2000283a 	.word	0x2000283a
   80d0c:	40008000 	.word	0x40008000
   80d10:	00081205 	.word	0x00081205
   80d14:	20002838 	.word	0x20002838
   80d18:	2000285c 	.word	0x2000285c
   80d1c:	00084b57 	.word	0x00084b57
   80d20:	00084b29 	.word	0x00084b29

00080d24 <ISPProtocol_ReadFuseLockSigOSCCAL>:
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   80d24:	4b20      	ldr	r3, [pc, #128]	; (80da8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x84>)
   80d26:	899b      	ldrh	r3, [r3, #12]
   80d28:	2b05      	cmp	r3, #5
   80d2a:	d000      	beq.n	80d2e <ISPProtocol_ReadFuseLockSigOSCCAL+0xa>
   80d2c:	4770      	bx	lr
{
   80d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d32:	b085      	sub	sp, #20
   80d34:	4607      	mov	r7, r0
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   80d36:	4b1c      	ldr	r3, [pc, #112]	; (80da8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x84>)
   80d38:	689b      	ldr	r3, [r3, #8]
   80d3a:	6818      	ldr	r0, [r3, #0]
   80d3c:	9002      	str	r0, [sp, #8]
   80d3e:	791a      	ldrb	r2, [r3, #4]
   80d40:	f88d 200c 	strb.w	r2, [sp, #12]
   80d44:	f893 b000 	ldrb.w	fp, [r3]
   80d48:	f10d 0609 	add.w	r6, sp, #9
   80d4c:	ad01      	add	r5, sp, #4
   80d4e:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   80d52:	4c16      	ldr	r4, [pc, #88]	; (80dac <ISPProtocol_ReadFuseLockSigOSCCAL+0x88>)
   80d54:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80db8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   80d58:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80dbc <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>
		  spi_write(SPI, data, 0, 0);
   80d5c:	2300      	movs	r3, #0
   80d5e:	461a      	mov	r2, r3
   80d60:	f816 1b01 	ldrb.w	r1, [r6], #1
   80d64:	4620      	mov	r0, r4
   80d66:	47c8      	blx	r9
   80d68:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   80d6a:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d6e:	d0fb      	beq.n	80d68 <ISPProtocol_ReadFuseLockSigOSCCAL+0x44>
			spi_read(SPI, &ReceivedByte, &_);
   80d70:	f10d 0201 	add.w	r2, sp, #1
   80d74:	f10d 0102 	add.w	r1, sp, #2
   80d78:	4620      	mov	r0, r4
   80d7a:	47c0      	blx	r8
			return  ReceivedByte;
   80d7c:	f89d 3002 	ldrb.w	r3, [sp, #2]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   80d80:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80d84:	4555      	cmp	r5, sl
   80d86:	d1e9      	bne.n	80d5c <ISPProtocol_ReadFuseLockSigOSCCAL+0x38>

	avrisp_status_payload[0] = V2Command;
   80d88:	4b09      	ldr	r3, [pc, #36]	; (80db0 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80d8a:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80d8c:	2200      	movs	r2, #0
   80d8e:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   80d90:	a904      	add	r1, sp, #16
   80d92:	448b      	add	fp, r1
   80d94:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   80d98:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   80d9a:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   80d9c:	2204      	movs	r2, #4
   80d9e:	4b05      	ldr	r3, [pc, #20]	; (80db4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   80da0:	801a      	strh	r2, [r3, #0]
}
   80da2:	b005      	add	sp, #20
   80da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80da8:	2000287c 	.word	0x2000287c
   80dac:	40008000 	.word	0x40008000
   80db0:	2000283c 	.word	0x2000283c
   80db4:	2000283a 	.word	0x2000283a
   80db8:	00084b57 	.word	0x00084b57
   80dbc:	00084b29 	.word	0x00084b29

00080dc0 <ISPProtocol_WriteFuseLock>:
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   80dc0:	4b13      	ldr	r3, [pc, #76]	; (80e10 <ISPProtocol_WriteFuseLock+0x50>)
   80dc2:	899b      	ldrh	r3, [r3, #12]
   80dc4:	2b04      	cmp	r3, #4
   80dc6:	d000      	beq.n	80dca <ISPProtocol_WriteFuseLock+0xa>
   80dc8:	4770      	bx	lr
{
   80dca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80dce:	b083      	sub	sp, #12
   80dd0:	4681      	mov	r9, r0
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   80dd2:	4b0f      	ldr	r3, [pc, #60]	; (80e10 <ISPProtocol_WriteFuseLock+0x50>)
   80dd4:	689b      	ldr	r3, [r3, #8]
   80dd6:	681b      	ldr	r3, [r3, #0]
   80dd8:	ac02      	add	r4, sp, #8
   80dda:	f844 3d04 	str.w	r3, [r4, #-4]!
   80dde:	f10d 0808 	add.w	r8, sp, #8
		  spi_write(SPI, data, 0, 0);
   80de2:	4f0c      	ldr	r7, [pc, #48]	; (80e14 <ISPProtocol_WriteFuseLock+0x54>)
   80de4:	2600      	movs	r6, #0
   80de6:	4d0c      	ldr	r5, [pc, #48]	; (80e18 <ISPProtocol_WriteFuseLock+0x58>)
   80de8:	4633      	mov	r3, r6
   80dea:	4632      	mov	r2, r6
   80dec:	f814 1b01 	ldrb.w	r1, [r4], #1
   80df0:	4638      	mov	r0, r7
   80df2:	47a8      	blx	r5

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   80df4:	4544      	cmp	r4, r8
   80df6:	d1f7      	bne.n	80de8 <ISPProtocol_WriteFuseLock+0x28>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   80df8:	4b08      	ldr	r3, [pc, #32]	; (80e1c <ISPProtocol_WriteFuseLock+0x5c>)
   80dfa:	f883 9000 	strb.w	r9, [r3]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80dfe:	2200      	movs	r2, #0
   80e00:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   80e02:	2202      	movs	r2, #2
   80e04:	4b06      	ldr	r3, [pc, #24]	; (80e20 <ISPProtocol_WriteFuseLock+0x60>)
   80e06:	801a      	strh	r2, [r3, #0]
}
   80e08:	b003      	add	sp, #12
   80e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e0e:	bf00      	nop
   80e10:	2000287c 	.word	0x2000287c
   80e14:	40008000 	.word	0x40008000
   80e18:	00084b57 	.word	0x00084b57
   80e1c:	2000283c 	.word	0x2000283c
   80e20:	2000283a 	.word	0x2000283a

00080e24 <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
   80e24:	4770      	bx	lr
	...

00080e28 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   80e28:	b900      	cbnz	r0, 80e2c <ISPProtocol_DelayMS+0x4>
   80e2a:	4770      	bx	lr
{
   80e2c:	b538      	push	{r3, r4, r5, lr}
   80e2e:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   80e30:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80e34:	2300      	movs	r3, #0
   80e36:	f243 64af 	movw	r4, #13999	; 0x36af
   80e3a:	2500      	movs	r5, #0
   80e3c:	4804      	ldr	r0, [pc, #16]	; (80e50 <ISPProtocol_DelayMS+0x28>)
   80e3e:	fbe0 4501 	umlal	r4, r5, r0, r1
   80e42:	4620      	mov	r0, r4
   80e44:	4629      	mov	r1, r5
   80e46:	4c03      	ldr	r4, [pc, #12]	; (80e54 <ISPProtocol_DelayMS+0x2c>)
   80e48:	47a0      	blx	r4
   80e4a:	4b03      	ldr	r3, [pc, #12]	; (80e58 <ISPProtocol_DelayMS+0x30>)
   80e4c:	4798      	blx	r3
   80e4e:	bd38      	pop	{r3, r4, r5, pc}
   80e50:	05b8d800 	.word	0x05b8d800
   80e54:	00086759 	.word	0x00086759
   80e58:	20000089 	.word	0x20000089

00080e5c <ISPProtocol_EnterISPMode>:
	if (udd_g_ctrlreq.payload_size != 11){
   80e5c:	4b43      	ldr	r3, [pc, #268]	; (80f6c <ISPProtocol_EnterISPMode+0x110>)
   80e5e:	899b      	ldrh	r3, [r3, #12]
   80e60:	2b0b      	cmp	r3, #11
   80e62:	d000      	beq.n	80e66 <ISPProtocol_EnterISPMode+0xa>
   80e64:	4770      	bx	lr
{
   80e66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e6a:	b08b      	sub	sp, #44	; 0x2c
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   80e6c:	4b3f      	ldr	r3, [pc, #252]	; (80f6c <ISPProtocol_EnterISPMode+0x110>)
   80e6e:	689b      	ldr	r3, [r3, #8]
   80e70:	aa07      	add	r2, sp, #28
   80e72:	6818      	ldr	r0, [r3, #0]
   80e74:	6859      	ldr	r1, [r3, #4]
   80e76:	c203      	stmia	r2!, {r0, r1}
   80e78:	8918      	ldrh	r0, [r3, #8]
   80e7a:	7a99      	ldrb	r1, [r3, #10]
   80e7c:	8010      	strh	r0, [r2, #0]
   80e7e:	7091      	strb	r1, [r2, #2]
   80e80:	785a      	ldrb	r2, [r3, #1]
   80e82:	4616      	mov	r6, r2
   80e84:	9203      	str	r2, [sp, #12]
   80e86:	7898      	ldrb	r0, [r3, #2]
   80e88:	78dc      	ldrb	r4, [r3, #3]
   80e8a:	791a      	ldrb	r2, [r3, #4]
   80e8c:	9201      	str	r2, [sp, #4]
   80e8e:	795a      	ldrb	r2, [r3, #5]
   80e90:	9202      	str	r2, [sp, #8]
   80e92:	f893 b006 	ldrb.w	fp, [r3, #6]
	CurrentAddress = 0;
   80e96:	2200      	movs	r2, #0
   80e98:	4b35      	ldr	r3, [pc, #212]	; (80f70 <ISPProtocol_EnterISPMode+0x114>)
   80e9a:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   80e9c:	4d35      	ldr	r5, [pc, #212]	; (80f74 <ISPProtocol_EnterISPMode+0x118>)
   80e9e:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   80ea0:	4b35      	ldr	r3, [pc, #212]	; (80f78 <ISPProtocol_EnterISPMode+0x11c>)
   80ea2:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   80ea4:	2001      	movs	r0, #1
   80ea6:	4b35      	ldr	r3, [pc, #212]	; (80f7c <ISPProtocol_EnterISPMode+0x120>)
   80ea8:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80eaa:	4630      	mov	r0, r6
   80eac:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80eae:	f104 39ff 	add.w	r9, r4, #4294967295
   80eb2:	fa5f f989 	uxtb.w	r9, r9
   80eb6:	2c00      	cmp	r4, #0
   80eb8:	d051      	beq.n	80f5e <ISPProtocol_EnterISPMode+0x102>
   80eba:	4b31      	ldr	r3, [pc, #196]	; (80f80 <ISPProtocol_EnterISPMode+0x124>)
   80ebc:	681b      	ldr	r3, [r3, #0]
   80ebe:	b123      	cbz	r3, 80eca <ISPProtocol_EnterISPMode+0x6e>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80ec0:	4f2c      	ldr	r7, [pc, #176]	; (80f74 <ISPProtocol_EnterISPMode+0x118>)
   80ec2:	4c30      	ldr	r4, [pc, #192]	; (80f84 <ISPProtocol_EnterISPMode+0x128>)
   80ec4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80f94 <ISPProtocol_EnterISPMode+0x138>
   80ec8:	e01f      	b.n	80f0a <ISPProtocol_EnterISPMode+0xae>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80eca:	23c0      	movs	r3, #192	; 0xc0
   80ecc:	e03d      	b.n	80f4a <ISPProtocol_EnterISPMode+0xee>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   80ece:	f1bb 0f00 	cmp.w	fp, #0
   80ed2:	d039      	beq.n	80f48 <ISPProtocol_EnterISPMode+0xec>
   80ed4:	ab0a      	add	r3, sp, #40	; 0x28
   80ed6:	445b      	add	r3, fp
   80ed8:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   80edc:	9a02      	ldr	r2, [sp, #8]
   80ede:	4293      	cmp	r3, r2
   80ee0:	d032      	beq.n	80f48 <ISPProtocol_EnterISPMode+0xec>
			ISPTarget_ChangeTargetResetLine(false);
   80ee2:	2000      	movs	r0, #0
   80ee4:	4d25      	ldr	r5, [pc, #148]	; (80f7c <ISPProtocol_EnterISPMode+0x120>)
   80ee6:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80ee8:	9e03      	ldr	r6, [sp, #12]
   80eea:	4630      	mov	r0, r6
   80eec:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   80eee:	2001      	movs	r0, #1
   80ef0:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80ef2:	4630      	mov	r0, r6
   80ef4:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80ef6:	f109 39ff 	add.w	r9, r9, #4294967295
   80efa:	fa5f f989 	uxtb.w	r9, r9
   80efe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   80f02:	d02e      	beq.n	80f62 <ISPProtocol_EnterISPMode+0x106>
   80f04:	4b1e      	ldr	r3, [pc, #120]	; (80f80 <ISPProtocol_EnterISPMode+0x124>)
   80f06:	681b      	ldr	r3, [r3, #0]
   80f08:	b36b      	cbz	r3, 80f66 <ISPProtocol_EnterISPMode+0x10a>
   80f0a:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   80f0e:	ad06      	add	r5, sp, #24
   80f10:	f10d 081c 	add.w	r8, sp, #28
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80f14:	9801      	ldr	r0, [sp, #4]
   80f16:	47b8      	blx	r7
   80f18:	2300      	movs	r3, #0
   80f1a:	461a      	mov	r2, r3
   80f1c:	f816 1b01 	ldrb.w	r1, [r6], #1
   80f20:	4620      	mov	r0, r4
   80f22:	47d0      	blx	sl
   80f24:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   80f26:	f413 7f00 	tst.w	r3, #512	; 0x200
   80f2a:	d0fb      	beq.n	80f24 <ISPProtocol_EnterISPMode+0xc8>
			spi_read(SPI, &ReceivedByte, &_);
   80f2c:	f10d 0215 	add.w	r2, sp, #21
   80f30:	f10d 0116 	add.w	r1, sp, #22
   80f34:	4620      	mov	r0, r4
   80f36:	4b14      	ldr	r3, [pc, #80]	; (80f88 <ISPProtocol_EnterISPMode+0x12c>)
   80f38:	4798      	blx	r3
			return  ReceivedByte;
   80f3a:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   80f3e:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80f42:	4545      	cmp	r5, r8
   80f44:	d1e6      	bne.n	80f14 <ISPProtocol_EnterISPMode+0xb8>
   80f46:	e7c2      	b.n	80ece <ISPProtocol_EnterISPMode+0x72>
			ResponseStatus = STATUS_CMD_OK;
   80f48:	2300      	movs	r3, #0
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   80f4a:	4a10      	ldr	r2, [pc, #64]	; (80f8c <ISPProtocol_EnterISPMode+0x130>)
   80f4c:	2110      	movs	r1, #16
   80f4e:	7011      	strb	r1, [r2, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80f50:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80f52:	2202      	movs	r2, #2
   80f54:	4b0e      	ldr	r3, [pc, #56]	; (80f90 <ISPProtocol_EnterISPMode+0x134>)
   80f56:	801a      	strh	r2, [r3, #0]
}
   80f58:	b00b      	add	sp, #44	; 0x2c
   80f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80f5e:	23c0      	movs	r3, #192	; 0xc0
   80f60:	e7f3      	b.n	80f4a <ISPProtocol_EnterISPMode+0xee>
   80f62:	23c0      	movs	r3, #192	; 0xc0
   80f64:	e7f1      	b.n	80f4a <ISPProtocol_EnterISPMode+0xee>
   80f66:	23c0      	movs	r3, #192	; 0xc0
   80f68:	e7ef      	b.n	80f4a <ISPProtocol_EnterISPMode+0xee>
   80f6a:	bf00      	nop
   80f6c:	2000287c 	.word	0x2000287c
   80f70:	2000285c 	.word	0x2000285c
   80f74:	00080e29 	.word	0x00080e29
   80f78:	00081081 	.word	0x00081081
   80f7c:	00081141 	.word	0x00081141
   80f80:	20002864 	.word	0x20002864
   80f84:	40008000 	.word	0x40008000
   80f88:	00084b29 	.word	0x00084b29
   80f8c:	2000283c 	.word	0x2000283c
   80f90:	2000283a 	.word	0x2000283a
   80f94:	00084b57 	.word	0x00084b57

00080f98 <ISPProtocol_LeaveISPMode>:
	if (udd_g_ctrlreq.payload_size != 2){
   80f98:	4b10      	ldr	r3, [pc, #64]	; (80fdc <ISPProtocol_LeaveISPMode+0x44>)
   80f9a:	899b      	ldrh	r3, [r3, #12]
   80f9c:	2b02      	cmp	r3, #2
   80f9e:	d000      	beq.n	80fa2 <ISPProtocol_LeaveISPMode+0xa>
   80fa0:	4770      	bx	lr
{
   80fa2:	b510      	push	{r4, lr}
   80fa4:	b082      	sub	sp, #8
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   80fa6:	4b0d      	ldr	r3, [pc, #52]	; (80fdc <ISPProtocol_LeaveISPMode+0x44>)
   80fa8:	689b      	ldr	r3, [r3, #8]
   80faa:	8818      	ldrh	r0, [r3, #0]
   80fac:	f8ad 0004 	strh.w	r0, [sp, #4]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   80fb0:	b2c0      	uxtb	r0, r0
   80fb2:	4c0b      	ldr	r4, [pc, #44]	; (80fe0 <ISPProtocol_LeaveISPMode+0x48>)
   80fb4:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   80fb6:	2000      	movs	r0, #0
   80fb8:	4b0a      	ldr	r3, [pc, #40]	; (80fe4 <ISPProtocol_LeaveISPMode+0x4c>)
   80fba:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   80fbc:	4b0a      	ldr	r3, [pc, #40]	; (80fe8 <ISPProtocol_LeaveISPMode+0x50>)
   80fbe:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   80fc0:	f89d 0005 	ldrb.w	r0, [sp, #5]
   80fc4:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   80fc6:	4b09      	ldr	r3, [pc, #36]	; (80fec <ISPProtocol_LeaveISPMode+0x54>)
   80fc8:	2211      	movs	r2, #17
   80fca:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80fcc:	2200      	movs	r2, #0
   80fce:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80fd0:	2202      	movs	r2, #2
   80fd2:	4b07      	ldr	r3, [pc, #28]	; (80ff0 <ISPProtocol_LeaveISPMode+0x58>)
   80fd4:	801a      	strh	r2, [r3, #0]
}
   80fd6:	b002      	add	sp, #8
   80fd8:	bd10      	pop	{r4, pc}
   80fda:	bf00      	nop
   80fdc:	2000287c 	.word	0x2000287c
   80fe0:	00080e29 	.word	0x00080e29
   80fe4:	00081141 	.word	0x00081141
   80fe8:	00081129 	.word	0x00081129
   80fec:	2000283c 	.word	0x2000283c
   80ff0:	2000283a 	.word	0x2000283a

00080ff4 <ISPProtocol_ChipErase>:
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   80ff4:	4b1b      	ldr	r3, [pc, #108]	; (81064 <ISPProtocol_ChipErase+0x70>)
   80ff6:	899b      	ldrh	r3, [r3, #12]
   80ff8:	2b06      	cmp	r3, #6
   80ffa:	d000      	beq.n	80ffe <ISPProtocol_ChipErase+0xa>
   80ffc:	4770      	bx	lr
{
   80ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81002:	b082      	sub	sp, #8
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   81004:	4b17      	ldr	r3, [pc, #92]	; (81064 <ISPProtocol_ChipErase+0x70>)
   81006:	689b      	ldr	r3, [r3, #8]
   81008:	6818      	ldr	r0, [r3, #0]
   8100a:	9000      	str	r0, [sp, #0]
   8100c:	889a      	ldrh	r2, [r3, #4]
   8100e:	f8ad 2004 	strh.w	r2, [sp, #4]
   81012:	f893 a000 	ldrb.w	sl, [r3]
   81016:	f893 9001 	ldrb.w	r9, [r3, #1]
   8101a:	f10d 0402 	add.w	r4, sp, #2
   8101e:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   81022:	4f11      	ldr	r7, [pc, #68]	; (81068 <ISPProtocol_ChipErase+0x74>)
   81024:	2600      	movs	r6, #0
   81026:	4d11      	ldr	r5, [pc, #68]	; (8106c <ISPProtocol_ChipErase+0x78>)
   81028:	4633      	mov	r3, r6
   8102a:	4632      	mov	r2, r6
   8102c:	f814 1b01 	ldrb.w	r1, [r4], #1
   81030:	4638      	mov	r0, r7
   81032:	47a8      	blx	r5
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   81034:	4544      	cmp	r4, r8
   81036:	d1f7      	bne.n	81028 <ISPProtocol_ChipErase+0x34>
	if (!(Erase_Chip_Params.PollMethod))
   81038:	f1b9 0f00 	cmp.w	r9, #0
   8103c:	d10d      	bne.n	8105a <ISPProtocol_ChipErase+0x66>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   8103e:	4650      	mov	r0, sl
   81040:	4b0b      	ldr	r3, [pc, #44]	; (81070 <ISPProtocol_ChipErase+0x7c>)
   81042:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   81044:	4b0b      	ldr	r3, [pc, #44]	; (81074 <ISPProtocol_ChipErase+0x80>)
   81046:	2212      	movs	r2, #18
   81048:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   8104a:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   8104e:	2202      	movs	r2, #2
   81050:	4b09      	ldr	r3, [pc, #36]	; (81078 <ISPProtocol_ChipErase+0x84>)
   81052:	801a      	strh	r2, [r3, #0]
}
   81054:	b002      	add	sp, #8
   81056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   8105a:	4b08      	ldr	r3, [pc, #32]	; (8107c <ISPProtocol_ChipErase+0x88>)
   8105c:	4798      	blx	r3
   8105e:	4681      	mov	r9, r0
   81060:	e7f0      	b.n	81044 <ISPProtocol_ChipErase+0x50>
   81062:	bf00      	nop
   81064:	2000287c 	.word	0x2000287c
   81068:	40008000 	.word	0x40008000
   8106c:	00084b57 	.word	0x00084b57
   81070:	00080e29 	.word	0x00080e29
   81074:	2000283c 	.word	0x2000283c
   81078:	2000283a 	.word	0x2000283a
   8107c:	00081185 	.word	0x00081185

00081080 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   81080:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   81082:	2098      	movs	r0, #152	; 0x98
   81084:	4b1e      	ldr	r3, [pc, #120]	; (81100 <ISPTarget_EnableTargetISP+0x80>)
   81086:	4798      	blx	r3
   81088:	4b1e      	ldr	r3, [pc, #120]	; (81104 <ISPTarget_EnableTargetISP+0x84>)
   8108a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   8108e:	4c1e      	ldr	r4, [pc, #120]	; (81108 <ISPTarget_EnableTargetISP+0x88>)
   81090:	4620      	mov	r0, r4
   81092:	4b1e      	ldr	r3, [pc, #120]	; (8110c <ISPTarget_EnableTargetISP+0x8c>)
   81094:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   81096:	2380      	movs	r3, #128	; 0x80
   81098:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8109a:	6863      	ldr	r3, [r4, #4]
   8109c:	f043 0301 	orr.w	r3, r3, #1
   810a0:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   810a2:	6863      	ldr	r3, [r4, #4]
   810a4:	f043 0310 	orr.w	r3, r3, #16
   810a8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   810aa:	6863      	ldr	r3, [r4, #4]
   810ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   810b0:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   810b2:	4917      	ldr	r1, [pc, #92]	; (81110 <ISPTarget_EnableTargetISP+0x90>)
   810b4:	4628      	mov	r0, r5
   810b6:	4b17      	ldr	r3, [pc, #92]	; (81114 <ISPTarget_EnableTargetISP+0x94>)
   810b8:	4798      	blx	r3
	if (bauddiv < 0){
   810ba:	1e05      	subs	r5, r0, #0
		bauddiv = 255;
   810bc:	bfb8      	it	lt
   810be:	25ff      	movlt	r5, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   810c0:	2200      	movs	r2, #0
   810c2:	4611      	mov	r1, r2
   810c4:	4620      	mov	r0, r4
   810c6:	4b14      	ldr	r3, [pc, #80]	; (81118 <ISPTarget_EnableTargetISP+0x98>)
   810c8:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   810ca:	2201      	movs	r2, #1
   810cc:	2100      	movs	r1, #0
   810ce:	4620      	mov	r0, r4
   810d0:	4b12      	ldr	r3, [pc, #72]	; (8111c <ISPTarget_EnableTargetISP+0x9c>)
   810d2:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   810d4:	b2ea      	uxtb	r2, r5
   810d6:	2100      	movs	r1, #0
   810d8:	4620      	mov	r0, r4
   810da:	4b11      	ldr	r3, [pc, #68]	; (81120 <ISPTarget_EnableTargetISP+0xa0>)
   810dc:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   810de:	2301      	movs	r3, #1
   810e0:	6023      	str	r3, [r4, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   810e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810e6:	200e      	movs	r0, #14
   810e8:	4c0e      	ldr	r4, [pc, #56]	; (81124 <ISPTarget_EnableTargetISP+0xa4>)
   810ea:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   810ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810f0:	200d      	movs	r0, #13
   810f2:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   810f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810f8:	200f      	movs	r0, #15
   810fa:	47a0      	blx	r4
   810fc:	bd38      	pop	{r3, r4, r5, pc}
   810fe:	bf00      	nop
   81100:	00083605 	.word	0x00083605
   81104:	200001d4 	.word	0x200001d4
   81108:	40008000 	.word	0x40008000
   8110c:	00084b09 	.word	0x00084b09
   81110:	05b8d800 	.word	0x05b8d800
   81114:	00084bc7 	.word	0x00084bc7
   81118:	00084b8b 	.word	0x00084b8b
   8111c:	00084ba9 	.word	0x00084ba9
   81120:	00084bdd 	.word	0x00084bdd
   81124:	00084725 	.word	0x00084725

00081128 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   81128:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   8112a:	4803      	ldr	r0, [pc, #12]	; (81138 <ISPTarget_DisableTargetISP+0x10>)
   8112c:	2302      	movs	r3, #2
   8112e:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   81130:	4b02      	ldr	r3, [pc, #8]	; (8113c <ISPTarget_DisableTargetISP+0x14>)
   81132:	4798      	blx	r3
   81134:	bd08      	pop	{r3, pc}
   81136:	bf00      	nop
   81138:	40008000 	.word	0x40008000
   8113c:	00084b19 	.word	0x00084b19

00081140 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   81140:	b508      	push	{r3, lr}
	if (ResetTarget)
   81142:	b180      	cbz	r0, 81166 <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   81144:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81148:	2011      	movs	r0, #17
   8114a:	4b0a      	ldr	r3, [pc, #40]	; (81174 <ISPTarget_ChangeTargetResetLine+0x34>)
   8114c:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   8114e:	209e      	movs	r0, #158	; 0x9e
   81150:	4b09      	ldr	r3, [pc, #36]	; (81178 <ISPTarget_ChangeTargetResetLine+0x38>)
   81152:	4798      	blx	r3
   81154:	b918      	cbnz	r0, 8115e <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   81156:	2011      	movs	r0, #17
   81158:	4b08      	ldr	r3, [pc, #32]	; (8117c <ISPTarget_ChangeTargetResetLine+0x3c>)
   8115a:	4798      	blx	r3
   8115c:	bd08      	pop	{r3, pc}
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   8115e:	2011      	movs	r0, #17
   81160:	4b07      	ldr	r3, [pc, #28]	; (81180 <ISPTarget_ChangeTargetResetLine+0x40>)
   81162:	4798      	blx	r3
   81164:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   81166:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8116a:	2011      	movs	r0, #17
   8116c:	4b01      	ldr	r3, [pc, #4]	; (81174 <ISPTarget_ChangeTargetResetLine+0x34>)
   8116e:	4798      	blx	r3
   81170:	bd08      	pop	{r3, pc}
   81172:	bf00      	nop
   81174:	00084725 	.word	0x00084725
   81178:	00083605 	.word	0x00083605
   8117c:	000846cf 	.word	0x000846cf
   81180:	000846e9 	.word	0x000846e9

00081184 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   81184:	b570      	push	{r4, r5, r6, lr}
   81186:	b082      	sub	sp, #8
   81188:	4c1a      	ldr	r4, [pc, #104]	; (811f4 <ISPTarget_WaitWhileTargetBusy+0x70>)
   8118a:	2600      	movs	r6, #0
   8118c:	4d1a      	ldr	r5, [pc, #104]	; (811f8 <ISPTarget_WaitWhileTargetBusy+0x74>)
   8118e:	4633      	mov	r3, r6
   81190:	4632      	mov	r2, r6
   81192:	21f0      	movs	r1, #240	; 0xf0
   81194:	4620      	mov	r0, r4
   81196:	47a8      	blx	r5
   81198:	4633      	mov	r3, r6
   8119a:	4632      	mov	r2, r6
   8119c:	4631      	mov	r1, r6
   8119e:	4620      	mov	r0, r4
   811a0:	47a8      	blx	r5
   811a2:	4633      	mov	r3, r6
   811a4:	4632      	mov	r2, r6
   811a6:	4631      	mov	r1, r6
   811a8:	4620      	mov	r0, r4
   811aa:	47a8      	blx	r5
   811ac:	4633      	mov	r3, r6
   811ae:	4632      	mov	r2, r6
   811b0:	4631      	mov	r1, r6
   811b2:	4620      	mov	r0, r4
   811b4:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   811b6:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   811b8:	f413 7f00 	tst.w	r3, #512	; 0x200
   811bc:	d0fb      	beq.n	811b6 <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   811be:	f10d 0205 	add.w	r2, sp, #5
   811c2:	f10d 0106 	add.w	r1, sp, #6
   811c6:	4620      	mov	r0, r4
   811c8:	4b0c      	ldr	r3, [pc, #48]	; (811fc <ISPTarget_WaitWhileTargetBusy+0x78>)
   811ca:	4798      	blx	r3
			return  ReceivedByte;
   811cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   811d0:	f013 0f01 	tst.w	r3, #1
   811d4:	d005      	beq.n	811e2 <ISPTarget_WaitWhileTargetBusy+0x5e>
   811d6:	4b0a      	ldr	r3, [pc, #40]	; (81200 <ISPTarget_WaitWhileTargetBusy+0x7c>)
   811d8:	681b      	ldr	r3, [r3, #0]
   811da:	2b00      	cmp	r3, #0
   811dc:	d1d7      	bne.n	8118e <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   811de:	2081      	movs	r0, #129	; 0x81
   811e0:	e005      	b.n	811ee <ISPTarget_WaitWhileTargetBusy+0x6a>
   811e2:	4b07      	ldr	r3, [pc, #28]	; (81200 <ISPTarget_WaitWhileTargetBusy+0x7c>)
   811e4:	681b      	ldr	r3, [r3, #0]
   811e6:	2b00      	cmp	r3, #0
   811e8:	bf14      	ite	ne
   811ea:	2000      	movne	r0, #0
   811ec:	2081      	moveq	r0, #129	; 0x81
}
   811ee:	b002      	add	sp, #8
   811f0:	bd70      	pop	{r4, r5, r6, pc}
   811f2:	bf00      	nop
   811f4:	40008000 	.word	0x40008000
   811f8:	00084b57 	.word	0x00084b57
   811fc:	00084b29 	.word	0x00084b29
   81200:	20002864 	.word	0x20002864

00081204 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   81204:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   81206:	4d0c      	ldr	r5, [pc, #48]	; (81238 <ISPTarget_LoadExtendedAddress+0x34>)
   81208:	2300      	movs	r3, #0
   8120a:	461a      	mov	r2, r3
   8120c:	214d      	movs	r1, #77	; 0x4d
   8120e:	4628      	mov	r0, r5
   81210:	4c0a      	ldr	r4, [pc, #40]	; (8123c <ISPTarget_LoadExtendedAddress+0x38>)
   81212:	47a0      	blx	r4
   81214:	2300      	movs	r3, #0
   81216:	461a      	mov	r2, r3
   81218:	4619      	mov	r1, r3
   8121a:	4628      	mov	r0, r5
   8121c:	47a0      	blx	r4
   8121e:	2300      	movs	r3, #0
   81220:	461a      	mov	r2, r3
   81222:	4907      	ldr	r1, [pc, #28]	; (81240 <ISPTarget_LoadExtendedAddress+0x3c>)
   81224:	7889      	ldrb	r1, [r1, #2]
   81226:	4628      	mov	r0, r5
   81228:	47a0      	blx	r4
   8122a:	2300      	movs	r3, #0
   8122c:	461a      	mov	r2, r3
   8122e:	4619      	mov	r1, r3
   81230:	4628      	mov	r0, r5
   81232:	47a0      	blx	r4
   81234:	bd38      	pop	{r3, r4, r5, pc}
   81236:	bf00      	nop
   81238:	40008000 	.word	0x40008000
   8123c:	00084b57 	.word	0x00084b57
   81240:	2000285c 	.word	0x2000285c

00081244 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   81244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81248:	b082      	sub	sp, #8
   8124a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8124e:	f000 007e 	and.w	r0, r0, #126	; 0x7e
   81252:	2808      	cmp	r0, #8
   81254:	d04d      	beq.n	812f2 <ISPTarget_WaitForProgComplete+0xae>
   81256:	460f      	mov	r7, r1
   81258:	4690      	mov	r8, r2
   8125a:	dd07      	ble.n	8126c <ISPTarget_WaitForProgComplete+0x28>
   8125c:	2820      	cmp	r0, #32
   8125e:	d009      	beq.n	81274 <ISPTarget_WaitForProgComplete+0x30>
   81260:	2840      	cmp	r0, #64	; 0x40
   81262:	d046      	beq.n	812f2 <ISPTarget_WaitForProgComplete+0xae>
   81264:	2810      	cmp	r0, #16
   81266:	d033      	beq.n	812d0 <ISPTarget_WaitForProgComplete+0x8c>
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   81268:	2000      	movs	r0, #0
   8126a:	e035      	b.n	812d8 <ISPTarget_WaitForProgComplete+0x94>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8126c:	2802      	cmp	r0, #2
   8126e:	d02f      	beq.n	812d0 <ISPTarget_WaitForProgComplete+0x8c>
   81270:	2804      	cmp	r0, #4
   81272:	d1f9      	bne.n	81268 <ISPTarget_WaitForProgComplete+0x24>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
   81274:	ea4f 2a17 	mov.w	sl, r7, lsr #8
   81278:	4c1f      	ldr	r4, [pc, #124]	; (812f8 <ISPTarget_WaitForProgComplete+0xb4>)
   8127a:	2600      	movs	r6, #0
   8127c:	4d1f      	ldr	r5, [pc, #124]	; (812fc <ISPTarget_WaitForProgComplete+0xb8>)
   8127e:	4633      	mov	r3, r6
   81280:	4632      	mov	r2, r6
   81282:	4649      	mov	r1, r9
   81284:	4620      	mov	r0, r4
   81286:	47a8      	blx	r5
   81288:	4633      	mov	r3, r6
   8128a:	4632      	mov	r2, r6
   8128c:	4651      	mov	r1, sl
   8128e:	4620      	mov	r0, r4
   81290:	47a8      	blx	r5
   81292:	4633      	mov	r3, r6
   81294:	4632      	mov	r2, r6
   81296:	b2f9      	uxtb	r1, r7
   81298:	4620      	mov	r0, r4
   8129a:	47a8      	blx	r5
   8129c:	4633      	mov	r3, r6
   8129e:	4632      	mov	r2, r6
   812a0:	4631      	mov	r1, r6
   812a2:	4620      	mov	r0, r4
   812a4:	47a8      	blx	r5
   812a6:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   812a8:	f413 7f00 	tst.w	r3, #512	; 0x200
   812ac:	d0fb      	beq.n	812a6 <ISPTarget_WaitForProgComplete+0x62>
			spi_read(SPI, &ReceivedByte, &_);
   812ae:	f10d 0205 	add.w	r2, sp, #5
   812b2:	f10d 0106 	add.w	r1, sp, #6
   812b6:	4620      	mov	r0, r4
   812b8:	4b11      	ldr	r3, [pc, #68]	; (81300 <ISPTarget_WaitForProgComplete+0xbc>)
   812ba:	4798      	blx	r3
			return  ReceivedByte;
   812bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   812c0:	4598      	cmp	r8, r3
   812c2:	d10f      	bne.n	812e4 <ISPTarget_WaitForProgComplete+0xa0>
   812c4:	4b0f      	ldr	r3, [pc, #60]	; (81304 <ISPTarget_WaitForProgComplete+0xc0>)
   812c6:	681b      	ldr	r3, [r3, #0]
   812c8:	2b00      	cmp	r3, #0
   812ca:	d1d8      	bne.n	8127e <ISPTarget_WaitForProgComplete+0x3a>

			if (!(TimeoutTicksRemaining))
			  ProgrammingStatus = STATUS_CMD_TOUT;
   812cc:	2080      	movs	r0, #128	; 0x80
   812ce:	e003      	b.n	812d8 <ISPTarget_WaitForProgComplete+0x94>
			ISPProtocol_DelayMS(DelayMS);
   812d0:	4618      	mov	r0, r3
   812d2:	4b0d      	ldr	r3, [pc, #52]	; (81308 <ISPTarget_WaitForProgComplete+0xc4>)
   812d4:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   812d6:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   812d8:	2264      	movs	r2, #100	; 0x64
   812da:	4b0a      	ldr	r3, [pc, #40]	; (81304 <ISPTarget_WaitForProgComplete+0xc0>)
   812dc:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   812de:	b002      	add	sp, #8
   812e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!(TimeoutTicksRemaining))
   812e4:	4b07      	ldr	r3, [pc, #28]	; (81304 <ISPTarget_WaitForProgComplete+0xc0>)
   812e6:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   812e8:	2b00      	cmp	r3, #0
   812ea:	bf14      	ite	ne
   812ec:	2000      	movne	r0, #0
   812ee:	2080      	moveq	r0, #128	; 0x80
   812f0:	e7f2      	b.n	812d8 <ISPTarget_WaitForProgComplete+0x94>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   812f2:	4b06      	ldr	r3, [pc, #24]	; (8130c <ISPTarget_WaitForProgComplete+0xc8>)
   812f4:	4798      	blx	r3
			break;
   812f6:	e7ef      	b.n	812d8 <ISPTarget_WaitForProgComplete+0x94>
   812f8:	40008000 	.word	0x40008000
   812fc:	00084b57 	.word	0x00084b57
   81300:	00084b29 	.word	0x00084b29
   81304:	20002864 	.word	0x20002864
   81308:	00080e29 	.word	0x00080e29
   8130c:	00081185 	.word	0x00081185

00081310 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   81310:	4b06      	ldr	r3, [pc, #24]	; (8132c <naeusb_add_in_handler+0x1c>)
   81312:	781b      	ldrb	r3, [r3, #0]
   81314:	2b0f      	cmp	r3, #15
   81316:	d807      	bhi.n	81328 <naeusb_add_in_handler+0x18>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   81318:	1c59      	adds	r1, r3, #1
   8131a:	4a04      	ldr	r2, [pc, #16]	; (8132c <naeusb_add_in_handler+0x1c>)
   8131c:	7011      	strb	r1, [r2, #0]
   8131e:	4a04      	ldr	r2, [pc, #16]	; (81330 <naeusb_add_in_handler+0x20>)
   81320:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return true;
   81324:	2001      	movs	r0, #1
   81326:	4770      	bx	lr
    }
    return false;
   81328:	2000      	movs	r0, #0
    
}
   8132a:	4770      	bx	lr
   8132c:	20001dd8 	.word	0x20001dd8
   81330:	20001d98 	.word	0x20001d98

00081334 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   81334:	4b06      	ldr	r3, [pc, #24]	; (81350 <naeusb_add_out_handler+0x1c>)
   81336:	781b      	ldrb	r3, [r3, #0]
   81338:	2b0f      	cmp	r3, #15
   8133a:	d807      	bhi.n	8134c <naeusb_add_out_handler+0x18>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   8133c:	1c59      	adds	r1, r3, #1
   8133e:	4a04      	ldr	r2, [pc, #16]	; (81350 <naeusb_add_out_handler+0x1c>)
   81340:	7011      	strb	r1, [r2, #0]
   81342:	4a04      	ldr	r2, [pc, #16]	; (81354 <naeusb_add_out_handler+0x20>)
   81344:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return true;
   81348:	2001      	movs	r0, #1
   8134a:	4770      	bx	lr
    }
    return false;
   8134c:	2000      	movs	r0, #0
    
}
   8134e:	4770      	bx	lr
   81350:	20001dd9 	.word	0x20001dd9
   81354:	20001ddc 	.word	0x20001ddc

00081358 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   81358:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   8135a:	4b01      	ldr	r3, [pc, #4]	; (81360 <main_suspend_action+0x8>)
   8135c:	4798      	blx	r3
   8135e:	bd08      	pop	{r3, pc}
   81360:	00084205 	.word	0x00084205

00081364 <main_resume_action>:
}

void main_resume_action(void)
{
   81364:	b508      	push	{r3, lr}
    ui_wakeup();
   81366:	4b01      	ldr	r3, [pc, #4]	; (8136c <main_resume_action+0x8>)
   81368:	4798      	blx	r3
   8136a:	bd08      	pop	{r3, pc}
   8136c:	00084221 	.word	0x00084221

00081370 <main_sof_action>:
}

void main_sof_action(void)
{
   81370:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   81372:	4b04      	ldr	r3, [pc, #16]	; (81384 <main_sof_action+0x14>)
   81374:	781b      	ldrb	r3, [r3, #0]
   81376:	b903      	cbnz	r3, 8137a <main_sof_action+0xa>
   81378:	bd08      	pop	{r3, pc}
        return;
    ui_process(udd_get_frame_number());
   8137a:	4b03      	ldr	r3, [pc, #12]	; (81388 <main_sof_action+0x18>)
   8137c:	4798      	blx	r3
   8137e:	4b03      	ldr	r3, [pc, #12]	; (8138c <main_sof_action+0x1c>)
   81380:	4798      	blx	r3
   81382:	e7f9      	b.n	81378 <main_sof_action+0x8>
   81384:	20000464 	.word	0x20000464
   81388:	000858e5 	.word	0x000858e5
   8138c:	00084239 	.word	0x00084239

00081390 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   81390:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   81392:	2401      	movs	r4, #1
   81394:	4b04      	ldr	r3, [pc, #16]	; (813a8 <main_vendor_enable+0x18>)
   81396:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   81398:	4a04      	ldr	r2, [pc, #16]	; (813ac <main_vendor_enable+0x1c>)
   8139a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8139e:	4804      	ldr	r0, [pc, #16]	; (813b0 <main_vendor_enable+0x20>)
   813a0:	4b04      	ldr	r3, [pc, #16]	; (813b4 <main_vendor_enable+0x24>)
   813a2:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   813a4:	4620      	mov	r0, r4
   813a6:	bd10      	pop	{r4, pc}
   813a8:	20000464 	.word	0x20000464
   813ac:	000821fd 	.word	0x000821fd
   813b0:	20002438 	.word	0x20002438
   813b4:	000843d5 	.word	0x000843d5

000813b8 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   813b8:	2200      	movs	r2, #0
   813ba:	4b01      	ldr	r3, [pc, #4]	; (813c0 <main_vendor_disable+0x8>)
   813bc:	701a      	strb	r2, [r3, #0]
   813be:	4770      	bx	lr
   813c0:	20000464 	.word	0x20000464

000813c4 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
   813c4:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   813c6:	4b10      	ldr	r3, [pc, #64]	; (81408 <main_setup_out_received+0x44>)
   813c8:	4a10      	ldr	r2, [pc, #64]	; (8140c <main_setup_out_received+0x48>)
   813ca:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   813cc:	88da      	ldrh	r2, [r3, #6]
   813ce:	2a40      	cmp	r2, #64	; 0x40
   813d0:	bf28      	it	cs
   813d2:	2240      	movcs	r2, #64	; 0x40
   813d4:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   813d6:	4b0e      	ldr	r3, [pc, #56]	; (81410 <main_setup_out_received+0x4c>)
   813d8:	781b      	ldrb	r3, [r3, #0]
   813da:	b19b      	cbz	r3, 81404 <main_setup_out_received+0x40>
   813dc:	4d0d      	ldr	r5, [pc, #52]	; (81414 <main_setup_out_received+0x50>)
   813de:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   813e2:	3a01      	subs	r2, #1
   813e4:	eb05 0483 	add.w	r4, r5, r3, lsl #2
   813e8:	3b01      	subs	r3, #1
   813ea:	b2db      	uxtb	r3, r3
   813ec:	1ad3      	subs	r3, r2, r3
   813ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        handler_status = naeusb_out_request_handlers[i-1]();
   813f2:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   813f6:	4798      	blx	r3
        if (handler_status == true) {
   813f8:	4603      	mov	r3, r0
   813fa:	b908      	cbnz	r0, 81400 <main_setup_out_received+0x3c>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   813fc:	42ac      	cmp	r4, r5
   813fe:	d1f8      	bne.n	813f2 <main_setup_out_received+0x2e>
        }
    }

    return false;

}
   81400:	4618      	mov	r0, r3
   81402:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81404:	2300      	movs	r3, #0
   81406:	e7fb      	b.n	81400 <main_setup_out_received+0x3c>
   81408:	2000287c 	.word	0x2000287c
   8140c:	200023f8 	.word	0x200023f8
   81410:	20001dd9 	.word	0x20001dd9
   81414:	20001ddc 	.word	0x20001ddc

00081418 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81418:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8141a:	4b0c      	ldr	r3, [pc, #48]	; (8144c <main_setup_in_received+0x34>)
   8141c:	781b      	ldrb	r3, [r3, #0]
   8141e:	b19b      	cbz	r3, 81448 <main_setup_in_received+0x30>
   81420:	4d0b      	ldr	r5, [pc, #44]	; (81450 <main_setup_in_received+0x38>)
   81422:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   81426:	3a01      	subs	r2, #1
   81428:	eb05 0483 	add.w	r4, r5, r3, lsl #2
   8142c:	3b01      	subs	r3, #1
   8142e:	b2db      	uxtb	r3, r3
   81430:	1ad3      	subs	r3, r2, r3
   81432:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        handler_status = naeusb_in_request_handlers[i-1]();
   81436:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8143a:	4798      	blx	r3
        if (handler_status == true) {
   8143c:	4603      	mov	r3, r0
   8143e:	b908      	cbnz	r0, 81444 <main_setup_in_received+0x2c>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   81440:	42ac      	cmp	r4, r5
   81442:	d1f8      	bne.n	81436 <main_setup_in_received+0x1e>
        }
    }

    return false;

   81444:	4618      	mov	r0, r3
   81446:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81448:	2300      	movs	r3, #0
   8144a:	e7fb      	b.n	81444 <main_setup_in_received+0x2c>
   8144c:	20001dd8 	.word	0x20001dd8
   81450:	20001d98 	.word	0x20001d98

00081454 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81454:	4b05      	ldr	r3, [pc, #20]	; (8146c <naeusb_setup_out_received+0x18>)
   81456:	785b      	ldrb	r3, [r3, #1]
   81458:	2b22      	cmp	r3, #34	; 0x22
   8145a:	d104      	bne.n	81466 <naeusb_setup_out_received+0x12>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   8145c:	4a04      	ldr	r2, [pc, #16]	; (81470 <naeusb_setup_out_received+0x1c>)
   8145e:	4b03      	ldr	r3, [pc, #12]	; (8146c <naeusb_setup_out_received+0x18>)
   81460:	611a      	str	r2, [r3, #16]
            return true;
   81462:	2001      	movs	r0, #1
   81464:	4770      	bx	lr
            break;
    }
    return false;
   81466:	2000      	movs	r0, #0
}
   81468:	4770      	bx	lr
   8146a:	bf00      	nop
   8146c:	2000287c 	.word	0x2000287c
   81470:	00081475 	.word	0x00081475

00081474 <naeusb_sam_cfg_out>:
{
   81474:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81476:	4b22      	ldr	r3, [pc, #136]	; (81500 <naeusb_sam_cfg_out+0x8c>)
   81478:	789b      	ldrb	r3, [r3, #2]
   8147a:	3b01      	subs	r3, #1
   8147c:	2b10      	cmp	r3, #16
   8147e:	d83e      	bhi.n	814fe <naeusb_sam_cfg_out+0x8a>
   81480:	e8df f003 	tbb	[pc, r3]
   81484:	3d181409 	.word	0x3d181409
   81488:	3d3d3d3d 	.word	0x3d3d3d3d
   8148c:	3d3d3d3d 	.word	0x3d3d3d3d
   81490:	2c3d3d3d 	.word	0x2c3d3d3d
   81494:	3b          	.byte	0x3b
   81495:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   81496:	203e      	movs	r0, #62	; 0x3e
   81498:	4b1a      	ldr	r3, [pc, #104]	; (81504 <naeusb_sam_cfg_out+0x90>)
   8149a:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   8149c:	4c1a      	ldr	r4, [pc, #104]	; (81508 <naeusb_sam_cfg_out+0x94>)
   8149e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   814a0:	2800      	cmp	r0, #0
   814a2:	d0fc      	beq.n	8149e <naeusb_sam_cfg_out+0x2a>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   814a4:	2010      	movs	r0, #16
   814a6:	4b19      	ldr	r3, [pc, #100]	; (8150c <naeusb_sam_cfg_out+0x98>)
   814a8:	4798      	blx	r3
        break;
   814aa:	bd10      	pop	{r4, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   814ac:	2010      	movs	r0, #16
   814ae:	4b18      	ldr	r3, [pc, #96]	; (81510 <naeusb_sam_cfg_out+0x9c>)
   814b0:	4798      	blx	r3
        break;
   814b2:	bd10      	pop	{r4, pc}
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   814b4:	2201      	movs	r2, #1
   814b6:	210c      	movs	r1, #12
   814b8:	4816      	ldr	r0, [pc, #88]	; (81514 <naeusb_sam_cfg_out+0xa0>)
   814ba:	4b17      	ldr	r3, [pc, #92]	; (81518 <naeusb_sam_cfg_out+0xa4>)
   814bc:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   814be:	4b17      	ldr	r3, [pc, #92]	; (8151c <naeusb_sam_cfg_out+0xa8>)
   814c0:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   814c2:	4b17      	ldr	r3, [pc, #92]	; (81520 <naeusb_sam_cfg_out+0xac>)
   814c4:	685a      	ldr	r2, [r3, #4]
   814c6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   814ca:	d1fb      	bne.n	814c4 <naeusb_sam_cfg_out+0x50>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   814cc:	4a14      	ldr	r2, [pc, #80]	; (81520 <naeusb_sam_cfg_out+0xac>)
   814ce:	6813      	ldr	r3, [r2, #0]
   814d0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   814d4:	f043 0305 	orr.w	r3, r3, #5
   814d8:	6013      	str	r3, [r2, #0]
   814da:	e7fe      	b.n	814da <naeusb_sam_cfg_out+0x66>
   814dc:	4b0f      	ldr	r3, [pc, #60]	; (8151c <naeusb_sam_cfg_out+0xa8>)
   814de:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   814e0:	4b0f      	ldr	r3, [pc, #60]	; (81520 <naeusb_sam_cfg_out+0xac>)
   814e2:	685a      	ldr	r2, [r3, #4]
   814e4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   814e8:	d1fb      	bne.n	814e2 <naeusb_sam_cfg_out+0x6e>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   814ea:	4a0d      	ldr	r2, [pc, #52]	; (81520 <naeusb_sam_cfg_out+0xac>)
   814ec:	6813      	ldr	r3, [r2, #0]
   814ee:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   814f2:	f043 0305 	orr.w	r3, r3, #5
   814f6:	6013      	str	r3, [r2, #0]
   814f8:	e7fe      	b.n	814f8 <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   814fa:	4b0a      	ldr	r3, [pc, #40]	; (81524 <naeusb_sam_cfg_out+0xb0>)
   814fc:	4798      	blx	r3
   814fe:	bd10      	pop	{r4, pc}
   81500:	2000287c 	.word	0x2000287c
   81504:	000849d1 	.word	0x000849d1
   81508:	000849f9 	.word	0x000849f9
   8150c:	00084909 	.word	0x00084909
   81510:	0008496d 	.word	0x0008496d
   81514:	400e0800 	.word	0x400e0800
   81518:	00084111 	.word	0x00084111
   8151c:	00085865 	.word	0x00085865
   81520:	400e1200 	.word	0x400e1200
   81524:	0008333d 	.word	0x0008333d

00081528 <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   81528:	4b05      	ldr	r3, [pc, #20]	; (81540 <naeusb_fw_version_in+0x18>)
   8152a:	2200      	movs	r2, #0
   8152c:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   8152e:	213c      	movs	r1, #60	; 0x3c
   81530:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   81532:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81534:	4a03      	ldr	r2, [pc, #12]	; (81544 <naeusb_fw_version_in+0x1c>)
   81536:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   81538:	2303      	movs	r3, #3
   8153a:	8193      	strh	r3, [r2, #12]
}
   8153c:	2001      	movs	r0, #1
   8153e:	4770      	bx	lr
   81540:	200023b8 	.word	0x200023b8
   81544:	2000287c 	.word	0x2000287c

00081548 <naeusb_build_date_in>:
{
   81548:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   8154a:	4c0a      	ldr	r4, [pc, #40]	; (81574 <naeusb_build_date_in+0x2c>)
   8154c:	2240      	movs	r2, #64	; 0x40
   8154e:	490a      	ldr	r1, [pc, #40]	; (81578 <naeusb_build_date_in+0x30>)
   81550:	4620      	mov	r0, r4
   81552:	4d0a      	ldr	r5, [pc, #40]	; (8157c <naeusb_build_date_in+0x34>)
   81554:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81556:	2320      	movs	r3, #32
   81558:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   8155a:	2237      	movs	r2, #55	; 0x37
   8155c:	4908      	ldr	r1, [pc, #32]	; (81580 <naeusb_build_date_in+0x38>)
   8155e:	f104 0009 	add.w	r0, r4, #9
   81562:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   81564:	4d07      	ldr	r5, [pc, #28]	; (81584 <naeusb_build_date_in+0x3c>)
   81566:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81568:	4620      	mov	r0, r4
   8156a:	4b07      	ldr	r3, [pc, #28]	; (81588 <naeusb_build_date_in+0x40>)
   8156c:	4798      	blx	r3
   8156e:	81a8      	strh	r0, [r5, #12]
}
   81570:	2001      	movs	r0, #1
   81572:	bd38      	pop	{r3, r4, r5, pc}
   81574:	200023b8 	.word	0x200023b8
   81578:	0008cb94 	.word	0x0008cb94
   8157c:	00086eb1 	.word	0x00086eb1
   81580:	0008cb88 	.word	0x0008cb88
   81584:	2000287c 	.word	0x2000287c
   81588:	00086e55 	.word	0x00086e55

0008158c <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   8158c:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   8158e:	4b07      	ldr	r3, [pc, #28]	; (815ac <naeusb_setup_in_received+0x20>)
   81590:	785b      	ldrb	r3, [r3, #1]
   81592:	2b17      	cmp	r3, #23
   81594:	d003      	beq.n	8159e <naeusb_setup_in_received+0x12>
   81596:	2b40      	cmp	r3, #64	; 0x40
   81598:	d004      	beq.n	815a4 <naeusb_setup_in_received+0x18>
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
   8159a:	2000      	movs	r0, #0
}
   8159c:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   8159e:	4b04      	ldr	r3, [pc, #16]	; (815b0 <naeusb_setup_in_received+0x24>)
   815a0:	4798      	blx	r3
   815a2:	bd08      	pop	{r3, pc}
            return naeusb_build_date_in();
   815a4:	4b03      	ldr	r3, [pc, #12]	; (815b4 <naeusb_setup_in_received+0x28>)
   815a6:	4798      	blx	r3
   815a8:	bd08      	pop	{r3, pc}
   815aa:	bf00      	nop
   815ac:	2000287c 	.word	0x2000287c
   815b0:	00081529 	.word	0x00081529
   815b4:	00081549 	.word	0x00081549

000815b8 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   815b8:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   815ba:	4803      	ldr	r0, [pc, #12]	; (815c8 <naeusb_register_handlers+0x10>)
   815bc:	4b03      	ldr	r3, [pc, #12]	; (815cc <naeusb_register_handlers+0x14>)
   815be:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   815c0:	4803      	ldr	r0, [pc, #12]	; (815d0 <naeusb_register_handlers+0x18>)
   815c2:	4b04      	ldr	r3, [pc, #16]	; (815d4 <naeusb_register_handlers+0x1c>)
   815c4:	4798      	blx	r3
   815c6:	bd08      	pop	{r3, pc}
   815c8:	0008158d 	.word	0x0008158d
   815cc:	00081311 	.word	0x00081311
   815d0:	00081455 	.word	0x00081455
   815d4:	00081335 	.word	0x00081335

000815d8 <mpsse_tx_buffer_remaining>:
/*
Gets the number of unprocessed TX bytes in the buffer
*/
static int16_t mpsse_tx_buffer_remaining(void)
{
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   815d8:	4b03      	ldr	r3, [pc, #12]	; (815e8 <mpsse_tx_buffer_remaining+0x10>)
   815da:	f9b3 0003 	ldrsh.w	r0, [r3, #3]
   815de:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
   815e2:	1ac0      	subs	r0, r0, r3
}
   815e4:	b200      	sxth	r0, r0
   815e6:	4770      	bx	lr
   815e8:	20000468 	.word	0x20000468

000815ec <mpsse_setup_in_received>:

/* Handle ctrl transfer on interface 1/2. Mostly used for debug purposes */
bool mpsse_setup_in_received(void)
{
    // don't handle if not sent to our interface
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
   815ec:	4b28      	ldr	r3, [pc, #160]	; (81690 <mpsse_setup_in_received+0xa4>)
   815ee:	889b      	ldrh	r3, [r3, #4]
   815f0:	2b01      	cmp	r3, #1
   815f2:	d001      	beq.n	815f8 <mpsse_setup_in_received+0xc>
        return false;
   815f4:	2000      	movs	r0, #0
   815f6:	4770      	bx	lr
    }

    // For debug, reads a bunch of internal variables back. TODO: change to using a separate buf
    if (udd_g_ctrlreq.req.bRequest == 0xA0) {
   815f8:	4b25      	ldr	r3, [pc, #148]	; (81690 <mpsse_setup_in_received+0xa4>)
   815fa:	785b      	ldrb	r3, [r3, #1]
   815fc:	2ba0      	cmp	r3, #160	; 0xa0
   815fe:	d010      	beq.n	81622 <mpsse_setup_in_received+0x36>
        udd_g_ctrlreq.payload_size = 11;
        return true;
    }

    // Debug commands for reading from internal buffers
    uint16_t wValue = udd_g_ctrlreq.req.wValue;
   81600:	4a23      	ldr	r2, [pc, #140]	; (81690 <mpsse_setup_in_received+0xa4>)
   81602:	8852      	ldrh	r2, [r2, #2]
    if (udd_g_ctrlreq.req.bRequest == 0xA1) {
   81604:	2ba1      	cmp	r3, #161	; 0xa1
   81606:	d036      	beq.n	81676 <mpsse_setup_in_received+0x8a>
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
        udd_g_ctrlreq.payload_size = 256;
    }
    if (udd_g_ctrlreq.req.bRequest == 0xA2) {
   81608:	2ba2      	cmp	r3, #162	; 0xa2
   8160a:	d13f      	bne.n	8168c <mpsse_setup_in_received+0xa0>
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
   8160c:	4b21      	ldr	r3, [pc, #132]	; (81694 <mpsse_setup_in_received+0xa8>)
   8160e:	4413      	add	r3, r2
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
   81610:	4a1f      	ldr	r2, [pc, #124]	; (81690 <mpsse_setup_in_received+0xa4>)
        addr &= ~(0b11);
   81612:	f023 0303 	bic.w	r3, r3, #3
        udd_g_ctrlreq.payload = (void *) addr;
   81616:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 256;
   81618:	f44f 7380 	mov.w	r3, #256	; 0x100
   8161c:	8193      	strh	r3, [r2, #12]
    }
    return true;
   8161e:	2001      	movs	r0, #1
   81620:	4770      	bx	lr
        MPSSE_RX_BUFFER[0] = mpsse_state.cur_cmd.u8;
   81622:	4a1d      	ldr	r2, [pc, #116]	; (81698 <mpsse_setup_in_received+0xac>)
   81624:	7811      	ldrb	r1, [r2, #0]
   81626:	4b1d      	ldr	r3, [pc, #116]	; (8169c <mpsse_setup_in_received+0xb0>)
   81628:	7019      	strb	r1, [r3, #0]
        MPSSE_RX_BUFFER[1] = mpsse_state.tx_idx & 0xFF;
   8162a:	f9b2 1001 	ldrsh.w	r1, [r2, #1]
   8162e:	b2c9      	uxtb	r1, r1
   81630:	7059      	strb	r1, [r3, #1]
        MPSSE_RX_BUFFER[2] = mpsse_state.tx_bytes & 0xFF;
   81632:	f9b2 1003 	ldrsh.w	r1, [r2, #3]
   81636:	b2c9      	uxtb	r1, r1
   81638:	7099      	strb	r1, [r3, #2]
        MPSSE_RX_BUFFER[3] = mpsse_state.rx_bytes & 0xFF;
   8163a:	f9b2 1005 	ldrsh.w	r1, [r2, #5]
   8163e:	b2c9      	uxtb	r1, r1
   81640:	70d9      	strb	r1, [r3, #3]
        MPSSE_RX_BUFFER[4] = mpsse_state.txn_len & 0xFF;
   81642:	f9b2 1007 	ldrsh.w	r1, [r2, #7]
   81646:	b2c9      	uxtb	r1, r1
   81648:	7119      	strb	r1, [r3, #4]
        MPSSE_RX_BUFFER[5] = mpsse_state.txn_lock;
   8164a:	7a91      	ldrb	r1, [r2, #10]
   8164c:	7159      	strb	r1, [r3, #5]
        MPSSE_RX_BUFFER[6] =  mpsse_state.n_processed_cmds & 0xFF;
   8164e:	f8d2 100b 	ldr.w	r1, [r2, #11]
   81652:	b2c8      	uxtb	r0, r1
   81654:	7198      	strb	r0, [r3, #6]
        MPSSE_RX_BUFFER[7] = (mpsse_state.n_processed_cmds >> 8) & 0xFF;
   81656:	f3c1 2007 	ubfx	r0, r1, #8, #8
   8165a:	71d8      	strb	r0, [r3, #7]
        MPSSE_RX_BUFFER[8] = (mpsse_state.n_processed_cmds >> 16) & 0xFF;
   8165c:	f3c1 4007 	ubfx	r0, r1, #16, #8
   81660:	7218      	strb	r0, [r3, #8]
        MPSSE_RX_BUFFER[9] = (mpsse_state.n_processed_cmds >> 24) & 0xFF;
   81662:	0e09      	lsrs	r1, r1, #24
   81664:	7259      	strb	r1, [r3, #9]
        MPSSE_RX_BUFFER[10] = mpsse_state.loopback_en;
   81666:	7a52      	ldrb	r2, [r2, #9]
   81668:	729a      	strb	r2, [r3, #10]
        udd_g_ctrlreq.payload = MPSSE_RX_BUFFER;
   8166a:	4a09      	ldr	r2, [pc, #36]	; (81690 <mpsse_setup_in_received+0xa4>)
   8166c:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 11;
   8166e:	230b      	movs	r3, #11
   81670:	8193      	strh	r3, [r2, #12]
        return true;
   81672:	2001      	movs	r0, #1
   81674:	4770      	bx	lr
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
   81676:	4b09      	ldr	r3, [pc, #36]	; (8169c <mpsse_setup_in_received+0xb0>)
   81678:	4413      	add	r3, r2
        udd_g_ctrlreq.payload = (void *) addr;
   8167a:	4a05      	ldr	r2, [pc, #20]	; (81690 <mpsse_setup_in_received+0xa4>)
        addr &= ~(0b11);
   8167c:	f023 0303 	bic.w	r3, r3, #3
        udd_g_ctrlreq.payload = (void *) addr;
   81680:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 256;
   81682:	f44f 7380 	mov.w	r3, #256	; 0x100
   81686:	8193      	strh	r3, [r2, #12]
    return true;
   81688:	2001      	movs	r0, #1
   8168a:	4770      	bx	lr
   8168c:	2001      	movs	r0, #1
}
   8168e:	4770      	bx	lr
   81690:	2000287c 	.word	0x2000287c
   81694:	20080040 	.word	0x20080040
   81698:	20000468 	.word	0x20000468
   8169c:	20080000 	.word	0x20080000

000816a0 <mpsse_setup_out_received>:
{
   816a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   816a2:	b083      	sub	sp, #12
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   816a4:	4b2d      	ldr	r3, [pc, #180]	; (8175c <mpsse_setup_out_received+0xbc>)
   816a6:	789b      	ldrb	r3, [r3, #2]
   816a8:	2b42      	cmp	r3, #66	; 0x42
   816aa:	d008      	beq.n	816be <mpsse_setup_out_received+0x1e>
    if ((udd_g_ctrlreq.req.wIndex != 0x01) && (udd_g_ctrlreq.req.wIndex != 0x02)) {
   816ac:	4b2b      	ldr	r3, [pc, #172]	; (8175c <mpsse_setup_out_received+0xbc>)
   816ae:	889b      	ldrh	r3, [r3, #4]
   816b0:	3b01      	subs	r3, #1
   816b2:	b29b      	uxth	r3, r3
   816b4:	2b01      	cmp	r3, #1
   816b6:	d912      	bls.n	816de <mpsse_setup_out_received+0x3e>
        return false;
   816b8:	2000      	movs	r0, #0
}
   816ba:	b003      	add	sp, #12
   816bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   816be:	4b27      	ldr	r3, [pc, #156]	; (8175c <mpsse_setup_out_received+0xbc>)
   816c0:	785b      	ldrb	r3, [r3, #1]
   816c2:	2b22      	cmp	r3, #34	; 0x22
   816c4:	d1f2      	bne.n	816ac <mpsse_setup_out_received+0xc>
        udc_stop();
   816c6:	4b26      	ldr	r3, [pc, #152]	; (81760 <mpsse_setup_out_received+0xc0>)
   816c8:	4798      	blx	r3
        switch_configurations(); 
   816ca:	4b26      	ldr	r3, [pc, #152]	; (81764 <mpsse_setup_out_received+0xc4>)
   816cc:	4798      	blx	r3
        mpsse_state.enabled = 1;
   816ce:	4b26      	ldr	r3, [pc, #152]	; (81768 <mpsse_setup_out_received+0xc8>)
   816d0:	2401      	movs	r4, #1
   816d2:	749c      	strb	r4, [r3, #18]
        mpsse_state.txn_lock = 1;
   816d4:	729c      	strb	r4, [r3, #10]
        udc_start();
   816d6:	4b25      	ldr	r3, [pc, #148]	; (8176c <mpsse_setup_out_received+0xcc>)
   816d8:	4798      	blx	r3
        return true;
   816da:	4620      	mov	r0, r4
   816dc:	e7ed      	b.n	816ba <mpsse_setup_out_received+0x1a>
    if ((udd_g_ctrlreq.req.bRequest == SIO_RESET_REQUEST)) {
   816de:	4b1f      	ldr	r3, [pc, #124]	; (8175c <mpsse_setup_out_received+0xbc>)
   816e0:	785b      	ldrb	r3, [r3, #1]
   816e2:	b10b      	cbz	r3, 816e8 <mpsse_setup_out_received+0x48>
    return true;
   816e4:	2001      	movs	r0, #1
   816e6:	e7e8      	b.n	816ba <mpsse_setup_out_received+0x1a>
        memset(MPSSE_RX_BUFFER, 0, sizeof(MPSSE_RX_BUFFER));
   816e8:	4e21      	ldr	r6, [pc, #132]	; (81770 <mpsse_setup_out_received+0xd0>)
   816ea:	2540      	movs	r5, #64	; 0x40
   816ec:	462a      	mov	r2, r5
   816ee:	2100      	movs	r1, #0
   816f0:	4630      	mov	r0, r6
   816f2:	4c20      	ldr	r4, [pc, #128]	; (81774 <mpsse_setup_out_received+0xd4>)
   816f4:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER, 0, sizeof(MPSSE_TX_BUFFER_BAK));
   816f6:	1977      	adds	r7, r6, r5
   816f8:	462a      	mov	r2, r5
   816fa:	2100      	movs	r1, #0
   816fc:	4638      	mov	r0, r7
   816fe:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER_BAK, 0, sizeof(MPSSE_TX_BUFFER_BAK));
   81700:	462a      	mov	r2, r5
   81702:	2100      	movs	r1, #0
   81704:	f106 0090 	add.w	r0, r6, #144	; 0x90
   81708:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_OUT);
   8170a:	2006      	movs	r0, #6
   8170c:	4c1a      	ldr	r4, [pc, #104]	; (81778 <mpsse_setup_out_received+0xd8>)
   8170e:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_IN);
   81710:	2085      	movs	r0, #133	; 0x85
   81712:	47a0      	blx	r4
        gpio_configure_pin(MPSSE_DIN_GPIO, PIO_DEFAULT | PIO_TYPE_PIO_INPUT);
   81714:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81718:	200d      	movs	r0, #13
   8171a:	4c18      	ldr	r4, [pc, #96]	; (8177c <mpsse_setup_out_received+0xdc>)
   8171c:	47a0      	blx	r4
        gpio_configure_pin(MPSSE_DOUT_GPIO, PIO_OUTPUT_0);
   8171e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81722:	200e      	movs	r0, #14
   81724:	47a0      	blx	r4
        gpio_configure_pin(MPSSE_SCK_GPIO, PIO_OUTPUT_0);
   81726:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8172a:	200f      	movs	r0, #15
   8172c:	47a0      	blx	r4
        gpio_configure_pin(MPSSE_TMS_GPIO, PIO_OUTPUT_0);
   8172e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81732:	2014      	movs	r0, #20
   81734:	47a0      	blx	r4
        mpsse_state.enabled = 1;
   81736:	4b0c      	ldr	r3, [pc, #48]	; (81768 <mpsse_setup_out_received+0xc8>)
   81738:	2401      	movs	r4, #1
   8173a:	749c      	strb	r4, [r3, #18]
        mpsse_state.txn_lock = 1;
   8173c:	729c      	strb	r4, [r3, #10]
        mpsse_state.n_processed_cmds = 0;
   8173e:	2100      	movs	r1, #0
   81740:	72d9      	strb	r1, [r3, #11]
   81742:	7319      	strb	r1, [r3, #12]
   81744:	7359      	strb	r1, [r3, #13]
   81746:	7399      	strb	r1, [r3, #14]
        mpsse_state.swd_mode = 0;
   81748:	7419      	strb	r1, [r3, #16]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   8174a:	4b0d      	ldr	r3, [pc, #52]	; (81780 <mpsse_setup_out_received+0xe0>)
   8174c:	9300      	str	r3, [sp, #0]
   8174e:	462b      	mov	r3, r5
   81750:	463a      	mov	r2, r7
   81752:	2006      	movs	r0, #6
   81754:	4d0b      	ldr	r5, [pc, #44]	; (81784 <mpsse_setup_out_received+0xe4>)
   81756:	47a8      	blx	r5
    return true;
   81758:	4620      	mov	r0, r4
   8175a:	e7ae      	b.n	816ba <mpsse_setup_out_received+0x1a>
   8175c:	2000287c 	.word	0x2000287c
   81760:	00082c81 	.word	0x00082c81
   81764:	000832e5 	.word	0x000832e5
   81768:	20000468 	.word	0x20000468
   8176c:	00082c2d 	.word	0x00082c2d
   81770:	20080000 	.word	0x20080000
   81774:	00086bcd 	.word	0x00086bcd
   81778:	00085ecd 	.word	0x00085ecd
   8177c:	00084725 	.word	0x00084725
   81780:	00081789 	.word	0x00081789
   81784:	00085b59 	.word	0x00085b59

00081788 <mpsse_vendor_bulk_out_received>:
}


void mpsse_vendor_bulk_out_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81788:	b5f0      	push	{r4, r5, r6, r7, lr}
   8178a:	b083      	sub	sp, #12
    // we just receive stuff here, then handle in main()
    if (UDD_EP_TRANSFER_OK != status) {
   8178c:	b1c0      	cbz	r0, 817c0 <mpsse_vendor_bulk_out_received+0x38>
        // restart
        if (mpsse_state.tx_req) {
   8178e:	4b1f      	ldr	r3, [pc, #124]	; (8180c <mpsse_vendor_bulk_out_received+0x84>)
   81790:	7bdb      	ldrb	r3, [r3, #15]
   81792:	b963      	cbnz	r3, 817ae <mpsse_vendor_bulk_out_received+0x26>
            udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER_BAK, 
                sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);

        }
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, 
   81794:	4b1e      	ldr	r3, [pc, #120]	; (81810 <mpsse_vendor_bulk_out_received+0x88>)
   81796:	9300      	str	r3, [sp, #0]
   81798:	2340      	movs	r3, #64	; 0x40
   8179a:	4a1e      	ldr	r2, [pc, #120]	; (81814 <mpsse_vendor_bulk_out_received+0x8c>)
   8179c:	2100      	movs	r1, #0
   8179e:	2006      	movs	r0, #6
   817a0:	4c1d      	ldr	r4, [pc, #116]	; (81818 <mpsse_vendor_bulk_out_received+0x90>)
   817a2:	47a0      	blx	r4
            sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
        mpsse_state.txn_lock = 1;
   817a4:	2201      	movs	r2, #1
   817a6:	4b19      	ldr	r3, [pc, #100]	; (8180c <mpsse_vendor_bulk_out_received+0x84>)
   817a8:	729a      	strb	r2, [r3, #10]
        mpsse_state.tx_bytes = nb_transfered;
    }
    mpsse_state.tx_req = 0;
    mpsse_state.tx_idx = 0;
    mpsse_state.txn_lock = 0;
}
   817aa:	b003      	add	sp, #12
   817ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER_BAK, 
   817ae:	4b18      	ldr	r3, [pc, #96]	; (81810 <mpsse_vendor_bulk_out_received+0x88>)
   817b0:	9300      	str	r3, [sp, #0]
   817b2:	2340      	movs	r3, #64	; 0x40
   817b4:	4a19      	ldr	r2, [pc, #100]	; (8181c <mpsse_vendor_bulk_out_received+0x94>)
   817b6:	2100      	movs	r1, #0
   817b8:	2006      	movs	r0, #6
   817ba:	4c17      	ldr	r4, [pc, #92]	; (81818 <mpsse_vendor_bulk_out_received+0x90>)
   817bc:	47a0      	blx	r4
   817be:	e7e9      	b.n	81794 <mpsse_vendor_bulk_out_received+0xc>
   817c0:	460e      	mov	r6, r1
    if (mpsse_state.tx_req) {
   817c2:	4b12      	ldr	r3, [pc, #72]	; (8180c <mpsse_vendor_bulk_out_received+0x84>)
   817c4:	7bdb      	ldrb	r3, [r3, #15]
   817c6:	b1eb      	cbz	r3, 81804 <mpsse_vendor_bulk_out_received+0x7c>
        for (uint16_t i = 0; i < nb_transfered; i++) {
   817c8:	b179      	cbz	r1, 817ea <mpsse_vendor_bulk_out_received+0x62>
   817ca:	2400      	movs	r4, #0
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
   817cc:	4f14      	ldr	r7, [pc, #80]	; (81820 <mpsse_vendor_bulk_out_received+0x98>)
   817ce:	4d15      	ldr	r5, [pc, #84]	; (81824 <mpsse_vendor_bulk_out_received+0x9c>)
   817d0:	47b8      	blx	r7
   817d2:	4420      	add	r0, r4
   817d4:	192b      	adds	r3, r5, r4
   817d6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   817da:	b2db      	uxtb	r3, r3
   817dc:	4428      	add	r0, r5
   817de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        for (uint16_t i = 0; i < nb_transfered; i++) {
   817e2:	3401      	adds	r4, #1
   817e4:	b2a4      	uxth	r4, r4
   817e6:	42b4      	cmp	r4, r6
   817e8:	d3f2      	bcc.n	817d0 <mpsse_vendor_bulk_out_received+0x48>
        mpsse_state.tx_bytes = mpsse_tx_buffer_remaining() + nb_transfered;
   817ea:	4b0d      	ldr	r3, [pc, #52]	; (81820 <mpsse_vendor_bulk_out_received+0x98>)
   817ec:	4798      	blx	r3
   817ee:	4430      	add	r0, r6
   817f0:	4b06      	ldr	r3, [pc, #24]	; (8180c <mpsse_vendor_bulk_out_received+0x84>)
   817f2:	f8a3 0003 	strh.w	r0, [r3, #3]
    mpsse_state.tx_req = 0;
   817f6:	4b05      	ldr	r3, [pc, #20]	; (8180c <mpsse_vendor_bulk_out_received+0x84>)
   817f8:	2200      	movs	r2, #0
   817fa:	73da      	strb	r2, [r3, #15]
    mpsse_state.tx_idx = 0;
   817fc:	705a      	strb	r2, [r3, #1]
   817fe:	709a      	strb	r2, [r3, #2]
    mpsse_state.txn_lock = 0;
   81800:	729a      	strb	r2, [r3, #10]
   81802:	e7d2      	b.n	817aa <mpsse_vendor_bulk_out_received+0x22>
        mpsse_state.tx_bytes = nb_transfered;
   81804:	4b01      	ldr	r3, [pc, #4]	; (8180c <mpsse_vendor_bulk_out_received+0x84>)
   81806:	f8a3 1003 	strh.w	r1, [r3, #3]
   8180a:	e7f4      	b.n	817f6 <mpsse_vendor_bulk_out_received+0x6e>
   8180c:	20000468 	.word	0x20000468
   81810:	00081789 	.word	0x00081789
   81814:	20080040 	.word	0x20080040
   81818:	00085b59 	.word	0x00085b59
   8181c:	20080090 	.word	0x20080090
   81820:	000815d9 	.word	0x000815d9
   81824:	20080000 	.word	0x20080000

00081828 <mpsse_vendor_bulk_in_received>:

void mpsse_vendor_bulk_in_received(udd_ep_status_t status, iram_size_t nb_transferred, udd_ep_id_t ep)
{
   81828:	b530      	push	{r4, r5, lr}
   8182a:	b083      	sub	sp, #12
    if (UDD_EP_TRANSFER_OK != status) {
   8182c:	bb08      	cbnz	r0, 81872 <mpsse_vendor_bulk_in_received+0x4a>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
        return;
    }
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
   8182e:	4b1a      	ldr	r3, [pc, #104]	; (81898 <mpsse_vendor_bulk_in_received+0x70>)
   81830:	f9b3 5005 	ldrsh.w	r5, [r3, #5]
   81834:	1a6c      	subs	r4, r5, r1
   81836:	d00b      	beq.n	81850 <mpsse_vendor_bulk_in_received+0x28>
   81838:	2200      	movs	r2, #0
   8183a:	4613      	mov	r3, r2
        // if we haven't finished sending, move the rest of the stuff to the start of the buffer
        MPSSE_RX_BUFFER[i] = MPSSE_RX_BUFFER[nb_transferred + i];
   8183c:	4817      	ldr	r0, [pc, #92]	; (8189c <mpsse_vendor_bulk_in_received+0x74>)
   8183e:	440a      	add	r2, r1
   81840:	5c82      	ldrb	r2, [r0, r2]
   81842:	b2d2      	uxtb	r2, r2
   81844:	54c2      	strb	r2, [r0, r3]
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
   81846:	3301      	adds	r3, #1
   81848:	b29b      	uxth	r3, r3
   8184a:	461a      	mov	r2, r3
   8184c:	42a3      	cmp	r3, r4
   8184e:	d3f6      	bcc.n	8183e <mpsse_vendor_bulk_in_received+0x16>
    }
    mpsse_state.rx_bytes -= nb_transferred;
   81850:	1a69      	subs	r1, r5, r1
   81852:	b20b      	sxth	r3, r1
   81854:	4a10      	ldr	r2, [pc, #64]	; (81898 <mpsse_vendor_bulk_in_received+0x70>)
   81856:	f8a2 3005 	strh.w	r3, [r2, #5]
    
    if (mpsse_state.rx_bytes) {
   8185a:	b9ab      	cbnz	r3, 81888 <mpsse_vendor_bulk_in_received+0x60>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
    } else {
        // always have 2 bytes for status
        mpsse_state.rx_bytes = 2;
   8185c:	4a0e      	ldr	r2, [pc, #56]	; (81898 <mpsse_vendor_bulk_in_received+0x70>)
   8185e:	2300      	movs	r3, #0
   81860:	2102      	movs	r1, #2
   81862:	7151      	strb	r1, [r2, #5]
   81864:	7193      	strb	r3, [r2, #6]
        MPSSE_RX_BUFFER[0] = 0x00;
   81866:	490d      	ldr	r1, [pc, #52]	; (8189c <mpsse_vendor_bulk_in_received+0x74>)
   81868:	700b      	strb	r3, [r1, #0]
        MPSSE_RX_BUFFER[1] = 0x00;
   8186a:	704b      	strb	r3, [r1, #1]
        mpsse_state.txn_lock = 0;
   8186c:	7293      	strb	r3, [r2, #10]
    }

}
   8186e:	b003      	add	sp, #12
   81870:	bd30      	pop	{r4, r5, pc}
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   81872:	4b09      	ldr	r3, [pc, #36]	; (81898 <mpsse_vendor_bulk_in_received+0x70>)
   81874:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
   81878:	4a09      	ldr	r2, [pc, #36]	; (818a0 <mpsse_vendor_bulk_in_received+0x78>)
   8187a:	9200      	str	r2, [sp, #0]
   8187c:	4a07      	ldr	r2, [pc, #28]	; (8189c <mpsse_vendor_bulk_in_received+0x74>)
   8187e:	2100      	movs	r1, #0
   81880:	2085      	movs	r0, #133	; 0x85
   81882:	4c08      	ldr	r4, [pc, #32]	; (818a4 <mpsse_vendor_bulk_in_received+0x7c>)
   81884:	47a0      	blx	r4
        return;
   81886:	e7f2      	b.n	8186e <mpsse_vendor_bulk_in_received+0x46>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   81888:	4a05      	ldr	r2, [pc, #20]	; (818a0 <mpsse_vendor_bulk_in_received+0x78>)
   8188a:	9200      	str	r2, [sp, #0]
   8188c:	4a03      	ldr	r2, [pc, #12]	; (8189c <mpsse_vendor_bulk_in_received+0x74>)
   8188e:	2100      	movs	r1, #0
   81890:	2085      	movs	r0, #133	; 0x85
   81892:	4c04      	ldr	r4, [pc, #16]	; (818a4 <mpsse_vendor_bulk_in_received+0x7c>)
   81894:	47a0      	blx	r4
   81896:	e7ea      	b.n	8186e <mpsse_vendor_bulk_in_received+0x46>
   81898:	20000468 	.word	0x20000468
   8189c:	20080000 	.word	0x20080000
   818a0:	00081829 	.word	0x00081829
   818a4:	00085b59 	.word	0x00085b59

000818a8 <mpsse_enabled>:
}
   818a8:	4b01      	ldr	r3, [pc, #4]	; (818b0 <mpsse_enabled+0x8>)
   818aa:	7c98      	ldrb	r0, [r3, #18]
   818ac:	4770      	bx	lr
   818ae:	bf00      	nop
   818b0:	20000468 	.word	0x20000468

000818b4 <mpsse_send_bit>:
{
   818b4:	b530      	push	{r4, r5, lr}
   818b6:	b083      	sub	sp, #12
    value &= 0x01;
   818b8:	f000 0401 	and.w	r4, r0, #1
    if (mpsse_state.loopback_en) {
   818bc:	4b0d      	ldr	r3, [pc, #52]	; (818f4 <mpsse_send_bit+0x40>)
   818be:	7a5b      	ldrb	r3, [r3, #9]
   818c0:	b98b      	cbnz	r3, 818e6 <mpsse_send_bit+0x32>
    if (value) {
   818c2:	b19c      	cbz	r4, 818ec <mpsse_send_bit+0x38>
        gpio_set_pin_high(dpin);
   818c4:	200e      	movs	r0, #14
   818c6:	4b0c      	ldr	r3, [pc, #48]	; (818f8 <mpsse_send_bit+0x44>)
   818c8:	4798      	blx	r3
    volatile uint8_t i = 0;
   818ca:	2300      	movs	r3, #0
   818cc:	f88d 3007 	strb.w	r3, [sp, #7]
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   818d0:	200f      	movs	r0, #15
   818d2:	4d0a      	ldr	r5, [pc, #40]	; (818fc <mpsse_send_bit+0x48>)
   818d4:	47a8      	blx	r5
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   818d6:	200d      	movs	r0, #13
   818d8:	4b09      	ldr	r3, [pc, #36]	; (81900 <mpsse_send_bit+0x4c>)
   818da:	4798      	blx	r3
   818dc:	1c04      	adds	r4, r0, #0
   818de:	bf18      	it	ne
   818e0:	2401      	movne	r4, #1
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   818e2:	200f      	movs	r0, #15
   818e4:	47a8      	blx	r5
}
   818e6:	4620      	mov	r0, r4
   818e8:	b003      	add	sp, #12
   818ea:	bd30      	pop	{r4, r5, pc}
        gpio_set_pin_low(dpin);
   818ec:	200e      	movs	r0, #14
   818ee:	4b05      	ldr	r3, [pc, #20]	; (81904 <mpsse_send_bit+0x50>)
   818f0:	4798      	blx	r3
   818f2:	e7ea      	b.n	818ca <mpsse_send_bit+0x16>
   818f4:	20000468 	.word	0x20000468
   818f8:	000846cf 	.word	0x000846cf
   818fc:	00084703 	.word	0x00084703
   81900:	000846b3 	.word	0x000846b3
   81904:	000846e9 	.word	0x000846e9

00081908 <mpsse_swd_send_bit>:
{
   81908:	b530      	push	{r4, r5, lr}
   8190a:	b083      	sub	sp, #12
    if (mpsse_state.swd_out_en) {
   8190c:	4b10      	ldr	r3, [pc, #64]	; (81950 <mpsse_swd_send_bit+0x48>)
   8190e:	7c5b      	ldrb	r3, [r3, #17]
   81910:	b13b      	cbz	r3, 81922 <mpsse_swd_send_bit+0x1a>
        if (value) {
   81912:	f010 0f01 	tst.w	r0, #1
            gpio_set_pin_high(dpin);
   81916:	f04f 0014 	mov.w	r0, #20
   8191a:	bf14      	ite	ne
   8191c:	4b0d      	ldrne	r3, [pc, #52]	; (81954 <mpsse_swd_send_bit+0x4c>)
            gpio_set_pin_low(dpin);
   8191e:	4b0e      	ldreq	r3, [pc, #56]	; (81958 <mpsse_swd_send_bit+0x50>)
   81920:	4798      	blx	r3
    volatile uint8_t i = 0;
   81922:	2300      	movs	r3, #0
   81924:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!mpsse_state.swd_out_en)
   81928:	4b09      	ldr	r3, [pc, #36]	; (81950 <mpsse_swd_send_bit+0x48>)
   8192a:	7c5b      	ldrb	r3, [r3, #17]
   8192c:	b143      	cbz	r3, 81940 <mpsse_swd_send_bit+0x38>
    uint8_t read_value = 0;
   8192e:	2500      	movs	r5, #0
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   81930:	200f      	movs	r0, #15
   81932:	4c0a      	ldr	r4, [pc, #40]	; (8195c <mpsse_swd_send_bit+0x54>)
   81934:	47a0      	blx	r4
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   81936:	200f      	movs	r0, #15
   81938:	47a0      	blx	r4
}
   8193a:	4628      	mov	r0, r5
   8193c:	b003      	add	sp, #12
   8193e:	bd30      	pop	{r4, r5, pc}
        read_value = gpio_pin_is_high(dpin);
   81940:	2014      	movs	r0, #20
   81942:	4b07      	ldr	r3, [pc, #28]	; (81960 <mpsse_swd_send_bit+0x58>)
   81944:	4798      	blx	r3
   81946:	1c05      	adds	r5, r0, #0
   81948:	bf18      	it	ne
   8194a:	2501      	movne	r5, #1
   8194c:	e7f0      	b.n	81930 <mpsse_swd_send_bit+0x28>
   8194e:	bf00      	nop
   81950:	20000468 	.word	0x20000468
   81954:	000846cf 	.word	0x000846cf
   81958:	000846e9 	.word	0x000846e9
   8195c:	00084703 	.word	0x00084703
   81960:	000846b3 	.word	0x000846b3

00081964 <mpsse_send_bits>:
{
   81964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (uint8_t i = 0; i < num_bits; i++) {
   81968:	460c      	mov	r4, r1
   8196a:	2900      	cmp	r1, #0
   8196c:	d040      	beq.n	819f0 <mpsse_send_bits+0x8c>
   8196e:	4680      	mov	r8, r0
   81970:	f101 39ff 	add.w	r9, r1, #4294967295
   81974:	fa5f f989 	uxtb.w	r9, r9
   81978:	f109 0901 	add.w	r9, r9, #1
   8197c:	2607      	movs	r6, #7
   8197e:	2500      	movs	r5, #0
   81980:	462c      	mov	r4, r5
        if (mpsse_state.cur_cmd.b.lendian) {
   81982:	4f1d      	ldr	r7, [pc, #116]	; (819f8 <mpsse_send_bits+0x94>)
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   81984:	f8df b074 	ldr.w	fp, [pc, #116]	; 819fc <mpsse_send_bits+0x98>
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   81988:	f8df a074 	ldr.w	sl, [pc, #116]	; 81a00 <mpsse_send_bits+0x9c>
   8198c:	e00b      	b.n	819a6 <mpsse_send_bits+0x42>
                read_value |= mpsse_send_bit((value >> i) & 0x01) << 7;
   8198e:	fa48 f005 	asr.w	r0, r8, r5
   81992:	f000 0001 	and.w	r0, r0, #1
   81996:	47d8      	blx	fp
   81998:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
   8199c:	b2e4      	uxtb	r4, r4
   8199e:	3501      	adds	r5, #1
   819a0:	3e01      	subs	r6, #1
    for (uint8_t i = 0; i < num_bits; i++) {
   819a2:	454d      	cmp	r5, r9
   819a4:	d024      	beq.n	819f0 <mpsse_send_bits+0x8c>
        if (mpsse_state.cur_cmd.b.lendian) {
   819a6:	783b      	ldrb	r3, [r7, #0]
   819a8:	f013 0f08 	tst.w	r3, #8
   819ac:	d00c      	beq.n	819c8 <mpsse_send_bits+0x64>
            read_value >>= 1;
   819ae:	0864      	lsrs	r4, r4, #1
            if (mpsse_state.swd_mode)
   819b0:	7c3b      	ldrb	r3, [r7, #16]
   819b2:	2b00      	cmp	r3, #0
   819b4:	d0eb      	beq.n	8198e <mpsse_send_bits+0x2a>
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
   819b6:	fa48 f005 	asr.w	r0, r8, r5
   819ba:	f000 0001 	and.w	r0, r0, #1
   819be:	47d0      	blx	sl
   819c0:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
   819c4:	b2e4      	uxtb	r4, r4
   819c6:	e7ea      	b.n	8199e <mpsse_send_bits+0x3a>
            if (mpsse_state.swd_mode)
   819c8:	7c3b      	ldrb	r3, [r7, #16]
   819ca:	b143      	cbz	r3, 819de <mpsse_send_bits+0x7a>
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   819cc:	fa48 f006 	asr.w	r0, r8, r6
   819d0:	f000 0001 	and.w	r0, r0, #1
   819d4:	47d0      	blx	sl
   819d6:	40b0      	lsls	r0, r6
   819d8:	4320      	orrs	r0, r4
   819da:	b2c4      	uxtb	r4, r0
   819dc:	e7df      	b.n	8199e <mpsse_send_bits+0x3a>
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   819de:	fa48 f006 	asr.w	r0, r8, r6
   819e2:	f000 0001 	and.w	r0, r0, #1
   819e6:	47d8      	blx	fp
   819e8:	40b0      	lsls	r0, r6
   819ea:	4320      	orrs	r0, r4
   819ec:	b2c4      	uxtb	r4, r0
   819ee:	e7d6      	b.n	8199e <mpsse_send_bits+0x3a>
}
   819f0:	4620      	mov	r0, r4
   819f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   819f6:	bf00      	nop
   819f8:	20000468 	.word	0x20000468
   819fc:	000818b5 	.word	0x000818b5
   81a00:	00081909 	.word	0x00081909

00081a04 <mpsse_send_byte>:
{
   81a04:	b508      	push	{r3, lr}
    return mpsse_send_bits(value, 8);
   81a06:	2108      	movs	r1, #8
   81a08:	4b01      	ldr	r3, [pc, #4]	; (81a10 <mpsse_send_byte+0xc>)
   81a0a:	4798      	blx	r3
}
   81a0c:	bd08      	pop	{r3, pc}
   81a0e:	bf00      	nop
   81a10:	00081965 	.word	0x00081965

00081a14 <mpsse_tms_bit_send>:
{
   81a14:	b530      	push	{r4, r5, lr}
   81a16:	b083      	sub	sp, #12
    if (value) {
   81a18:	f010 0f01 	tst.w	r0, #1
        gpio_set_pin_high(dpin);
   81a1c:	f04f 0014 	mov.w	r0, #20
   81a20:	bf14      	ite	ne
   81a22:	4b0b      	ldrne	r3, [pc, #44]	; (81a50 <mpsse_tms_bit_send+0x3c>)
        gpio_set_pin_low(dpin);
   81a24:	4b0b      	ldreq	r3, [pc, #44]	; (81a54 <mpsse_tms_bit_send+0x40>)
   81a26:	4798      	blx	r3
    volatile uint8_t i = 0;
   81a28:	2300      	movs	r3, #0
   81a2a:	f88d 3007 	strb.w	r3, [sp, #7]
    read_value = gpio_pin_is_high(dpin);
   81a2e:	2014      	movs	r0, #20
   81a30:	4d09      	ldr	r5, [pc, #36]	; (81a58 <mpsse_tms_bit_send+0x44>)
   81a32:	47a8      	blx	r5
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   81a34:	200f      	movs	r0, #15
   81a36:	4c09      	ldr	r4, [pc, #36]	; (81a5c <mpsse_tms_bit_send+0x48>)
   81a38:	47a0      	blx	r4
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   81a3a:	200d      	movs	r0, #13
   81a3c:	47a8      	blx	r5
   81a3e:	4605      	mov	r5, r0
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   81a40:	200f      	movs	r0, #15
   81a42:	47a0      	blx	r4
}
   81a44:	1c28      	adds	r0, r5, #0
   81a46:	bf18      	it	ne
   81a48:	2001      	movne	r0, #1
   81a4a:	b003      	add	sp, #12
   81a4c:	bd30      	pop	{r4, r5, pc}
   81a4e:	bf00      	nop
   81a50:	000846cf 	.word	0x000846cf
   81a54:	000846e9 	.word	0x000846e9
   81a58:	000846b3 	.word	0x000846b3
   81a5c:	00084703 	.word	0x00084703

00081a60 <mpsse_tms_send>:
{
   81a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a64:	4607      	mov	r7, r0
   81a66:	460e      	mov	r6, r1
    if (num_bits == 7) {
   81a68:	2907      	cmp	r1, #7
   81a6a:	d008      	beq.n	81a7e <mpsse_tms_send+0x1e>
    for (; i < num_bits; i++) {
   81a6c:	b391      	cbz	r1, 81ad4 <mpsse_tms_send+0x74>
    uint8_t i = 0;
   81a6e:	2400      	movs	r4, #0
   81a70:	f04f 0a00 	mov.w	sl, #0
        if (mpsse_state.cur_cmd.b.lendian) {
   81a74:	f8df 906c 	ldr.w	r9, [pc, #108]	; 81ae4 <mpsse_tms_send+0x84>
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   81a78:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81ae8 <mpsse_tms_send+0x88>
   81a7c:	e018      	b.n	81ab0 <mpsse_tms_send+0x50>
        if (bitval) {
   81a7e:	09c3      	lsrs	r3, r0, #7
            gpio_set_pin_high(MPSSE_DOUT_GPIO);
   81a80:	f04f 000e 	mov.w	r0, #14
   81a84:	bf14      	ite	ne
   81a86:	4b15      	ldrne	r3, [pc, #84]	; (81adc <mpsse_tms_send+0x7c>)
            gpio_set_pin_low(MPSSE_DOUT_GPIO);
   81a88:	4b15      	ldreq	r3, [pc, #84]	; (81ae0 <mpsse_tms_send+0x80>)
   81a8a:	4798      	blx	r3
    uint8_t i = 0;
   81a8c:	2401      	movs	r4, #1
   81a8e:	e7ef      	b.n	81a70 <mpsse_tms_send+0x10>
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   81a90:	f1c4 0507 	rsb	r5, r4, #7
   81a94:	fa47 f005 	asr.w	r0, r7, r5
   81a98:	f000 0001 	and.w	r0, r0, #1
   81a9c:	47c0      	blx	r8
   81a9e:	40a8      	lsls	r0, r5
   81aa0:	ea40 000a 	orr.w	r0, r0, sl
   81aa4:	fa5f fa80 	uxtb.w	sl, r0
    for (; i < num_bits; i++) {
   81aa8:	3401      	adds	r4, #1
   81aaa:	b2e4      	uxtb	r4, r4
   81aac:	42a6      	cmp	r6, r4
   81aae:	d912      	bls.n	81ad6 <mpsse_tms_send+0x76>
        if (mpsse_state.cur_cmd.b.lendian) {
   81ab0:	f899 3000 	ldrb.w	r3, [r9]
   81ab4:	f013 0f08 	tst.w	r3, #8
   81ab8:	d0ea      	beq.n	81a90 <mpsse_tms_send+0x30>
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
   81aba:	fa47 f004 	asr.w	r0, r7, r4
   81abe:	f000 0001 	and.w	r0, r0, #1
   81ac2:	47c0      	blx	r8
   81ac4:	f1c4 0307 	rsb	r3, r4, #7
   81ac8:	4098      	lsls	r0, r3
   81aca:	ea40 000a 	orr.w	r0, r0, sl
   81ace:	fa5f fa80 	uxtb.w	sl, r0
   81ad2:	e7e9      	b.n	81aa8 <mpsse_tms_send+0x48>
    for (; i < num_bits; i++) {
   81ad4:	468a      	mov	sl, r1
}
   81ad6:	4650      	mov	r0, sl
   81ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81adc:	000846cf 	.word	0x000846cf
   81ae0:	000846e9 	.word	0x000846e9
   81ae4:	20000468 	.word	0x20000468
   81ae8:	00081a15 	.word	0x00081a15

00081aec <mpsse_handle_transmission>:
{
   81aec:	b530      	push	{r4, r5, lr}
   81aee:	b083      	sub	sp, #12
    if (mpsse_state.txn_len == 0) { 
   81af0:	4b60      	ldr	r3, [pc, #384]	; (81c74 <mpsse_handle_transmission+0x188>)
   81af2:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
   81af6:	bb2b      	cbnz	r3, 81b44 <mpsse_handle_transmission+0x58>
        if (mpsse_tx_buffer_remaining() < 2) {
   81af8:	4b5f      	ldr	r3, [pc, #380]	; (81c78 <mpsse_handle_transmission+0x18c>)
   81afa:	4798      	blx	r3
   81afc:	2801      	cmp	r0, #1
   81afe:	dd57      	ble.n	81bb0 <mpsse_handle_transmission+0xc4>
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81b00:	4b5c      	ldr	r3, [pc, #368]	; (81c74 <mpsse_handle_transmission+0x188>)
   81b02:	f9b3 1001 	ldrsh.w	r1, [r3, #1]
   81b06:	b208      	sxth	r0, r1
   81b08:	b28c      	uxth	r4, r1
   81b0a:	1c65      	adds	r5, r4, #1
   81b0c:	b22d      	sxth	r5, r5
   81b0e:	f8a3 5001 	strh.w	r5, [r3, #1]
   81b12:	4a5a      	ldr	r2, [pc, #360]	; (81c7c <mpsse_handle_transmission+0x190>)
   81b14:	4402      	add	r2, r0
   81b16:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   81b1a:	b2c9      	uxtb	r1, r1
   81b1c:	b20a      	sxth	r2, r1
   81b1e:	f8a3 2007 	strh.w	r2, [r3, #7]
        if (!mpsse_state.cur_cmd.b.bit_mode) {
   81b22:	7818      	ldrb	r0, [r3, #0]
   81b24:	f010 0f02 	tst.w	r0, #2
   81b28:	d146      	bne.n	81bb8 <mpsse_handle_transmission+0xcc>
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
   81b2a:	4618      	mov	r0, r3
   81b2c:	1ca3      	adds	r3, r4, #2
   81b2e:	f8a0 3001 	strh.w	r3, [r0, #1]
   81b32:	4b52      	ldr	r3, [pc, #328]	; (81c7c <mpsse_handle_transmission+0x190>)
   81b34:	441d      	add	r5, r3
   81b36:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   81b3a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
            mpsse_state.txn_len++; //0x00 sends 1 byte, 0x01 sends 2, etc
   81b3e:	3201      	adds	r2, #1
   81b40:	f8a0 2007 	strh.w	r2, [r0, #7]
    if (mpsse_tx_buffer_remaining() < 1) {
   81b44:	4b4c      	ldr	r3, [pc, #304]	; (81c78 <mpsse_handle_transmission+0x18c>)
   81b46:	4798      	blx	r3
   81b48:	2800      	cmp	r0, #0
   81b4a:	dd7e      	ble.n	81c4a <mpsse_handle_transmission+0x15e>
    if (mpsse_state.cur_cmd.b.wtdi) {
   81b4c:	4b49      	ldr	r3, [pc, #292]	; (81c74 <mpsse_handle_transmission+0x188>)
   81b4e:	781b      	ldrb	r3, [r3, #0]
   81b50:	f013 0f10 	tst.w	r3, #16
   81b54:	d07d      	beq.n	81c52 <mpsse_handle_transmission+0x166>
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
   81b56:	4b47      	ldr	r3, [pc, #284]	; (81c74 <mpsse_handle_transmission+0x188>)
   81b58:	f9b3 2001 	ldrsh.w	r2, [r3, #1]
   81b5c:	1c51      	adds	r1, r2, #1
   81b5e:	f8a3 1001 	strh.w	r1, [r3, #1]
   81b62:	4b46      	ldr	r3, [pc, #280]	; (81c7c <mpsse_handle_transmission+0x190>)
   81b64:	4413      	add	r3, r2
   81b66:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
   81b6a:	4b45      	ldr	r3, [pc, #276]	; (81c80 <mpsse_handle_transmission+0x194>)
   81b6c:	4798      	blx	r3
    if (mpsse_state.cur_cmd.b.rtdo) {
   81b6e:	4b41      	ldr	r3, [pc, #260]	; (81c74 <mpsse_handle_transmission+0x188>)
   81b70:	781b      	ldrb	r3, [r3, #0]
   81b72:	f013 0f20 	tst.w	r3, #32
   81b76:	d00e      	beq.n	81b96 <mpsse_handle_transmission+0xaa>
        MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; //TDO data into RX buffer
   81b78:	4a3e      	ldr	r2, [pc, #248]	; (81c74 <mpsse_handle_transmission+0x188>)
   81b7a:	f9b2 3005 	ldrsh.w	r3, [r2, #5]
   81b7e:	4619      	mov	r1, r3
   81b80:	3301      	adds	r3, #1
   81b82:	b29b      	uxth	r3, r3
   81b84:	f8a2 3005 	strh.w	r3, [r2, #5]
   81b88:	4a3c      	ldr	r2, [pc, #240]	; (81c7c <mpsse_handle_transmission+0x190>)
   81b8a:	5450      	strb	r0, [r2, r1]
    return sizeof(MPSSE_RX_BUFFER) - mpsse_state.rx_bytes;
   81b8c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
        if (mpsse_rx_buffer_remaining() > 0) {
   81b90:	b21b      	sxth	r3, r3
   81b92:	2b00      	cmp	r3, #0
   81b94:	dd61      	ble.n	81c5a <mpsse_handle_transmission+0x16e>
    if (--mpsse_state.txn_len == 0) {
   81b96:	4a37      	ldr	r2, [pc, #220]	; (81c74 <mpsse_handle_transmission+0x188>)
   81b98:	f9b2 3007 	ldrsh.w	r3, [r2, #7]
   81b9c:	3b01      	subs	r3, #1
   81b9e:	b21b      	sxth	r3, r3
   81ba0:	f8a2 3007 	strh.w	r3, [r2, #7]
   81ba4:	b913      	cbnz	r3, 81bac <mpsse_handle_transmission+0xc0>
        mpsse_state.cur_cmd.u8 = 0;
   81ba6:	2200      	movs	r2, #0
   81ba8:	4b32      	ldr	r3, [pc, #200]	; (81c74 <mpsse_handle_transmission+0x188>)
   81baa:	701a      	strb	r2, [r3, #0]
}
   81bac:	b003      	add	sp, #12
   81bae:	bd30      	pop	{r4, r5, pc}
            mpsse_state.tx_req = 1;
   81bb0:	2201      	movs	r2, #1
   81bb2:	4b30      	ldr	r3, [pc, #192]	; (81c74 <mpsse_handle_transmission+0x188>)
   81bb4:	73da      	strb	r2, [r3, #15]
            return; //need more data
   81bb6:	e7f9      	b.n	81bac <mpsse_handle_transmission+0xc0>
            mpsse_state.txn_len++; //0x00 sends 1 bit
   81bb8:	3101      	adds	r1, #1
   81bba:	4b2e      	ldr	r3, [pc, #184]	; (81c74 <mpsse_handle_transmission+0x188>)
   81bbc:	f8a3 1007 	strh.w	r1, [r3, #7]
            if (mpsse_state.cur_cmd.b.wtms) {
   81bc0:	f010 0f40 	tst.w	r0, #64	; 0x40
   81bc4:	d129      	bne.n	81c1a <mpsse_handle_transmission+0x12e>
                if (mpsse_state.cur_cmd.b.wtdi) // if we're writing, read a byte from the buffer
   81bc6:	f010 0010 	ands.w	r0, r0, #16
   81bca:	d008      	beq.n	81bde <mpsse_handle_transmission+0xf2>
                     value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81bcc:	1ca3      	adds	r3, r4, #2
   81bce:	4a29      	ldr	r2, [pc, #164]	; (81c74 <mpsse_handle_transmission+0x188>)
   81bd0:	f8a2 3001 	strh.w	r3, [r2, #1]
   81bd4:	4b29      	ldr	r3, [pc, #164]	; (81c7c <mpsse_handle_transmission+0x190>)
   81bd6:	441d      	add	r5, r3
   81bd8:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
   81bdc:	b2c0      	uxtb	r0, r0
                read_val = mpsse_send_bits(value, mpsse_state.txn_len);
   81bde:	b2c9      	uxtb	r1, r1
   81be0:	4b28      	ldr	r3, [pc, #160]	; (81c84 <mpsse_handle_transmission+0x198>)
   81be2:	4798      	blx	r3
            mpsse_state.txn_len = 0;
   81be4:	4b23      	ldr	r3, [pc, #140]	; (81c74 <mpsse_handle_transmission+0x188>)
   81be6:	2200      	movs	r2, #0
   81be8:	71da      	strb	r2, [r3, #7]
   81bea:	721a      	strb	r2, [r3, #8]
            if (mpsse_state.cur_cmd.b.rtdo) {
   81bec:	781b      	ldrb	r3, [r3, #0]
   81bee:	f013 0f20 	tst.w	r3, #32
   81bf2:	d00e      	beq.n	81c12 <mpsse_handle_transmission+0x126>
                MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; // put TDO data into RX buf
   81bf4:	4a1f      	ldr	r2, [pc, #124]	; (81c74 <mpsse_handle_transmission+0x188>)
   81bf6:	f9b2 3005 	ldrsh.w	r3, [r2, #5]
   81bfa:	4619      	mov	r1, r3
   81bfc:	3301      	adds	r3, #1
   81bfe:	b29b      	uxth	r3, r3
   81c00:	f8a2 3005 	strh.w	r3, [r2, #5]
   81c04:	4a1d      	ldr	r2, [pc, #116]	; (81c7c <mpsse_handle_transmission+0x190>)
   81c06:	5450      	strb	r0, [r2, r1]
    return sizeof(MPSSE_RX_BUFFER) - mpsse_state.rx_bytes;
   81c08:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
                if (mpsse_rx_buffer_remaining() > 0) {
   81c0c:	b21b      	sxth	r3, r3
   81c0e:	2b00      	cmp	r3, #0
   81c10:	dd0f      	ble.n	81c32 <mpsse_handle_transmission+0x146>
            mpsse_state.cur_cmd.u8 = 0;
   81c12:	2200      	movs	r2, #0
   81c14:	4b17      	ldr	r3, [pc, #92]	; (81c74 <mpsse_handle_transmission+0x188>)
   81c16:	701a      	strb	r2, [r3, #0]
            return;
   81c18:	e7c8      	b.n	81bac <mpsse_handle_transmission+0xc0>
                read_val = mpsse_tms_send(MPSSE_TX_BUFFER[mpsse_state.tx_idx++], mpsse_state.txn_len);
   81c1a:	1ca3      	adds	r3, r4, #2
   81c1c:	4a15      	ldr	r2, [pc, #84]	; (81c74 <mpsse_handle_transmission+0x188>)
   81c1e:	f8a2 3001 	strh.w	r3, [r2, #1]
   81c22:	4b16      	ldr	r3, [pc, #88]	; (81c7c <mpsse_handle_transmission+0x190>)
   81c24:	441d      	add	r5, r3
   81c26:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
   81c2a:	b2c9      	uxtb	r1, r1
   81c2c:	4b16      	ldr	r3, [pc, #88]	; (81c88 <mpsse_handle_transmission+0x19c>)
   81c2e:	4798      	blx	r3
   81c30:	e7d8      	b.n	81be4 <mpsse_handle_transmission+0xf8>
                    mpsse_state.txn_lock = 1;
   81c32:	2201      	movs	r2, #1
   81c34:	4b0f      	ldr	r3, [pc, #60]	; (81c74 <mpsse_handle_transmission+0x188>)
   81c36:	729a      	strb	r2, [r3, #10]
                    udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   81c38:	4b14      	ldr	r3, [pc, #80]	; (81c8c <mpsse_handle_transmission+0x1a0>)
   81c3a:	9300      	str	r3, [sp, #0]
   81c3c:	2340      	movs	r3, #64	; 0x40
   81c3e:	4a0f      	ldr	r2, [pc, #60]	; (81c7c <mpsse_handle_transmission+0x190>)
   81c40:	2100      	movs	r1, #0
   81c42:	2085      	movs	r0, #133	; 0x85
   81c44:	4c12      	ldr	r4, [pc, #72]	; (81c90 <mpsse_handle_transmission+0x1a4>)
   81c46:	47a0      	blx	r4
   81c48:	e7e3      	b.n	81c12 <mpsse_handle_transmission+0x126>
        mpsse_state.tx_req = 1;
   81c4a:	2201      	movs	r2, #1
   81c4c:	4b09      	ldr	r3, [pc, #36]	; (81c74 <mpsse_handle_transmission+0x188>)
   81c4e:	73da      	strb	r2, [r3, #15]
        return;
   81c50:	e7ac      	b.n	81bac <mpsse_handle_transmission+0xc0>
        read_val = mpsse_send_byte(0);
   81c52:	2000      	movs	r0, #0
   81c54:	4b0a      	ldr	r3, [pc, #40]	; (81c80 <mpsse_handle_transmission+0x194>)
   81c56:	4798      	blx	r3
   81c58:	e789      	b.n	81b6e <mpsse_handle_transmission+0x82>
            mpsse_state.txn_lock = 1;
   81c5a:	2201      	movs	r2, #1
   81c5c:	4b05      	ldr	r3, [pc, #20]	; (81c74 <mpsse_handle_transmission+0x188>)
   81c5e:	729a      	strb	r2, [r3, #10]
            udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   81c60:	4b0a      	ldr	r3, [pc, #40]	; (81c8c <mpsse_handle_transmission+0x1a0>)
   81c62:	9300      	str	r3, [sp, #0]
   81c64:	2340      	movs	r3, #64	; 0x40
   81c66:	4a05      	ldr	r2, [pc, #20]	; (81c7c <mpsse_handle_transmission+0x190>)
   81c68:	2100      	movs	r1, #0
   81c6a:	2085      	movs	r0, #133	; 0x85
   81c6c:	4c08      	ldr	r4, [pc, #32]	; (81c90 <mpsse_handle_transmission+0x1a4>)
   81c6e:	47a0      	blx	r4
   81c70:	e791      	b.n	81b96 <mpsse_handle_transmission+0xaa>
   81c72:	bf00      	nop
   81c74:	20000468 	.word	0x20000468
   81c78:	000815d9 	.word	0x000815d9
   81c7c:	20080000 	.word	0x20080000
   81c80:	00081a05 	.word	0x00081a05
   81c84:	00081965 	.word	0x00081965
   81c88:	00081a61 	.word	0x00081a61
   81c8c:	00081829 	.word	0x00081829
   81c90:	00085b59 	.word	0x00085b59

00081c94 <mpsse_handle_special>:
{
   81c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81c98:	b082      	sub	sp, #8
    switch (mpsse_state.cur_cmd.u8) {
   81c9a:	4b77      	ldr	r3, [pc, #476]	; (81e78 <mpsse_handle_special+0x1e4>)
   81c9c:	781b      	ldrb	r3, [r3, #0]
   81c9e:	3b80      	subs	r3, #128	; 0x80
   81ca0:	2b0a      	cmp	r3, #10
   81ca2:	f200 80e4 	bhi.w	81e6e <mpsse_handle_special+0x1da>
   81ca6:	e8df f013 	tbh	[pc, r3, lsl #1]
   81caa:	000b      	.short	0x000b
   81cac:	005e0098 	.word	0x005e0098
   81cb0:	00bc00ab 	.word	0x00bc00ab
   81cb4:	00d500c2 	.word	0x00d500c2
   81cb8:	00e200c7 	.word	0x00e200c7
   81cbc:	00de00e2 	.word	0x00de00e2
        if (mpsse_tx_buffer_remaining() < 2) {
   81cc0:	4b6e      	ldr	r3, [pc, #440]	; (81e7c <mpsse_handle_special+0x1e8>)
   81cc2:	4798      	blx	r3
   81cc4:	2801      	cmp	r0, #1
   81cc6:	dd1b      	ble.n	81d00 <mpsse_handle_special+0x6c>
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81cc8:	486b      	ldr	r0, [pc, #428]	; (81e78 <mpsse_handle_special+0x1e4>)
   81cca:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   81cce:	b219      	sxth	r1, r3
   81cd0:	b29b      	uxth	r3, r3
   81cd2:	4a6b      	ldr	r2, [pc, #428]	; (81e80 <mpsse_handle_special+0x1ec>)
   81cd4:	4411      	add	r1, r2
   81cd6:	f891 8040 	ldrb.w	r8, [r1, #64]	; 0x40
   81cda:	fa5f f888 	uxtb.w	r8, r8
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81cde:	1c99      	adds	r1, r3, #2
   81ce0:	f8a0 1001 	strh.w	r1, [r0, #1]
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81ce4:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81ce6:	b21b      	sxth	r3, r3
   81ce8:	4413      	add	r3, r2
   81cea:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
   81cee:	b2ff      	uxtb	r7, r7
   81cf0:	2501      	movs	r5, #1
   81cf2:	2400      	movs	r4, #0
            if (!mpsse_state.pins[i])
   81cf4:	4606      	mov	r6, r0
                gpio_configure_pin(mpsse_state.pins[i], PIO_INPUT);
   81cf6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 81e84 <mpsse_handle_special+0x1f0>
                        gpio_toggle_pin(mpsse_state.pins[0]); //ignore idle high clock
   81cfa:	f8df a194 	ldr.w	sl, [pc, #404]	; 81e90 <mpsse_handle_special+0x1fc>
   81cfe:	e00e      	b.n	81d1e <mpsse_handle_special+0x8a>
            mpsse_state.tx_req = 1;
   81d00:	2201      	movs	r2, #1
   81d02:	4b5d      	ldr	r3, [pc, #372]	; (81e78 <mpsse_handle_special+0x1e4>)
   81d04:	73da      	strb	r2, [r3, #15]
            return;
   81d06:	e078      	b.n	81dfa <mpsse_handle_special+0x166>
					gpio_configure_pin(mpsse_state.pins[i], PIO_OUTPUT_1);
   81d08:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d0c:	47c8      	blx	r9
                    if (i == 0) 
   81d0e:	f014 0fff 	tst.w	r4, #255	; 0xff
   81d12:	d01c      	beq.n	81d4e <mpsse_handle_special+0xba>
        for (uint8_t i = 0; i < 8; i++) {
   81d14:	2d07      	cmp	r5, #7
   81d16:	d822      	bhi.n	81d5e <mpsse_handle_special+0xca>
   81d18:	3401      	adds	r4, #1
   81d1a:	3501      	adds	r5, #1
   81d1c:	b2ed      	uxtb	r5, r5
            if (!mpsse_state.pins[i])
   81d1e:	1d23      	adds	r3, r4, #4
   81d20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   81d24:	f8d3 0003 	ldr.w	r0, [r3, #3]
   81d28:	2800      	cmp	r0, #0
   81d2a:	d0f3      	beq.n	81d14 <mpsse_handle_special+0x80>
            if (direction & (1 << i)) {
   81d2c:	fa47 f304 	asr.w	r3, r7, r4
   81d30:	f013 0f01 	tst.w	r3, #1
   81d34:	d00f      	beq.n	81d56 <mpsse_handle_special+0xc2>
				if (value & (1 << i) || (!mpsse_state.swd_mode)) {
   81d36:	fa48 f204 	asr.w	r2, r8, r4
   81d3a:	f012 0f01 	tst.w	r2, #1
   81d3e:	d1e3      	bne.n	81d08 <mpsse_handle_special+0x74>
   81d40:	7c33      	ldrb	r3, [r6, #16]
   81d42:	2b00      	cmp	r3, #0
   81d44:	d0e0      	beq.n	81d08 <mpsse_handle_special+0x74>
					gpio_configure_pin(mpsse_state.pins[i], PIO_OUTPUT_0);
   81d46:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81d4a:	47c8      	blx	r9
   81d4c:	e7e2      	b.n	81d14 <mpsse_handle_special+0x80>
                        gpio_toggle_pin(mpsse_state.pins[0]); //ignore idle high clock
   81d4e:	f8d6 0013 	ldr.w	r0, [r6, #19]
   81d52:	47d0      	blx	sl
   81d54:	e7e0      	b.n	81d18 <mpsse_handle_special+0x84>
                gpio_configure_pin(mpsse_state.pins[i], PIO_INPUT);
   81d56:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81d5a:	47c8      	blx	r9
   81d5c:	e7da      	b.n	81d14 <mpsse_handle_special+0x80>
        mpsse_state.cur_cmd.u8 = 0x00;
   81d5e:	2200      	movs	r2, #0
   81d60:	4b45      	ldr	r3, [pc, #276]	; (81e78 <mpsse_handle_special+0x1e4>)
   81d62:	701a      	strb	r2, [r3, #0]
        break;
   81d64:	e049      	b.n	81dfa <mpsse_handle_special+0x166>
        if (mpsse_tx_buffer_remaining() < 2) {
   81d66:	4b45      	ldr	r3, [pc, #276]	; (81e7c <mpsse_handle_special+0x1e8>)
   81d68:	4798      	blx	r3
   81d6a:	2801      	cmp	r0, #1
   81d6c:	dd23      	ble.n	81db6 <mpsse_handle_special+0x122>
        mpsse_state.cur_cmd.u8 = 0x00;
   81d6e:	4842      	ldr	r0, [pc, #264]	; (81e78 <mpsse_handle_special+0x1e4>)
   81d70:	2300      	movs	r3, #0
   81d72:	7003      	strb	r3, [r0, #0]
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81d74:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   81d78:	b219      	sxth	r1, r3
   81d7a:	b29b      	uxth	r3, r3
   81d7c:	4a40      	ldr	r2, [pc, #256]	; (81e80 <mpsse_handle_special+0x1ec>)
   81d7e:	4411      	add	r1, r2
   81d80:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
   81d84:	b2c9      	uxtb	r1, r1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81d86:	1c9c      	adds	r4, r3, #2
   81d88:	f8a0 4001 	strh.w	r4, [r0, #1]
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81d8c:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81d8e:	b21b      	sxth	r3, r3
   81d90:	4413      	add	r3, r2
   81d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        if ((value & 1)) {
   81d96:	f011 0f01 	tst.w	r1, #1
   81d9a:	d01a      	beq.n	81dd2 <mpsse_handle_special+0x13e>
            mpsse_state.swd_mode = 1;
   81d9c:	2201      	movs	r2, #1
   81d9e:	7402      	strb	r2, [r0, #16]
            if (value & 2) {
   81da0:	f011 0f02 	tst.w	r1, #2
   81da4:	d00b      	beq.n	81dbe <mpsse_handle_special+0x12a>
                mpsse_state.swd_out_en = 1;
   81da6:	7442      	strb	r2, [r0, #17]
                gpio_configure_pin(mpsse_state.pins[3], PIO_OUTPUT_1);
   81da8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81dac:	f8d0 001f 	ldr.w	r0, [r0, #31]
   81db0:	4b34      	ldr	r3, [pc, #208]	; (81e84 <mpsse_handle_special+0x1f0>)
   81db2:	4798      	blx	r3
   81db4:	e021      	b.n	81dfa <mpsse_handle_special+0x166>
            mpsse_state.tx_req = 1;
   81db6:	2201      	movs	r2, #1
   81db8:	4b2f      	ldr	r3, [pc, #188]	; (81e78 <mpsse_handle_special+0x1e4>)
   81dba:	73da      	strb	r2, [r3, #15]
            return; //need to read more data in
   81dbc:	e01d      	b.n	81dfa <mpsse_handle_special+0x166>
                gpio_configure_pin(mpsse_state.pins[3], PIO_INPUT);
   81dbe:	4c2e      	ldr	r4, [pc, #184]	; (81e78 <mpsse_handle_special+0x1e4>)
   81dc0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81dc4:	f8d4 001f 	ldr.w	r0, [r4, #31]
   81dc8:	4b2e      	ldr	r3, [pc, #184]	; (81e84 <mpsse_handle_special+0x1f0>)
   81dca:	4798      	blx	r3
                mpsse_state.swd_out_en = 0;
   81dcc:	2300      	movs	r3, #0
   81dce:	7463      	strb	r3, [r4, #17]
   81dd0:	e013      	b.n	81dfa <mpsse_handle_special+0x166>
            mpsse_state.swd_mode = 0;
   81dd2:	2200      	movs	r2, #0
   81dd4:	4b28      	ldr	r3, [pc, #160]	; (81e78 <mpsse_handle_special+0x1e4>)
   81dd6:	741a      	strb	r2, [r3, #16]
   81dd8:	e00f      	b.n	81dfa <mpsse_handle_special+0x166>
        mpsse_state.cur_cmd.u8 = 0x00;
   81dda:	4b27      	ldr	r3, [pc, #156]	; (81e78 <mpsse_handle_special+0x1e4>)
   81ddc:	2100      	movs	r1, #0
   81dde:	7019      	strb	r1, [r3, #0]
        MPSSE_RX_BUFFER[2] = 0x00;
   81de0:	4a27      	ldr	r2, [pc, #156]	; (81e80 <mpsse_handle_special+0x1ec>)
   81de2:	7091      	strb	r1, [r2, #2]
        mpsse_state.rx_bytes = 3;
   81de4:	2003      	movs	r0, #3
   81de6:	7158      	strb	r0, [r3, #5]
   81de8:	7199      	strb	r1, [r3, #6]
        mpsse_state.txn_lock = 1;
   81dea:	2001      	movs	r0, #1
   81dec:	7298      	strb	r0, [r3, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   81dee:	4b26      	ldr	r3, [pc, #152]	; (81e88 <mpsse_handle_special+0x1f4>)
   81df0:	9300      	str	r3, [sp, #0]
   81df2:	2303      	movs	r3, #3
   81df4:	2085      	movs	r0, #133	; 0x85
   81df6:	4c25      	ldr	r4, [pc, #148]	; (81e8c <mpsse_handle_special+0x1f8>)
   81df8:	47a0      	blx	r4
}
   81dfa:	b002      	add	sp, #8
   81dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.cur_cmd.u8 = 0x00;
   81e00:	4b1d      	ldr	r3, [pc, #116]	; (81e78 <mpsse_handle_special+0x1e4>)
   81e02:	2100      	movs	r1, #0
   81e04:	7019      	strb	r1, [r3, #0]
        MPSSE_RX_BUFFER[2] = 0x01;
   81e06:	4a1e      	ldr	r2, [pc, #120]	; (81e80 <mpsse_handle_special+0x1ec>)
   81e08:	2001      	movs	r0, #1
   81e0a:	7090      	strb	r0, [r2, #2]
        mpsse_state.rx_bytes = 3;
   81e0c:	2403      	movs	r4, #3
   81e0e:	715c      	strb	r4, [r3, #5]
   81e10:	7199      	strb	r1, [r3, #6]
        mpsse_state.txn_lock = 1;
   81e12:	7298      	strb	r0, [r3, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   81e14:	4b1c      	ldr	r3, [pc, #112]	; (81e88 <mpsse_handle_special+0x1f4>)
   81e16:	9300      	str	r3, [sp, #0]
   81e18:	4623      	mov	r3, r4
   81e1a:	2085      	movs	r0, #133	; 0x85
   81e1c:	4c1b      	ldr	r4, [pc, #108]	; (81e8c <mpsse_handle_special+0x1f8>)
   81e1e:	47a0      	blx	r4
        break;
   81e20:	e7eb      	b.n	81dfa <mpsse_handle_special+0x166>
        mpsse_state.loopback_en = 1;
   81e22:	4b15      	ldr	r3, [pc, #84]	; (81e78 <mpsse_handle_special+0x1e4>)
   81e24:	2201      	movs	r2, #1
   81e26:	725a      	strb	r2, [r3, #9]
        mpsse_state.cur_cmd.u8 = 0x00;
   81e28:	2200      	movs	r2, #0
   81e2a:	701a      	strb	r2, [r3, #0]
        break;
   81e2c:	e7e5      	b.n	81dfa <mpsse_handle_special+0x166>
        mpsse_state.loopback_en = 0;
   81e2e:	4b12      	ldr	r3, [pc, #72]	; (81e78 <mpsse_handle_special+0x1e4>)
   81e30:	2200      	movs	r2, #0
   81e32:	725a      	strb	r2, [r3, #9]
        mpsse_state.cur_cmd.u8 = 0x00;
   81e34:	701a      	strb	r2, [r3, #0]
        break;
   81e36:	e7e0      	b.n	81dfa <mpsse_handle_special+0x166>
        mpsse_state.txn_lock = 1;
   81e38:	4b0f      	ldr	r3, [pc, #60]	; (81e78 <mpsse_handle_special+0x1e4>)
   81e3a:	2201      	movs	r2, #1
   81e3c:	729a      	strb	r2, [r3, #10]
        mpsse_state.cur_cmd.u8 = 0x00;
   81e3e:	2100      	movs	r1, #0
   81e40:	7019      	strb	r1, [r3, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   81e42:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
   81e46:	4a10      	ldr	r2, [pc, #64]	; (81e88 <mpsse_handle_special+0x1f4>)
   81e48:	9200      	str	r2, [sp, #0]
   81e4a:	4a0d      	ldr	r2, [pc, #52]	; (81e80 <mpsse_handle_special+0x1ec>)
   81e4c:	2085      	movs	r0, #133	; 0x85
   81e4e:	4c0f      	ldr	r4, [pc, #60]	; (81e8c <mpsse_handle_special+0x1f8>)
   81e50:	47a0      	blx	r4
        break;
   81e52:	e7d2      	b.n	81dfa <mpsse_handle_special+0x166>
        mpsse_state.tx_idx += 2;
   81e54:	4b08      	ldr	r3, [pc, #32]	; (81e78 <mpsse_handle_special+0x1e4>)
   81e56:	f9b3 2001 	ldrsh.w	r2, [r3, #1]
   81e5a:	3202      	adds	r2, #2
   81e5c:	f8a3 2001 	strh.w	r2, [r3, #1]
        mpsse_state.cur_cmd.u8 = 0x00;
   81e60:	2200      	movs	r2, #0
   81e62:	701a      	strb	r2, [r3, #0]
        break;
   81e64:	e7c9      	b.n	81dfa <mpsse_handle_special+0x166>
        mpsse_state.cur_cmd.u8 = 0x00;
   81e66:	2200      	movs	r2, #0
   81e68:	4b03      	ldr	r3, [pc, #12]	; (81e78 <mpsse_handle_special+0x1e4>)
   81e6a:	701a      	strb	r2, [r3, #0]
        break;
   81e6c:	e7c5      	b.n	81dfa <mpsse_handle_special+0x166>
        mpsse_state.cur_cmd.u8 = 0x00;
   81e6e:	2200      	movs	r2, #0
   81e70:	4b01      	ldr	r3, [pc, #4]	; (81e78 <mpsse_handle_special+0x1e4>)
   81e72:	701a      	strb	r2, [r3, #0]
        break;
   81e74:	e7c1      	b.n	81dfa <mpsse_handle_special+0x166>
   81e76:	bf00      	nop
   81e78:	20000468 	.word	0x20000468
   81e7c:	000815d9 	.word	0x000815d9
   81e80:	20080000 	.word	0x20080000
   81e84:	00084725 	.word	0x00084725
   81e88:	00081829 	.word	0x00081829
   81e8c:	00085b59 	.word	0x00085b59
   81e90:	00084703 	.word	0x00084703

00081e94 <mpsse_register_handlers>:

void mpsse_register_handlers(void)
{
   81e94:	b508      	push	{r3, lr}
    naeusb_add_out_handler(mpsse_setup_out_received);
   81e96:	4803      	ldr	r0, [pc, #12]	; (81ea4 <mpsse_register_handlers+0x10>)
   81e98:	4b03      	ldr	r3, [pc, #12]	; (81ea8 <mpsse_register_handlers+0x14>)
   81e9a:	4798      	blx	r3
    naeusb_add_in_handler(mpsse_setup_in_received);
   81e9c:	4803      	ldr	r0, [pc, #12]	; (81eac <mpsse_register_handlers+0x18>)
   81e9e:	4b04      	ldr	r3, [pc, #16]	; (81eb0 <mpsse_register_handlers+0x1c>)
   81ea0:	4798      	blx	r3
   81ea2:	bd08      	pop	{r3, pc}
   81ea4:	000816a1 	.word	0x000816a1
   81ea8:	00081335 	.word	0x00081335
   81eac:	000815ed 	.word	0x000815ed
   81eb0:	00081311 	.word	0x00081311

00081eb4 <MPSSE_main_sendrecv_byte>:

// TODO: do writing here as we have time
// TODO: if we need to implement adaptive clock, should do in a GPIO based ISR I think?
void MPSSE_main_sendrecv_byte(void)
{
	if (!mpsse_state.enabled) return;
   81eb4:	4b2e      	ldr	r3, [pc, #184]	; (81f70 <MPSSE_main_sendrecv_byte+0xbc>)
   81eb6:	7c9b      	ldrb	r3, [r3, #18]
   81eb8:	2b00      	cmp	r3, #0
   81eba:	d058      	beq.n	81f6e <MPSSE_main_sendrecv_byte+0xba>

    if (mpsse_state.txn_lock) {
   81ebc:	4b2c      	ldr	r3, [pc, #176]	; (81f70 <MPSSE_main_sendrecv_byte+0xbc>)
   81ebe:	7a9b      	ldrb	r3, [r3, #10]
   81ec0:	2b00      	cmp	r3, #0
   81ec2:	d154      	bne.n	81f6e <MPSSE_main_sendrecv_byte+0xba>
{
   81ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ec8:	b082      	sub	sp, #8
        // waiting on a USB transaction to/from the PC, so wait for that to be done
        // before doing anything else
        return;
    }

    if (mpsse_state.tx_req) {
   81eca:	4b29      	ldr	r3, [pc, #164]	; (81f70 <MPSSE_main_sendrecv_byte+0xbc>)
   81ecc:	7bdb      	ldrb	r3, [r3, #15]
   81ece:	b313      	cbz	r3, 81f16 <MPSSE_main_sendrecv_byte+0x62>
        // of the buffer and need more data.

        // command split between USB transactions,
        // so move unused data back to start and read more in
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
   81ed0:	4b27      	ldr	r3, [pc, #156]	; (81f70 <MPSSE_main_sendrecv_byte+0xbc>)
   81ed2:	f9b3 8001 	ldrsh.w	r8, [r3, #1]
   81ed6:	2500      	movs	r5, #0
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   81ed8:	4f26      	ldr	r7, [pc, #152]	; (81f74 <MPSSE_main_sendrecv_byte+0xc0>)
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
   81eda:	4e27      	ldr	r6, [pc, #156]	; (81f78 <MPSSE_main_sendrecv_byte+0xc4>)
   81edc:	e008      	b.n	81ef0 <MPSSE_main_sendrecv_byte+0x3c>
   81ede:	eb04 0308 	add.w	r3, r4, r8
   81ee2:	4433      	add	r3, r6
   81ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81ee8:	b2db      	uxtb	r3, r3
   81eea:	4434      	add	r4, r6
   81eec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   81ef0:	b2ac      	uxth	r4, r5
   81ef2:	47b8      	blx	r7
   81ef4:	3501      	adds	r5, #1
   81ef6:	4284      	cmp	r4, r0
   81ef8:	dbf1      	blt.n	81ede <MPSSE_main_sendrecv_byte+0x2a>
        }
        mpsse_state.txn_lock = 1;
   81efa:	2201      	movs	r2, #1
   81efc:	4b1c      	ldr	r3, [pc, #112]	; (81f70 <MPSSE_main_sendrecv_byte+0xbc>)
   81efe:	729a      	strb	r2, [r3, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, 
   81f00:	4b1e      	ldr	r3, [pc, #120]	; (81f7c <MPSSE_main_sendrecv_byte+0xc8>)
   81f02:	9300      	str	r3, [sp, #0]
   81f04:	2340      	movs	r3, #64	; 0x40
   81f06:	4a1e      	ldr	r2, [pc, #120]	; (81f80 <MPSSE_main_sendrecv_byte+0xcc>)
   81f08:	2100      	movs	r1, #0
   81f0a:	2006      	movs	r0, #6
   81f0c:	4c1d      	ldr	r4, [pc, #116]	; (81f84 <MPSSE_main_sendrecv_byte+0xd0>)
   81f0e:	47a0      	blx	r4
        mpsse_handle_special();
    } else {
        mpsse_handle_transmission();
    }

   81f10:	b002      	add	sp, #8
   81f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (mpsse_tx_buffer_remaining() <= 0) {
   81f16:	4b17      	ldr	r3, [pc, #92]	; (81f74 <MPSSE_main_sendrecv_byte+0xc0>)
   81f18:	4798      	blx	r3
   81f1a:	2800      	cmp	r0, #0
   81f1c:	dd1b      	ble.n	81f56 <MPSSE_main_sendrecv_byte+0xa2>
    if (mpsse_state.cur_cmd.u8 == 0x00) {
   81f1e:	4b14      	ldr	r3, [pc, #80]	; (81f70 <MPSSE_main_sendrecv_byte+0xbc>)
   81f20:	781b      	ldrb	r3, [r3, #0]
   81f22:	b97b      	cbnz	r3, 81f44 <MPSSE_main_sendrecv_byte+0x90>
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   81f24:	4b12      	ldr	r3, [pc, #72]	; (81f70 <MPSSE_main_sendrecv_byte+0xbc>)
   81f26:	f9b3 1001 	ldrsh.w	r1, [r3, #1]
   81f2a:	1c4a      	adds	r2, r1, #1
   81f2c:	f8a3 2001 	strh.w	r2, [r3, #1]
   81f30:	4a11      	ldr	r2, [pc, #68]	; (81f78 <MPSSE_main_sendrecv_byte+0xc4>)
   81f32:	440a      	add	r2, r1
   81f34:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   81f38:	701a      	strb	r2, [r3, #0]
        mpsse_state.n_processed_cmds++;
   81f3a:	f8d3 200b 	ldr.w	r2, [r3, #11]
   81f3e:	3201      	adds	r2, #1
   81f40:	f8c3 200b 	str.w	r2, [r3, #11]
    if (mpsse_state.cur_cmd.b.special) {
   81f44:	4b0a      	ldr	r3, [pc, #40]	; (81f70 <MPSSE_main_sendrecv_byte+0xbc>)
   81f46:	f993 3000 	ldrsb.w	r3, [r3]
   81f4a:	2b00      	cmp	r3, #0
        mpsse_handle_special();
   81f4c:	bfb4      	ite	lt
   81f4e:	4b0e      	ldrlt	r3, [pc, #56]	; (81f88 <MPSSE_main_sendrecv_byte+0xd4>)
        mpsse_handle_transmission();
   81f50:	4b0e      	ldrge	r3, [pc, #56]	; (81f8c <MPSSE_main_sendrecv_byte+0xd8>)
   81f52:	4798      	blx	r3
   81f54:	e7dc      	b.n	81f10 <MPSSE_main_sendrecv_byte+0x5c>
        mpsse_state.txn_lock = 1;
   81f56:	2201      	movs	r2, #1
   81f58:	4b05      	ldr	r3, [pc, #20]	; (81f70 <MPSSE_main_sendrecv_byte+0xbc>)
   81f5a:	729a      	strb	r2, [r3, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   81f5c:	4b07      	ldr	r3, [pc, #28]	; (81f7c <MPSSE_main_sendrecv_byte+0xc8>)
   81f5e:	9300      	str	r3, [sp, #0]
   81f60:	2340      	movs	r3, #64	; 0x40
   81f62:	4a0b      	ldr	r2, [pc, #44]	; (81f90 <MPSSE_main_sendrecv_byte+0xdc>)
   81f64:	2100      	movs	r1, #0
   81f66:	2006      	movs	r0, #6
   81f68:	4c06      	ldr	r4, [pc, #24]	; (81f84 <MPSSE_main_sendrecv_byte+0xd0>)
   81f6a:	47a0      	blx	r4
        return;
   81f6c:	e7d0      	b.n	81f10 <MPSSE_main_sendrecv_byte+0x5c>
   81f6e:	4770      	bx	lr
   81f70:	20000468 	.word	0x20000468
   81f74:	000815d9 	.word	0x000815d9
   81f78:	20080000 	.word	0x20080000
   81f7c:	00081789 	.word	0x00081789
   81f80:	20080090 	.word	0x20080090
   81f84:	00085b59 	.word	0x00085b59
   81f88:	00081c95 	.word	0x00081c95
   81f8c:	00081aed 	.word	0x00081aed
   81f90:	20080040 	.word	0x20080040

00081f94 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   81f94:	b508      	push	{r3, lr}
	uint32_t prog_freq = 1E6;
    switch(udd_g_ctrlreq.req.wValue){
   81f96:	4b1b      	ldr	r3, [pc, #108]	; (82004 <openadc_progfpga_bulk+0x70>)
   81f98:	885b      	ldrh	r3, [r3, #2]
   81f9a:	3ba0      	subs	r3, #160	; 0xa0
   81f9c:	2b12      	cmp	r3, #18
   81f9e:	d830      	bhi.n	82002 <openadc_progfpga_bulk+0x6e>
   81fa0:	e8df f003 	tbb	[pc, r3]
   81fa4:	2f1a140a 	.word	0x2f1a140a
   81fa8:	2f2f2f2f 	.word	0x2f2f2f2f
   81fac:	2f2f2f2f 	.word	0x2f2f2f2f
   81fb0:	2f2f2f2f 	.word	0x2f2f2f2f
   81fb4:	281e      	.short	0x281e
   81fb6:	2c          	.byte	0x2c
   81fb7:	00          	.byte	0x00
    case 0xA0:
        
        if (udd_g_ctrlreq.req.wLength == 4) {
   81fb8:	4b12      	ldr	r3, [pc, #72]	; (82004 <openadc_progfpga_bulk+0x70>)
   81fba:	88db      	ldrh	r3, [r3, #6]
   81fbc:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   81fbe:	bf06      	itte	eq
   81fc0:	4b11      	ldreq	r3, [pc, #68]	; (82008 <openadc_progfpga_bulk+0x74>)
   81fc2:	6818      	ldreq	r0, [r3, #0]
	uint32_t prog_freq = 1E6;
   81fc4:	4811      	ldrne	r0, [pc, #68]	; (8200c <openadc_progfpga_bulk+0x78>)
        }
        fpga_program_setup1(prog_freq);
   81fc6:	4b12      	ldr	r3, [pc, #72]	; (82010 <openadc_progfpga_bulk+0x7c>)
   81fc8:	4798      	blx	r3
        break;
   81fca:	bd08      	pop	{r3, pc}

    case 0xA1:
        /* Waiting on data... */
        fpga_program_setup2();
   81fcc:	4b11      	ldr	r3, [pc, #68]	; (82014 <openadc_progfpga_bulk+0x80>)
   81fce:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   81fd0:	220a      	movs	r2, #10
   81fd2:	4b11      	ldr	r3, [pc, #68]	; (82018 <openadc_progfpga_bulk+0x84>)
   81fd4:	701a      	strb	r2, [r3, #0]
        break;
   81fd6:	bd08      	pop	{r3, pc}

    case 0xA2:
        /* Done */
        blockendpoint_usage = bep_emem;
   81fd8:	2200      	movs	r2, #0
   81fda:	4b0f      	ldr	r3, [pc, #60]	; (82018 <openadc_progfpga_bulk+0x84>)
   81fdc:	701a      	strb	r2, [r3, #0]
        break;
   81fde:	bd08      	pop	{r3, pc}

    case 0xB0:
        if (udd_g_ctrlreq.req.wLength == 4) {
   81fe0:	4b08      	ldr	r3, [pc, #32]	; (82004 <openadc_progfpga_bulk+0x70>)
   81fe2:	88db      	ldrh	r3, [r3, #6]
   81fe4:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   81fe6:	bf06      	itte	eq
   81fe8:	4b07      	ldreq	r3, [pc, #28]	; (82008 <openadc_progfpga_bulk+0x74>)
   81fea:	6818      	ldreq	r0, [r3, #0]
	uint32_t prog_freq = 1E6;
   81fec:	4807      	ldrne	r0, [pc, #28]	; (8200c <openadc_progfpga_bulk+0x78>)
        }
        fpga_program_spi_setup1(prog_freq);
   81fee:	4b0b      	ldr	r3, [pc, #44]	; (8201c <openadc_progfpga_bulk+0x88>)
   81ff0:	4798      	blx	r3
        break;
   81ff2:	bd08      	pop	{r3, pc}

    case 0xB1:
        blockendpoint_usage = bep_fpgabitstreamspi;
   81ff4:	2214      	movs	r2, #20
   81ff6:	4b08      	ldr	r3, [pc, #32]	; (82018 <openadc_progfpga_bulk+0x84>)
   81ff8:	701a      	strb	r2, [r3, #0]
        break;
   81ffa:	bd08      	pop	{r3, pc}
    
    case 0xB2:
        /* Done */
        blockendpoint_usage = bep_emem;
   81ffc:	2200      	movs	r2, #0
   81ffe:	4b06      	ldr	r3, [pc, #24]	; (82018 <openadc_progfpga_bulk+0x84>)
   82000:	701a      	strb	r2, [r3, #0]
   82002:	bd08      	pop	{r3, pc}
   82004:	2000287c 	.word	0x2000287c
   82008:	200023f8 	.word	0x200023f8
   8200c:	000f4240 	.word	0x000f4240
   82010:	000808cd 	.word	0x000808cd
   82014:	0008095d 	.word	0x0008095d
   82018:	20001e1c 	.word	0x20001e1c
   8201c:	0008082d 	.word	0x0008082d

00082020 <openadc_setup_out_received>:
        break;
    }
    return false;
}
bool openadc_setup_out_received(void)
{
   82020:	b508      	push	{r3, lr}
    blockendpoint_usage = bep_emem;
   82022:	2200      	movs	r2, #0
   82024:	4b20      	ldr	r3, [pc, #128]	; (820a8 <openadc_setup_out_received+0x88>)
   82026:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   82028:	4b20      	ldr	r3, [pc, #128]	; (820ac <openadc_setup_out_received+0x8c>)
   8202a:	785b      	ldrb	r3, [r3, #1]
   8202c:	3b10      	subs	r3, #16
   8202e:	2b06      	cmp	r3, #6
   82030:	d82f      	bhi.n	82092 <openadc_setup_out_received+0x72>
   82032:	e8df f003 	tbb	[pc, r3]
   82036:	1704      	.short	0x1704
   82038:	2e2e200e 	.word	0x2e2e200e
   8203c:	29          	.byte	0x29
   8203d:	00          	.byte	0x00
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   8203e:	2006      	movs	r0, #6
   82040:	4b1b      	ldr	r3, [pc, #108]	; (820b0 <openadc_setup_out_received+0x90>)
   82042:	4798      	blx	r3
   82044:	2800      	cmp	r0, #0
   82046:	d026      	beq.n	82096 <openadc_setup_out_received+0x76>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   82048:	4a1a      	ldr	r2, [pc, #104]	; (820b4 <openadc_setup_out_received+0x94>)
   8204a:	4b18      	ldr	r3, [pc, #96]	; (820ac <openadc_setup_out_received+0x8c>)
   8204c:	611a      	str	r2, [r3, #16]
            return true;
   8204e:	2001      	movs	r0, #1
   82050:	bd08      	pop	{r3, pc}
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   82052:	2006      	movs	r0, #6
   82054:	4b16      	ldr	r3, [pc, #88]	; (820b0 <openadc_setup_out_received+0x90>)
   82056:	4798      	blx	r3
   82058:	b1f8      	cbz	r0, 8209a <openadc_setup_out_received+0x7a>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   8205a:	4a17      	ldr	r2, [pc, #92]	; (820b8 <openadc_setup_out_received+0x98>)
   8205c:	4b13      	ldr	r3, [pc, #76]	; (820ac <openadc_setup_out_received+0x8c>)
   8205e:	611a      	str	r2, [r3, #16]
            return true;
   82060:	2001      	movs	r0, #1
   82062:	bd08      	pop	{r3, pc}
        }
        break;

        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   82064:	2006      	movs	r0, #6
   82066:	4b12      	ldr	r3, [pc, #72]	; (820b0 <openadc_setup_out_received+0x90>)
   82068:	4798      	blx	r3
   8206a:	b1c0      	cbz	r0, 8209e <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   8206c:	4a13      	ldr	r2, [pc, #76]	; (820bc <openadc_setup_out_received+0x9c>)
   8206e:	4b0f      	ldr	r3, [pc, #60]	; (820ac <openadc_setup_out_received+0x8c>)
   82070:	611a      	str	r2, [r3, #16]
            return true;
   82072:	2001      	movs	r0, #1
   82074:	bd08      	pop	{r3, pc}
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   82076:	2006      	movs	r0, #6
   82078:	4b0d      	ldr	r3, [pc, #52]	; (820b0 <openadc_setup_out_received+0x90>)
   8207a:	4798      	blx	r3
   8207c:	b188      	cbz	r0, 820a2 <openadc_setup_out_received+0x82>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   8207e:	4a10      	ldr	r2, [pc, #64]	; (820c0 <openadc_setup_out_received+0xa0>)
   82080:	4b0a      	ldr	r3, [pc, #40]	; (820ac <openadc_setup_out_received+0x8c>)
   82082:	611a      	str	r2, [r3, #16]
            return true;
   82084:	2001      	movs	r0, #1
   82086:	bd08      	pop	{r3, pc}
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   82088:	4a0e      	ldr	r2, [pc, #56]	; (820c4 <openadc_setup_out_received+0xa4>)
   8208a:	4b08      	ldr	r3, [pc, #32]	; (820ac <openadc_setup_out_received+0x8c>)
   8208c:	611a      	str	r2, [r3, #16]
        return true;
   8208e:	2001      	movs	r0, #1
   82090:	bd08      	pop	{r3, pc}

    default:
        return false;
   82092:	2000      	movs	r0, #0
   82094:	bd08      	pop	{r3, pc}
    }

    return false;
   82096:	2000      	movs	r0, #0
   82098:	bd08      	pop	{r3, pc}
   8209a:	2000      	movs	r0, #0
   8209c:	bd08      	pop	{r3, pc}
   8209e:	2000      	movs	r0, #0
   820a0:	bd08      	pop	{r3, pc}
   820a2:	2000      	movs	r0, #0
}
   820a4:	bd08      	pop	{r3, pc}
   820a6:	bf00      	nop
   820a8:	20001e1c 	.word	0x20001e1c
   820ac:	2000287c 	.word	0x2000287c
   820b0:	00083311 	.word	0x00083311
   820b4:	00082191 	.word	0x00082191
   820b8:	000820f9 	.word	0x000820f9
   820bc:	000820c9 	.word	0x000820c9
   820c0:	0008213d 	.word	0x0008213d
   820c4:	00081f95 	.word	0x00081f95

000820c8 <openadc_writemem_bulk>:
{
   820c8:	b570      	push	{r4, r5, r6, lr}
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   820ca:	4b07      	ldr	r3, [pc, #28]	; (820e8 <openadc_writemem_bulk+0x20>)
   820cc:	685e      	ldr	r6, [r3, #4]
    FPGA_releaselock();
   820ce:	4b07      	ldr	r3, [pc, #28]	; (820ec <openadc_writemem_bulk+0x24>)
   820d0:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   820d2:	2504      	movs	r5, #4
   820d4:	4c06      	ldr	r4, [pc, #24]	; (820f0 <openadc_writemem_bulk+0x28>)
   820d6:	4628      	mov	r0, r5
   820d8:	47a0      	blx	r4
   820da:	2800      	cmp	r0, #0
   820dc:	d0fb      	beq.n	820d6 <openadc_writemem_bulk+0xe>
    FPGA_setaddr(address);
   820de:	4630      	mov	r0, r6
   820e0:	4b04      	ldr	r3, [pc, #16]	; (820f4 <openadc_writemem_bulk+0x2c>)
   820e2:	4798      	blx	r3
   820e4:	bd70      	pop	{r4, r5, r6, pc}
   820e6:	bf00      	nop
   820e8:	200023f8 	.word	0x200023f8
   820ec:	0008333d 	.word	0x0008333d
   820f0:	00083311 	.word	0x00083311
   820f4:	00083355 	.word	0x00083355

000820f8 <openadc_readmem_ctrl>:
{
   820f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   820fa:	4b0a      	ldr	r3, [pc, #40]	; (82124 <openadc_readmem_ctrl+0x2c>)
   820fc:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   820fe:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   82100:	4b09      	ldr	r3, [pc, #36]	; (82128 <openadc_readmem_ctrl+0x30>)
   82102:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   82104:	2505      	movs	r5, #5
   82106:	4c09      	ldr	r4, [pc, #36]	; (8212c <openadc_readmem_ctrl+0x34>)
   82108:	4628      	mov	r0, r5
   8210a:	47a0      	blx	r4
   8210c:	2800      	cmp	r0, #0
   8210e:	d0fb      	beq.n	82108 <openadc_readmem_ctrl+0x10>
    FPGA_setaddr(address);
   82110:	4638      	mov	r0, r7
   82112:	4b07      	ldr	r3, [pc, #28]	; (82130 <openadc_readmem_ctrl+0x38>)
   82114:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   82116:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   8211a:	4b06      	ldr	r3, [pc, #24]	; (82134 <openadc_readmem_ctrl+0x3c>)
   8211c:	601a      	str	r2, [r3, #0]
    ctrlmemread_size = buflen;
   8211e:	4b06      	ldr	r3, [pc, #24]	; (82138 <openadc_readmem_ctrl+0x40>)
   82120:	601e      	str	r6, [r3, #0]
   82122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82124:	200023f8 	.word	0x200023f8
   82128:	0008333d 	.word	0x0008333d
   8212c:	00083311 	.word	0x00083311
   82130:	00083355 	.word	0x00083355
   82134:	20001e20 	.word	0x20001e20
   82138:	20001e24 	.word	0x20001e24

0008213c <openadc_writemem_ctrl>:
{
   8213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8213e:	4b0e      	ldr	r3, [pc, #56]	; (82178 <openadc_writemem_ctrl+0x3c>)
   82140:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82142:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   82144:	4b0d      	ldr	r3, [pc, #52]	; (8217c <openadc_writemem_ctrl+0x40>)
   82146:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   82148:	2601      	movs	r6, #1
   8214a:	4d0d      	ldr	r5, [pc, #52]	; (82180 <openadc_writemem_ctrl+0x44>)
   8214c:	4630      	mov	r0, r6
   8214e:	47a8      	blx	r5
   82150:	2800      	cmp	r0, #0
   82152:	d0fb      	beq.n	8214c <openadc_writemem_ctrl+0x10>
    FPGA_setaddr(address);
   82154:	4638      	mov	r0, r7
   82156:	4b0b      	ldr	r3, [pc, #44]	; (82184 <openadc_writemem_ctrl+0x48>)
   82158:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   8215a:	b14c      	cbz	r4, 82170 <openadc_writemem_ctrl+0x34>
   8215c:	4a0a      	ldr	r2, [pc, #40]	; (82188 <openadc_writemem_ctrl+0x4c>)
   8215e:	2300      	movs	r3, #0
        xram[i] = ctrlbuf_payload[i];
   82160:	4d0a      	ldr	r5, [pc, #40]	; (8218c <openadc_writemem_ctrl+0x50>)
   82162:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82166:	6829      	ldr	r1, [r5, #0]
   82168:	54c8      	strb	r0, [r1, r3]
    for(unsigned int i = 0; i < buflen; i++){
   8216a:	3301      	adds	r3, #1
   8216c:	429c      	cmp	r4, r3
   8216e:	d1f8      	bne.n	82162 <openadc_writemem_ctrl+0x26>
    FPGA_releaselock();
   82170:	4b02      	ldr	r3, [pc, #8]	; (8217c <openadc_writemem_ctrl+0x40>)
   82172:	4798      	blx	r3
   82174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82176:	bf00      	nop
   82178:	200023f8 	.word	0x200023f8
   8217c:	0008333d 	.word	0x0008333d
   82180:	00083311 	.word	0x00083311
   82184:	00083355 	.word	0x00083355
   82188:	200023ff 	.word	0x200023ff
   8218c:	20000b1c 	.word	0x20000b1c

00082190 <openadc_readmem_bulk>:
{
   82190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82192:	4b0a      	ldr	r3, [pc, #40]	; (821bc <openadc_readmem_bulk+0x2c>)
   82194:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82196:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   82198:	4b09      	ldr	r3, [pc, #36]	; (821c0 <openadc_readmem_bulk+0x30>)
   8219a:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   8219c:	2502      	movs	r5, #2
   8219e:	4c09      	ldr	r4, [pc, #36]	; (821c4 <openadc_readmem_bulk+0x34>)
   821a0:	4628      	mov	r0, r5
   821a2:	47a0      	blx	r4
   821a4:	2800      	cmp	r0, #0
   821a6:	d0fb      	beq.n	821a0 <openadc_readmem_bulk+0x10>
    FPGA_setaddr(address);
   821a8:	4638      	mov	r0, r7
   821aa:	4b07      	ldr	r3, [pc, #28]	; (821c8 <openadc_readmem_bulk+0x38>)
   821ac:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   821ae:	4a07      	ldr	r2, [pc, #28]	; (821cc <openadc_readmem_bulk+0x3c>)
   821b0:	4631      	mov	r1, r6
   821b2:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   821b6:	4b06      	ldr	r3, [pc, #24]	; (821d0 <openadc_readmem_bulk+0x40>)
   821b8:	4798      	blx	r3
   821ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   821bc:	200023f8 	.word	0x200023f8
   821c0:	0008333d 	.word	0x0008333d
   821c4:	00083311 	.word	0x00083311
   821c8:	00083355 	.word	0x00083355
   821cc:	000821d5 	.word	0x000821d5
   821d0:	000843b9 	.word	0x000843b9

000821d4 <main_vendor_bulk_in_received>:
{
   821d4:	b510      	push	{r4, lr}
   821d6:	4604      	mov	r4, r0
    FPGA_releaselock();
   821d8:	4b05      	ldr	r3, [pc, #20]	; (821f0 <main_vendor_bulk_in_received+0x1c>)
   821da:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   821dc:	b104      	cbz	r4, 821e0 <main_vendor_bulk_in_received+0xc>
   821de:	bd10      	pop	{r4, pc}
    if (FPGA_lockstatus() == fpga_blockin){
   821e0:	4b04      	ldr	r3, [pc, #16]	; (821f4 <main_vendor_bulk_in_received+0x20>)
   821e2:	4798      	blx	r3
   821e4:	2802      	cmp	r0, #2
   821e6:	d1fa      	bne.n	821de <main_vendor_bulk_in_received+0xa>
        FPGA_setlock(fpga_unlocked);
   821e8:	2000      	movs	r0, #0
   821ea:	4b03      	ldr	r3, [pc, #12]	; (821f8 <main_vendor_bulk_in_received+0x24>)
   821ec:	4798      	blx	r3
   821ee:	e7f6      	b.n	821de <main_vendor_bulk_in_received+0xa>
   821f0:	0008333d 	.word	0x0008333d
   821f4:	00083349 	.word	0x00083349
   821f8:	00083311 	.word	0x00083311

000821fc <main_vendor_bulk_out_received>:
{
   821fc:	b570      	push	{r4, r5, r6, lr}
   821fe:	4605      	mov	r5, r0
   82200:	460c      	mov	r4, r1
    FPGA_releaselock();
   82202:	4b1f      	ldr	r3, [pc, #124]	; (82280 <main_vendor_bulk_out_received+0x84>)
   82204:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   82206:	b9bd      	cbnz	r5, 82238 <main_vendor_bulk_out_received+0x3c>
    if (blockendpoint_usage == bep_emem){
   82208:	4b1e      	ldr	r3, [pc, #120]	; (82284 <main_vendor_bulk_out_received+0x88>)
   8220a:	781b      	ldrb	r3, [r3, #0]
   8220c:	b9f3      	cbnz	r3, 8224c <main_vendor_bulk_out_received+0x50>
        for(unsigned int i = 0; i < nb_transfered; i++){
   8220e:	b144      	cbz	r4, 82222 <main_vendor_bulk_out_received+0x26>
   82210:	4a1d      	ldr	r2, [pc, #116]	; (82288 <main_vendor_bulk_out_received+0x8c>)
            xram[i] = main_buf_loopback[i];
   82212:	4d1e      	ldr	r5, [pc, #120]	; (8228c <main_vendor_bulk_out_received+0x90>)
   82214:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82218:	6829      	ldr	r1, [r5, #0]
   8221a:	54c8      	strb	r0, [r1, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   8221c:	3301      	adds	r3, #1
   8221e:	429c      	cmp	r4, r3
   82220:	d1f8      	bne.n	82214 <main_vendor_bulk_out_received+0x18>
        if (FPGA_lockstatus() == fpga_blockout){
   82222:	4b1b      	ldr	r3, [pc, #108]	; (82290 <main_vendor_bulk_out_received+0x94>)
   82224:	4798      	blx	r3
   82226:	2804      	cmp	r0, #4
   82228:	d00d      	beq.n	82246 <main_vendor_bulk_out_received+0x4a>
    udi_vendor_bulk_out_run(
   8222a:	4a1a      	ldr	r2, [pc, #104]	; (82294 <main_vendor_bulk_out_received+0x98>)
   8222c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82230:	4819      	ldr	r0, [pc, #100]	; (82298 <main_vendor_bulk_out_received+0x9c>)
   82232:	4b1a      	ldr	r3, [pc, #104]	; (8229c <main_vendor_bulk_out_received+0xa0>)
   82234:	4798      	blx	r3
   82236:	bd70      	pop	{r4, r5, r6, pc}
        udi_vendor_bulk_out_run(
   82238:	4a16      	ldr	r2, [pc, #88]	; (82294 <main_vendor_bulk_out_received+0x98>)
   8223a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8223e:	4816      	ldr	r0, [pc, #88]	; (82298 <main_vendor_bulk_out_received+0x9c>)
   82240:	4b16      	ldr	r3, [pc, #88]	; (8229c <main_vendor_bulk_out_received+0xa0>)
   82242:	4798      	blx	r3
        return;
   82244:	bd70      	pop	{r4, r5, r6, pc}
            FPGA_releaselock();
   82246:	4b0e      	ldr	r3, [pc, #56]	; (82280 <main_vendor_bulk_out_received+0x84>)
   82248:	4798      	blx	r3
   8224a:	e7ee      	b.n	8222a <main_vendor_bulk_out_received+0x2e>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   8224c:	2b0a      	cmp	r3, #10
   8224e:	d00c      	beq.n	8226a <main_vendor_bulk_out_received+0x6e>
    } else if (blockendpoint_usage == bep_fpgabitstreamspi) {
   82250:	2b14      	cmp	r3, #20
   82252:	d1ea      	bne.n	8222a <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   82254:	2c00      	cmp	r4, #0
   82256:	d0e8      	beq.n	8222a <main_vendor_bulk_out_received+0x2e>
   82258:	4d0b      	ldr	r5, [pc, #44]	; (82288 <main_vendor_bulk_out_received+0x8c>)
   8225a:	442c      	add	r4, r5
            fpga_program_spi_sendbyte(main_buf_loopback[i]);
   8225c:	4e10      	ldr	r6, [pc, #64]	; (822a0 <main_vendor_bulk_out_received+0xa4>)
   8225e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   82262:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   82264:	42a5      	cmp	r5, r4
   82266:	d1fa      	bne.n	8225e <main_vendor_bulk_out_received+0x62>
   82268:	e7df      	b.n	8222a <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   8226a:	2c00      	cmp	r4, #0
   8226c:	d0dd      	beq.n	8222a <main_vendor_bulk_out_received+0x2e>
   8226e:	4d06      	ldr	r5, [pc, #24]	; (82288 <main_vendor_bulk_out_received+0x8c>)
   82270:	442c      	add	r4, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   82272:	4e0c      	ldr	r6, [pc, #48]	; (822a4 <main_vendor_bulk_out_received+0xa8>)
   82274:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   82278:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   8227a:	42ac      	cmp	r4, r5
   8227c:	d1fa      	bne.n	82274 <main_vendor_bulk_out_received+0x78>
   8227e:	e7d4      	b.n	8222a <main_vendor_bulk_out_received+0x2e>
   82280:	0008333d 	.word	0x0008333d
   82284:	20001e1c 	.word	0x20001e1c
   82288:	20002437 	.word	0x20002437
   8228c:	20000b1c 	.word	0x20000b1c
   82290:	00083349 	.word	0x00083349
   82294:	000821fd 	.word	0x000821fd
   82298:	20002438 	.word	0x20002438
   8229c:	000843d5 	.word	0x000843d5
   822a0:	000808b5 	.word	0x000808b5
   822a4:	0008096d 	.word	0x0008096d

000822a8 <openadc_setup_in_received>:
{
   822a8:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   822aa:	4b13      	ldr	r3, [pc, #76]	; (822f8 <openadc_setup_in_received+0x50>)
   822ac:	785b      	ldrb	r3, [r3, #1]
   822ae:	2b12      	cmp	r3, #18
   822b0:	d003      	beq.n	822ba <openadc_setup_in_received+0x12>
   822b2:	2b15      	cmp	r3, #21
   822b4:	d00e      	beq.n	822d4 <openadc_setup_in_received+0x2c>
    return false;
   822b6:	2000      	movs	r0, #0
}
   822b8:	bd08      	pop	{r3, pc}
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   822ba:	4a0f      	ldr	r2, [pc, #60]	; (822f8 <openadc_setup_in_received+0x50>)
   822bc:	4b0f      	ldr	r3, [pc, #60]	; (822fc <openadc_setup_in_received+0x54>)
   822be:	681b      	ldr	r3, [r3, #0]
   822c0:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   822c2:	4b0f      	ldr	r3, [pc, #60]	; (82300 <openadc_setup_in_received+0x58>)
   822c4:	6819      	ldr	r1, [r3, #0]
   822c6:	8191      	strh	r1, [r2, #12]
        ctrlmemread_size = 0;
   822c8:	2200      	movs	r2, #0
   822ca:	601a      	str	r2, [r3, #0]
        FPGA_releaselock();
   822cc:	4b0d      	ldr	r3, [pc, #52]	; (82304 <openadc_setup_in_received+0x5c>)
   822ce:	4798      	blx	r3
        return true;
   822d0:	2001      	movs	r0, #1
   822d2:	bd08      	pop	{r3, pc}
        respbuf[0] = FPGA_ISDONE();
   822d4:	200a      	movs	r0, #10
   822d6:	4b0c      	ldr	r3, [pc, #48]	; (82308 <openadc_setup_in_received+0x60>)
   822d8:	4798      	blx	r3
   822da:	4b0c      	ldr	r3, [pc, #48]	; (8230c <openadc_setup_in_received+0x64>)
   822dc:	3000      	adds	r0, #0
   822de:	bf18      	it	ne
   822e0:	2001      	movne	r0, #1
   822e2:	7018      	strb	r0, [r3, #0]
        respbuf[1] = 0;
   822e4:	2200      	movs	r2, #0
   822e6:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   822e8:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   822ea:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   822ec:	4a02      	ldr	r2, [pc, #8]	; (822f8 <openadc_setup_in_received+0x50>)
   822ee:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   822f0:	2304      	movs	r3, #4
   822f2:	8193      	strh	r3, [r2, #12]
        return true;
   822f4:	2001      	movs	r0, #1
   822f6:	bd08      	pop	{r3, pc}
   822f8:	2000287c 	.word	0x2000287c
   822fc:	20001e20 	.word	0x20001e20
   82300:	20001e24 	.word	0x20001e24
   82304:	0008333d 	.word	0x0008333d
   82308:	000846b3 	.word	0x000846b3
   8230c:	200023b8 	.word	0x200023b8

00082310 <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   82310:	b508      	push	{r3, lr}
    FPGA_releaselock();
   82312:	4b04      	ldr	r3, [pc, #16]	; (82324 <openadc_register_handlers+0x14>)
   82314:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   82316:	4804      	ldr	r0, [pc, #16]	; (82328 <openadc_register_handlers+0x18>)
   82318:	4b04      	ldr	r3, [pc, #16]	; (8232c <openadc_register_handlers+0x1c>)
   8231a:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   8231c:	4804      	ldr	r0, [pc, #16]	; (82330 <openadc_register_handlers+0x20>)
   8231e:	4b05      	ldr	r3, [pc, #20]	; (82334 <openadc_register_handlers+0x24>)
   82320:	4798      	blx	r3
   82322:	bd08      	pop	{r3, pc}
   82324:	0008333d 	.word	0x0008333d
   82328:	000822a9 	.word	0x000822a9
   8232c:	00081311 	.word	0x00081311
   82330:	00082021 	.word	0x00082021
   82334:	00081335 	.word	0x00081335

00082338 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   82338:	4b16      	ldr	r3, [pc, #88]	; (82394 <usart_setup_out_received+0x5c>)
   8233a:	785b      	ldrb	r3, [r3, #1]
   8233c:	3b1a      	subs	r3, #26
   8233e:	2b17      	cmp	r3, #23
   82340:	d826      	bhi.n	82390 <usart_setup_out_received+0x58>
   82342:	e8df f003 	tbb	[pc, r3]
   82346:	0c11      	.short	0x0c11
   82348:	25252525 	.word	0x25252525
   8234c:	25251b16 	.word	0x25251b16
   82350:	25252525 	.word	0x25252525
   82354:	25252525 	.word	0x25252525
   82358:	25252525 	.word	0x25252525
   8235c:	2025      	.short	0x2025
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   8235e:	4a0e      	ldr	r2, [pc, #56]	; (82398 <usart_setup_out_received+0x60>)
   82360:	4b0c      	ldr	r3, [pc, #48]	; (82394 <usart_setup_out_received+0x5c>)
   82362:	611a      	str	r2, [r3, #16]
        return true;
   82364:	2001      	movs	r0, #1
   82366:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   82368:	4a0c      	ldr	r2, [pc, #48]	; (8239c <usart_setup_out_received+0x64>)
   8236a:	4b0a      	ldr	r3, [pc, #40]	; (82394 <usart_setup_out_received+0x5c>)
   8236c:	611a      	str	r2, [r3, #16]
        return true;
   8236e:	2001      	movs	r0, #1
   82370:	4770      	bx	lr
    case REQ_XMEGA_PROGRAM:
        /*
        udd_g_ctrlreq.payload = xmegabuffer;
        udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
        */
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   82372:	4a0b      	ldr	r2, [pc, #44]	; (823a0 <usart_setup_out_received+0x68>)
   82374:	4b07      	ldr	r3, [pc, #28]	; (82394 <usart_setup_out_received+0x5c>)
   82376:	611a      	str	r2, [r3, #16]
        return true;
   82378:	2001      	movs	r0, #1
   8237a:	4770      	bx	lr
#endif
#ifdef CW_PROG_AVR
		/* AVR Programming */
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   8237c:	4a09      	ldr	r2, [pc, #36]	; (823a4 <usart_setup_out_received+0x6c>)
   8237e:	4b05      	ldr	r3, [pc, #20]	; (82394 <usart_setup_out_received+0x5c>)
   82380:	611a      	str	r2, [r3, #16]
        return true;
   82382:	2001      	movs	r0, #1
   82384:	4770      	bx	lr
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   82386:	4a08      	ldr	r2, [pc, #32]	; (823a8 <usart_setup_out_received+0x70>)
   82388:	4b02      	ldr	r3, [pc, #8]	; (82394 <usart_setup_out_received+0x5c>)
   8238a:	611a      	str	r2, [r3, #16]
        return true;
   8238c:	2001      	movs	r0, #1
   8238e:	4770      	bx	lr
        break;
    }
    return false;
   82390:	2000      	movs	r0, #0
}
   82392:	4770      	bx	lr
   82394:	2000287c 	.word	0x2000287c
   82398:	00082739 	.word	0x00082739
   8239c:	00082781 	.word	0x00082781
   823a0:	000823ad 	.word	0x000823ad
   823a4:	000823b9 	.word	0x000823b9
   823a8:	00082745 	.word	0x00082745

000823ac <ctrl_xmega_program_void>:
{
   823ac:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   823ae:	4b01      	ldr	r3, [pc, #4]	; (823b4 <ctrl_xmega_program_void+0x8>)
   823b0:	4798      	blx	r3
   823b2:	bd08      	pop	{r3, pc}
   823b4:	00083a39 	.word	0x00083a39

000823b8 <ctrl_avr_program_void>:
{
   823b8:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   823ba:	4b01      	ldr	r3, [pc, #4]	; (823c0 <ctrl_avr_program_void+0x8>)
   823bc:	4798      	blx	r3
   823be:	bd08      	pop	{r3, pc}
   823c0:	0008337d 	.word	0x0008337d

000823c4 <usart0_enableIO>:
{
   823c4:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   823c6:	200d      	movs	r0, #13
   823c8:	4b0a      	ldr	r3, [pc, #40]	; (823f4 <usart0_enableIO+0x30>)
   823ca:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   823cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823d0:	2013      	movs	r0, #19
   823d2:	4c09      	ldr	r4, [pc, #36]	; (823f8 <usart0_enableIO+0x34>)
   823d4:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   823d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823da:	2012      	movs	r0, #18
   823dc:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   823de:	4b07      	ldr	r3, [pc, #28]	; (823fc <usart0_enableIO+0x38>)
   823e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   823e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   823e8:	2130      	movs	r1, #48	; 0x30
   823ea:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   823ee:	601a      	str	r2, [r3, #0]
   823f0:	bd10      	pop	{r4, pc}
   823f2:	bf00      	nop
   823f4:	00084a69 	.word	0x00084a69
   823f8:	00084725 	.word	0x00084725
   823fc:	e000e100 	.word	0xe000e100

00082400 <usart_enableIO>:
{
   82400:	b508      	push	{r3, lr}
    if (driver->usart_id == 0) {
   82402:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   82406:	b103      	cbz	r3, 8240a <usart_enableIO+0xa>
   82408:	bd08      	pop	{r3, pc}
        usart0_enableIO();
   8240a:	4b01      	ldr	r3, [pc, #4]	; (82410 <usart_enableIO+0x10>)
   8240c:	4798      	blx	r3
}
   8240e:	e7fb      	b.n	82408 <usart_enableIO+0x8>
   82410:	000823c5 	.word	0x000823c5

00082414 <generic_isr>:
{
   82414:	b570      	push	{r4, r5, r6, lr}
   82416:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   82418:	6800      	ldr	r0, [r0, #0]
   8241a:	4b19      	ldr	r3, [pc, #100]	; (82480 <generic_isr+0x6c>)
   8241c:	4798      	blx	r3
   8241e:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   82420:	f010 0f01 	tst.w	r0, #1
   82424:	d103      	bne.n	8242e <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   82426:	f015 0f02 	tst.w	r5, #2
   8242a:	d115      	bne.n	82458 <generic_isr+0x44>
   8242c:	bd70      	pop	{r4, r5, r6, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   8242e:	4620      	mov	r0, r4
   82430:	f850 3b1c 	ldr.w	r3, [r0], #28
   82434:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   82436:	b2f6      	uxtb	r6, r6
   82438:	2200      	movs	r2, #0
   8243a:	4631      	mov	r1, r6
   8243c:	4b11      	ldr	r3, [pc, #68]	; (82484 <generic_isr+0x70>)
   8243e:	4798      	blx	r3
        if (driver->cdc_enabled)
   82440:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   82444:	f013 0f04 	tst.w	r3, #4
   82448:	d0ed      	beq.n	82426 <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   8244a:	2200      	movs	r2, #0
   8244c:	4631      	mov	r1, r6
   8244e:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   82452:	4b0c      	ldr	r3, [pc, #48]	; (82484 <generic_isr+0x70>)
   82454:	4798      	blx	r3
   82456:	e7e6      	b.n	82426 <generic_isr+0x12>
		if (circ_buf_has_char(&driver->txbuf)){
   82458:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   8245c:	4628      	mov	r0, r5
   8245e:	4b0a      	ldr	r3, [pc, #40]	; (82488 <generic_isr+0x74>)
   82460:	4798      	blx	r3
   82462:	b920      	cbnz	r0, 8246e <generic_isr+0x5a>
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   82464:	2102      	movs	r1, #2
   82466:	6820      	ldr	r0, [r4, #0]
   82468:	4b08      	ldr	r3, [pc, #32]	; (8248c <generic_isr+0x78>)
   8246a:	4798      	blx	r3
}
   8246c:	e7de      	b.n	8242c <generic_isr+0x18>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   8246e:	6824      	ldr	r4, [r4, #0]
   82470:	4628      	mov	r0, r5
   82472:	4b07      	ldr	r3, [pc, #28]	; (82490 <generic_isr+0x7c>)
   82474:	4798      	blx	r3
   82476:	4601      	mov	r1, r0
   82478:	4620      	mov	r0, r4
   8247a:	4b06      	ldr	r3, [pc, #24]	; (82494 <generic_isr+0x80>)
   8247c:	4798      	blx	r3
   8247e:	bd70      	pop	{r4, r5, r6, pc}
   82480:	0008618d 	.word	0x0008618d
   82484:	000807cb 	.word	0x000807cb
   82488:	00080813 	.word	0x00080813
   8248c:	00086185 	.word	0x00086185
   82490:	000807f5 	.word	0x000807f5
   82494:	000861ad 	.word	0x000861ad

00082498 <USART0_Handler>:
{
   82498:	b508      	push	{r3, lr}
	generic_isr(&usart0_driver);
   8249a:	4802      	ldr	r0, [pc, #8]	; (824a4 <USART0_Handler+0xc>)
   8249c:	4b02      	ldr	r3, [pc, #8]	; (824a8 <USART0_Handler+0x10>)
   8249e:	4798      	blx	r3
   824a0:	bd08      	pop	{r3, pc}
   824a2:	bf00      	nop
   824a4:	200004ac 	.word	0x200004ac
   824a8:	00082415 	.word	0x00082415

000824ac <configure_usart>:
{
   824ac:	b538      	push	{r3, r4, r5, lr}
   824ae:	4604      	mov	r4, r0
   824b0:	f89d 0010 	ldrb.w	r0, [sp, #16]
    driver->usartopts.baudrate = baud;
   824b4:	6061      	str	r1, [r4, #4]
    switch(stop_bits)
   824b6:	2a01      	cmp	r2, #1
   824b8:	d00e      	beq.n	824d8 <configure_usart+0x2c>
   824ba:	b122      	cbz	r2, 824c6 <configure_usart+0x1a>
   824bc:	2a02      	cmp	r2, #2
   824be:	d00f      	beq.n	824e0 <configure_usart+0x34>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   824c0:	2200      	movs	r2, #0
   824c2:	6122      	str	r2, [r4, #16]
   824c4:	e001      	b.n	824ca <configure_usart+0x1e>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   824c6:	2200      	movs	r2, #0
   824c8:	6122      	str	r2, [r4, #16]
    switch(parity)
   824ca:	2b04      	cmp	r3, #4
   824cc:	d827      	bhi.n	8251e <configure_usart+0x72>
   824ce:	e8df f003 	tbb	[pc, r3]
   824d2:	170b      	.short	0x170b
   824d4:	1e1b      	.short	0x1e1b
   824d6:	22          	.byte	0x22
   824d7:	00          	.byte	0x00
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   824d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   824dc:	6122      	str	r2, [r4, #16]
            break;
   824de:	e7f4      	b.n	824ca <configure_usart+0x1e>
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   824e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   824e4:	6122      	str	r2, [r4, #16]
            break;
   824e6:	e7f0      	b.n	824ca <configure_usart+0x1e>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   824e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   824ec:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   824ee:	2806      	cmp	r0, #6
   824f0:	d036      	beq.n	82560 <configure_usart+0xb4>
   824f2:	2807      	cmp	r0, #7
   824f4:	d037      	beq.n	82566 <configure_usart+0xba>
   824f6:	2805      	cmp	r0, #5
   824f8:	d015      	beq.n	82526 <configure_usart+0x7a>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   824fa:	23c0      	movs	r3, #192	; 0xc0
   824fc:	60a3      	str	r3, [r4, #8]
   824fe:	e014      	b.n	8252a <configure_usart+0x7e>
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   82500:	f44f 7300 	mov.w	r3, #512	; 0x200
   82504:	60e3      	str	r3, [r4, #12]
            break;
   82506:	e7f2      	b.n	824ee <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   82508:	2300      	movs	r3, #0
   8250a:	60e3      	str	r3, [r4, #12]
            break;
   8250c:	e7ef      	b.n	824ee <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   8250e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82512:	60e3      	str	r3, [r4, #12]
            break;
   82514:	e7eb      	b.n	824ee <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   82516:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8251a:	60e3      	str	r3, [r4, #12]
            break;							
   8251c:	e7e7      	b.n	824ee <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   8251e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82522:	60e3      	str	r3, [r4, #12]
   82524:	e7e3      	b.n	824ee <configure_usart+0x42>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   82526:	2300      	movs	r3, #0
   82528:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   8252a:	2300      	movs	r3, #0
   8252c:	6163      	str	r3, [r4, #20]
    usart_enableIO(driver);
   8252e:	4620      	mov	r0, r4
   82530:	4b0e      	ldr	r3, [pc, #56]	; (8256c <configure_usart+0xc0>)
   82532:	4798      	blx	r3
    driver->enabled = 1;
   82534:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   82538:	f043 0302 	orr.w	r3, r3, #2
   8253c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   82540:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   82544:	4d0a      	ldr	r5, [pc, #40]	; (82570 <configure_usart+0xc4>)
   82546:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   82548:	f104 001c 	add.w	r0, r4, #28
   8254c:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   8254e:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   82552:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   82554:	4a07      	ldr	r2, [pc, #28]	; (82574 <configure_usart+0xc8>)
   82556:	1d21      	adds	r1, r4, #4
   82558:	6820      	ldr	r0, [r4, #0]
   8255a:	4b07      	ldr	r3, [pc, #28]	; (82578 <configure_usart+0xcc>)
   8255c:	4798      	blx	r3
}
   8255e:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   82560:	2340      	movs	r3, #64	; 0x40
   82562:	60a3      	str	r3, [r4, #8]
            break;
   82564:	e7e1      	b.n	8252a <configure_usart+0x7e>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   82566:	2380      	movs	r3, #128	; 0x80
   82568:	60a3      	str	r3, [r4, #8]
            break;					
   8256a:	e7de      	b.n	8252a <configure_usart+0x7e>
   8256c:	00082401 	.word	0x00082401
   82570:	000807c1 	.word	0x000807c1
   82574:	05b8d800 	.word	0x05b8d800
   82578:	000860ad 	.word	0x000860ad

0008257c <usart_driver_putchar>:
{
   8257c:	b570      	push	{r4, r5, r6, lr}
   8257e:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   82580:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   82584:	2200      	movs	r2, #0
   82586:	4628      	mov	r0, r5
   82588:	4b0e      	ldr	r3, [pc, #56]	; (825c4 <usart_driver_putchar+0x48>)
   8258a:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   8258c:	6820      	ldr	r0, [r4, #0]
   8258e:	4b0e      	ldr	r3, [pc, #56]	; (825c8 <usart_driver_putchar+0x4c>)
   82590:	4798      	blx	r3
   82592:	f010 0f02 	tst.w	r0, #2
   82596:	d000      	beq.n	8259a <usart_driver_putchar+0x1e>
   82598:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   8259a:	6820      	ldr	r0, [r4, #0]
   8259c:	4b0b      	ldr	r3, [pc, #44]	; (825cc <usart_driver_putchar+0x50>)
   8259e:	4798      	blx	r3
   825a0:	f010 0f02 	tst.w	r0, #2
   825a4:	d104      	bne.n	825b0 <usart_driver_putchar+0x34>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   825a6:	2102      	movs	r1, #2
   825a8:	6820      	ldr	r0, [r4, #0]
   825aa:	4b09      	ldr	r3, [pc, #36]	; (825d0 <usart_driver_putchar+0x54>)
   825ac:	4798      	blx	r3
}
   825ae:	e7f3      	b.n	82598 <usart_driver_putchar+0x1c>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   825b0:	6826      	ldr	r6, [r4, #0]
   825b2:	4628      	mov	r0, r5
   825b4:	4b07      	ldr	r3, [pc, #28]	; (825d4 <usart_driver_putchar+0x58>)
   825b6:	4798      	blx	r3
   825b8:	4601      	mov	r1, r0
   825ba:	4630      	mov	r0, r6
   825bc:	4b06      	ldr	r3, [pc, #24]	; (825d8 <usart_driver_putchar+0x5c>)
   825be:	4798      	blx	r3
   825c0:	e7f1      	b.n	825a6 <usart_driver_putchar+0x2a>
   825c2:	bf00      	nop
   825c4:	000807cb 	.word	0x000807cb
   825c8:	00086189 	.word	0x00086189
   825cc:	0008618d 	.word	0x0008618d
   825d0:	00086181 	.word	0x00086181
   825d4:	000807f5 	.word	0x000807f5
   825d8:	000861ad 	.word	0x000861ad

000825dc <get_nth_available_driver>:
		if (port == 0) break;
   825dc:	2800      	cmp	r0, #0
}
   825de:	4802      	ldr	r0, [pc, #8]	; (825e8 <get_nth_available_driver+0xc>)
   825e0:	bf18      	it	ne
   825e2:	2000      	movne	r0, #0
   825e4:	4770      	bx	lr
   825e6:	bf00      	nop
   825e8:	200004ac 	.word	0x200004ac

000825ec <ctrl_usart_in>:
{
   825ec:	b510      	push	{r4, lr}
   825ee:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   825f0:	4b24      	ldr	r3, [pc, #144]	; (82684 <ctrl_usart_in+0x98>)
   825f2:	885c      	ldrh	r4, [r3, #2]
   825f4:	0a20      	lsrs	r0, r4, #8
   825f6:	4b24      	ldr	r3, [pc, #144]	; (82688 <ctrl_usart_in+0x9c>)
   825f8:	4798      	blx	r3
    if (!driver)
   825fa:	2800      	cmp	r0, #0
   825fc:	d03f      	beq.n	8267e <ctrl_usart_in+0x92>
   825fe:	4603      	mov	r3, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   82600:	b2e0      	uxtb	r0, r4
   82602:	2814      	cmp	r0, #20
   82604:	d007      	beq.n	82616 <ctrl_usart_in+0x2a>
   82606:	2818      	cmp	r0, #24
   82608:	d01f      	beq.n	8264a <ctrl_usart_in+0x5e>
    return false;
   8260a:	2810      	cmp	r0, #16
   8260c:	bf14      	ite	ne
   8260e:	2000      	movne	r0, #0
   82610:	2001      	moveq	r0, #1
}
   82612:	b002      	add	sp, #8
   82614:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   82616:	4a1b      	ldr	r2, [pc, #108]	; (82684 <ctrl_usart_in+0x98>)
   82618:	88d2      	ldrh	r2, [r2, #6]
   8261a:	2a03      	cmp	r2, #3
   8261c:	d801      	bhi.n	82622 <ctrl_usart_in+0x36>
            return false;
   8261e:	2000      	movs	r0, #0
   82620:	e7f7      	b.n	82612 <ctrl_usart_in+0x26>
        udd_g_ctrlreq.payload = respbuf;
   82622:	4a18      	ldr	r2, [pc, #96]	; (82684 <ctrl_usart_in+0x98>)
   82624:	4c19      	ldr	r4, [pc, #100]	; (8268c <ctrl_usart_in+0xa0>)
   82626:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   82628:	2104      	movs	r1, #4
   8262a:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->rxbuf);
   8262c:	f103 001c 	add.w	r0, r3, #28
   82630:	4b17      	ldr	r3, [pc, #92]	; (82690 <ctrl_usart_in+0xa4>)
   82632:	4798      	blx	r3
        word2buf(respbuf, cnt);
   82634:	7020      	strb	r0, [r4, #0]
   82636:	f3c0 2307 	ubfx	r3, r0, #8, #8
   8263a:	7063      	strb	r3, [r4, #1]
   8263c:	f3c0 4307 	ubfx	r3, r0, #16, #8
   82640:	70a3      	strb	r3, [r4, #2]
   82642:	0e00      	lsrs	r0, r0, #24
   82644:	70e0      	strb	r0, [r4, #3]
        return true;
   82646:	2001      	movs	r0, #1
   82648:	e7e3      	b.n	82612 <ctrl_usart_in+0x26>
        if (udd_g_ctrlreq.req.wLength < 4) {
   8264a:	4a0e      	ldr	r2, [pc, #56]	; (82684 <ctrl_usart_in+0x98>)
   8264c:	88d2      	ldrh	r2, [r2, #6]
   8264e:	2a03      	cmp	r2, #3
   82650:	d801      	bhi.n	82656 <ctrl_usart_in+0x6a>
            return false;
   82652:	2000      	movs	r0, #0
   82654:	e7dd      	b.n	82612 <ctrl_usart_in+0x26>
        udd_g_ctrlreq.payload = respbuf;
   82656:	4a0b      	ldr	r2, [pc, #44]	; (82684 <ctrl_usart_in+0x98>)
   82658:	4c0c      	ldr	r4, [pc, #48]	; (8268c <ctrl_usart_in+0xa0>)
   8265a:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   8265c:	2104      	movs	r1, #4
   8265e:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   82660:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
   82664:	4b0a      	ldr	r3, [pc, #40]	; (82690 <ctrl_usart_in+0xa4>)
   82666:	4798      	blx	r3
        word2buf(respbuf, cnt);
   82668:	7020      	strb	r0, [r4, #0]
   8266a:	f3c0 2307 	ubfx	r3, r0, #8, #8
   8266e:	7063      	strb	r3, [r4, #1]
   82670:	f3c0 4307 	ubfx	r3, r0, #16, #8
   82674:	70a3      	strb	r3, [r4, #2]
   82676:	0e00      	lsrs	r0, r0, #24
   82678:	70e0      	strb	r0, [r4, #3]
        return true;
   8267a:	2001      	movs	r0, #1
   8267c:	e7c9      	b.n	82612 <ctrl_usart_in+0x26>
        return false;
   8267e:	2000      	movs	r0, #0
   82680:	e7c7      	b.n	82612 <ctrl_usart_in+0x26>
   82682:	bf00      	nop
   82684:	2000287c 	.word	0x2000287c
   82688:	000825dd 	.word	0x000825dd
   8268c:	200023b8 	.word	0x200023b8
   82690:	0008081f 	.word	0x0008081f

00082694 <ctrl_usart_out>:
{
   82694:	b570      	push	{r4, r5, r6, lr}
   82696:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   82698:	4b1d      	ldr	r3, [pc, #116]	; (82710 <ctrl_usart_out+0x7c>)
   8269a:	885c      	ldrh	r4, [r3, #2]
   8269c:	0a20      	lsrs	r0, r4, #8
   8269e:	4b1d      	ldr	r3, [pc, #116]	; (82714 <ctrl_usart_out+0x80>)
   826a0:	4798      	blx	r3
    if (!driver) return;
   826a2:	b138      	cbz	r0, 826b4 <ctrl_usart_out+0x20>
   826a4:	4605      	mov	r5, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   826a6:	b2e3      	uxtb	r3, r4
   826a8:	2b11      	cmp	r3, #17
   826aa:	d018      	beq.n	826de <ctrl_usart_out+0x4a>
   826ac:	2b12      	cmp	r3, #18
   826ae:	d023      	beq.n	826f8 <ctrl_usart_out+0x64>
   826b0:	2b10      	cmp	r3, #16
   826b2:	d001      	beq.n	826b8 <ctrl_usart_out+0x24>
}
   826b4:	b002      	add	sp, #8
   826b6:	bd70      	pop	{r4, r5, r6, pc}
        if (udd_g_ctrlreq.req.wLength != 7) return false;
   826b8:	4b15      	ldr	r3, [pc, #84]	; (82710 <ctrl_usart_out+0x7c>)
   826ba:	88db      	ldrh	r3, [r3, #6]
   826bc:	2b07      	cmp	r3, #7
   826be:	d1f9      	bne.n	826b4 <ctrl_usart_out+0x20>
        buf2word(baud, udd_g_ctrlreq.payload);
   826c0:	4c13      	ldr	r4, [pc, #76]	; (82710 <ctrl_usart_out+0x7c>)
   826c2:	68a3      	ldr	r3, [r4, #8]
   826c4:	681e      	ldr	r6, [r3, #0]
		usart_enableIO(driver);
   826c6:	4b14      	ldr	r3, [pc, #80]	; (82718 <ctrl_usart_out+0x84>)
   826c8:	4798      	blx	r3
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   826ca:	68a1      	ldr	r1, [r4, #8]
   826cc:	794b      	ldrb	r3, [r1, #5]
   826ce:	790a      	ldrb	r2, [r1, #4]
   826d0:	7989      	ldrb	r1, [r1, #6]
   826d2:	9100      	str	r1, [sp, #0]
   826d4:	4631      	mov	r1, r6
   826d6:	4628      	mov	r0, r5
   826d8:	4c10      	ldr	r4, [pc, #64]	; (8271c <ctrl_usart_out+0x88>)
   826da:	47a0      	blx	r4
        return true;
   826dc:	e7ea      	b.n	826b4 <ctrl_usart_out+0x20>
		usart_enableIO(driver);
   826de:	4b0e      	ldr	r3, [pc, #56]	; (82718 <ctrl_usart_out+0x84>)
   826e0:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   826e2:	6828      	ldr	r0, [r5, #0]
   826e4:	4b0e      	ldr	r3, [pc, #56]	; (82720 <ctrl_usart_out+0x8c>)
   826e6:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   826e8:	6828      	ldr	r0, [r5, #0]
   826ea:	4b0e      	ldr	r3, [pc, #56]	; (82724 <ctrl_usart_out+0x90>)
   826ec:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   826ee:	2101      	movs	r1, #1
   826f0:	6828      	ldr	r0, [r5, #0]
   826f2:	4b0d      	ldr	r3, [pc, #52]	; (82728 <ctrl_usart_out+0x94>)
   826f4:	4798      	blx	r3
		return;
   826f6:	e7dd      	b.n	826b4 <ctrl_usart_out+0x20>
        usart_disable_rx(driver->usart);
   826f8:	6800      	ldr	r0, [r0, #0]
   826fa:	4b0c      	ldr	r3, [pc, #48]	; (8272c <ctrl_usart_out+0x98>)
   826fc:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   826fe:	6828      	ldr	r0, [r5, #0]
   82700:	4b0b      	ldr	r3, [pc, #44]	; (82730 <ctrl_usart_out+0x9c>)
   82702:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   82704:	2103      	movs	r1, #3
   82706:	6828      	ldr	r0, [r5, #0]
   82708:	4b0a      	ldr	r3, [pc, #40]	; (82734 <ctrl_usart_out+0xa0>)
   8270a:	4798      	blx	r3
        return true;
   8270c:	e7d2      	b.n	826b4 <ctrl_usart_out+0x20>
   8270e:	bf00      	nop
   82710:	2000287c 	.word	0x2000287c
   82714:	000825dd 	.word	0x000825dd
   82718:	00082401 	.word	0x00082401
   8271c:	000824ad 	.word	0x000824ad
   82720:	00086175 	.word	0x00086175
   82724:	00086169 	.word	0x00086169
   82728:	00086181 	.word	0x00086181
   8272c:	0008617b 	.word	0x0008617b
   82730:	0008616f 	.word	0x0008616f
   82734:	00086185 	.word	0x00086185

00082738 <ctrl_usart_cb>:
{
   82738:	b508      	push	{r3, lr}
	ctrl_usart_out();
   8273a:	4b01      	ldr	r3, [pc, #4]	; (82740 <ctrl_usart_cb+0x8>)
   8273c:	4798      	blx	r3
   8273e:	bd08      	pop	{r3, pc}
   82740:	00082695 	.word	0x00082695

00082744 <naeusb_cdc_settings_out>:
{
   82744:	b570      	push	{r4, r5, r6, lr}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   82746:	4b0c      	ldr	r3, [pc, #48]	; (82778 <naeusb_cdc_settings_out+0x34>)
   82748:	885e      	ldrh	r6, [r3, #2]
   8274a:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   8274c:	4d0b      	ldr	r5, [pc, #44]	; (8277c <naeusb_cdc_settings_out+0x38>)
   8274e:	4620      	mov	r0, r4
   82750:	47a8      	blx	r5
        if (driver) {
   82752:	b160      	cbz	r0, 8276e <naeusb_cdc_settings_out+0x2a>
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   82754:	fa46 f204 	asr.w	r2, r6, r4
   82758:	f012 0f01 	tst.w	r2, #1
                driver->cdc_settings_change = 1;
   8275c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
   82760:	bf14      	ite	ne
   82762:	f042 0208 	orrne.w	r2, r2, #8
                driver->cdc_settings_change = 0;
   82766:	f36f 02c3 	bfceq	r2, #3, #1
   8276a:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
   8276e:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < 4; i++) {
   82770:	2c04      	cmp	r4, #4
   82772:	d1ec      	bne.n	8274e <naeusb_cdc_settings_out+0xa>
}
   82774:	bd70      	pop	{r4, r5, r6, pc}
   82776:	bf00      	nop
   82778:	2000287c 	.word	0x2000287c
   8277c:	000825dd 	.word	0x000825dd

00082780 <ctrl_usart_cb_data>:
{		
   82780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   82782:	4b0c      	ldr	r3, [pc, #48]	; (827b4 <ctrl_usart_cb_data+0x34>)
   82784:	8858      	ldrh	r0, [r3, #2]
   82786:	0a00      	lsrs	r0, r0, #8
   82788:	4b0b      	ldr	r3, [pc, #44]	; (827b8 <ctrl_usart_cb_data+0x38>)
   8278a:	4798      	blx	r3
	if (!driver) return;
   8278c:	b188      	cbz	r0, 827b2 <ctrl_usart_cb_data+0x32>
   8278e:	4606      	mov	r6, r0
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82790:	4b08      	ldr	r3, [pc, #32]	; (827b4 <ctrl_usart_cb_data+0x34>)
   82792:	88da      	ldrh	r2, [r3, #6]
   82794:	899b      	ldrh	r3, [r3, #12]
   82796:	4293      	cmp	r3, r2
   82798:	d30b      	bcc.n	827b2 <ctrl_usart_cb_data+0x32>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   8279a:	b152      	cbz	r2, 827b2 <ctrl_usart_cb_data+0x32>
   8279c:	2400      	movs	r4, #0
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   8279e:	4d05      	ldr	r5, [pc, #20]	; (827b4 <ctrl_usart_cb_data+0x34>)
   827a0:	4f06      	ldr	r7, [pc, #24]	; (827bc <ctrl_usart_cb_data+0x3c>)
   827a2:	68ab      	ldr	r3, [r5, #8]
   827a4:	5d19      	ldrb	r1, [r3, r4]
   827a6:	4630      	mov	r0, r6
   827a8:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   827aa:	3401      	adds	r4, #1
   827ac:	88eb      	ldrh	r3, [r5, #6]
   827ae:	42a3      	cmp	r3, r4
   827b0:	dcf7      	bgt.n	827a2 <ctrl_usart_cb_data+0x22>
   827b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   827b4:	2000287c 	.word	0x2000287c
   827b8:	000825dd 	.word	0x000825dd
   827bc:	0008257d 	.word	0x0008257d

000827c0 <naeusart_register_handlers>:
{
   827c0:	b570      	push	{r4, r5, r6, lr}
   827c2:	2400      	movs	r4, #0
		usart_driver *driver = get_nth_available_driver(i);
   827c4:	4d09      	ldr	r5, [pc, #36]	; (827ec <naeusart_register_handlers+0x2c>)
		usart_enableIO(driver);
   827c6:	4e0a      	ldr	r6, [pc, #40]	; (827f0 <naeusart_register_handlers+0x30>)
   827c8:	e002      	b.n	827d0 <naeusart_register_handlers+0x10>
   827ca:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 4; i++) {
   827cc:	2c04      	cmp	r4, #4
   827ce:	d005      	beq.n	827dc <naeusart_register_handlers+0x1c>
		usart_driver *driver = get_nth_available_driver(i);
   827d0:	4620      	mov	r0, r4
   827d2:	47a8      	blx	r5
		if (!driver) continue;
   827d4:	2800      	cmp	r0, #0
   827d6:	d0f8      	beq.n	827ca <naeusart_register_handlers+0xa>
		usart_enableIO(driver);
   827d8:	47b0      	blx	r6
   827da:	e7f6      	b.n	827ca <naeusart_register_handlers+0xa>
    naeusb_add_in_handler(usart_setup_in_received);
   827dc:	4805      	ldr	r0, [pc, #20]	; (827f4 <naeusart_register_handlers+0x34>)
   827de:	4b06      	ldr	r3, [pc, #24]	; (827f8 <naeusart_register_handlers+0x38>)
   827e0:	4798      	blx	r3
    naeusb_add_out_handler(usart_setup_out_received);
   827e2:	4806      	ldr	r0, [pc, #24]	; (827fc <naeusart_register_handlers+0x3c>)
   827e4:	4b06      	ldr	r3, [pc, #24]	; (82800 <naeusart_register_handlers+0x40>)
   827e6:	4798      	blx	r3
   827e8:	bd70      	pop	{r4, r5, r6, pc}
   827ea:	bf00      	nop
   827ec:	000825dd 	.word	0x000825dd
   827f0:	00082401 	.word	0x00082401
   827f4:	00082849 	.word	0x00082849
   827f8:	00081311 	.word	0x00081311
   827fc:	00082339 	.word	0x00082339
   82800:	00081335 	.word	0x00081335

00082804 <naeusb_cdc_settings_in>:
{
   82804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82806:	4d0d      	ldr	r5, [pc, #52]	; (8283c <naeusb_cdc_settings_in+0x38>)
   82808:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   8280a:	4f0d      	ldr	r7, [pc, #52]	; (82840 <naeusb_cdc_settings_in+0x3c>)
		respbuf[i] = 0;
   8280c:	4626      	mov	r6, r4
        usart_driver *driver = get_nth_available_driver(i);
   8280e:	4620      	mov	r0, r4
   82810:	47b8      	blx	r7
		respbuf[i] = 0;
   82812:	702e      	strb	r6, [r5, #0]
        if (driver)
   82814:	b120      	cbz	r0, 82820 <naeusb_cdc_settings_in+0x1c>
            respbuf[i] = driver->cdc_settings_change;
   82816:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   8281a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   8281e:	702b      	strb	r3, [r5, #0]
   82820:	3401      	adds	r4, #1
   82822:	3501      	adds	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   82824:	2c04      	cmp	r4, #4
   82826:	d1f2      	bne.n	8280e <naeusb_cdc_settings_in+0xa>
    udd_g_ctrlreq.payload = respbuf;
   82828:	4b06      	ldr	r3, [pc, #24]	; (82844 <naeusb_cdc_settings_in+0x40>)
   8282a:	4a04      	ldr	r2, [pc, #16]	; (8283c <naeusb_cdc_settings_in+0x38>)
   8282c:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   8282e:	88da      	ldrh	r2, [r3, #6]
   82830:	2a04      	cmp	r2, #4
   82832:	bf28      	it	cs
   82834:	2204      	movcs	r2, #4
   82836:	819a      	strh	r2, [r3, #12]
}
   82838:	2001      	movs	r0, #1
   8283a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8283c:	200023b8 	.word	0x200023b8
   82840:	000825dd 	.word	0x000825dd
   82844:	2000287c 	.word	0x2000287c

00082848 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   82848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   8284c:	4b24      	ldr	r3, [pc, #144]	; (828e0 <usart_setup_in_received+0x98>)
   8284e:	785b      	ldrb	r3, [r3, #1]
   82850:	3b1a      	subs	r3, #26
   82852:	2b17      	cmp	r3, #23
   82854:	d83d      	bhi.n	828d2 <usart_setup_in_received+0x8a>
   82856:	e8df f003 	tbb	[pc, r3]
   8285a:	0c10      	.short	0x0c10
   8285c:	3c3c3c3c 	.word	0x3c3c3c3c
   82860:	3c3c3430 	.word	0x3c3c3430
   82864:	3c3c3c3c 	.word	0x3c3c3c3c
   82868:	3c3c3c3c 	.word	0x3c3c3c3c
   8286c:	3c3c3c3c 	.word	0x3c3c3c3c
   82870:	383c      	.short	0x383c
    case REQ_USART0_CONFIG:
        return ctrl_usart_in();
   82872:	4b1c      	ldr	r3, [pc, #112]	; (828e4 <usart_setup_in_received+0x9c>)
   82874:	4798      	blx	r3
   82876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   8287a:	4b19      	ldr	r3, [pc, #100]	; (828e0 <usart_setup_in_received+0x98>)
   8287c:	8858      	ldrh	r0, [r3, #2]
   8287e:	0a00      	lsrs	r0, r0, #8
   82880:	4b19      	ldr	r3, [pc, #100]	; (828e8 <usart_setup_in_received+0xa0>)
   82882:	4798      	blx	r3
		if (!driver) return false;
   82884:	b340      	cbz	r0, 828d8 <usart_setup_in_received+0x90>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82886:	4b16      	ldr	r3, [pc, #88]	; (828e0 <usart_setup_in_received+0x98>)
   82888:	88db      	ldrh	r3, [r3, #6]
   8288a:	b1a3      	cbz	r3, 828b6 <usart_setup_in_received+0x6e>
   8288c:	4d17      	ldr	r5, [pc, #92]	; (828ec <usart_setup_in_received+0xa4>)
   8288e:	2400      	movs	r4, #0
    return get_from_circ_buf(&driver->rxbuf);
   82890:	f100 081c 	add.w	r8, r0, #28
   82894:	4e16      	ldr	r6, [pc, #88]	; (828f0 <usart_setup_in_received+0xa8>)
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82896:	4f12      	ldr	r7, [pc, #72]	; (828e0 <usart_setup_in_received+0x98>)
    return get_from_circ_buf(&driver->rxbuf);
   82898:	4640      	mov	r0, r8
   8289a:	47b0      	blx	r6
            respbuf[cnt] = usart_driver_getchar(driver);
   8289c:	f805 0f01 	strb.w	r0, [r5, #1]!
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   828a0:	3401      	adds	r4, #1
   828a2:	88fb      	ldrh	r3, [r7, #6]
   828a4:	42a3      	cmp	r3, r4
   828a6:	d8f7      	bhi.n	82898 <usart_setup_in_received+0x50>
        }
        udd_g_ctrlreq.payload = respbuf;
   828a8:	4b0d      	ldr	r3, [pc, #52]	; (828e0 <usart_setup_in_received+0x98>)
   828aa:	4a12      	ldr	r2, [pc, #72]	; (828f4 <usart_setup_in_received+0xac>)
   828ac:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   828ae:	819c      	strh	r4, [r3, #12]
        return true;
   828b0:	2001      	movs	r0, #1
   828b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   828b6:	2400      	movs	r4, #0
   828b8:	e7f6      	b.n	828a8 <usart_setup_in_received+0x60>
        break;
		
#ifdef CW_PROG_XMEGA
    case REQ_XMEGA_PROGRAM:
        return XPROGProtocol_Command();
   828ba:	4b0f      	ldr	r3, [pc, #60]	; (828f8 <usart_setup_in_received+0xb0>)
   828bc:	4798      	blx	r3
   828be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
#endif

#ifdef CW_PROG_AVR        
    case REQ_AVR_PROGRAM:
        return V2Protocol_ProcessCommand();
   828c2:	4b0e      	ldr	r3, [pc, #56]	; (828fc <usart_setup_in_received+0xb4>)
   828c4:	4798      	blx	r3
   828c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
#endif
	
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
   828ca:	4b0d      	ldr	r3, [pc, #52]	; (82900 <usart_setup_in_received+0xb8>)
   828cc:	4798      	blx	r3
   828ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
    }
    return false;
   828d2:	2000      	movs	r0, #0
   828d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!driver) return false;
   828d8:	2000      	movs	r0, #0
}
   828da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828de:	bf00      	nop
   828e0:	2000287c 	.word	0x2000287c
   828e4:	000825ed 	.word	0x000825ed
   828e8:	000825dd 	.word	0x000825dd
   828ec:	200023b7 	.word	0x200023b7
   828f0:	000807f5 	.word	0x000807f5
   828f4:	200023b8 	.word	0x200023b8
   828f8:	00083a39 	.word	0x00083a39
   828fc:	0008337d 	.word	0x0008337d
   82900:	00082805 	.word	0x00082805

00082904 <cdc_enable>:
{
   82904:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   82906:	4b05      	ldr	r3, [pc, #20]	; (8291c <cdc_enable+0x18>)
   82908:	4798      	blx	r3
    driver->cdc_enabled = 1;
   8290a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   8290e:	f043 0304 	orr.w	r3, r3, #4
   82912:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   82916:	2001      	movs	r0, #1
   82918:	bd08      	pop	{r3, pc}
   8291a:	bf00      	nop
   8291c:	000825dd 	.word	0x000825dd

00082920 <cdc_disable>:
{
   82920:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   82922:	4b04      	ldr	r3, [pc, #16]	; (82934 <cdc_disable+0x14>)
   82924:	4798      	blx	r3
    driver->cdc_enabled = 0;
   82926:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   8292a:	f36f 0382 	bfc	r3, #2, #1
   8292e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
   82932:	bd08      	pop	{r3, pc}
   82934:	000825dd 	.word	0x000825dd

00082938 <my_callback_rx_notify>:
{
   82938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8293c:	4681      	mov	r9, r0
	usart_driver *driver = get_nth_available_driver(port);
   8293e:	4b17      	ldr	r3, [pc, #92]	; (8299c <my_callback_rx_notify+0x64>)
   82940:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   82942:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82946:	f003 0306 	and.w	r3, r3, #6
   8294a:	2b06      	cmp	r3, #6
   8294c:	d001      	beq.n	82952 <my_callback_rx_notify+0x1a>
   8294e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82952:	4607      	mov	r7, r0
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   82954:	4648      	mov	r0, r9
   82956:	4b12      	ldr	r3, [pc, #72]	; (829a0 <my_callback_rx_notify+0x68>)
   82958:	4798      	blx	r3
        while (num_char > 0) {
   8295a:	4605      	mov	r5, r0
   8295c:	2800      	cmp	r0, #0
   8295e:	d0f6      	beq.n	8294e <my_callback_rx_notify+0x16>
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   82960:	4e10      	ldr	r6, [pc, #64]	; (829a4 <my_callback_rx_notify+0x6c>)
   82962:	f8df a044 	ldr.w	sl, [pc, #68]	; 829a8 <my_callback_rx_notify+0x70>
                usart_driver_putchar(driver, uart_buf[i]);
   82966:	f8df 8044 	ldr.w	r8, [pc, #68]	; 829ac <my_callback_rx_notify+0x74>
            num_char = (num_char > 512) ? 512 : num_char;
   8296a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   8296e:	bf28      	it	cs
   82970:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   82974:	462a      	mov	r2, r5
   82976:	4631      	mov	r1, r6
   82978:	4648      	mov	r0, r9
   8297a:	47d0      	blx	sl
            for (uint16_t i = 0; i < num_char; i++) {
   8297c:	b13d      	cbz	r5, 8298e <my_callback_rx_notify+0x56>
   8297e:	2400      	movs	r4, #0
                usart_driver_putchar(driver, uart_buf[i]);
   82980:	5d31      	ldrb	r1, [r6, r4]
   82982:	4638      	mov	r0, r7
   82984:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   82986:	3401      	adds	r4, #1
   82988:	b2a4      	uxth	r4, r4
   8298a:	42a5      	cmp	r5, r4
   8298c:	d8f8      	bhi.n	82980 <my_callback_rx_notify+0x48>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   8298e:	4648      	mov	r0, r9
   82990:	4b03      	ldr	r3, [pc, #12]	; (829a0 <my_callback_rx_notify+0x68>)
   82992:	4798      	blx	r3
        while (num_char > 0) {
   82994:	4605      	mov	r5, r0
   82996:	2800      	cmp	r0, #0
   82998:	d1e7      	bne.n	8296a <my_callback_rx_notify+0x32>
   8299a:	e7d8      	b.n	8294e <my_callback_rx_notify+0x16>
   8299c:	000825dd 	.word	0x000825dd
   829a0:	000803f1 	.word	0x000803f1
   829a4:	20001e28 	.word	0x20001e28
   829a8:	00080601 	.word	0x00080601
   829ac:	0008257d 	.word	0x0008257d

000829b0 <my_callback_config>:
{
   829b0:	b530      	push	{r4, r5, lr}
   829b2:	b083      	sub	sp, #12
   829b4:	460d      	mov	r5, r1
	usart_driver *driver = get_nth_available_driver(port);
   829b6:	4b14      	ldr	r3, [pc, #80]	; (82a08 <my_callback_config+0x58>)
   829b8:	4798      	blx	r3
    if (driver->cdc_enabled) {
   829ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   829be:	f013 0f04 	tst.w	r3, #4
   829c2:	d003      	beq.n	829cc <my_callback_config+0x1c>
   829c4:	4604      	mov	r4, r0
        switch(cfg->bParityType) {
   829c6:	796b      	ldrb	r3, [r5, #5]
   829c8:	2b04      	cmp	r3, #4
   829ca:	d901      	bls.n	829d0 <my_callback_config+0x20>
}
   829cc:	b003      	add	sp, #12
   829ce:	bd30      	pop	{r4, r5, pc}
        uint32_t baud = cfg->dwDTERate;
   829d0:	6829      	ldr	r1, [r5, #0]
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   829d2:	79ab      	ldrb	r3, [r5, #6]
   829d4:	3b05      	subs	r3, #5
   829d6:	019b      	lsls	r3, r3, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   829d8:	b2db      	uxtb	r3, r3
   829da:	9300      	str	r3, [sp, #0]
   829dc:	2300      	movs	r3, #0
   829de:	461a      	mov	r2, r3
   829e0:	4d0a      	ldr	r5, [pc, #40]	; (82a0c <my_callback_config+0x5c>)
   829e2:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver) & UART_IER_RXRDY)) {
   829e4:	4620      	mov	r0, r4
   829e6:	4b0a      	ldr	r3, [pc, #40]	; (82a10 <my_callback_config+0x60>)
   829e8:	4798      	blx	r3
   829ea:	f010 0f01 	tst.w	r0, #1
   829ee:	d1ed      	bne.n	829cc <my_callback_config+0x1c>
			usart_enable_rx(driver->usart);
   829f0:	6820      	ldr	r0, [r4, #0]
   829f2:	4b08      	ldr	r3, [pc, #32]	; (82a14 <my_callback_config+0x64>)
   829f4:	4798      	blx	r3
			usart_enable_tx(driver->usart);
   829f6:	6820      	ldr	r0, [r4, #0]
   829f8:	4b07      	ldr	r3, [pc, #28]	; (82a18 <my_callback_config+0x68>)
   829fa:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   829fc:	2101      	movs	r1, #1
   829fe:	6820      	ldr	r0, [r4, #0]
   82a00:	4b06      	ldr	r3, [pc, #24]	; (82a1c <my_callback_config+0x6c>)
   82a02:	4798      	blx	r3
   82a04:	e7e2      	b.n	829cc <my_callback_config+0x1c>
   82a06:	bf00      	nop
   82a08:	000825dd 	.word	0x000825dd
   82a0c:	000824ad 	.word	0x000824ad
   82a10:	00086189 	.word	0x00086189
   82a14:	00086175 	.word	0x00086175
   82a18:	00086169 	.word	0x00086169
   82a1c:	00086181 	.word	0x00086181

00082a20 <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   82a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a24:	2500      	movs	r5, #0
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
   82a26:	f8df b04c 	ldr.w	fp, [pc, #76]	; 82a74 <cdc_send_to_pc+0x54>
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled) {
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   82a2a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 82a78 <cdc_send_to_pc+0x58>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   82a2e:	f8df a04c 	ldr.w	sl, [pc, #76]	; 82a7c <cdc_send_to_pc+0x5c>
   82a32:	f8df 904c 	ldr.w	r9, [pc, #76]	; 82a80 <cdc_send_to_pc+0x60>
   82a36:	e00d      	b.n	82a54 <cdc_send_to_pc+0x34>
   82a38:	4620      	mov	r0, r4
   82a3a:	47d0      	blx	sl
   82a3c:	4601      	mov	r1, r0
   82a3e:	4638      	mov	r0, r7
   82a40:	47c8      	blx	r9
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   82a42:	f506 74e2 	add.w	r4, r6, #452	; 0x1c4
   82a46:	4620      	mov	r0, r4
   82a48:	47c0      	blx	r8
   82a4a:	2800      	cmp	r0, #0
   82a4c:	d1f4      	bne.n	82a38 <cdc_send_to_pc+0x18>
   82a4e:	3501      	adds	r5, #1
	for (uint8_t i = 0; i < 4; i++) {
   82a50:	2d04      	cmp	r5, #4
   82a52:	d00c      	beq.n	82a6e <cdc_send_to_pc+0x4e>
   82a54:	b2ef      	uxtb	r7, r5
		usart_driver *driver = get_nth_available_driver(i);
   82a56:	4628      	mov	r0, r5
   82a58:	47d8      	blx	fp
		if (!driver) continue;
   82a5a:	4606      	mov	r6, r0
   82a5c:	2800      	cmp	r0, #0
   82a5e:	d0f6      	beq.n	82a4e <cdc_send_to_pc+0x2e>
		if (driver->cdc_enabled && driver->enabled) {
   82a60:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82a64:	f003 0306 	and.w	r3, r3, #6
   82a68:	2b06      	cmp	r3, #6
   82a6a:	d1f0      	bne.n	82a4e <cdc_send_to_pc+0x2e>
   82a6c:	e7e9      	b.n	82a42 <cdc_send_to_pc+0x22>
			}
		}

	}
	
   82a6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a72:	bf00      	nop
   82a74:	000825dd 	.word	0x000825dd
   82a78:	00080813 	.word	0x00080813
   82a7c:	000807f5 	.word	0x000807f5
   82a80:	00080731 	.word	0x00080731

00082a84 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   82a84:	4b10      	ldr	r3, [pc, #64]	; (82ac8 <udc_next_desc_in_iface+0x44>)
   82a86:	681b      	ldr	r3, [r3, #0]
   82a88:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82a8a:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   82a8c:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   82a8e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82a90:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   82a92:	4290      	cmp	r0, r2
   82a94:	d211      	bcs.n	82aba <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82a96:	7843      	ldrb	r3, [r0, #1]
   82a98:	2b04      	cmp	r3, #4
   82a9a:	d010      	beq.n	82abe <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   82a9c:	428b      	cmp	r3, r1
   82a9e:	d009      	beq.n	82ab4 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   82aa0:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82aa2:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   82aa4:	4290      	cmp	r0, r2
   82aa6:	d206      	bcs.n	82ab6 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82aa8:	7843      	ldrb	r3, [r0, #1]
   82aaa:	2b04      	cmp	r3, #4
   82aac:	d009      	beq.n	82ac2 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
   82aae:	428b      	cmp	r3, r1
   82ab0:	d1f6      	bne.n	82aa0 <udc_next_desc_in_iface+0x1c>
   82ab2:	e007      	b.n	82ac4 <udc_next_desc_in_iface+0x40>
   82ab4:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
   82ab6:	2000      	movs	r0, #0
   82ab8:	4770      	bx	lr
   82aba:	2000      	movs	r0, #0
   82abc:	4770      	bx	lr
   82abe:	2000      	movs	r0, #0
   82ac0:	4770      	bx	lr
   82ac2:	2000      	movs	r0, #0
}
   82ac4:	4770      	bx	lr
   82ac6:	bf00      	nop
   82ac8:	20002030 	.word	0x20002030

00082acc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   82acc:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   82ace:	4b03      	ldr	r3, [pc, #12]	; (82adc <udc_valid_address+0x10>)
   82ad0:	7898      	ldrb	r0, [r3, #2]
   82ad2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82ad6:	4b02      	ldr	r3, [pc, #8]	; (82ae0 <udc_valid_address+0x14>)
   82ad8:	4798      	blx	r3
   82ada:	bd08      	pop	{r3, pc}
   82adc:	2000287c 	.word	0x2000287c
   82ae0:	000858ad 	.word	0x000858ad

00082ae4 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   82ae4:	4b19      	ldr	r3, [pc, #100]	; (82b4c <udc_update_iface_desc+0x68>)
   82ae6:	781b      	ldrb	r3, [r3, #0]
   82ae8:	b34b      	cbz	r3, 82b3e <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82aea:	4b19      	ldr	r3, [pc, #100]	; (82b50 <udc_update_iface_desc+0x6c>)
   82aec:	681b      	ldr	r3, [r3, #0]
   82aee:	681b      	ldr	r3, [r3, #0]
   82af0:	791a      	ldrb	r2, [r3, #4]
   82af2:	4282      	cmp	r2, r0
   82af4:	d925      	bls.n	82b42 <udc_update_iface_desc+0x5e>
{
   82af6:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   82af8:	4a16      	ldr	r2, [pc, #88]	; (82b54 <udc_update_iface_desc+0x70>)
   82afa:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82afc:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   82afe:	441c      	add	r4, r3
	while (ptr_end_desc >
   82b00:	42a3      	cmp	r3, r4
   82b02:	d220      	bcs.n	82b46 <udc_update_iface_desc+0x62>
   82b04:	2500      	movs	r5, #0
   82b06:	2601      	movs	r6, #1
   82b08:	e007      	b.n	82b1a <udc_update_iface_desc+0x36>
   82b0a:	4a12      	ldr	r2, [pc, #72]	; (82b54 <udc_update_iface_desc+0x70>)
   82b0c:	6013      	str	r3, [r2, #0]
   82b0e:	e00f      	b.n	82b30 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
   82b10:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   82b12:	4413      	add	r3, r2
   82b14:	4635      	mov	r5, r6
	while (ptr_end_desc >
   82b16:	42a3      	cmp	r3, r4
   82b18:	d20c      	bcs.n	82b34 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   82b1a:	785a      	ldrb	r2, [r3, #1]
   82b1c:	2a04      	cmp	r2, #4
   82b1e:	d1f7      	bne.n	82b10 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82b20:	789a      	ldrb	r2, [r3, #2]
   82b22:	4282      	cmp	r2, r0
   82b24:	d1f4      	bne.n	82b10 <udc_update_iface_desc+0x2c>
   82b26:	78da      	ldrb	r2, [r3, #3]
   82b28:	428a      	cmp	r2, r1
   82b2a:	d1f1      	bne.n	82b10 <udc_update_iface_desc+0x2c>
   82b2c:	2d00      	cmp	r5, #0
   82b2e:	d1ec      	bne.n	82b0a <udc_update_iface_desc+0x26>
				return true; // Interface found
   82b30:	2001      	movs	r0, #1
   82b32:	e002      	b.n	82b3a <udc_update_iface_desc+0x56>
   82b34:	4a07      	ldr	r2, [pc, #28]	; (82b54 <udc_update_iface_desc+0x70>)
   82b36:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   82b38:	2000      	movs	r0, #0
}
   82b3a:	bc70      	pop	{r4, r5, r6}
   82b3c:	4770      	bx	lr
		return false;
   82b3e:	2000      	movs	r0, #0
   82b40:	4770      	bx	lr
		return false;
   82b42:	2000      	movs	r0, #0
   82b44:	4770      	bx	lr
	return false; // Interface not found
   82b46:	2000      	movs	r0, #0
   82b48:	e7f7      	b.n	82b3a <udc_update_iface_desc+0x56>
   82b4a:	bf00      	nop
   82b4c:	2000202d 	.word	0x2000202d
   82b50:	20002030 	.word	0x20002030
   82b54:	20002034 	.word	0x20002034

00082b58 <udc_iface_disable>:
{
   82b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82b5c:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   82b5e:	2100      	movs	r1, #0
   82b60:	4b13      	ldr	r3, [pc, #76]	; (82bb0 <udc_iface_disable+0x58>)
   82b62:	4798      	blx	r3
   82b64:	4680      	mov	r8, r0
   82b66:	b910      	cbnz	r0, 82b6e <udc_iface_disable+0x16>
}
   82b68:	4640      	mov	r0, r8
   82b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82b6e:	4b11      	ldr	r3, [pc, #68]	; (82bb4 <udc_iface_disable+0x5c>)
   82b70:	681b      	ldr	r3, [r3, #0]
   82b72:	685b      	ldr	r3, [r3, #4]
   82b74:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82b78:	f8d9 300c 	ldr.w	r3, [r9, #12]
   82b7c:	4798      	blx	r3
   82b7e:	4601      	mov	r1, r0
   82b80:	4620      	mov	r0, r4
   82b82:	4b0b      	ldr	r3, [pc, #44]	; (82bb0 <udc_iface_disable+0x58>)
   82b84:	4798      	blx	r3
   82b86:	4680      	mov	r8, r0
   82b88:	2800      	cmp	r0, #0
   82b8a:	d0ed      	beq.n	82b68 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82b8c:	4b0a      	ldr	r3, [pc, #40]	; (82bb8 <udc_iface_disable+0x60>)
   82b8e:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82b90:	2605      	movs	r6, #5
   82b92:	4d0a      	ldr	r5, [pc, #40]	; (82bbc <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
   82b94:	4f0a      	ldr	r7, [pc, #40]	; (82bc0 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82b96:	4631      	mov	r1, r6
   82b98:	4620      	mov	r0, r4
   82b9a:	47a8      	blx	r5
			if (NULL == ep_desc) {
   82b9c:	4604      	mov	r4, r0
   82b9e:	b110      	cbz	r0, 82ba6 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
   82ba0:	7880      	ldrb	r0, [r0, #2]
   82ba2:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82ba4:	e7f7      	b.n	82b96 <udc_iface_disable+0x3e>
	udi_api->disable();
   82ba6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   82baa:	4798      	blx	r3
	return true;
   82bac:	e7dc      	b.n	82b68 <udc_iface_disable+0x10>
   82bae:	bf00      	nop
   82bb0:	00082ae5 	.word	0x00082ae5
   82bb4:	20002030 	.word	0x20002030
   82bb8:	20002034 	.word	0x20002034
   82bbc:	00082a85 	.word	0x00082a85
   82bc0:	00085911 	.word	0x00085911

00082bc4 <udc_iface_enable>:
{
   82bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82bc8:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   82bca:	4b10      	ldr	r3, [pc, #64]	; (82c0c <udc_iface_enable+0x48>)
   82bcc:	4798      	blx	r3
   82bce:	4603      	mov	r3, r0
   82bd0:	b1c8      	cbz	r0, 82c06 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82bd2:	4b0f      	ldr	r3, [pc, #60]	; (82c10 <udc_iface_enable+0x4c>)
   82bd4:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82bd6:	2605      	movs	r6, #5
   82bd8:	4d0e      	ldr	r5, [pc, #56]	; (82c14 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   82bda:	4f0f      	ldr	r7, [pc, #60]	; (82c18 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82bdc:	4631      	mov	r1, r6
   82bde:	4620      	mov	r0, r4
   82be0:	47a8      	blx	r5
		if (NULL == ep_desc)
   82be2:	4604      	mov	r4, r0
   82be4:	b138      	cbz	r0, 82bf6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   82be6:	8882      	ldrh	r2, [r0, #4]
   82be8:	78c1      	ldrb	r1, [r0, #3]
   82bea:	7880      	ldrb	r0, [r0, #2]
   82bec:	47b8      	blx	r7
   82bee:	4603      	mov	r3, r0
   82bf0:	2800      	cmp	r0, #0
   82bf2:	d1f3      	bne.n	82bdc <udc_iface_enable+0x18>
   82bf4:	e007      	b.n	82c06 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   82bf6:	4b09      	ldr	r3, [pc, #36]	; (82c1c <udc_iface_enable+0x58>)
   82bf8:	681b      	ldr	r3, [r3, #0]
   82bfa:	685b      	ldr	r3, [r3, #4]
   82bfc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   82c00:	681b      	ldr	r3, [r3, #0]
   82c02:	4798      	blx	r3
   82c04:	4603      	mov	r3, r0
}
   82c06:	4618      	mov	r0, r3
   82c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c0c:	00082ae5 	.word	0x00082ae5
   82c10:	20002034 	.word	0x20002034
   82c14:	00082a85 	.word	0x00082a85
   82c18:	00085c45 	.word	0x00085c45
   82c1c:	20002030 	.word	0x20002030

00082c20 <udc_get_interface_desc>:
}
   82c20:	4b01      	ldr	r3, [pc, #4]	; (82c28 <udc_get_interface_desc+0x8>)
   82c22:	6818      	ldr	r0, [r3, #0]
   82c24:	4770      	bx	lr
   82c26:	bf00      	nop
   82c28:	20002034 	.word	0x20002034

00082c2c <udc_start>:
{
   82c2c:	b508      	push	{r3, lr}
	udd_enable();
   82c2e:	4b01      	ldr	r3, [pc, #4]	; (82c34 <udc_start+0x8>)
   82c30:	4798      	blx	r3
   82c32:	bd08      	pop	{r3, pc}
   82c34:	00085791 	.word	0x00085791

00082c38 <udc_reset>:
{
   82c38:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   82c3a:	4b0d      	ldr	r3, [pc, #52]	; (82c70 <udc_reset+0x38>)
   82c3c:	781b      	ldrb	r3, [r3, #0]
   82c3e:	b183      	cbz	r3, 82c62 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82c40:	4b0c      	ldr	r3, [pc, #48]	; (82c74 <udc_reset+0x3c>)
   82c42:	681b      	ldr	r3, [r3, #0]
   82c44:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   82c46:	791b      	ldrb	r3, [r3, #4]
   82c48:	b15b      	cbz	r3, 82c62 <udc_reset+0x2a>
   82c4a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   82c4c:	4e0a      	ldr	r6, [pc, #40]	; (82c78 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82c4e:	4d09      	ldr	r5, [pc, #36]	; (82c74 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   82c50:	4620      	mov	r0, r4
   82c52:	47b0      	blx	r6
				iface_num++) {
   82c54:	3401      	adds	r4, #1
   82c56:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82c58:	682b      	ldr	r3, [r5, #0]
   82c5a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   82c5c:	791b      	ldrb	r3, [r3, #4]
   82c5e:	42a3      	cmp	r3, r4
   82c60:	d8f6      	bhi.n	82c50 <udc_reset+0x18>
	udc_num_configuration = 0;
   82c62:	2300      	movs	r3, #0
   82c64:	4a02      	ldr	r2, [pc, #8]	; (82c70 <udc_reset+0x38>)
   82c66:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   82c68:	4a04      	ldr	r2, [pc, #16]	; (82c7c <udc_reset+0x44>)
   82c6a:	8013      	strh	r3, [r2, #0]
   82c6c:	bd70      	pop	{r4, r5, r6, pc}
   82c6e:	bf00      	nop
   82c70:	2000202d 	.word	0x2000202d
   82c74:	20002030 	.word	0x20002030
   82c78:	00082b59 	.word	0x00082b59
   82c7c:	20002028 	.word	0x20002028

00082c80 <udc_stop>:
{
   82c80:	b508      	push	{r3, lr}
	udd_disable();
   82c82:	4b02      	ldr	r3, [pc, #8]	; (82c8c <udc_stop+0xc>)
   82c84:	4798      	blx	r3
	udc_reset();
   82c86:	4b02      	ldr	r3, [pc, #8]	; (82c90 <udc_stop+0x10>)
   82c88:	4798      	blx	r3
   82c8a:	bd08      	pop	{r3, pc}
   82c8c:	00085685 	.word	0x00085685
   82c90:	00082c39 	.word	0x00082c39

00082c94 <udc_sof_notify>:
{
   82c94:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   82c96:	4b0d      	ldr	r3, [pc, #52]	; (82ccc <udc_sof_notify+0x38>)
   82c98:	781b      	ldrb	r3, [r3, #0]
   82c9a:	b1b3      	cbz	r3, 82cca <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82c9c:	4b0c      	ldr	r3, [pc, #48]	; (82cd0 <udc_sof_notify+0x3c>)
   82c9e:	681b      	ldr	r3, [r3, #0]
   82ca0:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   82ca2:	7912      	ldrb	r2, [r2, #4]
   82ca4:	b18a      	cbz	r2, 82cca <udc_sof_notify+0x36>
   82ca6:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82ca8:	4d09      	ldr	r5, [pc, #36]	; (82cd0 <udc_sof_notify+0x3c>)
   82caa:	e006      	b.n	82cba <udc_sof_notify+0x26>
				iface_num++) {
   82cac:	3401      	adds	r4, #1
   82cae:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82cb0:	682b      	ldr	r3, [r5, #0]
   82cb2:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   82cb4:	7912      	ldrb	r2, [r2, #4]
   82cb6:	42a2      	cmp	r2, r4
   82cb8:	d907      	bls.n	82cca <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   82cba:	685b      	ldr	r3, [r3, #4]
   82cbc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   82cc0:	691b      	ldr	r3, [r3, #16]
   82cc2:	2b00      	cmp	r3, #0
   82cc4:	d0f2      	beq.n	82cac <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   82cc6:	4798      	blx	r3
   82cc8:	e7f0      	b.n	82cac <udc_sof_notify+0x18>
   82cca:	bd38      	pop	{r3, r4, r5, pc}
   82ccc:	2000202d 	.word	0x2000202d
   82cd0:	20002030 	.word	0x20002030

00082cd4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   82cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   82cd6:	4b88      	ldr	r3, [pc, #544]	; (82ef8 <udc_process_setup+0x224>)
   82cd8:	2200      	movs	r2, #0
   82cda:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   82cdc:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82cde:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   82ce0:	881b      	ldrh	r3, [r3, #0]
   82ce2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   82ce6:	d019      	beq.n	82d1c <udc_process_setup+0x48>
		}
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   82ce8:	4b83      	ldr	r3, [pc, #524]	; (82ef8 <udc_process_setup+0x224>)
   82cea:	781b      	ldrb	r3, [r3, #0]
   82cec:	f013 0f80 	tst.w	r3, #128	; 0x80
   82cf0:	d127      	bne.n	82d42 <udc_process_setup+0x6e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82cf2:	f013 0f60 	tst.w	r3, #96	; 0x60
   82cf6:	f000 8150 	beq.w	82f9a <udc_process_setup+0x2c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   82cfa:	4b7f      	ldr	r3, [pc, #508]	; (82ef8 <udc_process_setup+0x224>)
   82cfc:	781b      	ldrb	r3, [r3, #0]
   82cfe:	f003 031f 	and.w	r3, r3, #31
   82d02:	2b01      	cmp	r3, #1
   82d04:	f240 81a9 	bls.w	8305a <udc_process_setup+0x386>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   82d08:	4b7b      	ldr	r3, [pc, #492]	; (82ef8 <udc_process_setup+0x224>)
   82d0a:	781b      	ldrb	r3, [r3, #0]
   82d0c:	f003 031f 	and.w	r3, r3, #31
   82d10:	2b02      	cmp	r3, #2
   82d12:	f000 82a5 	beq.w	83260 <udc_process_setup+0x58c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   82d16:	2300      	movs	r3, #0
#endif
}
   82d18:	4618      	mov	r0, r3
   82d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!mpsse_enabled()) {
   82d1c:	4b77      	ldr	r3, [pc, #476]	; (82efc <udc_process_setup+0x228>)
   82d1e:	4798      	blx	r3
   82d20:	b950      	cbnz	r0, 82d38 <udc_process_setup+0x64>
			MS_OS_DESC.FUNC[1].FEAT.CompatibleID[0] = 'M';
   82d22:	224d      	movs	r2, #77	; 0x4d
   82d24:	4b76      	ldr	r3, [pc, #472]	; (82f00 <udc_process_setup+0x22c>)
   82d26:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   82d2a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   82d2e:	4874      	ldr	r0, [pc, #464]	; (82f00 <udc_process_setup+0x22c>)
   82d30:	4b74      	ldr	r3, [pc, #464]	; (82f04 <udc_process_setup+0x230>)
   82d32:	4798      	blx	r3
		return true;
   82d34:	2301      	movs	r3, #1
   82d36:	e7ef      	b.n	82d18 <udc_process_setup+0x44>
			MS_OS_DESC.FUNC[1].FEAT.CompatibleID[0] = 'W';
   82d38:	2257      	movs	r2, #87	; 0x57
   82d3a:	4b71      	ldr	r3, [pc, #452]	; (82f00 <udc_process_setup+0x22c>)
   82d3c:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
   82d40:	e7f3      	b.n	82d2a <udc_process_setup+0x56>
		if (udd_g_ctrlreq.req.wLength == 0) {
   82d42:	4a6d      	ldr	r2, [pc, #436]	; (82ef8 <udc_process_setup+0x224>)
   82d44:	88d2      	ldrh	r2, [r2, #6]
   82d46:	2a00      	cmp	r2, #0
   82d48:	f000 82b3 	beq.w	832b2 <udc_process_setup+0x5de>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82d4c:	f013 0f60 	tst.w	r3, #96	; 0x60
   82d50:	d1d3      	bne.n	82cfa <udc_process_setup+0x26>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82d52:	f013 031f 	ands.w	r3, r3, #31
   82d56:	d107      	bne.n	82d68 <udc_process_setup+0x94>
			switch (udd_g_ctrlreq.req.bRequest) {
   82d58:	4967      	ldr	r1, [pc, #412]	; (82ef8 <udc_process_setup+0x224>)
   82d5a:	7849      	ldrb	r1, [r1, #1]
   82d5c:	2906      	cmp	r1, #6
   82d5e:	d017      	beq.n	82d90 <udc_process_setup+0xbc>
   82d60:	2908      	cmp	r1, #8
   82d62:	f000 80c1 	beq.w	82ee8 <udc_process_setup+0x214>
   82d66:	b159      	cbz	r1, 82d80 <udc_process_setup+0xac>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82d68:	2b01      	cmp	r3, #1
   82d6a:	f000 80df 	beq.w	82f2c <udc_process_setup+0x258>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82d6e:	2b02      	cmp	r3, #2
   82d70:	d1c3      	bne.n	82cfa <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   82d72:	4b61      	ldr	r3, [pc, #388]	; (82ef8 <udc_process_setup+0x224>)
   82d74:	785b      	ldrb	r3, [r3, #1]
   82d76:	2b00      	cmp	r3, #0
   82d78:	f000 8101 	beq.w	82f7e <udc_process_setup+0x2aa>
	return false;
   82d7c:	2300      	movs	r3, #0
   82d7e:	e1fb      	b.n	83178 <udc_process_setup+0x4a4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   82d80:	2a02      	cmp	r2, #2
   82d82:	f040 816a 	bne.w	8305a <udc_process_setup+0x386>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   82d86:	2102      	movs	r1, #2
   82d88:	485f      	ldr	r0, [pc, #380]	; (82f08 <udc_process_setup+0x234>)
   82d8a:	4b5e      	ldr	r3, [pc, #376]	; (82f04 <udc_process_setup+0x230>)
   82d8c:	4798      	blx	r3
   82d8e:	e120      	b.n	82fd2 <udc_process_setup+0x2fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   82d90:	4b59      	ldr	r3, [pc, #356]	; (82ef8 <udc_process_setup+0x224>)
   82d92:	885a      	ldrh	r2, [r3, #2]
   82d94:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82d96:	0a13      	lsrs	r3, r2, #8
   82d98:	3b01      	subs	r3, #1
   82d9a:	2b0e      	cmp	r3, #14
   82d9c:	f200 8256 	bhi.w	8324c <udc_process_setup+0x578>
   82da0:	e8df f013 	tbh	[pc, r3, lsl #1]
   82da4:	0023000f 	.word	0x0023000f
   82da8:	0254007c 	.word	0x0254007c
   82dac:	00460254 	.word	0x00460254
   82db0:	02540054 	.word	0x02540054
   82db4:	02540254 	.word	0x02540254
   82db8:	02540254 	.word	0x02540254
   82dbc:	02540254 	.word	0x02540254
   82dc0:	0077      	.short	0x0077
		if (!udd_is_high_speed()) {
   82dc2:	4b52      	ldr	r3, [pc, #328]	; (82f0c <udc_process_setup+0x238>)
   82dc4:	4798      	blx	r3
   82dc6:	b928      	cbnz	r0, 82dd4 <udc_process_setup+0x100>
				(uint8_t *) udc_config.confdev_hs,
   82dc8:	4b51      	ldr	r3, [pc, #324]	; (82f10 <udc_process_setup+0x23c>)
   82dca:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   82dcc:	7801      	ldrb	r1, [r0, #0]
   82dce:	4b4d      	ldr	r3, [pc, #308]	; (82f04 <udc_process_setup+0x230>)
   82dd0:	4798      	blx	r3
   82dd2:	e032      	b.n	82e3a <udc_process_setup+0x166>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   82dd4:	4b4e      	ldr	r3, [pc, #312]	; (82f10 <udc_process_setup+0x23c>)
   82dd6:	681a      	ldr	r2, [r3, #0]
   82dd8:	2110      	movs	r1, #16
   82dda:	7091      	strb	r1, [r2, #2]
   82ddc:	2102      	movs	r1, #2
   82dde:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   82de0:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   82de2:	7801      	ldrb	r1, [r0, #0]
   82de4:	4b47      	ldr	r3, [pc, #284]	; (82f04 <udc_process_setup+0x230>)
   82de6:	4798      	blx	r3
   82de8:	e027      	b.n	82e3a <udc_process_setup+0x166>
		if (udd_is_high_speed()) {
   82dea:	4b48      	ldr	r3, [pc, #288]	; (82f0c <udc_process_setup+0x238>)
   82dec:	4798      	blx	r3
   82dee:	b188      	cbz	r0, 82e14 <udc_process_setup+0x140>
			if (conf_num >= udc_config.confdev_hs->
   82df0:	4b47      	ldr	r3, [pc, #284]	; (82f10 <udc_process_setup+0x23c>)
   82df2:	689b      	ldr	r3, [r3, #8]
   82df4:	7c5b      	ldrb	r3, [r3, #17]
   82df6:	42a3      	cmp	r3, r4
   82df8:	f67f af7f 	bls.w	82cfa <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82dfc:	4b44      	ldr	r3, [pc, #272]	; (82f10 <udc_process_setup+0x23c>)
   82dfe:	691b      	ldr	r3, [r3, #16]
   82e00:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82e04:	8841      	ldrh	r1, [r0, #2]
   82e06:	4b3f      	ldr	r3, [pc, #252]	; (82f04 <udc_process_setup+0x230>)
   82e08:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   82e0a:	4b3b      	ldr	r3, [pc, #236]	; (82ef8 <udc_process_setup+0x224>)
   82e0c:	689b      	ldr	r3, [r3, #8]
   82e0e:	2202      	movs	r2, #2
   82e10:	705a      	strb	r2, [r3, #1]
   82e12:	e012      	b.n	82e3a <udc_process_setup+0x166>
			if (conf_num >= udc_config.confdev_lsfs->
   82e14:	4b3e      	ldr	r3, [pc, #248]	; (82f10 <udc_process_setup+0x23c>)
   82e16:	681b      	ldr	r3, [r3, #0]
   82e18:	7c5b      	ldrb	r3, [r3, #17]
   82e1a:	42a3      	cmp	r3, r4
   82e1c:	f67f af6d 	bls.w	82cfa <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82e20:	4b3b      	ldr	r3, [pc, #236]	; (82f10 <udc_process_setup+0x23c>)
   82e22:	685b      	ldr	r3, [r3, #4]
   82e24:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82e28:	8841      	ldrh	r1, [r0, #2]
   82e2a:	4b36      	ldr	r3, [pc, #216]	; (82f04 <udc_process_setup+0x230>)
   82e2c:	4798      	blx	r3
   82e2e:	e7ec      	b.n	82e0a <udc_process_setup+0x136>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   82e30:	4b37      	ldr	r3, [pc, #220]	; (82f10 <udc_process_setup+0x23c>)
   82e32:	68d8      	ldr	r0, [r3, #12]
   82e34:	7801      	ldrb	r1, [r0, #0]
   82e36:	4b33      	ldr	r3, [pc, #204]	; (82f04 <udc_process_setup+0x230>)
   82e38:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   82e3a:	4b2f      	ldr	r3, [pc, #188]	; (82ef8 <udc_process_setup+0x224>)
   82e3c:	88da      	ldrh	r2, [r3, #6]
   82e3e:	899b      	ldrh	r3, [r3, #12]
   82e40:	4293      	cmp	r3, r2
   82e42:	f240 80c6 	bls.w	82fd2 <udc_process_setup+0x2fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82e46:	4b2c      	ldr	r3, [pc, #176]	; (82ef8 <udc_process_setup+0x224>)
   82e48:	819a      	strh	r2, [r3, #12]
   82e4a:	e0c2      	b.n	82fd2 <udc_process_setup+0x2fe>
		if (!udd_is_high_speed()) {
   82e4c:	4b2f      	ldr	r3, [pc, #188]	; (82f0c <udc_process_setup+0x238>)
   82e4e:	4798      	blx	r3
   82e50:	b988      	cbnz	r0, 82e76 <udc_process_setup+0x1a2>
			if (conf_num >= udc_config.confdev_hs->
   82e52:	4b2f      	ldr	r3, [pc, #188]	; (82f10 <udc_process_setup+0x23c>)
   82e54:	689b      	ldr	r3, [r3, #8]
   82e56:	7c5b      	ldrb	r3, [r3, #17]
   82e58:	42a3      	cmp	r3, r4
   82e5a:	f67f af4e 	bls.w	82cfa <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82e5e:	4b2c      	ldr	r3, [pc, #176]	; (82f10 <udc_process_setup+0x23c>)
   82e60:	691b      	ldr	r3, [r3, #16]
   82e62:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82e66:	8841      	ldrh	r1, [r0, #2]
   82e68:	4b26      	ldr	r3, [pc, #152]	; (82f04 <udc_process_setup+0x230>)
   82e6a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   82e6c:	4b22      	ldr	r3, [pc, #136]	; (82ef8 <udc_process_setup+0x224>)
   82e6e:	689b      	ldr	r3, [r3, #8]
   82e70:	2207      	movs	r2, #7
   82e72:	705a      	strb	r2, [r3, #1]
   82e74:	e7e1      	b.n	82e3a <udc_process_setup+0x166>
			if (conf_num >= udc_config.confdev_lsfs->
   82e76:	4b26      	ldr	r3, [pc, #152]	; (82f10 <udc_process_setup+0x23c>)
   82e78:	681b      	ldr	r3, [r3, #0]
   82e7a:	7c5b      	ldrb	r3, [r3, #17]
   82e7c:	42a3      	cmp	r3, r4
   82e7e:	f67f af3c 	bls.w	82cfa <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82e82:	4b23      	ldr	r3, [pc, #140]	; (82f10 <udc_process_setup+0x23c>)
   82e84:	685b      	ldr	r3, [r3, #4]
   82e86:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82e8a:	8841      	ldrh	r1, [r0, #2]
   82e8c:	4b1d      	ldr	r3, [pc, #116]	; (82f04 <udc_process_setup+0x230>)
   82e8e:	4798      	blx	r3
   82e90:	e7ec      	b.n	82e6c <udc_process_setup+0x198>
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   82e92:	2121      	movs	r1, #33	; 0x21
   82e94:	481f      	ldr	r0, [pc, #124]	; (82f14 <udc_process_setup+0x240>)
   82e96:	4b1b      	ldr	r3, [pc, #108]	; (82f04 <udc_process_setup+0x230>)
   82e98:	4798      	blx	r3
   82e9a:	e7ce      	b.n	82e3a <udc_process_setup+0x166>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   82e9c:	b2d2      	uxtb	r2, r2
   82e9e:	2a03      	cmp	r2, #3
   82ea0:	f63f af2b 	bhi.w	82cfa <udc_process_setup+0x26>
   82ea4:	e8df f012 	tbh	[pc, r2, lsl #1]
   82ea8:	000c0007 	.word	0x000c0007
   82eac:	00040207 	.word	0x00040207
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   82eb0:	2420      	movs	r4, #32
		str = udc_get_string_serial_name();
   82eb2:	4a19      	ldr	r2, [pc, #100]	; (82f18 <udc_process_setup+0x244>)
   82eb4:	e006      	b.n	82ec4 <udc_process_setup+0x1f0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   82eb6:	2104      	movs	r1, #4
   82eb8:	4818      	ldr	r0, [pc, #96]	; (82f1c <udc_process_setup+0x248>)
   82eba:	4b12      	ldr	r3, [pc, #72]	; (82f04 <udc_process_setup+0x230>)
   82ebc:	4798      	blx	r3
   82ebe:	e7bc      	b.n	82e3a <udc_process_setup+0x166>
		str = udc_string_manufacturer_name;
   82ec0:	4a17      	ldr	r2, [pc, #92]	; (82f20 <udc_process_setup+0x24c>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   82ec2:	2415      	movs	r4, #21
   82ec4:	3a01      	subs	r2, #1
   82ec6:	4917      	ldr	r1, [pc, #92]	; (82f24 <udc_process_setup+0x250>)
   82ec8:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   82eca:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82ece:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   82ed2:	3301      	adds	r3, #1
   82ed4:	b2db      	uxtb	r3, r3
   82ed6:	429c      	cmp	r4, r3
   82ed8:	d8f7      	bhi.n	82eca <udc_process_setup+0x1f6>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   82eda:	0061      	lsls	r1, r4, #1
   82edc:	3102      	adds	r1, #2
   82ede:	4811      	ldr	r0, [pc, #68]	; (82f24 <udc_process_setup+0x250>)
   82ee0:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   82ee2:	4b08      	ldr	r3, [pc, #32]	; (82f04 <udc_process_setup+0x230>)
   82ee4:	4798      	blx	r3
   82ee6:	e7a8      	b.n	82e3a <udc_process_setup+0x166>
	if (udd_g_ctrlreq.req.wLength != 1) {
   82ee8:	2a01      	cmp	r2, #1
   82eea:	f040 80b6 	bne.w	8305a <udc_process_setup+0x386>
	udd_set_setup_payload(&udc_num_configuration,1);
   82eee:	2101      	movs	r1, #1
   82ef0:	480d      	ldr	r0, [pc, #52]	; (82f28 <udc_process_setup+0x254>)
   82ef2:	4b04      	ldr	r3, [pc, #16]	; (82f04 <udc_process_setup+0x230>)
   82ef4:	4798      	blx	r3
   82ef6:	e06c      	b.n	82fd2 <udc_process_setup+0x2fe>
   82ef8:	2000287c 	.word	0x2000287c
   82efc:	000818a9 	.word	0x000818a9
   82f00:	20000770 	.word	0x20000770
   82f04:	00085905 	.word	0x00085905
   82f08:	20002028 	.word	0x20002028
   82f0c:	0008589d 	.word	0x0008589d
   82f10:	20000938 	.word	0x20000938
   82f14:	2000074c 	.word	0x2000074c
   82f18:	20000b68 	.word	0x20000b68
   82f1c:	20000900 	.word	0x20000900
   82f20:	20000904 	.word	0x20000904
   82f24:	200008bc 	.word	0x200008bc
   82f28:	2000202d 	.word	0x2000202d
			switch (udd_g_ctrlreq.req.bRequest) {
   82f2c:	4994      	ldr	r1, [pc, #592]	; (83180 <udc_process_setup+0x4ac>)
   82f2e:	7849      	ldrb	r1, [r1, #1]
   82f30:	290a      	cmp	r1, #10
   82f32:	f47f af1c 	bne.w	82d6e <udc_process_setup+0x9a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   82f36:	2a01      	cmp	r2, #1
   82f38:	f040 808f 	bne.w	8305a <udc_process_setup+0x386>
	if (!udc_num_configuration) {
   82f3c:	4b91      	ldr	r3, [pc, #580]	; (83184 <udc_process_setup+0x4b0>)
   82f3e:	781b      	ldrb	r3, [r3, #0]
   82f40:	2b00      	cmp	r3, #0
   82f42:	f000 808a 	beq.w	8305a <udc_process_setup+0x386>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82f46:	4b8e      	ldr	r3, [pc, #568]	; (83180 <udc_process_setup+0x4ac>)
   82f48:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82f4a:	4b8f      	ldr	r3, [pc, #572]	; (83188 <udc_process_setup+0x4b4>)
   82f4c:	681d      	ldr	r5, [r3, #0]
   82f4e:	682b      	ldr	r3, [r5, #0]
   82f50:	791b      	ldrb	r3, [r3, #4]
   82f52:	42a3      	cmp	r3, r4
   82f54:	f240 8081 	bls.w	8305a <udc_process_setup+0x386>
	if (!udc_update_iface_desc(iface_num, 0)) {
   82f58:	2100      	movs	r1, #0
   82f5a:	4620      	mov	r0, r4
   82f5c:	4b8b      	ldr	r3, [pc, #556]	; (8318c <udc_process_setup+0x4b8>)
   82f5e:	4798      	blx	r3
   82f60:	2800      	cmp	r0, #0
   82f62:	f43f aeca 	beq.w	82cfa <udc_process_setup+0x26>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82f66:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   82f68:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   82f6c:	68db      	ldr	r3, [r3, #12]
   82f6e:	4798      	blx	r3
   82f70:	4b87      	ldr	r3, [pc, #540]	; (83190 <udc_process_setup+0x4bc>)
   82f72:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   82f74:	2101      	movs	r1, #1
   82f76:	4618      	mov	r0, r3
   82f78:	4b86      	ldr	r3, [pc, #536]	; (83194 <udc_process_setup+0x4c0>)
   82f7a:	4798      	blx	r3
   82f7c:	e029      	b.n	82fd2 <udc_process_setup+0x2fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   82f7e:	2a02      	cmp	r2, #2
   82f80:	f47f aec2 	bne.w	82d08 <udc_process_setup+0x34>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   82f84:	4b7e      	ldr	r3, [pc, #504]	; (83180 <udc_process_setup+0x4ac>)
   82f86:	7918      	ldrb	r0, [r3, #4]
   82f88:	4b83      	ldr	r3, [pc, #524]	; (83198 <udc_process_setup+0x4c4>)
   82f8a:	4798      	blx	r3
   82f8c:	4b83      	ldr	r3, [pc, #524]	; (8319c <udc_process_setup+0x4c8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   82f8e:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   82f90:	2102      	movs	r1, #2
   82f92:	4618      	mov	r0, r3
   82f94:	4b7f      	ldr	r3, [pc, #508]	; (83194 <udc_process_setup+0x4c0>)
   82f96:	4798      	blx	r3
   82f98:	e01b      	b.n	82fd2 <udc_process_setup+0x2fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82f9a:	f013 031f 	ands.w	r3, r3, #31
   82f9e:	f040 80df 	bne.w	83160 <udc_process_setup+0x48c>
			switch (udd_g_ctrlreq.req.bRequest) {
   82fa2:	4a77      	ldr	r2, [pc, #476]	; (83180 <udc_process_setup+0x4ac>)
   82fa4:	7852      	ldrb	r2, [r2, #1]
   82fa6:	3a01      	subs	r2, #1
   82fa8:	2a08      	cmp	r2, #8
   82faa:	f200 80d9 	bhi.w	83160 <udc_process_setup+0x48c>
   82fae:	e8df f012 	tbh	[pc, r2, lsl #1]
   82fb2:	0012      	.short	0x0012
   82fb4:	002000d7 	.word	0x002000d7
   82fb8:	000900d7 	.word	0x000900d7
   82fbc:	00d700d7 	.word	0x00d700d7
   82fc0:	005000d7 	.word	0x005000d7
	if (udd_g_ctrlreq.req.wLength) {
   82fc4:	4b6e      	ldr	r3, [pc, #440]	; (83180 <udc_process_setup+0x4ac>)
   82fc6:	88db      	ldrh	r3, [r3, #6]
   82fc8:	2b00      	cmp	r3, #0
   82fca:	d146      	bne.n	8305a <udc_process_setup+0x386>
	udd_g_ctrlreq.callback = udc_valid_address;
   82fcc:	4a74      	ldr	r2, [pc, #464]	; (831a0 <udc_process_setup+0x4cc>)
   82fce:	4b6c      	ldr	r3, [pc, #432]	; (83180 <udc_process_setup+0x4ac>)
   82fd0:	611a      	str	r2, [r3, #16]
			return true;
   82fd2:	2301      	movs	r3, #1
   82fd4:	e6a0      	b.n	82d18 <udc_process_setup+0x44>
	if (udd_g_ctrlreq.req.wLength) {
   82fd6:	4b6a      	ldr	r3, [pc, #424]	; (83180 <udc_process_setup+0x4ac>)
   82fd8:	88db      	ldrh	r3, [r3, #6]
   82fda:	2b00      	cmp	r3, #0
   82fdc:	d13d      	bne.n	8305a <udc_process_setup+0x386>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   82fde:	4b68      	ldr	r3, [pc, #416]	; (83180 <udc_process_setup+0x4ac>)
   82fe0:	885b      	ldrh	r3, [r3, #2]
   82fe2:	2b01      	cmp	r3, #1
   82fe4:	d139      	bne.n	8305a <udc_process_setup+0x386>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   82fe6:	4a6f      	ldr	r2, [pc, #444]	; (831a4 <udc_process_setup+0x4d0>)
   82fe8:	8813      	ldrh	r3, [r2, #0]
   82fea:	f023 0302 	bic.w	r3, r3, #2
   82fee:	8013      	strh	r3, [r2, #0]
   82ff0:	e7ef      	b.n	82fd2 <udc_process_setup+0x2fe>
	if (udd_g_ctrlreq.req.wLength) {
   82ff2:	4b63      	ldr	r3, [pc, #396]	; (83180 <udc_process_setup+0x4ac>)
   82ff4:	88db      	ldrh	r3, [r3, #6]
   82ff6:	2b00      	cmp	r3, #0
   82ff8:	d12f      	bne.n	8305a <udc_process_setup+0x386>
	switch (udd_g_ctrlreq.req.wValue) {
   82ffa:	4b61      	ldr	r3, [pc, #388]	; (83180 <udc_process_setup+0x4ac>)
   82ffc:	885b      	ldrh	r3, [r3, #2]
   82ffe:	2b02      	cmp	r3, #2
   83000:	f040 8126 	bne.w	83250 <udc_process_setup+0x57c>
		if (!udd_is_high_speed()) {
   83004:	4b68      	ldr	r3, [pc, #416]	; (831a8 <udc_process_setup+0x4d4>)
   83006:	4798      	blx	r3
   83008:	2800      	cmp	r0, #0
   8300a:	f43f ae76 	beq.w	82cfa <udc_process_setup+0x26>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   8300e:	4b5c      	ldr	r3, [pc, #368]	; (83180 <udc_process_setup+0x4ac>)
   83010:	791b      	ldrb	r3, [r3, #4]
   83012:	2b00      	cmp	r3, #0
   83014:	f47f ae71 	bne.w	82cfa <udc_process_setup+0x26>
		udc_reset();
   83018:	4b64      	ldr	r3, [pc, #400]	; (831ac <udc_process_setup+0x4d8>)
   8301a:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8301c:	4b58      	ldr	r3, [pc, #352]	; (83180 <udc_process_setup+0x4ac>)
   8301e:	889b      	ldrh	r3, [r3, #4]
   83020:	0a1b      	lsrs	r3, r3, #8
   83022:	3b01      	subs	r3, #1
   83024:	2b03      	cmp	r3, #3
   83026:	f200 8115 	bhi.w	83254 <udc_process_setup+0x580>
   8302a:	e8df f003 	tbb	[pc, r3]
   8302e:	0602      	.short	0x0602
   83030:	0e0a      	.short	0x0e0a
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83032:	4a5f      	ldr	r2, [pc, #380]	; (831b0 <udc_process_setup+0x4dc>)
   83034:	4b52      	ldr	r3, [pc, #328]	; (83180 <udc_process_setup+0x4ac>)
   83036:	611a      	str	r2, [r3, #16]
   83038:	e7cb      	b.n	82fd2 <udc_process_setup+0x2fe>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   8303a:	4a5e      	ldr	r2, [pc, #376]	; (831b4 <udc_process_setup+0x4e0>)
   8303c:	4b50      	ldr	r3, [pc, #320]	; (83180 <udc_process_setup+0x4ac>)
   8303e:	611a      	str	r2, [r3, #16]
   83040:	e7c7      	b.n	82fd2 <udc_process_setup+0x2fe>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83042:	4a5d      	ldr	r2, [pc, #372]	; (831b8 <udc_process_setup+0x4e4>)
   83044:	4b4e      	ldr	r3, [pc, #312]	; (83180 <udc_process_setup+0x4ac>)
   83046:	611a      	str	r2, [r3, #16]
   83048:	e7c3      	b.n	82fd2 <udc_process_setup+0x2fe>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8304a:	4a5c      	ldr	r2, [pc, #368]	; (831bc <udc_process_setup+0x4e8>)
   8304c:	4b4c      	ldr	r3, [pc, #304]	; (83180 <udc_process_setup+0x4ac>)
   8304e:	611a      	str	r2, [r3, #16]
   83050:	e7bf      	b.n	82fd2 <udc_process_setup+0x2fe>
	if (udd_g_ctrlreq.req.wLength) {
   83052:	4b4b      	ldr	r3, [pc, #300]	; (83180 <udc_process_setup+0x4ac>)
   83054:	88db      	ldrh	r3, [r3, #6]
   83056:	2b00      	cmp	r3, #0
   83058:	d02c      	beq.n	830b4 <udc_process_setup+0x3e0>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   8305a:	4b49      	ldr	r3, [pc, #292]	; (83180 <udc_process_setup+0x4ac>)
   8305c:	889b      	ldrh	r3, [r3, #4]
   8305e:	2b02      	cmp	r3, #2
   83060:	f000 80fa 	beq.w	83258 <udc_process_setup+0x584>
	if (0 == udc_num_configuration) {
   83064:	4b47      	ldr	r3, [pc, #284]	; (83184 <udc_process_setup+0x4b0>)
   83066:	781b      	ldrb	r3, [r3, #0]
   83068:	2b00      	cmp	r3, #0
   8306a:	f43f ae4d 	beq.w	82d08 <udc_process_setup+0x34>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8306e:	4b44      	ldr	r3, [pc, #272]	; (83180 <udc_process_setup+0x4ac>)
   83070:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83072:	4b45      	ldr	r3, [pc, #276]	; (83188 <udc_process_setup+0x4b4>)
   83074:	681d      	ldr	r5, [r3, #0]
   83076:	682b      	ldr	r3, [r5, #0]
   83078:	791b      	ldrb	r3, [r3, #4]
   8307a:	42a3      	cmp	r3, r4
   8307c:	f67f ae44 	bls.w	82d08 <udc_process_setup+0x34>
	if (!udc_update_iface_desc(iface_num, 0)) {
   83080:	2100      	movs	r1, #0
   83082:	4620      	mov	r0, r4
   83084:	4b41      	ldr	r3, [pc, #260]	; (8318c <udc_process_setup+0x4b8>)
   83086:	4798      	blx	r3
   83088:	2800      	cmp	r0, #0
   8308a:	f43f ae3d 	beq.w	82d08 <udc_process_setup+0x34>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8308e:	686b      	ldr	r3, [r5, #4]
   83090:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83094:	68eb      	ldr	r3, [r5, #12]
   83096:	4798      	blx	r3
   83098:	4601      	mov	r1, r0
   8309a:	4620      	mov	r0, r4
   8309c:	4b3b      	ldr	r3, [pc, #236]	; (8318c <udc_process_setup+0x4b8>)
   8309e:	4798      	blx	r3
   830a0:	2800      	cmp	r0, #0
   830a2:	f43f ae31 	beq.w	82d08 <udc_process_setup+0x34>
	return udi_api->setup();
   830a6:	68ab      	ldr	r3, [r5, #8]
   830a8:	4798      	blx	r3
		if (udc_req_iface()) {
   830aa:	4603      	mov	r3, r0
   830ac:	2800      	cmp	r0, #0
   830ae:	f47f ae33 	bne.w	82d18 <udc_process_setup+0x44>
   830b2:	e629      	b.n	82d08 <udc_process_setup+0x34>
	if (!udd_getaddress()) {
   830b4:	4b42      	ldr	r3, [pc, #264]	; (831c0 <udc_process_setup+0x4ec>)
   830b6:	4798      	blx	r3
   830b8:	2800      	cmp	r0, #0
   830ba:	f43f ae1e 	beq.w	82cfa <udc_process_setup+0x26>
	if (udd_is_high_speed()) {
   830be:	4b3a      	ldr	r3, [pc, #232]	; (831a8 <udc_process_setup+0x4d4>)
   830c0:	4798      	blx	r3
   830c2:	2800      	cmp	r0, #0
   830c4:	d038      	beq.n	83138 <udc_process_setup+0x464>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   830c6:	4b2e      	ldr	r3, [pc, #184]	; (83180 <udc_process_setup+0x4ac>)
   830c8:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   830ca:	4b3e      	ldr	r3, [pc, #248]	; (831c4 <udc_process_setup+0x4f0>)
   830cc:	689b      	ldr	r3, [r3, #8]
   830ce:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   830d0:	429a      	cmp	r2, r3
   830d2:	f73f ae12 	bgt.w	82cfa <udc_process_setup+0x26>
	udc_reset();
   830d6:	4b35      	ldr	r3, [pc, #212]	; (831ac <udc_process_setup+0x4d8>)
   830d8:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   830da:	4b29      	ldr	r3, [pc, #164]	; (83180 <udc_process_setup+0x4ac>)
   830dc:	789b      	ldrb	r3, [r3, #2]
   830de:	4a29      	ldr	r2, [pc, #164]	; (83184 <udc_process_setup+0x4b0>)
   830e0:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   830e2:	2b00      	cmp	r3, #0
   830e4:	f43f af75 	beq.w	82fd2 <udc_process_setup+0x2fe>
	if (udd_is_high_speed()) {
   830e8:	4b2f      	ldr	r3, [pc, #188]	; (831a8 <udc_process_setup+0x4d4>)
   830ea:	4798      	blx	r3
   830ec:	2800      	cmp	r0, #0
   830ee:	d02b      	beq.n	83148 <udc_process_setup+0x474>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   830f0:	4b24      	ldr	r3, [pc, #144]	; (83184 <udc_process_setup+0x4b0>)
   830f2:	781b      	ldrb	r3, [r3, #0]
   830f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   830f8:	3b01      	subs	r3, #1
   830fa:	4a32      	ldr	r2, [pc, #200]	; (831c4 <udc_process_setup+0x4f0>)
   830fc:	6912      	ldr	r2, [r2, #16]
   830fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   83102:	4a21      	ldr	r2, [pc, #132]	; (83188 <udc_process_setup+0x4b4>)
   83104:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83106:	4b20      	ldr	r3, [pc, #128]	; (83188 <udc_process_setup+0x4b4>)
   83108:	681b      	ldr	r3, [r3, #0]
   8310a:	681b      	ldr	r3, [r3, #0]
   8310c:	791b      	ldrb	r3, [r3, #4]
   8310e:	2b00      	cmp	r3, #0
   83110:	f43f af5f 	beq.w	82fd2 <udc_process_setup+0x2fe>
   83114:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   83116:	4627      	mov	r7, r4
   83118:	4e2b      	ldr	r6, [pc, #172]	; (831c8 <udc_process_setup+0x4f4>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8311a:	4d1b      	ldr	r5, [pc, #108]	; (83188 <udc_process_setup+0x4b4>)
		if (!udc_iface_enable(iface_num, 0)) {
   8311c:	4639      	mov	r1, r7
   8311e:	4620      	mov	r0, r4
   83120:	47b0      	blx	r6
   83122:	2800      	cmp	r0, #0
   83124:	f43f ade9 	beq.w	82cfa <udc_process_setup+0x26>
			iface_num++) {
   83128:	3401      	adds	r4, #1
   8312a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8312c:	682b      	ldr	r3, [r5, #0]
   8312e:	681b      	ldr	r3, [r3, #0]
   83130:	791b      	ldrb	r3, [r3, #4]
   83132:	42a3      	cmp	r3, r4
   83134:	d8f2      	bhi.n	8311c <udc_process_setup+0x448>
   83136:	e74c      	b.n	82fd2 <udc_process_setup+0x2fe>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83138:	4b11      	ldr	r3, [pc, #68]	; (83180 <udc_process_setup+0x4ac>)
   8313a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   8313c:	4b21      	ldr	r3, [pc, #132]	; (831c4 <udc_process_setup+0x4f0>)
   8313e:	681b      	ldr	r3, [r3, #0]
   83140:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83142:	429a      	cmp	r2, r3
   83144:	ddc7      	ble.n	830d6 <udc_process_setup+0x402>
   83146:	e5d8      	b.n	82cfa <udc_process_setup+0x26>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   83148:	4b0e      	ldr	r3, [pc, #56]	; (83184 <udc_process_setup+0x4b0>)
   8314a:	781b      	ldrb	r3, [r3, #0]
   8314c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   83150:	3b01      	subs	r3, #1
   83152:	4a1c      	ldr	r2, [pc, #112]	; (831c4 <udc_process_setup+0x4f0>)
   83154:	6852      	ldr	r2, [r2, #4]
   83156:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   8315a:	4a0b      	ldr	r2, [pc, #44]	; (83188 <udc_process_setup+0x4b4>)
   8315c:	6013      	str	r3, [r2, #0]
   8315e:	e7d2      	b.n	83106 <udc_process_setup+0x432>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   83160:	2b01      	cmp	r3, #1
   83162:	d033      	beq.n	831cc <udc_process_setup+0x4f8>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83164:	2b02      	cmp	r3, #2
   83166:	f47f adc8 	bne.w	82cfa <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   8316a:	4b05      	ldr	r3, [pc, #20]	; (83180 <udc_process_setup+0x4ac>)
   8316c:	785b      	ldrb	r3, [r3, #1]
   8316e:	2b01      	cmp	r3, #1
   83170:	d049      	beq.n	83206 <udc_process_setup+0x532>
   83172:	2b03      	cmp	r3, #3
   83174:	d057      	beq.n	83226 <udc_process_setup+0x552>
	return false;
   83176:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   83178:	2b00      	cmp	r3, #0
   8317a:	f47f adcd 	bne.w	82d18 <udc_process_setup+0x44>
   8317e:	e5bc      	b.n	82cfa <udc_process_setup+0x26>
   83180:	2000287c 	.word	0x2000287c
   83184:	2000202d 	.word	0x2000202d
   83188:	20002030 	.word	0x20002030
   8318c:	00082ae5 	.word	0x00082ae5
   83190:	2000202c 	.word	0x2000202c
   83194:	00085905 	.word	0x00085905
   83198:	00085965 	.word	0x00085965
   8319c:	2000202a 	.word	0x2000202a
   831a0:	00082acd 	.word	0x00082acd
   831a4:	20002028 	.word	0x20002028
   831a8:	0008589d 	.word	0x0008589d
   831ac:	00082c39 	.word	0x00082c39
   831b0:	00085f31 	.word	0x00085f31
   831b4:	00085f55 	.word	0x00085f55
   831b8:	00085f79 	.word	0x00085f79
   831bc:	00085f91 	.word	0x00085f91
   831c0:	000858d5 	.word	0x000858d5
   831c4:	20000938 	.word	0x20000938
   831c8:	00082bc5 	.word	0x00082bc5
			switch (udd_g_ctrlreq.req.bRequest) {
   831cc:	4a3b      	ldr	r2, [pc, #236]	; (832bc <udc_process_setup+0x5e8>)
   831ce:	7852      	ldrb	r2, [r2, #1]
   831d0:	2a0b      	cmp	r2, #11
   831d2:	d1c7      	bne.n	83164 <udc_process_setup+0x490>
	if (udd_g_ctrlreq.req.wLength) {
   831d4:	4b39      	ldr	r3, [pc, #228]	; (832bc <udc_process_setup+0x5e8>)
   831d6:	88db      	ldrh	r3, [r3, #6]
   831d8:	2b00      	cmp	r3, #0
   831da:	f47f af3e 	bne.w	8305a <udc_process_setup+0x386>
	if (!udc_num_configuration) {
   831de:	4b38      	ldr	r3, [pc, #224]	; (832c0 <udc_process_setup+0x5ec>)
   831e0:	781b      	ldrb	r3, [r3, #0]
   831e2:	2b00      	cmp	r3, #0
   831e4:	f43f af39 	beq.w	8305a <udc_process_setup+0x386>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   831e8:	4b34      	ldr	r3, [pc, #208]	; (832bc <udc_process_setup+0x5e8>)
   831ea:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   831ec:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   831ee:	4620      	mov	r0, r4
   831f0:	4b34      	ldr	r3, [pc, #208]	; (832c4 <udc_process_setup+0x5f0>)
   831f2:	4798      	blx	r3
   831f4:	2800      	cmp	r0, #0
   831f6:	f43f ad80 	beq.w	82cfa <udc_process_setup+0x26>
	return udc_iface_enable(iface_num, setting_num);
   831fa:	b2e9      	uxtb	r1, r5
   831fc:	4620      	mov	r0, r4
   831fe:	4b32      	ldr	r3, [pc, #200]	; (832c8 <udc_process_setup+0x5f4>)
   83200:	4798      	blx	r3
   83202:	4603      	mov	r3, r0
   83204:	e7b8      	b.n	83178 <udc_process_setup+0x4a4>
	if (udd_g_ctrlreq.req.wLength) {
   83206:	4b2d      	ldr	r3, [pc, #180]	; (832bc <udc_process_setup+0x5e8>)
   83208:	88db      	ldrh	r3, [r3, #6]
   8320a:	2b00      	cmp	r3, #0
   8320c:	f47f ad7c 	bne.w	82d08 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83210:	4b2a      	ldr	r3, [pc, #168]	; (832bc <udc_process_setup+0x5e8>)
   83212:	885b      	ldrh	r3, [r3, #2]
   83214:	2b00      	cmp	r3, #0
   83216:	f47f ad77 	bne.w	82d08 <udc_process_setup+0x34>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8321a:	4b28      	ldr	r3, [pc, #160]	; (832bc <udc_process_setup+0x5e8>)
   8321c:	7918      	ldrb	r0, [r3, #4]
   8321e:	4b2b      	ldr	r3, [pc, #172]	; (832cc <udc_process_setup+0x5f8>)
   83220:	4798      	blx	r3
   83222:	4603      	mov	r3, r0
   83224:	e7a8      	b.n	83178 <udc_process_setup+0x4a4>
	if (udd_g_ctrlreq.req.wLength) {
   83226:	4b25      	ldr	r3, [pc, #148]	; (832bc <udc_process_setup+0x5e8>)
   83228:	88db      	ldrh	r3, [r3, #6]
   8322a:	2b00      	cmp	r3, #0
   8322c:	f47f ad6c 	bne.w	82d08 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83230:	4b22      	ldr	r3, [pc, #136]	; (832bc <udc_process_setup+0x5e8>)
   83232:	885b      	ldrh	r3, [r3, #2]
   83234:	2b00      	cmp	r3, #0
   83236:	f47f ad67 	bne.w	82d08 <udc_process_setup+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8323a:	4c20      	ldr	r4, [pc, #128]	; (832bc <udc_process_setup+0x5e8>)
   8323c:	7920      	ldrb	r0, [r4, #4]
   8323e:	4b24      	ldr	r3, [pc, #144]	; (832d0 <udc_process_setup+0x5fc>)
   83240:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83242:	7920      	ldrb	r0, [r4, #4]
   83244:	4b23      	ldr	r3, [pc, #140]	; (832d4 <udc_process_setup+0x600>)
   83246:	4798      	blx	r3
   83248:	4603      	mov	r3, r0
   8324a:	e795      	b.n	83178 <udc_process_setup+0x4a4>
		return false;
   8324c:	2300      	movs	r3, #0
   8324e:	e793      	b.n	83178 <udc_process_setup+0x4a4>
		return false;
   83250:	2300      	movs	r3, #0
   83252:	e791      	b.n	83178 <udc_process_setup+0x4a4>
	return false;
   83254:	2300      	movs	r3, #0
   83256:	e78f      	b.n	83178 <udc_process_setup+0x4a4>
			udd_g_ctrlreq.req.wIndex = 1;
   83258:	2201      	movs	r2, #1
   8325a:	4b18      	ldr	r3, [pc, #96]	; (832bc <udc_process_setup+0x5e8>)
   8325c:	809a      	strh	r2, [r3, #4]
   8325e:	e701      	b.n	83064 <udc_process_setup+0x390>
	if (0 == udc_num_configuration) {
   83260:	4b17      	ldr	r3, [pc, #92]	; (832c0 <udc_process_setup+0x5ec>)
   83262:	781b      	ldrb	r3, [r3, #0]
   83264:	b30b      	cbz	r3, 832aa <udc_process_setup+0x5d6>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83266:	4b1c      	ldr	r3, [pc, #112]	; (832d8 <udc_process_setup+0x604>)
   83268:	681a      	ldr	r2, [r3, #0]
   8326a:	6813      	ldr	r3, [r2, #0]
   8326c:	791b      	ldrb	r3, [r3, #4]
   8326e:	b1f3      	cbz	r3, 832ae <udc_process_setup+0x5da>
   83270:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83272:	4e1a      	ldr	r6, [pc, #104]	; (832dc <udc_process_setup+0x608>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83274:	4f18      	ldr	r7, [pc, #96]	; (832d8 <udc_process_setup+0x604>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   83276:	6853      	ldr	r3, [r2, #4]
   83278:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8327c:	68eb      	ldr	r3, [r5, #12]
   8327e:	4798      	blx	r3
   83280:	4601      	mov	r1, r0
   83282:	4620      	mov	r0, r4
   83284:	47b0      	blx	r6
   83286:	4603      	mov	r3, r0
   83288:	2800      	cmp	r0, #0
   8328a:	f43f ad45 	beq.w	82d18 <udc_process_setup+0x44>
		if (udi_api->setup()) {
   8328e:	68ab      	ldr	r3, [r5, #8]
   83290:	4798      	blx	r3
   83292:	4603      	mov	r3, r0
   83294:	2800      	cmp	r0, #0
   83296:	f47f ad3f 	bne.w	82d18 <udc_process_setup+0x44>
			iface_num++) {
   8329a:	3401      	adds	r4, #1
   8329c:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8329e:	683a      	ldr	r2, [r7, #0]
   832a0:	6811      	ldr	r1, [r2, #0]
   832a2:	7909      	ldrb	r1, [r1, #4]
   832a4:	42a1      	cmp	r1, r4
   832a6:	d8e6      	bhi.n	83276 <udc_process_setup+0x5a2>
   832a8:	e536      	b.n	82d18 <udc_process_setup+0x44>
		return false; // The device is not is configured state yet
   832aa:	2300      	movs	r3, #0
   832ac:	e534      	b.n	82d18 <udc_process_setup+0x44>
	return false;
   832ae:	2300      	movs	r3, #0
   832b0:	e532      	b.n	82d18 <udc_process_setup+0x44>
			return false; // Error from USB host
   832b2:	2300      	movs	r3, #0
   832b4:	e530      	b.n	82d18 <udc_process_setup+0x44>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   832b6:	2412      	movs	r4, #18
		str = udc_string_product_name;
   832b8:	4a09      	ldr	r2, [pc, #36]	; (832e0 <udc_process_setup+0x60c>)
   832ba:	e603      	b.n	82ec4 <udc_process_setup+0x1f0>
   832bc:	2000287c 	.word	0x2000287c
   832c0:	2000202d 	.word	0x2000202d
   832c4:	00082b59 	.word	0x00082b59
   832c8:	00082bc5 	.word	0x00082bc5
   832cc:	00085a61 	.word	0x00085a61
   832d0:	00085ecd 	.word	0x00085ecd
   832d4:	00085999 	.word	0x00085999
   832d8:	20002030 	.word	0x20002030
   832dc:	00082ae5 	.word	0x00082ae5
   832e0:	2000091c 	.word	0x2000091c

000832e4 <switch_configurations>:

// hack to get around windows being unable to handle multiple configurations
#if NAEUSB_MPSSE_SUPPORT == 1
void switch_configurations()
{
	udc_config.conf_lsfs->desc = (usb_conf_desc_t *)&udc_desc_fs_mpsse;
   832e4:	4b06      	ldr	r3, [pc, #24]	; (83300 <switch_configurations+0x1c>)
   832e6:	685a      	ldr	r2, [r3, #4]
   832e8:	4906      	ldr	r1, [pc, #24]	; (83304 <switch_configurations+0x20>)
   832ea:	6011      	str	r1, [r2, #0]
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
   832ec:	6859      	ldr	r1, [r3, #4]
   832ee:	4a06      	ldr	r2, [pc, #24]	; (83308 <switch_configurations+0x24>)
   832f0:	604a      	str	r2, [r1, #4]
	udc_config.conf_hs->desc = (usb_conf_desc_t *)&udc_desc_hs_mpsse;
   832f2:	6919      	ldr	r1, [r3, #16]
   832f4:	4805      	ldr	r0, [pc, #20]	; (8330c <switch_configurations+0x28>)
   832f6:	6008      	str	r0, [r1, #0]
	udc_config.conf_hs->udi_apis = mpsse_udi_apis;
   832f8:	691b      	ldr	r3, [r3, #16]
   832fa:	605a      	str	r2, [r3, #4]
   832fc:	4770      	bx	lr
   832fe:	bf00      	nop
   83300:	20000938 	.word	0x20000938
   83304:	200009c4 	.word	0x200009c4
   83308:	20000930 	.word	0x20000930
   8330c:	20000a8c 	.word	0x20000a8c

00083310 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   83310:	b510      	push	{r4, lr}
   83312:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   83314:	4b06      	ldr	r3, [pc, #24]	; (83330 <FPGA_setlock+0x20>)
   83316:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   83318:	4b06      	ldr	r3, [pc, #24]	; (83334 <FPGA_setlock+0x24>)
   8331a:	781b      	ldrb	r3, [r3, #0]
   8331c:	b933      	cbnz	r3, 8332c <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   8331e:	4b05      	ldr	r3, [pc, #20]	; (83334 <FPGA_setlock+0x24>)
   83320:	701c      	strb	r4, [r3, #0]
    ret = 1;
   83322:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   83324:	4b04      	ldr	r3, [pc, #16]	; (83338 <FPGA_setlock+0x28>)
   83326:	4798      	blx	r3
  return ret;
}
   83328:	4620      	mov	r0, r4
   8332a:	bd10      	pop	{r4, pc}
  int ret = 0;
   8332c:	2400      	movs	r4, #0
   8332e:	e7f9      	b.n	83324 <FPGA_setlock+0x14>
   83330:	000843f1 	.word	0x000843f1
   83334:	20002038 	.word	0x20002038
   83338:	0008442d 	.word	0x0008442d

0008333c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   8333c:	2200      	movs	r2, #0
   8333e:	4b01      	ldr	r3, [pc, #4]	; (83344 <FPGA_releaselock+0x8>)
   83340:	701a      	strb	r2, [r3, #0]
   83342:	4770      	bx	lr
   83344:	20002038 	.word	0x20002038

00083348 <FPGA_lockstatus>:
}

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   83348:	4b01      	ldr	r3, [pc, #4]	; (83350 <FPGA_lockstatus+0x8>)
   8334a:	7818      	ldrb	r0, [r3, #0]
}
   8334c:	4770      	bx	lr
   8334e:	bf00      	nop
   83350:	20002038 	.word	0x20002038

00083354 <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   83354:	b508      	push	{r3, lr}
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
   83356:	4601      	mov	r1, r0
   83358:	4804      	ldr	r0, [pc, #16]	; (8336c <FPGA_setaddr+0x18>)
   8335a:	4b05      	ldr	r3, [pc, #20]	; (83370 <FPGA_setaddr+0x1c>)
   8335c:	4798      	blx	r3
			gpio_set_pin_low(FPGA_ALE_GPIO);
   8335e:	2035      	movs	r0, #53	; 0x35
   83360:	4b04      	ldr	r3, [pc, #16]	; (83374 <FPGA_setaddr+0x20>)
   83362:	4798      	blx	r3
			gpio_set_pin_high(FPGA_ALE_GPIO);
   83364:	2035      	movs	r0, #53	; 0x35
   83366:	4b04      	ldr	r3, [pc, #16]	; (83378 <FPGA_setaddr+0x24>)
   83368:	4798      	blx	r3
   8336a:	bd08      	pop	{r3, pc}
   8336c:	400e0e00 	.word	0x400e0e00
   83370:	000846a7 	.word	0x000846a7
   83374:	000846e9 	.word	0x000846e9
   83378:	000846cf 	.word	0x000846cf

0008337c <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   8337c:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   8337e:	4b7b      	ldr	r3, [pc, #492]	; (8356c <V2Protocol_ProcessCommand+0x1f0>)
   83380:	789c      	ldrb	r4, [r3, #2]
   83382:	4b7b      	ldr	r3, [pc, #492]	; (83570 <V2Protocol_ProcessCommand+0x1f4>)
   83384:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   83386:	4b7b      	ldr	r3, [pc, #492]	; (83574 <V2Protocol_ProcessCommand+0x1f8>)
   83388:	4798      	blx	r3

	switch (V2Command)
   8338a:	1e63      	subs	r3, r4, #1
   8338c:	2b21      	cmp	r3, #33	; 0x21
   8338e:	f200 80e3 	bhi.w	83558 <V2Protocol_ProcessCommand+0x1dc>
   83392:	e8df f013 	tbh	[pc, r3, lsl #1]
   83396:	0022      	.short	0x0022
   83398:	00370037 	.word	0x00370037
   8339c:	00e100e1 	.word	0x00e100e1
   833a0:	00e1006c 	.word	0x00e1006c
   833a4:	00e100e1 	.word	0x00e100e1
   833a8:	00e10088 	.word	0x00e10088
   833ac:	00e100e1 	.word	0x00e100e1
   833b0:	00e100e1 	.word	0x00e100e1
   833b4:	00940090 	.word	0x00940090
   833b8:	009800a4 	.word	0x009800a4
   833bc:	0098009e 	.word	0x0098009e
   833c0:	00ad009e 	.word	0x00ad009e
   833c4:	00ad00a8 	.word	0x00ad00a8
   833c8:	00a800a8 	.word	0x00a800a8
   833cc:	00b200a8 	.word	0x00b200a8
   833d0:	00e100e1 	.word	0x00e100e1
   833d4:	00cf00b6 	.word	0x00cf00b6
   833d8:	00c0      	.short	0x00c0
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   833da:	4c65      	ldr	r4, [pc, #404]	; (83570 <V2Protocol_ProcessCommand+0x1f4>)
   833dc:	2300      	movs	r3, #0
   833de:	7063      	strb	r3, [r4, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   833e0:	230d      	movs	r3, #13
   833e2:	70a3      	strb	r3, [r4, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   833e4:	4b64      	ldr	r3, [pc, #400]	; (83578 <V2Protocol_ProcessCommand+0x1fc>)
   833e6:	cb07      	ldmia	r3!, {r0, r1, r2}
   833e8:	f8c4 0003 	str.w	r0, [r4, #3]
   833ec:	f8c4 1007 	str.w	r1, [r4, #7]
   833f0:	f8c4 200b 	str.w	r2, [r4, #11]
   833f4:	781b      	ldrb	r3, [r3, #0]
   833f6:	73e3      	strb	r3, [r4, #15]
	udd_g_ctrlreq.payload = status_payload;
   833f8:	4b5c      	ldr	r3, [pc, #368]	; (8356c <V2Protocol_ProcessCommand+0x1f0>)
   833fa:	609c      	str	r4, [r3, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   833fc:	2210      	movs	r2, #16
   833fe:	819a      	strh	r2, [r3, #12]
	return true;
   83400:	2001      	movs	r0, #1
   83402:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   83404:	4b59      	ldr	r3, [pc, #356]	; (8356c <V2Protocol_ProcessCommand+0x1f0>)
   83406:	689b      	ldr	r3, [r3, #8]
   83408:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   8340a:	2c02      	cmp	r4, #2
   8340c:	d00c      	beq.n	83428 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   8340e:	2202      	movs	r2, #2
   83410:	4b5a      	ldr	r3, [pc, #360]	; (8357c <V2Protocol_ProcessCommand+0x200>)
   83412:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   83414:	4628      	mov	r0, r5
   83416:	4b5a      	ldr	r3, [pc, #360]	; (83580 <V2Protocol_ProcessCommand+0x204>)
   83418:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   8341a:	2c03      	cmp	r4, #3
   8341c:	d017      	beq.n	8344e <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   8341e:	22c0      	movs	r2, #192	; 0xc0
   83420:	4b58      	ldr	r3, [pc, #352]	; (83584 <V2Protocol_ProcessCommand+0x208>)
   83422:	705a      	strb	r2, [r3, #1]
	return true;
   83424:	2001      	movs	r0, #1
   83426:	bd38      	pop	{r3, r4, r5, pc}
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   83428:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   8342a:	2202      	movs	r2, #2
   8342c:	4b53      	ldr	r3, [pc, #332]	; (8357c <V2Protocol_ProcessCommand+0x200>)
   8342e:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   83430:	4628      	mov	r0, r5
   83432:	4b53      	ldr	r3, [pc, #332]	; (83580 <V2Protocol_ProcessCommand+0x204>)
   83434:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   83436:	f010 0f02 	tst.w	r0, #2
   8343a:	d0f0      	beq.n	8341e <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   8343c:	2200      	movs	r2, #0
   8343e:	4b51      	ldr	r3, [pc, #324]	; (83584 <V2Protocol_ProcessCommand+0x208>)
   83440:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   83442:	4621      	mov	r1, r4
   83444:	4628      	mov	r0, r5
   83446:	4b50      	ldr	r3, [pc, #320]	; (83588 <V2Protocol_ProcessCommand+0x20c>)
   83448:	4798      	blx	r3
	return true;
   8344a:	2001      	movs	r0, #1
   8344c:	bd38      	pop	{r3, r4, r5, pc}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   8344e:	f010 0f01 	tst.w	r0, #1
   83452:	d0e4      	beq.n	8341e <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   83454:	4c4b      	ldr	r4, [pc, #300]	; (83584 <V2Protocol_ProcessCommand+0x208>)
   83456:	2300      	movs	r3, #0
   83458:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   8345a:	4628      	mov	r0, r5
   8345c:	4b4b      	ldr	r3, [pc, #300]	; (8358c <V2Protocol_ProcessCommand+0x210>)
   8345e:	4798      	blx	r3
   83460:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   83462:	4a46      	ldr	r2, [pc, #280]	; (8357c <V2Protocol_ProcessCommand+0x200>)
   83464:	8813      	ldrh	r3, [r2, #0]
   83466:	3301      	adds	r3, #1
   83468:	8013      	strh	r3, [r2, #0]
	return true;
   8346a:	2001      	movs	r0, #1
   8346c:	bd38      	pop	{r3, r4, r5, pc}
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   8346e:	4b3f      	ldr	r3, [pc, #252]	; (8356c <V2Protocol_ProcessCommand+0x1f0>)
   83470:	689a      	ldr	r2, [r3, #8]
   83472:	78d1      	ldrb	r1, [r2, #3]
   83474:	7893      	ldrb	r3, [r2, #2]
   83476:	041b      	lsls	r3, r3, #16
   83478:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   8347c:	7811      	ldrb	r1, [r2, #0]
   8347e:	430b      	orrs	r3, r1
   83480:	7852      	ldrb	r2, [r2, #1]
   83482:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   83486:	4a42      	ldr	r2, [pc, #264]	; (83590 <V2Protocol_ProcessCommand+0x214>)
   83488:	6013      	str	r3, [r2, #0]

	if (CurrentAddress & (1UL << 31))
   8348a:	2b00      	cmp	r3, #0
   8348c:	db07      	blt.n	8349e <V2Protocol_ProcessCommand+0x122>
	  MustLoadExtendedAddress = true;
	  
	// printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);

	avrisp_status_payload[1] = STATUS_CMD_OK;
   8348e:	2200      	movs	r2, #0
   83490:	4b3c      	ldr	r3, [pc, #240]	; (83584 <V2Protocol_ProcessCommand+0x208>)
   83492:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   83494:	2202      	movs	r2, #2
   83496:	4b39      	ldr	r3, [pc, #228]	; (8357c <V2Protocol_ProcessCommand+0x200>)
   83498:	801a      	strh	r2, [r3, #0]
	return true;
   8349a:	2001      	movs	r0, #1
   8349c:	bd38      	pop	{r3, r4, r5, pc}
	  MustLoadExtendedAddress = true;
   8349e:	2201      	movs	r2, #1
   834a0:	4b3c      	ldr	r3, [pc, #240]	; (83594 <V2Protocol_ProcessCommand+0x218>)
   834a2:	701a      	strb	r2, [r3, #0]
   834a4:	e7f3      	b.n	8348e <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   834a6:	2200      	movs	r2, #0
   834a8:	4b36      	ldr	r3, [pc, #216]	; (83584 <V2Protocol_ProcessCommand+0x208>)
   834aa:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   834ac:	2202      	movs	r2, #2
   834ae:	4b33      	ldr	r3, [pc, #204]	; (8357c <V2Protocol_ProcessCommand+0x200>)
   834b0:	801a      	strh	r2, [r3, #0]
	return true;
   834b2:	2001      	movs	r0, #1
   834b4:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_EnterISPMode();
   834b6:	4b38      	ldr	r3, [pc, #224]	; (83598 <V2Protocol_ProcessCommand+0x21c>)
   834b8:	4798      	blx	r3
	return true;
   834ba:	2001      	movs	r0, #1
			break;
   834bc:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_LeaveISPMode();
   834be:	4b37      	ldr	r3, [pc, #220]	; (8359c <V2Protocol_ProcessCommand+0x220>)
   834c0:	4798      	blx	r3
	return true;
   834c2:	2001      	movs	r0, #1
			break;
   834c4:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   834c6:	4936      	ldr	r1, [pc, #216]	; (835a0 <V2Protocol_ProcessCommand+0x224>)
   834c8:	4620      	mov	r0, r4
   834ca:	4b36      	ldr	r3, [pc, #216]	; (835a4 <V2Protocol_ProcessCommand+0x228>)
   834cc:	4798      	blx	r3
	return true;
   834ce:	2001      	movs	r0, #1
			break;
   834d0:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   834d2:	4933      	ldr	r1, [pc, #204]	; (835a0 <V2Protocol_ProcessCommand+0x224>)
   834d4:	4620      	mov	r0, r4
   834d6:	4b34      	ldr	r3, [pc, #208]	; (835a8 <V2Protocol_ProcessCommand+0x22c>)
   834d8:	4798      	blx	r3
	return true;
   834da:	2001      	movs	r0, #1
			break;
   834dc:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ChipErase();
   834de:	4b33      	ldr	r3, [pc, #204]	; (835ac <V2Protocol_ProcessCommand+0x230>)
   834e0:	4798      	blx	r3
	return true;
   834e2:	2001      	movs	r0, #1
			break;
   834e4:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   834e6:	4620      	mov	r0, r4
   834e8:	4b31      	ldr	r3, [pc, #196]	; (835b0 <V2Protocol_ProcessCommand+0x234>)
   834ea:	4798      	blx	r3
	return true;
   834ec:	2001      	movs	r0, #1
			break;
   834ee:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_WriteFuseLock(V2Command);
   834f0:	4620      	mov	r0, r4
   834f2:	4b30      	ldr	r3, [pc, #192]	; (835b4 <V2Protocol_ProcessCommand+0x238>)
   834f4:	4798      	blx	r3
	return true;
   834f6:	2001      	movs	r0, #1
			break;
   834f8:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_SPIMulti();
   834fa:	4b2f      	ldr	r3, [pc, #188]	; (835b8 <V2Protocol_ProcessCommand+0x23c>)
   834fc:	4798      	blx	r3
	return true;
   834fe:	2001      	movs	r0, #1
			break;
   83500:	bd38      	pop	{r3, r4, r5, pc}
			udd_g_ctrlreq.payload = avrisp_status_payload;
   83502:	4a1a      	ldr	r2, [pc, #104]	; (8356c <V2Protocol_ProcessCommand+0x1f0>)
   83504:	4b1f      	ldr	r3, [pc, #124]	; (83584 <V2Protocol_ProcessCommand+0x208>)
   83506:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   83508:	4b1c      	ldr	r3, [pc, #112]	; (8357c <V2Protocol_ProcessCommand+0x200>)
   8350a:	8819      	ldrh	r1, [r3, #0]
   8350c:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   8350e:	2200      	movs	r2, #0
   83510:	801a      	strh	r2, [r3, #0]
			return true;
   83512:	2001      	movs	r0, #1
   83514:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   83516:	4a15      	ldr	r2, [pc, #84]	; (8356c <V2Protocol_ProcessCommand+0x1f0>)
   83518:	8853      	ldrh	r3, [r2, #2]
   8351a:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   8351c:	88d2      	ldrh	r2, [r2, #6]
   8351e:	1899      	adds	r1, r3, r2
   83520:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83524:	dc20      	bgt.n	83568 <V2Protocol_ProcessCommand+0x1ec>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   83526:	4811      	ldr	r0, [pc, #68]	; (8356c <V2Protocol_ProcessCommand+0x1f0>)
   83528:	491d      	ldr	r1, [pc, #116]	; (835a0 <V2Protocol_ProcessCommand+0x224>)
   8352a:	440b      	add	r3, r1
   8352c:	6083      	str	r3, [r0, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8352e:	8182      	strh	r2, [r0, #12]
			return true;
   83530:	2001      	movs	r0, #1
   83532:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   83534:	4a0d      	ldr	r2, [pc, #52]	; (8356c <V2Protocol_ProcessCommand+0x1f0>)
   83536:	8853      	ldrh	r3, [r2, #2]
   83538:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   8353a:	88d2      	ldrh	r2, [r2, #6]
   8353c:	1899      	adds	r1, r3, r2
   8353e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83542:	dd01      	ble.n	83548 <V2Protocol_ProcessCommand+0x1cc>
				return false;
   83544:	2000      	movs	r0, #0
   83546:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   83548:	4908      	ldr	r1, [pc, #32]	; (8356c <V2Protocol_ProcessCommand+0x1f0>)
   8354a:	6889      	ldr	r1, [r1, #8]
   8354c:	4814      	ldr	r0, [pc, #80]	; (835a0 <V2Protocol_ProcessCommand+0x224>)
   8354e:	4418      	add	r0, r3
   83550:	4b1a      	ldr	r3, [pc, #104]	; (835bc <V2Protocol_ProcessCommand+0x240>)
   83552:	4798      	blx	r3
			return true;
   83554:	2001      	movs	r0, #1
   83556:	bd38      	pop	{r3, r4, r5, pc}
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   83558:	22c9      	movs	r2, #201	; 0xc9
   8355a:	4b0a      	ldr	r3, [pc, #40]	; (83584 <V2Protocol_ProcessCommand+0x208>)
   8355c:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   8355e:	2202      	movs	r2, #2
   83560:	4b06      	ldr	r3, [pc, #24]	; (8357c <V2Protocol_ProcessCommand+0x200>)
   83562:	801a      	strh	r2, [r3, #0]
	return true;
   83564:	2001      	movs	r0, #1
   83566:	bd38      	pop	{r3, r4, r5, pc}
				return false;
   83568:	2000      	movs	r0, #0
   8356a:	bd38      	pop	{r3, r4, r5, pc}
   8356c:	2000287c 	.word	0x2000287c
   83570:	2000213c 	.word	0x2000213c
   83574:	00084091 	.word	0x00084091
   83578:	0008cba0 	.word	0x0008cba0
   8357c:	2000283a 	.word	0x2000283a
   83580:	000835f1 	.word	0x000835f1
   83584:	2000283c 	.word	0x2000283c
   83588:	00083619 	.word	0x00083619
   8358c:	00083605 	.word	0x00083605
   83590:	2000285c 	.word	0x2000285c
   83594:	20002838 	.word	0x20002838
   83598:	00080e5d 	.word	0x00080e5d
   8359c:	00080f99 	.word	0x00080f99
   835a0:	2000203c 	.word	0x2000203c
   835a4:	00080985 	.word	0x00080985
   835a8:	00080bf1 	.word	0x00080bf1
   835ac:	00080ff5 	.word	0x00080ff5
   835b0:	00080d25 	.word	0x00080d25
   835b4:	00080dc1 	.word	0x00080dc1
   835b8:	00080e25 	.word	0x00080e25
   835bc:	00086ae1 	.word	0x00086ae1

000835c0 <V2Params_GetParamFromTable>:
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
   835c0:	4b09      	ldr	r3, [pc, #36]	; (835e8 <V2Params_GetParamFromTable+0x28>)
   835c2:	781b      	ldrb	r3, [r3, #0]
   835c4:	4283      	cmp	r3, r0
   835c6:	d00a      	beq.n	835de <V2Params_GetParamFromTable+0x1e>
		  return CurrTableItem;

		CurrTableItem++;
   835c8:	4b08      	ldr	r3, [pc, #32]	; (835ec <V2Params_GetParamFromTable+0x2c>)
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   835ca:	f103 011b 	add.w	r1, r3, #27
		if (ParamID == CurrTableItem->ParamID)
   835ce:	781a      	ldrb	r2, [r3, #0]
   835d0:	4282      	cmp	r2, r0
   835d2:	d006      	beq.n	835e2 <V2Params_GetParamFromTable+0x22>
		CurrTableItem++;
   835d4:	3303      	adds	r3, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   835d6:	428b      	cmp	r3, r1
   835d8:	d1f9      	bne.n	835ce <V2Params_GetParamFromTable+0xe>
	}

	return NULL;
   835da:	2000      	movs	r0, #0
   835dc:	4770      	bx	lr
	ParameterItem_t* CurrTableItem = ParameterTable;
   835de:	4802      	ldr	r0, [pc, #8]	; (835e8 <V2Params_GetParamFromTable+0x28>)
   835e0:	4770      	bx	lr
   835e2:	4618      	mov	r0, r3
}
   835e4:	4770      	bx	lr
   835e6:	bf00      	nop
   835e8:	20000b20 	.word	0x20000b20
   835ec:	20000b23 	.word	0x20000b23

000835f0 <V2Params_GetParameterPrivileges>:
{
   835f0:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   835f2:	4b03      	ldr	r3, [pc, #12]	; (83600 <V2Params_GetParameterPrivileges+0x10>)
   835f4:	4798      	blx	r3
	if (ParamInfo == NULL)
   835f6:	b108      	cbz	r0, 835fc <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   835f8:	7840      	ldrb	r0, [r0, #1]
   835fa:	bd08      	pop	{r3, pc}
	  return 0;
   835fc:	2000      	movs	r0, #0
}
   835fe:	bd08      	pop	{r3, pc}
   83600:	000835c1 	.word	0x000835c1

00083604 <V2Params_GetParameterValue>:
{
   83604:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   83606:	4b03      	ldr	r3, [pc, #12]	; (83614 <V2Params_GetParameterValue+0x10>)
   83608:	4798      	blx	r3
	if (ParamInfo == NULL)
   8360a:	b108      	cbz	r0, 83610 <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   8360c:	7880      	ldrb	r0, [r0, #2]
   8360e:	bd08      	pop	{r3, pc}
	  return 0;
   83610:	2000      	movs	r0, #0
}
   83612:	bd08      	pop	{r3, pc}
   83614:	000835c1 	.word	0x000835c1

00083618 <V2Params_SetParameterValue>:
{
   83618:	b510      	push	{r4, lr}
   8361a:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   8361c:	4b02      	ldr	r3, [pc, #8]	; (83628 <V2Params_SetParameterValue+0x10>)
   8361e:	4798      	blx	r3
	if (ParamInfo == NULL)
   83620:	b100      	cbz	r0, 83624 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   83622:	7084      	strb	r4, [r0, #2]
   83624:	bd10      	pop	{r4, pc}
   83626:	bf00      	nop
   83628:	000835c1 	.word	0x000835c1

0008362c <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   8362c:	b538      	push	{r3, r4, r5, lr}
   8362e:	4605      	mov	r5, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   83630:	b2c0      	uxtb	r0, r0
   83632:	4c05      	ldr	r4, [pc, #20]	; (83648 <XMEGANVM_SendAddress+0x1c>)
   83634:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   83636:	f3c5 2007 	ubfx	r0, r5, #8, #8
   8363a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   8363c:	f3c5 4007 	ubfx	r0, r5, #16, #8
   83640:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   83642:	0e28      	lsrs	r0, r5, #24
   83644:	47a0      	blx	r4
   83646:	bd38      	pop	{r3, r4, r5, pc}
   83648:	00083ec1 	.word	0x00083ec1

0008364c <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   8364c:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   8364e:	4b03      	ldr	r3, [pc, #12]	; (8365c <XMEGANVM_SendNVMRegAddress+0x10>)
   83650:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   83652:	4318      	orrs	r0, r3
   83654:	4b02      	ldr	r3, [pc, #8]	; (83660 <XMEGANVM_SendNVMRegAddress+0x14>)
   83656:	4798      	blx	r3
   83658:	bd08      	pop	{r3, pc}
   8365a:	bf00      	nop
   8365c:	20000b40 	.word	0x20000b40
   83660:	0008362d 	.word	0x0008362d

00083664 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   83664:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83666:	4e07      	ldr	r6, [pc, #28]	; (83684 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83668:	4d07      	ldr	r5, [pc, #28]	; (83688 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   8366a:	4c08      	ldr	r4, [pc, #32]	; (8368c <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   8366c:	2080      	movs	r0, #128	; 0x80
   8366e:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83670:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   83672:	6823      	ldr	r3, [r4, #0]
   83674:	b123      	cbz	r3, 83680 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   83676:	f010 0f02 	tst.w	r0, #2
   8367a:	d0f7      	beq.n	8366c <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   8367c:	2001      	movs	r0, #1
   8367e:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   83680:	2000      	movs	r0, #0
		}
	}
}
   83682:	bd70      	pop	{r4, r5, r6, pc}
   83684:	00083ec1 	.word	0x00083ec1
   83688:	00083eed 	.word	0x00083eed
   8368c:	20002864 	.word	0x20002864

00083690 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   83690:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83692:	206b      	movs	r0, #107	; 0x6b
   83694:	4b09      	ldr	r3, [pc, #36]	; (836bc <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   83696:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   83698:	200f      	movs	r0, #15
   8369a:	4b09      	ldr	r3, [pc, #36]	; (836c0 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   8369c:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   8369e:	4e07      	ldr	r6, [pc, #28]	; (836bc <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   836a0:	4d08      	ldr	r5, [pc, #32]	; (836c4 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   836a2:	4c09      	ldr	r4, [pc, #36]	; (836c8 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   836a4:	2020      	movs	r0, #32
   836a6:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   836a8:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   836aa:	6823      	ldr	r3, [r4, #0]
   836ac:	b123      	cbz	r3, 836b8 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   836ae:	f010 0f80 	tst.w	r0, #128	; 0x80
   836b2:	d1f7      	bne.n	836a4 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   836b4:	2001      	movs	r0, #1
   836b6:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   836b8:	2000      	movs	r0, #0
		}
	}
}
   836ba:	bd70      	pop	{r4, r5, r6, pc}
   836bc:	00083ec1 	.word	0x00083ec1
   836c0:	0008364d 	.word	0x0008364d
   836c4:	00083eed 	.word	0x00083eed
   836c8:	20002864 	.word	0x20002864

000836cc <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   836cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836d0:	b082      	sub	sp, #8
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   836d2:	4b1a      	ldr	r3, [pc, #104]	; (8373c <XMEGANVM_EnablePDI+0x70>)
   836d4:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   836d6:	20c1      	movs	r0, #193	; 0xc1
   836d8:	4c19      	ldr	r4, [pc, #100]	; (83740 <XMEGANVM_EnablePDI+0x74>)
   836da:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   836dc:	2059      	movs	r0, #89	; 0x59
   836de:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   836e0:	20c2      	movs	r0, #194	; 0xc2
   836e2:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   836e4:	2002      	movs	r0, #2
   836e6:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   836e8:	20e0      	movs	r0, #224	; 0xe0
   836ea:	47a0      	blx	r4
   836ec:	f10d 0407 	add.w	r4, sp, #7
   836f0:	f10d 38ff 	add.w	r8, sp, #4294967295
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   836f4:	2712      	movs	r7, #18
   836f6:	2689      	movs	r6, #137	; 0x89
   836f8:	4d11      	ldr	r5, [pc, #68]	; (83740 <XMEGANVM_EnablePDI+0x74>)
   836fa:	f88d 7000 	strb.w	r7, [sp]
   836fe:	f88d 6001 	strb.w	r6, [sp, #1]
   83702:	23ab      	movs	r3, #171	; 0xab
   83704:	f88d 3002 	strb.w	r3, [sp, #2]
   83708:	2345      	movs	r3, #69	; 0x45
   8370a:	f88d 3003 	strb.w	r3, [sp, #3]
   8370e:	23cd      	movs	r3, #205	; 0xcd
   83710:	f88d 3004 	strb.w	r3, [sp, #4]
   83714:	23d8      	movs	r3, #216	; 0xd8
   83716:	f88d 3005 	strb.w	r3, [sp, #5]
   8371a:	2388      	movs	r3, #136	; 0x88
   8371c:	f88d 3006 	strb.w	r3, [sp, #6]
   83720:	23ff      	movs	r3, #255	; 0xff
   83722:	f88d 3007 	strb.w	r3, [sp, #7]
   83726:	f814 0901 	ldrb.w	r0, [r4], #-1
   8372a:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   8372c:	4544      	cmp	r4, r8
   8372e:	d1e4      	bne.n	836fa <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   83730:	4b04      	ldr	r3, [pc, #16]	; (83744 <XMEGANVM_EnablePDI+0x78>)
   83732:	4798      	blx	r3
}
   83734:	b002      	add	sp, #8
   83736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8373a:	bf00      	nop
   8373c:	00083f8d 	.word	0x00083f8d
   83740:	00083ec1 	.word	0x00083ec1
   83744:	00083665 	.word	0x00083665

00083748 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   83748:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   8374a:	4b09      	ldr	r3, [pc, #36]	; (83770 <XMEGANVM_DisablePDI+0x28>)
   8374c:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   8374e:	4c09      	ldr	r4, [pc, #36]	; (83774 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83750:	4d09      	ldr	r5, [pc, #36]	; (83778 <XMEGANVM_DisablePDI+0x30>)
   83752:	4e0a      	ldr	r6, [pc, #40]	; (8377c <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83754:	20c1      	movs	r0, #193	; 0xc1
   83756:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   83758:	2000      	movs	r0, #0
   8375a:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   8375c:	2081      	movs	r0, #129	; 0x81
   8375e:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83760:	47a8      	blx	r5
   83762:	b110      	cbz	r0, 8376a <XMEGANVM_DisablePDI+0x22>
   83764:	6833      	ldr	r3, [r6, #0]
   83766:	2b00      	cmp	r3, #0
   83768:	d1f4      	bne.n	83754 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   8376a:	4b05      	ldr	r3, [pc, #20]	; (83780 <XMEGANVM_DisablePDI+0x38>)
   8376c:	4798      	blx	r3
   8376e:	bd70      	pop	{r4, r5, r6, pc}
   83770:	00083665 	.word	0x00083665
   83774:	00083ec1 	.word	0x00083ec1
   83778:	00083eed 	.word	0x00083eed
   8377c:	20002864 	.word	0x20002864
   83780:	00083e65 	.word	0x00083e65

00083784 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   83784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83786:	4607      	mov	r7, r0
   83788:	460d      	mov	r5, r1
   8378a:	4614      	mov	r4, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8378c:	4b1e      	ldr	r3, [pc, #120]	; (83808 <XMEGANVM_ReadMemory+0x84>)
   8378e:	4798      	blx	r3
   83790:	4603      	mov	r3, r0
   83792:	b908      	cbnz	r0, 83798 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   83794:	4618      	mov	r0, r3
   83796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83798:	204c      	movs	r0, #76	; 0x4c
   8379a:	4e1c      	ldr	r6, [pc, #112]	; (8380c <XMEGANVM_ReadMemory+0x88>)
   8379c:	47b0      	blx	r6
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8379e:	200a      	movs	r0, #10
   837a0:	4b1b      	ldr	r3, [pc, #108]	; (83810 <XMEGANVM_ReadMemory+0x8c>)
   837a2:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   837a4:	2043      	movs	r0, #67	; 0x43
   837a6:	47b0      	blx	r6
	if (ReadSize > 1)
   837a8:	2c01      	cmp	r4, #1
   837aa:	d923      	bls.n	837f4 <XMEGANVM_ReadMemory+0x70>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   837ac:	206b      	movs	r0, #107	; 0x6b
   837ae:	47b0      	blx	r6
		XMEGANVM_SendAddress(ReadAddress);
   837b0:	4638      	mov	r0, r7
   837b2:	4b18      	ldr	r3, [pc, #96]	; (83814 <XMEGANVM_ReadMemory+0x90>)
   837b4:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   837b6:	20a0      	movs	r0, #160	; 0xa0
   837b8:	47b0      	blx	r6
		XPROGTarget_SendByte(ReadSize - 1);
   837ba:	1e60      	subs	r0, r4, #1
   837bc:	b2c0      	uxtb	r0, r0
   837be:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   837c0:	2024      	movs	r0, #36	; 0x24
   837c2:	47b0      	blx	r6
		while (ReadSize-- && TimeoutTicksRemaining)
   837c4:	1e63      	subs	r3, r4, #1
   837c6:	b29b      	uxth	r3, r3
   837c8:	b174      	cbz	r4, 837e8 <XMEGANVM_ReadMemory+0x64>
   837ca:	4a13      	ldr	r2, [pc, #76]	; (83818 <XMEGANVM_ReadMemory+0x94>)
   837cc:	6812      	ldr	r2, [r2, #0]
   837ce:	b15a      	cbz	r2, 837e8 <XMEGANVM_ReadMemory+0x64>
   837d0:	1e6c      	subs	r4, r5, #1
   837d2:	441d      	add	r5, r3
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   837d4:	4e11      	ldr	r6, [pc, #68]	; (8381c <XMEGANVM_ReadMemory+0x98>)
		while (ReadSize-- && TimeoutTicksRemaining)
   837d6:	4f10      	ldr	r7, [pc, #64]	; (83818 <XMEGANVM_ReadMemory+0x94>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   837d8:	47b0      	blx	r6
   837da:	f804 0f01 	strb.w	r0, [r4, #1]!
		while (ReadSize-- && TimeoutTicksRemaining)
   837de:	42ac      	cmp	r4, r5
   837e0:	d002      	beq.n	837e8 <XMEGANVM_ReadMemory+0x64>
   837e2:	683b      	ldr	r3, [r7, #0]
   837e4:	2b00      	cmp	r3, #0
   837e6:	d1f7      	bne.n	837d8 <XMEGANVM_ReadMemory+0x54>
	return (TimeoutTicksRemaining > 0);
   837e8:	4b0b      	ldr	r3, [pc, #44]	; (83818 <XMEGANVM_ReadMemory+0x94>)
   837ea:	681b      	ldr	r3, [r3, #0]
   837ec:	3300      	adds	r3, #0
   837ee:	bf18      	it	ne
   837f0:	2301      	movne	r3, #1
   837f2:	e7cf      	b.n	83794 <XMEGANVM_ReadMemory+0x10>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   837f4:	200c      	movs	r0, #12
   837f6:	4b05      	ldr	r3, [pc, #20]	; (8380c <XMEGANVM_ReadMemory+0x88>)
   837f8:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   837fa:	4638      	mov	r0, r7
   837fc:	4b05      	ldr	r3, [pc, #20]	; (83814 <XMEGANVM_ReadMemory+0x90>)
   837fe:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83800:	4b06      	ldr	r3, [pc, #24]	; (8381c <XMEGANVM_ReadMemory+0x98>)
   83802:	4798      	blx	r3
   83804:	7028      	strb	r0, [r5, #0]
   83806:	e7ef      	b.n	837e8 <XMEGANVM_ReadMemory+0x64>
   83808:	00083691 	.word	0x00083691
   8380c:	00083ec1 	.word	0x00083ec1
   83810:	0008364d 	.word	0x0008364d
   83814:	0008362d 	.word	0x0008362d
   83818:	20002864 	.word	0x20002864
   8381c:	00083eed 	.word	0x00083eed

00083820 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   83820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83824:	4680      	mov	r8, r0
   83826:	460f      	mov	r7, r1
   83828:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8382a:	4b0b      	ldr	r3, [pc, #44]	; (83858 <XMEGANVM_WriteByteMemory+0x38>)
   8382c:	4798      	blx	r3
   8382e:	4604      	mov	r4, r0
   83830:	b910      	cbnz	r0, 83838 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   83832:	4620      	mov	r0, r4
   83834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83838:	204c      	movs	r0, #76	; 0x4c
   8383a:	4d08      	ldr	r5, [pc, #32]	; (8385c <XMEGANVM_WriteByteMemory+0x3c>)
   8383c:	47a8      	blx	r5
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8383e:	200a      	movs	r0, #10
   83840:	4b07      	ldr	r3, [pc, #28]	; (83860 <XMEGANVM_WriteByteMemory+0x40>)
   83842:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   83844:	4640      	mov	r0, r8
   83846:	47a8      	blx	r5
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83848:	204c      	movs	r0, #76	; 0x4c
   8384a:	47a8      	blx	r5
	XMEGANVM_SendAddress(WriteAddress);
   8384c:	4638      	mov	r0, r7
   8384e:	4b05      	ldr	r3, [pc, #20]	; (83864 <XMEGANVM_WriteByteMemory+0x44>)
   83850:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   83852:	4630      	mov	r0, r6
   83854:	47a8      	blx	r5
	return true;
   83856:	e7ec      	b.n	83832 <XMEGANVM_WriteByteMemory+0x12>
   83858:	00083691 	.word	0x00083691
   8385c:	00083ec1 	.word	0x00083ec1
   83860:	0008364d 	.word	0x0008364d
   83864:	0008362d 	.word	0x0008362d

00083868 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   83868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8386c:	4681      	mov	r9, r0
   8386e:	4617      	mov	r7, r2
   83870:	461d      	mov	r5, r3
   83872:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	if (PageMode & XPROG_PAGEMODE_ERASE)
   83876:	f013 0f01 	tst.w	r3, #1
   8387a:	d107      	bne.n	8388c <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   8387c:	b9e6      	cbnz	r6, 838b8 <XMEGANVM_WritePageMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   8387e:	f015 0f02 	tst.w	r5, #2
   83882:	d13f      	bne.n	83904 <XMEGANVM_WritePageMemory+0x9c>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   83884:	2401      	movs	r4, #1
}
   83886:	4620      	mov	r0, r4
   83888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8388c:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8388e:	4b28      	ldr	r3, [pc, #160]	; (83930 <XMEGANVM_WritePageMemory+0xc8>)
   83890:	4798      	blx	r3
   83892:	4604      	mov	r4, r0
   83894:	2800      	cmp	r0, #0
   83896:	d0f6      	beq.n	83886 <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83898:	204c      	movs	r0, #76	; 0x4c
   8389a:	4c26      	ldr	r4, [pc, #152]	; (83934 <XMEGANVM_WritePageMemory+0xcc>)
   8389c:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8389e:	200a      	movs	r0, #10
   838a0:	f8df a094 	ldr.w	sl, [pc, #148]	; 83938 <XMEGANVM_WritePageMemory+0xd0>
   838a4:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   838a6:	4640      	mov	r0, r8
   838a8:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   838aa:	204c      	movs	r0, #76	; 0x4c
   838ac:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   838ae:	200b      	movs	r0, #11
   838b0:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   838b2:	2001      	movs	r0, #1
   838b4:	47a0      	blx	r4
   838b6:	e7e1      	b.n	8387c <XMEGANVM_WritePageMemory+0x14>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   838b8:	4b1d      	ldr	r3, [pc, #116]	; (83930 <XMEGANVM_WritePageMemory+0xc8>)
   838ba:	4798      	blx	r3
   838bc:	4604      	mov	r4, r0
   838be:	2800      	cmp	r0, #0
   838c0:	d0e1      	beq.n	83886 <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   838c2:	204c      	movs	r0, #76	; 0x4c
   838c4:	4c1b      	ldr	r4, [pc, #108]	; (83934 <XMEGANVM_WritePageMemory+0xcc>)
   838c6:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   838c8:	200a      	movs	r0, #10
   838ca:	4b1b      	ldr	r3, [pc, #108]	; (83938 <XMEGANVM_WritePageMemory+0xd0>)
   838cc:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   838ce:	4648      	mov	r0, r9
   838d0:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   838d2:	206b      	movs	r0, #107	; 0x6b
   838d4:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   838d6:	9808      	ldr	r0, [sp, #32]
   838d8:	4b18      	ldr	r3, [pc, #96]	; (8393c <XMEGANVM_WritePageMemory+0xd4>)
   838da:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   838dc:	20a0      	movs	r0, #160	; 0xa0
   838de:	47a0      	blx	r4
		XPROGTarget_SendByte(WriteSize - 1);
   838e0:	1e70      	subs	r0, r6, #1
   838e2:	b2c0      	uxtb	r0, r0
   838e4:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   838e6:	2064      	movs	r0, #100	; 0x64
   838e8:	47a0      	blx	r4
   838ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   838ec:	1e5c      	subs	r4, r3, #1
		while (WriteSize--)
   838ee:	3e01      	subs	r6, #1
   838f0:	b2b6      	uxth	r6, r6
   838f2:	441e      	add	r6, r3
		  XPROGTarget_SendByte(*(WriteBuffer++));
   838f4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 83934 <XMEGANVM_WritePageMemory+0xcc>
   838f8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   838fc:	47c0      	blx	r8
		while (WriteSize--)
   838fe:	42b4      	cmp	r4, r6
   83900:	d1fa      	bne.n	838f8 <XMEGANVM_WritePageMemory+0x90>
   83902:	e7bc      	b.n	8387e <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83904:	4b0a      	ldr	r3, [pc, #40]	; (83930 <XMEGANVM_WritePageMemory+0xc8>)
   83906:	4798      	blx	r3
   83908:	4604      	mov	r4, r0
   8390a:	2800      	cmp	r0, #0
   8390c:	d0bb      	beq.n	83886 <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8390e:	204c      	movs	r0, #76	; 0x4c
   83910:	4d08      	ldr	r5, [pc, #32]	; (83934 <XMEGANVM_WritePageMemory+0xcc>)
   83912:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83914:	200a      	movs	r0, #10
   83916:	4b08      	ldr	r3, [pc, #32]	; (83938 <XMEGANVM_WritePageMemory+0xd0>)
   83918:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   8391a:	4638      	mov	r0, r7
   8391c:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8391e:	204c      	movs	r0, #76	; 0x4c
   83920:	47a8      	blx	r5
		XMEGANVM_SendAddress(WriteAddress);
   83922:	9808      	ldr	r0, [sp, #32]
   83924:	4b05      	ldr	r3, [pc, #20]	; (8393c <XMEGANVM_WritePageMemory+0xd4>)
   83926:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83928:	2000      	movs	r0, #0
   8392a:	47a8      	blx	r5
   8392c:	e7ab      	b.n	83886 <XMEGANVM_WritePageMemory+0x1e>
   8392e:	bf00      	nop
   83930:	00083691 	.word	0x00083691
   83934:	00083ec1 	.word	0x00083ec1
   83938:	0008364d 	.word	0x0008364d
   8393c:	0008362d 	.word	0x0008362d

00083940 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   83940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83942:	4604      	mov	r4, r0
   83944:	460e      	mov	r6, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83946:	4b36      	ldr	r3, [pc, #216]	; (83a20 <XMEGANVM_EraseMemory+0xe0>)
   83948:	4798      	blx	r3
   8394a:	4603      	mov	r3, r0
   8394c:	b1a8      	cbz	r0, 8397a <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   8394e:	2c40      	cmp	r4, #64	; 0x40
   83950:	d015      	beq.n	8397e <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   83952:	2c30      	cmp	r4, #48	; 0x30
   83954:	d022      	beq.n	8399c <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83956:	204c      	movs	r0, #76	; 0x4c
   83958:	4d32      	ldr	r5, [pc, #200]	; (83a24 <XMEGANVM_EraseMemory+0xe4>)
   8395a:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8395c:	200a      	movs	r0, #10
   8395e:	4b32      	ldr	r3, [pc, #200]	; (83a28 <XMEGANVM_EraseMemory+0xe8>)
   83960:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   83962:	4620      	mov	r0, r4
   83964:	47a8      	blx	r5

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83966:	204c      	movs	r0, #76	; 0x4c
   83968:	47a8      	blx	r5
		XMEGANVM_SendAddress(Address);
   8396a:	4630      	mov	r0, r6
   8396c:	4b2f      	ldr	r3, [pc, #188]	; (83a2c <XMEGANVM_EraseMemory+0xec>)
   8396e:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83970:	2000      	movs	r0, #0
   83972:	47a8      	blx	r5
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   83974:	4b2e      	ldr	r3, [pc, #184]	; (83a30 <XMEGANVM_EraseMemory+0xf0>)
   83976:	4798      	blx	r3
   83978:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   8397a:	4618      	mov	r0, r3
   8397c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8397e:	204c      	movs	r0, #76	; 0x4c
   83980:	4c28      	ldr	r4, [pc, #160]	; (83a24 <XMEGANVM_EraseMemory+0xe4>)
   83982:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83984:	200a      	movs	r0, #10
   83986:	4d28      	ldr	r5, [pc, #160]	; (83a28 <XMEGANVM_EraseMemory+0xe8>)
   83988:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   8398a:	2040      	movs	r0, #64	; 0x40
   8398c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8398e:	204c      	movs	r0, #76	; 0x4c
   83990:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83992:	200b      	movs	r0, #11
   83994:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83996:	2001      	movs	r0, #1
   83998:	47a0      	blx	r4
   8399a:	e7eb      	b.n	83974 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8399c:	204c      	movs	r0, #76	; 0x4c
   8399e:	4c21      	ldr	r4, [pc, #132]	; (83a24 <XMEGANVM_EraseMemory+0xe4>)
   839a0:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   839a2:	200a      	movs	r0, #10
   839a4:	4d20      	ldr	r5, [pc, #128]	; (83a28 <XMEGANVM_EraseMemory+0xe8>)
   839a6:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   839a8:	2036      	movs	r0, #54	; 0x36
   839aa:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   839ac:	204c      	movs	r0, #76	; 0x4c
   839ae:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   839b0:	200b      	movs	r0, #11
   839b2:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   839b4:	2001      	movs	r0, #1
   839b6:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   839b8:	4b19      	ldr	r3, [pc, #100]	; (83a20 <XMEGANVM_EraseMemory+0xe0>)
   839ba:	4798      	blx	r3
   839bc:	4603      	mov	r3, r0
   839be:	2800      	cmp	r0, #0
   839c0:	d0db      	beq.n	8397a <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   839c2:	204c      	movs	r0, #76	; 0x4c
   839c4:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   839c6:	200a      	movs	r0, #10
   839c8:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   839ca:	2033      	movs	r0, #51	; 0x33
   839cc:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   839ce:	206b      	movs	r0, #107	; 0x6b
   839d0:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   839d2:	4630      	mov	r0, r6
   839d4:	4b15      	ldr	r3, [pc, #84]	; (83a2c <XMEGANVM_EraseMemory+0xec>)
   839d6:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   839d8:	20a0      	movs	r0, #160	; 0xa0
   839da:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   839dc:	4d15      	ldr	r5, [pc, #84]	; (83a34 <XMEGANVM_EraseMemory+0xf4>)
   839de:	7828      	ldrb	r0, [r5, #0]
   839e0:	3801      	subs	r0, #1
   839e2:	b2c0      	uxtb	r0, r0
   839e4:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   839e6:	2064      	movs	r0, #100	; 0x64
   839e8:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   839ea:	882b      	ldrh	r3, [r5, #0]
   839ec:	b14b      	cbz	r3, 83a02 <XMEGANVM_EraseMemory+0xc2>
   839ee:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   839f0:	4627      	mov	r7, r4
   839f2:	4e0c      	ldr	r6, [pc, #48]	; (83a24 <XMEGANVM_EraseMemory+0xe4>)
   839f4:	4638      	mov	r0, r7
   839f6:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   839f8:	3401      	adds	r4, #1
   839fa:	b2e4      	uxtb	r4, r4
   839fc:	882b      	ldrh	r3, [r5, #0]
   839fe:	42a3      	cmp	r3, r4
   83a00:	d8f8      	bhi.n	839f4 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83a02:	204c      	movs	r0, #76	; 0x4c
   83a04:	4c07      	ldr	r4, [pc, #28]	; (83a24 <XMEGANVM_EraseMemory+0xe4>)
   83a06:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83a08:	200a      	movs	r0, #10
   83a0a:	4d07      	ldr	r5, [pc, #28]	; (83a28 <XMEGANVM_EraseMemory+0xe8>)
   83a0c:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83a0e:	2030      	movs	r0, #48	; 0x30
   83a10:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83a12:	204c      	movs	r0, #76	; 0x4c
   83a14:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83a16:	200b      	movs	r0, #11
   83a18:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83a1a:	2001      	movs	r0, #1
   83a1c:	47a0      	blx	r4
   83a1e:	e7a9      	b.n	83974 <XMEGANVM_EraseMemory+0x34>
   83a20:	00083691 	.word	0x00083691
   83a24:	00083ec1 	.word	0x00083ec1
   83a28:	0008364d 	.word	0x0008364d
   83a2c:	0008362d 	.word	0x0008362d
   83a30:	00083665 	.word	0x00083665
   83a34:	20000b3e 	.word	0x20000b3e

00083a38 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   83a38:	b570      	push	{r4, r5, r6, lr}
   83a3a:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   83a3c:	4b8e      	ldr	r3, [pc, #568]	; (83c78 <XPROGProtocol_Command+0x240>)
   83a3e:	8858      	ldrh	r0, [r3, #2]
   83a40:	b2c3      	uxtb	r3, r0
   83a42:	4a8e      	ldr	r2, [pc, #568]	; (83c7c <XPROGProtocol_Command+0x244>)
   83a44:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   83a46:	3b01      	subs	r3, #1
   83a48:	2b21      	cmp	r3, #33	; 0x21
   83a4a:	d82b      	bhi.n	83aa4 <XPROGProtocol_Command+0x6c>
   83a4c:	e8df f013 	tbh	[pc, r3, lsl #1]
   83a50:	002f0022 	.word	0x002f0022
   83a54:	00730037 	.word	0x00730037
   83a58:	00c900a5 	.word	0x00c900a5
   83a5c:	002a00cc 	.word	0x002a00cc
   83a60:	002a002a 	.word	0x002a002a
   83a64:	002a002a 	.word	0x002a002a
   83a68:	002a002a 	.word	0x002a002a
   83a6c:	002a002a 	.word	0x002a002a
   83a70:	002a002a 	.word	0x002a002a
   83a74:	002a002a 	.word	0x002a002a
   83a78:	002a002a 	.word	0x002a002a
   83a7c:	002a002a 	.word	0x002a002a
   83a80:	002a002a 	.word	0x002a002a
   83a84:	002a002a 	.word	0x002a002a
   83a88:	002a002a 	.word	0x002a002a
   83a8c:	0160002a 	.word	0x0160002a
   83a90:	014f0141 	.word	0x014f0141
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   83a94:	4b7a      	ldr	r3, [pc, #488]	; (83c80 <XPROGProtocol_Command+0x248>)
   83a96:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   83a98:	4b7a      	ldr	r3, [pc, #488]	; (83c84 <XPROGProtocol_Command+0x24c>)
   83a9a:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   83a9c:	f080 0001 	eor.w	r0, r0, #1
   83aa0:	4b79      	ldr	r3, [pc, #484]	; (83c88 <XPROGProtocol_Command+0x250>)
   83aa2:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   83aa4:	4b79      	ldr	r3, [pc, #484]	; (83c8c <XPROGProtocol_Command+0x254>)
   83aa6:	4798      	blx	r3
	return false;
   83aa8:	2000      	movs	r0, #0
}
   83aaa:	b004      	add	sp, #16
   83aac:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   83aae:	4b74      	ldr	r3, [pc, #464]	; (83c80 <XPROGProtocol_Command+0x248>)
   83ab0:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   83ab2:	4b77      	ldr	r3, [pc, #476]	; (83c90 <XPROGProtocol_Command+0x258>)
   83ab4:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   83ab6:	2200      	movs	r2, #0
   83ab8:	4b73      	ldr	r3, [pc, #460]	; (83c88 <XPROGProtocol_Command+0x250>)
   83aba:	701a      	strb	r2, [r3, #0]
   83abc:	e7f2      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83abe:	4b70      	ldr	r3, [pc, #448]	; (83c80 <XPROGProtocol_Command+0x248>)
   83ac0:	4798      	blx	r3
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83ac2:	2200      	movs	r2, #0
   83ac4:	4b70      	ldr	r3, [pc, #448]	; (83c88 <XPROGProtocol_Command+0x250>)
   83ac6:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   83ac8:	4b6b      	ldr	r3, [pc, #428]	; (83c78 <XPROGProtocol_Command+0x240>)
   83aca:	899b      	ldrh	r3, [r3, #12]
   83acc:	2b04      	cmp	r3, #4
   83ace:	d915      	bls.n	83afc <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   83ad0:	4b69      	ldr	r3, [pc, #420]	; (83c78 <XPROGProtocol_Command+0x240>)
   83ad2:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83ad4:	791a      	ldrb	r2, [r3, #4]
   83ad6:	78d9      	ldrb	r1, [r3, #3]
   83ad8:	0409      	lsls	r1, r1, #16
   83ada:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83ade:	785a      	ldrb	r2, [r3, #1]
   83ae0:	4311      	orrs	r1, r2
   83ae2:	789a      	ldrb	r2, [r3, #2]
   83ae4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   83ae8:	781b      	ldrb	r3, [r3, #0]
   83aea:	3b01      	subs	r3, #1
   83aec:	2b07      	cmp	r3, #7
   83aee:	d817      	bhi.n	83b20 <XPROGProtocol_Command+0xe8>
   83af0:	e8df f003 	tbb	[pc, r3]
   83af4:	0c0a0818 	.word	0x0c0a0818
   83af8:	1412100e 	.word	0x1412100e
		XPROG_Status = XPROG_ERR_FAILED;
   83afc:	2201      	movs	r2, #1
   83afe:	4b62      	ldr	r3, [pc, #392]	; (83c88 <XPROGProtocol_Command+0x250>)
   83b00:	701a      	strb	r2, [r3, #0]
   83b02:	e7cf      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_ERASE_CHIP:
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
		break;
		case XPROG_ERASE_APP:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
   83b04:	2020      	movs	r0, #32
   83b06:	e00e      	b.n	83b26 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   83b08:	2068      	movs	r0, #104	; 0x68
   83b0a:	e00c      	b.n	83b26 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   83b0c:	2030      	movs	r0, #48	; 0x30
   83b0e:	e00a      	b.n	83b26 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_APP_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   83b10:	2022      	movs	r0, #34	; 0x22
   83b12:	e008      	b.n	83b26 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   83b14:	202a      	movs	r0, #42	; 0x2a
   83b16:	e006      	b.n	83b26 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   83b18:	2032      	movs	r0, #50	; 0x32
   83b1a:	e004      	b.n	83b26 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_USERSIG:
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   83b1c:	2018      	movs	r0, #24
   83b1e:	e002      	b.n	83b26 <XPROGProtocol_Command+0xee>
		break;
		default:
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   83b20:	2000      	movs	r0, #0
   83b22:	e000      	b.n	83b26 <XPROGProtocol_Command+0xee>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   83b24:	2040      	movs	r0, #64	; 0x40
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   83b26:	4b5b      	ldr	r3, [pc, #364]	; (83c94 <XPROGProtocol_Command+0x25c>)
   83b28:	4798      	blx	r3
   83b2a:	2800      	cmp	r0, #0
   83b2c:	d1ba      	bne.n	83aa4 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   83b2e:	2203      	movs	r2, #3
   83b30:	4b55      	ldr	r3, [pc, #340]	; (83c88 <XPROGProtocol_Command+0x250>)
   83b32:	701a      	strb	r2, [r3, #0]
   83b34:	e7b6      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83b36:	4b52      	ldr	r3, [pc, #328]	; (83c80 <XPROGProtocol_Command+0x248>)
   83b38:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   83b3a:	2200      	movs	r2, #0
   83b3c:	4b52      	ldr	r3, [pc, #328]	; (83c88 <XPROGProtocol_Command+0x250>)
   83b3e:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   83b40:	4b4d      	ldr	r3, [pc, #308]	; (83c78 <XPROGProtocol_Command+0x240>)
   83b42:	88db      	ldrh	r3, [r3, #6]
   83b44:	2b07      	cmp	r3, #7
   83b46:	d802      	bhi.n	83b4e <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   83b48:	2201      	movs	r2, #1
   83b4a:	4b4f      	ldr	r3, [pc, #316]	; (83c88 <XPROGProtocol_Command+0x250>)
   83b4c:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   83b4e:	4b4a      	ldr	r3, [pc, #296]	; (83c78 <XPROGProtocol_Command+0x240>)
   83b50:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   83b52:	795a      	ldrb	r2, [r3, #5]
   83b54:	7919      	ldrb	r1, [r3, #4]
   83b56:	0409      	lsls	r1, r1, #16
   83b58:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83b5c:	789a      	ldrb	r2, [r3, #2]
   83b5e:	4311      	orrs	r1, r2
   83b60:	78da      	ldrb	r2, [r3, #3]
   83b62:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   83b66:	781a      	ldrb	r2, [r3, #0]
   83b68:	3a01      	subs	r2, #1
   83b6a:	2a05      	cmp	r2, #5
   83b6c:	d811      	bhi.n	83b92 <XPROGProtocol_Command+0x15a>
   83b6e:	e8df f012 	tbh	[pc, r2, lsl #1]
   83b72:	00e1      	.short	0x00e1
   83b74:	00e50008 	.word	0x00e50008
   83b78:	000600fd 	.word	0x000600fd
   83b7c:	000c      	.short	0x000c
		case XPROG_MEM_TYPE_FUSE:
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
		PagedMemory      = false;
		break;
		case XPROG_MEM_TYPE_LOCKBITS:
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
   83b7e:	2008      	movs	r0, #8
   83b80:	e0f5      	b.n	83d6e <XPROGProtocol_Command+0x336>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83b82:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83b84:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
   83b86:	222c      	movs	r2, #44	; 0x2c
   83b88:	e0db      	b.n	83d42 <XPROGProtocol_Command+0x30a>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83b8a:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83b8c:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   83b8e:	221a      	movs	r2, #26
   83b90:	e0d7      	b.n	83d42 <XPROGProtocol_Command+0x30a>
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
   83b92:	222e      	movs	r2, #46	; 0x2e
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83b94:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83b96:	2023      	movs	r0, #35	; 0x23
   83b98:	e0d3      	b.n	83d42 <XPROGProtocol_Command+0x30a>
			start_timeoutcnt();
   83b9a:	4b39      	ldr	r3, [pc, #228]	; (83c80 <XPROGProtocol_Command+0x248>)
   83b9c:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   83b9e:	2200      	movs	r2, #0
   83ba0:	4b39      	ldr	r3, [pc, #228]	; (83c88 <XPROGProtocol_Command+0x250>)
   83ba2:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83ba4:	4b34      	ldr	r3, [pc, #208]	; (83c78 <XPROGProtocol_Command+0x240>)
   83ba6:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   83ba8:	798b      	ldrb	r3, [r1, #6]
   83baa:	794a      	ldrb	r2, [r1, #5]
   83bac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83bb0:	7908      	ldrb	r0, [r1, #4]
   83bb2:	78cb      	ldrb	r3, [r1, #3]
   83bb4:	041b      	lsls	r3, r3, #16
   83bb6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   83bba:	7848      	ldrb	r0, [r1, #1]
   83bbc:	4303      	orrs	r3, r0
   83bbe:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   83bc0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   83bc4:	bf28      	it	cs
   83bc6:	f44f 7280 	movcs.w	r2, #256	; 0x100
   83bca:	4933      	ldr	r1, [pc, #204]	; (83c98 <XPROGProtocol_Command+0x260>)
   83bcc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   83bd0:	4b32      	ldr	r3, [pc, #200]	; (83c9c <XPROGProtocol_Command+0x264>)
   83bd2:	4798      	blx	r3
   83bd4:	2800      	cmp	r0, #0
   83bd6:	f47f af65 	bne.w	83aa4 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   83bda:	2203      	movs	r2, #3
   83bdc:	4b2a      	ldr	r3, [pc, #168]	; (83c88 <XPROGProtocol_Command+0x250>)
   83bde:	701a      	strb	r2, [r3, #0]
   83be0:	e760      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83be2:	4b27      	ldr	r3, [pc, #156]	; (83c80 <XPROGProtocol_Command+0x248>)
   83be4:	4798      	blx	r3
			break;
   83be6:	e75d      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83be8:	4b25      	ldr	r3, [pc, #148]	; (83c80 <XPROGProtocol_Command+0x248>)
   83bea:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83bec:	2200      	movs	r2, #0
   83bee:	4b26      	ldr	r3, [pc, #152]	; (83c88 <XPROGProtocol_Command+0x250>)
   83bf0:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   83bf2:	4b21      	ldr	r3, [pc, #132]	; (83c78 <XPROGProtocol_Command+0x240>)
   83bf4:	8999      	ldrh	r1, [r3, #12]
   83bf6:	2901      	cmp	r1, #1
   83bf8:	d90b      	bls.n	83c12 <XPROGProtocol_Command+0x1da>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   83bfa:	4b1f      	ldr	r3, [pc, #124]	; (83c78 <XPROGProtocol_Command+0x240>)
   83bfc:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   83bfe:	7813      	ldrb	r3, [r2, #0]
   83c00:	3b01      	subs	r3, #1
   83c02:	2b07      	cmp	r3, #7
   83c04:	d861      	bhi.n	83cca <XPROGProtocol_Command+0x292>
   83c06:	e8df f003 	tbb	[pc, r3]
   83c0a:	1b08      	.short	0x1b08
   83c0c:	60602c28 	.word	0x60602c28
   83c10:	3060      	.short	0x3060
		XPROG_Status = XPROG_ERR_FAILED;
   83c12:	2201      	movs	r2, #1
   83c14:	4b1c      	ldr	r3, [pc, #112]	; (83c88 <XPROGProtocol_Command+0x250>)
   83c16:	701a      	strb	r2, [r3, #0]
   83c18:	e744      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   83c1a:	2904      	cmp	r1, #4
   83c1c:	d803      	bhi.n	83c26 <XPROGProtocol_Command+0x1ee>
				XPROG_Status = XPROG_ERR_FAILED;
   83c1e:	2201      	movs	r2, #1
   83c20:	4b19      	ldr	r3, [pc, #100]	; (83c88 <XPROGProtocol_Command+0x250>)
   83c22:	701a      	strb	r2, [r3, #0]
   83c24:	e73e      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83c26:	7911      	ldrb	r1, [r2, #4]
   83c28:	78d3      	ldrb	r3, [r2, #3]
   83c2a:	041b      	lsls	r3, r3, #16
   83c2c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   83c30:	7851      	ldrb	r1, [r2, #1]
   83c32:	430b      	orrs	r3, r1
   83c34:	7892      	ldrb	r2, [r2, #2]
   83c36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   83c3a:	4a19      	ldr	r2, [pc, #100]	; (83ca0 <XPROGProtocol_Command+0x268>)
   83c3c:	6013      	str	r3, [r2, #0]
   83c3e:	e731      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   83c40:	2902      	cmp	r1, #2
   83c42:	d803      	bhi.n	83c4c <XPROGProtocol_Command+0x214>
				XPROG_Status = XPROG_ERR_FAILED;
   83c44:	2201      	movs	r2, #1
   83c46:	4b10      	ldr	r3, [pc, #64]	; (83c88 <XPROGProtocol_Command+0x250>)
   83c48:	701a      	strb	r2, [r3, #0]
   83c4a:	e72b      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   83c4c:	7891      	ldrb	r1, [r2, #2]
   83c4e:	7853      	ldrb	r3, [r2, #1]
   83c50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   83c54:	4a13      	ldr	r2, [pc, #76]	; (83ca4 <XPROGProtocol_Command+0x26c>)
   83c56:	8013      	strh	r3, [r2, #0]
   83c58:	e724      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   83c5a:	7852      	ldrb	r2, [r2, #1]
   83c5c:	4b12      	ldr	r3, [pc, #72]	; (83ca8 <XPROGProtocol_Command+0x270>)
   83c5e:	701a      	strb	r2, [r3, #0]
   83c60:	e720      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   83c62:	7852      	ldrb	r2, [r2, #1]
   83c64:	4b11      	ldr	r3, [pc, #68]	; (83cac <XPROGProtocol_Command+0x274>)
   83c66:	701a      	strb	r2, [r3, #0]
   83c68:	e71c      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   83c6a:	2904      	cmp	r1, #4
   83c6c:	d820      	bhi.n	83cb0 <XPROGProtocol_Command+0x278>
				XPROG_Status = XPROG_ERR_FAILED;
   83c6e:	2201      	movs	r2, #1
   83c70:	4b05      	ldr	r3, [pc, #20]	; (83c88 <XPROGProtocol_Command+0x250>)
   83c72:	701a      	strb	r2, [r3, #0]
   83c74:	e716      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
   83c76:	bf00      	nop
   83c78:	2000287c 	.word	0x2000287c
   83c7c:	2000215c 	.word	0x2000215c
   83c80:	00084091 	.word	0x00084091
   83c84:	000836cd 	.word	0x000836cd
   83c88:	20002860 	.word	0x20002860
   83c8c:	000840d9 	.word	0x000840d9
   83c90:	00083749 	.word	0x00083749
   83c94:	00083941 	.word	0x00083941
   83c98:	20002160 	.word	0x20002160
   83c9c:	00083785 	.word	0x00083785
   83ca0:	20000b40 	.word	0x20000b40
   83ca4:	20000b3e 	.word	0x20000b3e
   83ca8:	20000b44 	.word	0x20000b44
   83cac:	20000b45 	.word	0x20000b45
				return;
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   83cb0:	7911      	ldrb	r1, [r2, #4]
   83cb2:	78d3      	ldrb	r3, [r2, #3]
   83cb4:	041b      	lsls	r3, r3, #16
   83cb6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   83cba:	7851      	ldrb	r1, [r2, #1]
   83cbc:	430b      	orrs	r3, r1
   83cbe:	7890      	ldrb	r0, [r2, #2]
   83cc0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   83cc4:	4b2f      	ldr	r3, [pc, #188]	; (83d84 <XPROGProtocol_Command+0x34c>)
   83cc6:	4798      	blx	r3
   83cc8:	e6ec      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   83cca:	2201      	movs	r2, #1
   83ccc:	4b2e      	ldr	r3, [pc, #184]	; (83d88 <XPROGProtocol_Command+0x350>)
   83cce:	701a      	strb	r2, [r3, #0]
   83cd0:	e6e8      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   83cd2:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   83cd4:	4b2d      	ldr	r3, [pc, #180]	; (83d8c <XPROGProtocol_Command+0x354>)
   83cd6:	88db      	ldrh	r3, [r3, #6]
   83cd8:	18c2      	adds	r2, r0, r3
   83cda:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   83cde:	dc27      	bgt.n	83d30 <XPROGProtocol_Command+0x2f8>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   83ce0:	492a      	ldr	r1, [pc, #168]	; (83d8c <XPROGProtocol_Command+0x354>)
   83ce2:	4a2b      	ldr	r2, [pc, #172]	; (83d90 <XPROGProtocol_Command+0x358>)
   83ce4:	4410      	add	r0, r2
   83ce6:	6088      	str	r0, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83ce8:	818b      	strh	r3, [r1, #12]
			return true;
   83cea:	2001      	movs	r0, #1
   83cec:	e6dd      	b.n	83aaa <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   83cee:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   83cf0:	4b26      	ldr	r3, [pc, #152]	; (83d8c <XPROGProtocol_Command+0x354>)
   83cf2:	88da      	ldrh	r2, [r3, #6]
   83cf4:	1883      	adds	r3, r0, r2
   83cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   83cfa:	dd01      	ble.n	83d00 <XPROGProtocol_Command+0x2c8>
				return false;
   83cfc:	2000      	movs	r0, #0
   83cfe:	e6d4      	b.n	83aaa <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   83d00:	4b22      	ldr	r3, [pc, #136]	; (83d8c <XPROGProtocol_Command+0x354>)
   83d02:	6899      	ldr	r1, [r3, #8]
   83d04:	4b22      	ldr	r3, [pc, #136]	; (83d90 <XPROGProtocol_Command+0x358>)
   83d06:	4418      	add	r0, r3
   83d08:	4b22      	ldr	r3, [pc, #136]	; (83d94 <XPROGProtocol_Command+0x35c>)
   83d0a:	4798      	blx	r3
			return true;
   83d0c:	2001      	movs	r0, #1
   83d0e:	e6cc      	b.n	83aaa <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   83d10:	4a21      	ldr	r2, [pc, #132]	; (83d98 <XPROGProtocol_Command+0x360>)
   83d12:	4b1d      	ldr	r3, [pc, #116]	; (83d88 <XPROGProtocol_Command+0x350>)
   83d14:	781b      	ldrb	r3, [r3, #0]
   83d16:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   83d18:	4b20      	ldr	r3, [pc, #128]	; (83d9c <XPROGProtocol_Command+0x364>)
   83d1a:	681b      	ldr	r3, [r3, #0]
   83d1c:	fab3 f383 	clz	r3, r3
   83d20:	095b      	lsrs	r3, r3, #5
   83d22:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   83d24:	4b19      	ldr	r3, [pc, #100]	; (83d8c <XPROGProtocol_Command+0x354>)
   83d26:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   83d28:	2203      	movs	r2, #3
   83d2a:	819a      	strh	r2, [r3, #12]
			return true;
   83d2c:	2001      	movs	r0, #1
   83d2e:	e6bc      	b.n	83aaa <XPROGProtocol_Command+0x72>
				return false;
   83d30:	2000      	movs	r0, #0
   83d32:	e6ba      	b.n	83aaa <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83d34:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83d36:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   83d38:	2224      	movs	r2, #36	; 0x24
   83d3a:	e002      	b.n	83d42 <XPROGProtocol_Command+0x30a>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   83d3c:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   83d3e:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   83d40:	2235      	movs	r2, #53	; 0x35
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   83d42:	79de      	ldrb	r6, [r3, #7]
   83d44:	799c      	ldrb	r4, [r3, #6]
   83d46:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   83d4a:	785b      	ldrb	r3, [r3, #1]
   83d4c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   83d50:	bf28      	it	cs
   83d52:	f44f 7480 	movcs.w	r4, #256	; 0x100
   83d56:	9402      	str	r4, [sp, #8]
   83d58:	4c0d      	ldr	r4, [pc, #52]	; (83d90 <XPROGProtocol_Command+0x358>)
   83d5a:	9401      	str	r4, [sp, #4]
   83d5c:	9100      	str	r1, [sp, #0]
   83d5e:	4629      	mov	r1, r5
   83d60:	4c0f      	ldr	r4, [pc, #60]	; (83da0 <XPROGProtocol_Command+0x368>)
   83d62:	47a0      	blx	r4
   83d64:	2800      	cmp	r0, #0
   83d66:	f47f ae9d 	bne.w	83aa4 <XPROGProtocol_Command+0x6c>
   83d6a:	e007      	b.n	83d7c <XPROGProtocol_Command+0x344>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   83d6c:	204c      	movs	r0, #76	; 0x4c
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   83d6e:	4b08      	ldr	r3, [pc, #32]	; (83d90 <XPROGProtocol_Command+0x358>)
   83d70:	781a      	ldrb	r2, [r3, #0]
   83d72:	4b0c      	ldr	r3, [pc, #48]	; (83da4 <XPROGProtocol_Command+0x36c>)
   83d74:	4798      	blx	r3
   83d76:	2800      	cmp	r0, #0
   83d78:	f47f ae94 	bne.w	83aa4 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;
   83d7c:	2203      	movs	r2, #3
   83d7e:	4b02      	ldr	r3, [pc, #8]	; (83d88 <XPROGProtocol_Command+0x350>)
   83d80:	701a      	strb	r2, [r3, #0]
   83d82:	e68f      	b.n	83aa4 <XPROGProtocol_Command+0x6c>
   83d84:	00084021 	.word	0x00084021
   83d88:	20002860 	.word	0x20002860
   83d8c:	2000287c 	.word	0x2000287c
   83d90:	20002160 	.word	0x20002160
   83d94:	00086ae1 	.word	0x00086ae1
   83d98:	2000215c 	.word	0x2000215c
   83d9c:	20002864 	.word	0x20002864
   83da0:	00083869 	.word	0x00083869
   83da4:	00083821 	.word	0x00083821

00083da8 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   83da8:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   83daa:	4d0b      	ldr	r5, [pc, #44]	; (83dd8 <XPROGTarget_SetRxMode+0x30>)
   83dac:	4c0b      	ldr	r4, [pc, #44]	; (83ddc <XPROGTarget_SetRxMode+0x34>)
   83dae:	4628      	mov	r0, r5
   83db0:	47a0      	blx	r4
   83db2:	2800      	cmp	r0, #0
   83db4:	d0fb      	beq.n	83dae <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   83db6:	4c08      	ldr	r4, [pc, #32]	; (83dd8 <XPROGTarget_SetRxMode+0x30>)
   83db8:	4620      	mov	r0, r4
   83dba:	4b09      	ldr	r3, [pc, #36]	; (83de0 <XPROGTarget_SetRxMode+0x38>)
   83dbc:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   83dbe:	4620      	mov	r0, r4
   83dc0:	4b08      	ldr	r3, [pc, #32]	; (83de4 <XPROGTarget_SetRxMode+0x3c>)
   83dc2:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   83dc4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83dc8:	2014      	movs	r0, #20
   83dca:	4b07      	ldr	r3, [pc, #28]	; (83de8 <XPROGTarget_SetRxMode+0x40>)
   83dcc:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   83dce:	2200      	movs	r2, #0
   83dd0:	4b06      	ldr	r3, [pc, #24]	; (83dec <XPROGTarget_SetRxMode+0x44>)
   83dd2:	701a      	strb	r2, [r3, #0]
   83dd4:	bd38      	pop	{r3, r4, r5, pc}
   83dd6:	bf00      	nop
   83dd8:	40094000 	.word	0x40094000
   83ddc:	00086191 	.word	0x00086191
   83de0:	0008616f 	.word	0x0008616f
   83de4:	00086175 	.word	0x00086175
   83de8:	00084725 	.word	0x00084725
   83dec:	20002260 	.word	0x20002260

00083df0 <XPROGTarget_SetTxMode>:
{
   83df0:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83df2:	2518      	movs	r5, #24
   83df4:	4c14      	ldr	r4, [pc, #80]	; (83e48 <XPROGTarget_SetTxMode+0x58>)
   83df6:	4e15      	ldr	r6, [pc, #84]	; (83e4c <XPROGTarget_SetTxMode+0x5c>)
   83df8:	4628      	mov	r0, r5
   83dfa:	47a0      	blx	r4
   83dfc:	b110      	cbz	r0, 83e04 <XPROGTarget_SetTxMode+0x14>
   83dfe:	6833      	ldr	r3, [r6, #0]
   83e00:	2b00      	cmp	r3, #0
   83e02:	d1f9      	bne.n	83df8 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83e04:	2518      	movs	r5, #24
   83e06:	4c10      	ldr	r4, [pc, #64]	; (83e48 <XPROGTarget_SetTxMode+0x58>)
   83e08:	4e10      	ldr	r6, [pc, #64]	; (83e4c <XPROGTarget_SetTxMode+0x5c>)
   83e0a:	4628      	mov	r0, r5
   83e0c:	47a0      	blx	r4
   83e0e:	b910      	cbnz	r0, 83e16 <XPROGTarget_SetTxMode+0x26>
   83e10:	6833      	ldr	r3, [r6, #0]
   83e12:	2b00      	cmp	r3, #0
   83e14:	d1f9      	bne.n	83e0a <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83e16:	2518      	movs	r5, #24
   83e18:	4c0b      	ldr	r4, [pc, #44]	; (83e48 <XPROGTarget_SetTxMode+0x58>)
   83e1a:	4e0c      	ldr	r6, [pc, #48]	; (83e4c <XPROGTarget_SetTxMode+0x5c>)
   83e1c:	4628      	mov	r0, r5
   83e1e:	47a0      	blx	r4
   83e20:	b110      	cbz	r0, 83e28 <XPROGTarget_SetTxMode+0x38>
   83e22:	6833      	ldr	r3, [r6, #0]
   83e24:	2b00      	cmp	r3, #0
   83e26:	d1f9      	bne.n	83e1c <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   83e28:	4c09      	ldr	r4, [pc, #36]	; (83e50 <XPROGTarget_SetTxMode+0x60>)
   83e2a:	4620      	mov	r0, r4
   83e2c:	4b09      	ldr	r3, [pc, #36]	; (83e54 <XPROGTarget_SetTxMode+0x64>)
   83e2e:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   83e30:	4620      	mov	r0, r4
   83e32:	4b09      	ldr	r3, [pc, #36]	; (83e58 <XPROGTarget_SetTxMode+0x68>)
   83e34:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   83e36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83e3a:	2014      	movs	r0, #20
   83e3c:	4b07      	ldr	r3, [pc, #28]	; (83e5c <XPROGTarget_SetTxMode+0x6c>)
   83e3e:	4798      	blx	r3
	IsSending = true;
   83e40:	2201      	movs	r2, #1
   83e42:	4b07      	ldr	r3, [pc, #28]	; (83e60 <XPROGTarget_SetTxMode+0x70>)
   83e44:	701a      	strb	r2, [r3, #0]
   83e46:	bd70      	pop	{r4, r5, r6, pc}
   83e48:	000846b3 	.word	0x000846b3
   83e4c:	20002864 	.word	0x20002864
   83e50:	40094000 	.word	0x40094000
   83e54:	0008617b 	.word	0x0008617b
   83e58:	00086169 	.word	0x00086169
   83e5c:	00084725 	.word	0x00084725
   83e60:	20002260 	.word	0x20002260

00083e64 <XPROGTarget_DisableTargetPDI>:
{
   83e64:	b510      	push	{r4, lr}
	if (IsSending)
   83e66:	4b0f      	ldr	r3, [pc, #60]	; (83ea4 <XPROGTarget_DisableTargetPDI+0x40>)
   83e68:	781b      	ldrb	r3, [r3, #0]
   83e6a:	b9bb      	cbnz	r3, 83e9c <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   83e6c:	4c0e      	ldr	r4, [pc, #56]	; (83ea8 <XPROGTarget_DisableTargetPDI+0x44>)
   83e6e:	4620      	mov	r0, r4
   83e70:	4b0e      	ldr	r3, [pc, #56]	; (83eac <XPROGTarget_DisableTargetPDI+0x48>)
   83e72:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   83e74:	4620      	mov	r0, r4
   83e76:	4b0e      	ldr	r3, [pc, #56]	; (83eb0 <XPROGTarget_DisableTargetPDI+0x4c>)
   83e78:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   83e7a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83e7e:	2018      	movs	r0, #24
   83e80:	4c0c      	ldr	r4, [pc, #48]	; (83eb4 <XPROGTarget_DisableTargetPDI+0x50>)
   83e82:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   83e84:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83e88:	2015      	movs	r0, #21
   83e8a:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   83e8c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83e90:	2014      	movs	r0, #20
   83e92:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   83e94:	200e      	movs	r0, #14
   83e96:	4b08      	ldr	r3, [pc, #32]	; (83eb8 <XPROGTarget_DisableTargetPDI+0x54>)
   83e98:	4798      	blx	r3
   83e9a:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   83e9c:	4b07      	ldr	r3, [pc, #28]	; (83ebc <XPROGTarget_DisableTargetPDI+0x58>)
   83e9e:	4798      	blx	r3
   83ea0:	e7e4      	b.n	83e6c <XPROGTarget_DisableTargetPDI+0x8>
   83ea2:	bf00      	nop
   83ea4:	20002260 	.word	0x20002260
   83ea8:	40094000 	.word	0x40094000
   83eac:	0008617b 	.word	0x0008617b
   83eb0:	0008616f 	.word	0x0008616f
   83eb4:	00084725 	.word	0x00084725
   83eb8:	00084a9d 	.word	0x00084a9d
   83ebc:	00083da9 	.word	0x00083da9

00083ec0 <XPROGTarget_SendByte>:
{
   83ec0:	b510      	push	{r4, lr}
   83ec2:	4604      	mov	r4, r0
	if (!(IsSending))
   83ec4:	4b05      	ldr	r3, [pc, #20]	; (83edc <XPROGTarget_SendByte+0x1c>)
   83ec6:	781b      	ldrb	r3, [r3, #0]
   83ec8:	b123      	cbz	r3, 83ed4 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   83eca:	4621      	mov	r1, r4
   83ecc:	4804      	ldr	r0, [pc, #16]	; (83ee0 <XPROGTarget_SendByte+0x20>)
   83ece:	4b05      	ldr	r3, [pc, #20]	; (83ee4 <XPROGTarget_SendByte+0x24>)
   83ed0:	4798      	blx	r3
   83ed2:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   83ed4:	4b04      	ldr	r3, [pc, #16]	; (83ee8 <XPROGTarget_SendByte+0x28>)
   83ed6:	4798      	blx	r3
   83ed8:	e7f7      	b.n	83eca <XPROGTarget_SendByte+0xa>
   83eda:	bf00      	nop
   83edc:	20002260 	.word	0x20002260
   83ee0:	40094000 	.word	0x40094000
   83ee4:	000861ad 	.word	0x000861ad
   83ee8:	00083df1 	.word	0x00083df1

00083eec <XPROGTarget_ReceiveByte>:
{
   83eec:	b570      	push	{r4, r5, r6, lr}
   83eee:	b082      	sub	sp, #8
	if (IsSending)
   83ef0:	4b0a      	ldr	r3, [pc, #40]	; (83f1c <XPROGTarget_ReceiveByte+0x30>)
   83ef2:	781b      	ldrb	r3, [r3, #0]
   83ef4:	b973      	cbnz	r3, 83f14 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   83ef6:	4d0a      	ldr	r5, [pc, #40]	; (83f20 <XPROGTarget_ReceiveByte+0x34>)
   83ef8:	4c0a      	ldr	r4, [pc, #40]	; (83f24 <XPROGTarget_ReceiveByte+0x38>)
   83efa:	4e0b      	ldr	r6, [pc, #44]	; (83f28 <XPROGTarget_ReceiveByte+0x3c>)
   83efc:	a901      	add	r1, sp, #4
   83efe:	4628      	mov	r0, r5
   83f00:	47a0      	blx	r4
   83f02:	2801      	cmp	r0, #1
   83f04:	d102      	bne.n	83f0c <XPROGTarget_ReceiveByte+0x20>
   83f06:	6833      	ldr	r3, [r6, #0]
   83f08:	2b00      	cmp	r3, #0
   83f0a:	d1f7      	bne.n	83efc <XPROGTarget_ReceiveByte+0x10>
}
   83f0c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   83f10:	b002      	add	sp, #8
   83f12:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   83f14:	4b05      	ldr	r3, [pc, #20]	; (83f2c <XPROGTarget_ReceiveByte+0x40>)
   83f16:	4798      	blx	r3
   83f18:	e7ed      	b.n	83ef6 <XPROGTarget_ReceiveByte+0xa>
   83f1a:	bf00      	nop
   83f1c:	20002260 	.word	0x20002260
   83f20:	40094000 	.word	0x40094000
   83f24:	000861bf 	.word	0x000861bf
   83f28:	20002864 	.word	0x20002864
   83f2c:	00083da9 	.word	0x00083da9

00083f30 <XPROGTarget_SendIdle>:
{
   83f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   83f32:	4b12      	ldr	r3, [pc, #72]	; (83f7c <XPROGTarget_SendIdle+0x4c>)
   83f34:	781b      	ldrb	r3, [r3, #0]
   83f36:	b123      	cbz	r3, 83f42 <XPROGTarget_SendIdle+0x12>
{
   83f38:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83f3a:	2518      	movs	r5, #24
   83f3c:	4c10      	ldr	r4, [pc, #64]	; (83f80 <XPROGTarget_SendIdle+0x50>)
   83f3e:	4e11      	ldr	r6, [pc, #68]	; (83f84 <XPROGTarget_SendIdle+0x54>)
   83f40:	e006      	b.n	83f50 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   83f42:	4b11      	ldr	r3, [pc, #68]	; (83f88 <XPROGTarget_SendIdle+0x58>)
   83f44:	4798      	blx	r3
   83f46:	e7f7      	b.n	83f38 <XPROGTarget_SendIdle+0x8>
   83f48:	1e7b      	subs	r3, r7, #1
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   83f4a:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
   83f4e:	d013      	beq.n	83f78 <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83f50:	4628      	mov	r0, r5
   83f52:	47a0      	blx	r4
   83f54:	b110      	cbz	r0, 83f5c <XPROGTarget_SendIdle+0x2c>
   83f56:	6833      	ldr	r3, [r6, #0]
   83f58:	2b00      	cmp	r3, #0
   83f5a:	d1f9      	bne.n	83f50 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83f5c:	4628      	mov	r0, r5
   83f5e:	47a0      	blx	r4
   83f60:	b910      	cbnz	r0, 83f68 <XPROGTarget_SendIdle+0x38>
   83f62:	6833      	ldr	r3, [r6, #0]
   83f64:	2b00      	cmp	r3, #0
   83f66:	d1f9      	bne.n	83f5c <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83f68:	4628      	mov	r0, r5
   83f6a:	47a0      	blx	r4
   83f6c:	2800      	cmp	r0, #0
   83f6e:	d0eb      	beq.n	83f48 <XPROGTarget_SendIdle+0x18>
   83f70:	6833      	ldr	r3, [r6, #0]
   83f72:	2b00      	cmp	r3, #0
   83f74:	d1f8      	bne.n	83f68 <XPROGTarget_SendIdle+0x38>
   83f76:	e7e7      	b.n	83f48 <XPROGTarget_SendIdle+0x18>
}
   83f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f7a:	bf00      	nop
   83f7c:	20002260 	.word	0x20002260
   83f80:	000846b3 	.word	0x000846b3
   83f84:	20002864 	.word	0x20002864
   83f88:	00083df1 	.word	0x00083df1

00083f8c <XPROGTarget_EnableTargetPDI>:
{
   83f8c:	b570      	push	{r4, r5, r6, lr}
   83f8e:	b086      	sub	sp, #24
	IsSending = false;
   83f90:	2500      	movs	r5, #0
   83f92:	4b19      	ldr	r3, [pc, #100]	; (83ff8 <XPROGTarget_EnableTargetPDI+0x6c>)
   83f94:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   83f96:	200e      	movs	r0, #14
   83f98:	4b18      	ldr	r3, [pc, #96]	; (83ffc <XPROGTarget_EnableTargetPDI+0x70>)
   83f9a:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   83f9c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83fa0:	2014      	movs	r0, #20
   83fa2:	4c17      	ldr	r4, [pc, #92]	; (84000 <XPROGTarget_EnableTargetPDI+0x74>)
   83fa4:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   83fa6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83faa:	2015      	movs	r0, #21
   83fac:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   83fae:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83fb2:	2018      	movs	r0, #24
   83fb4:	47a0      	blx	r4
	delay_us(50);
   83fb6:	f240 1057 	movw	r0, #343	; 0x157
   83fba:	4e12      	ldr	r6, [pc, #72]	; (84004 <XPROGTarget_EnableTargetPDI+0x78>)
   83fbc:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   83fbe:	2014      	movs	r0, #20
   83fc0:	4b11      	ldr	r3, [pc, #68]	; (84008 <XPROGTarget_EnableTargetPDI+0x7c>)
   83fc2:	4798      	blx	r3
	delay_us(10);
   83fc4:	2045      	movs	r0, #69	; 0x45
   83fc6:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   83fc8:	9502      	str	r5, [sp, #8]
   83fca:	9504      	str	r5, [sp, #16]
   83fcc:	9505      	str	r5, [sp, #20]
   83fce:	4b0f      	ldr	r3, [pc, #60]	; (8400c <XPROGTarget_EnableTargetPDI+0x80>)
   83fd0:	9300      	str	r3, [sp, #0]
   83fd2:	23c0      	movs	r3, #192	; 0xc0
   83fd4:	9301      	str	r3, [sp, #4]
   83fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   83fda:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   83fdc:	4a0c      	ldr	r2, [pc, #48]	; (84010 <XPROGTarget_EnableTargetPDI+0x84>)
   83fde:	4669      	mov	r1, sp
   83fe0:	480c      	ldr	r0, [pc, #48]	; (84014 <XPROGTarget_EnableTargetPDI+0x88>)
   83fe2:	4b0d      	ldr	r3, [pc, #52]	; (84018 <XPROGTarget_EnableTargetPDI+0x8c>)
   83fe4:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   83fe6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83fea:	2018      	movs	r0, #24
   83fec:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   83fee:	4c0b      	ldr	r4, [pc, #44]	; (8401c <XPROGTarget_EnableTargetPDI+0x90>)
   83ff0:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   83ff2:	47a0      	blx	r4
}
   83ff4:	b006      	add	sp, #24
   83ff6:	bd70      	pop	{r4, r5, r6, pc}
   83ff8:	20002260 	.word	0x20002260
   83ffc:	00084a69 	.word	0x00084a69
   84000:	00084725 	.word	0x00084725
   84004:	20000089 	.word	0x20000089
   84008:	000846cf 	.word	0x000846cf
   8400c:	0007a120 	.word	0x0007a120
   84010:	0b71b000 	.word	0x0b71b000
   84014:	40094000 	.word	0x40094000
   84018:	00086101 	.word	0x00086101
   8401c:	00083f31 	.word	0x00083f31

00084020 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   84020:	4b01      	ldr	r3, [pc, #4]	; (84028 <set_timeout+0x8>)
   84022:	6018      	str	r0, [r3, #0]
   84024:	4770      	bx	lr
   84026:	bf00      	nop
   84028:	20000b48 	.word	0x20000b48

0008402c <setup_timeoutcnt>:
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}

void setup_timeoutcnt(void)
{
   8402c:	b538      	push	{r3, r4, r5, lr}
   8402e:	2016      	movs	r0, #22
   84030:	4b10      	ldr	r3, [pc, #64]	; (84074 <setup_timeoutcnt+0x48>)
   84032:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   84034:	4b10      	ldr	r3, [pc, #64]	; (84078 <setup_timeoutcnt+0x4c>)
   84036:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   8403a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8403e:	2510      	movs	r5, #16
   84040:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84044:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   84046:	4c0d      	ldr	r4, [pc, #52]	; (8407c <setup_timeoutcnt+0x50>)
   84048:	f24c 0201 	movw	r2, #49153	; 0xc001
   8404c:	2100      	movs	r1, #0
   8404e:	4620      	mov	r0, r4
   84050:	4b0b      	ldr	r3, [pc, #44]	; (84080 <setup_timeoutcnt+0x54>)
   84052:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   84054:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   84058:	2100      	movs	r1, #0
   8405a:	4620      	mov	r0, r4
   8405c:	4b09      	ldr	r3, [pc, #36]	; (84084 <setup_timeoutcnt+0x58>)
   8405e:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   84060:	462a      	mov	r2, r5
   84062:	2100      	movs	r1, #0
   84064:	4620      	mov	r0, r4
   84066:	4b08      	ldr	r3, [pc, #32]	; (84088 <setup_timeoutcnt+0x5c>)
   84068:	4798      	blx	r3
	
	timerEnabled = true;
   8406a:	2201      	movs	r2, #1
   8406c:	4b07      	ldr	r3, [pc, #28]	; (8408c <setup_timeoutcnt+0x60>)
   8406e:	701a      	strb	r2, [r3, #0]
   84070:	bd38      	pop	{r3, r4, r5, pc}
   84072:	bf00      	nop
   84074:	00084a69 	.word	0x00084a69
   84078:	e000e100 	.word	0xe000e100
   8407c:	40080000 	.word	0x40080000
   84080:	00084161 	.word	0x00084161
   84084:	00084189 	.word	0x00084189
   84088:	00084191 	.word	0x00084191
   8408c:	20002261 	.word	0x20002261

00084090 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   84090:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   84092:	4b0a      	ldr	r3, [pc, #40]	; (840bc <start_timeoutcnt+0x2c>)
   84094:	781b      	ldrb	r3, [r3, #0]
   84096:	b16b      	cbz	r3, 840b4 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   84098:	4c09      	ldr	r4, [pc, #36]	; (840c0 <start_timeoutcnt+0x30>)
   8409a:	2100      	movs	r1, #0
   8409c:	4620      	mov	r0, r4
   8409e:	4b09      	ldr	r3, [pc, #36]	; (840c4 <start_timeoutcnt+0x34>)
   840a0:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   840a2:	4b09      	ldr	r3, [pc, #36]	; (840c8 <start_timeoutcnt+0x38>)
   840a4:	681a      	ldr	r2, [r3, #0]
   840a6:	4b09      	ldr	r3, [pc, #36]	; (840cc <start_timeoutcnt+0x3c>)
   840a8:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   840aa:	2100      	movs	r1, #0
   840ac:	4620      	mov	r0, r4
   840ae:	4b08      	ldr	r3, [pc, #32]	; (840d0 <start_timeoutcnt+0x40>)
   840b0:	4798      	blx	r3
   840b2:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   840b4:	4b07      	ldr	r3, [pc, #28]	; (840d4 <start_timeoutcnt+0x44>)
   840b6:	4798      	blx	r3
   840b8:	e7ee      	b.n	84098 <start_timeoutcnt+0x8>
   840ba:	bf00      	nop
   840bc:	20002261 	.word	0x20002261
   840c0:	40080000 	.word	0x40080000
   840c4:	00084181 	.word	0x00084181
   840c8:	20000b48 	.word	0x20000b48
   840cc:	20002864 	.word	0x20002864
   840d0:	00084179 	.word	0x00084179
   840d4:	0008402d 	.word	0x0008402d

000840d8 <stop_timeoutcnt>:
}

void stop_timeoutcnt(void)
{
   840d8:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   840da:	2100      	movs	r1, #0
   840dc:	4801      	ldr	r0, [pc, #4]	; (840e4 <stop_timeoutcnt+0xc>)
   840de:	4b02      	ldr	r3, [pc, #8]	; (840e8 <stop_timeoutcnt+0x10>)
   840e0:	4798      	blx	r3
   840e2:	bd08      	pop	{r3, pc}
   840e4:	40080000 	.word	0x40080000
   840e8:	00084181 	.word	0x00084181

000840ec <TC0_Handler>:
}

ISR(TC0_Handler)
{
   840ec:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   840ee:	4b05      	ldr	r3, [pc, #20]	; (84104 <TC0_Handler+0x18>)
   840f0:	681b      	ldr	r3, [r3, #0]
   840f2:	b113      	cbz	r3, 840fa <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   840f4:	3b01      	subs	r3, #1
   840f6:	4a03      	ldr	r2, [pc, #12]	; (84104 <TC0_Handler+0x18>)
   840f8:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   840fa:	2100      	movs	r1, #0
   840fc:	4802      	ldr	r0, [pc, #8]	; (84108 <TC0_Handler+0x1c>)
   840fe:	4b03      	ldr	r3, [pc, #12]	; (8410c <TC0_Handler+0x20>)
   84100:	4798      	blx	r3
   84102:	bd08      	pop	{r3, pc}
   84104:	20002864 	.word	0x20002864
   84108:	40080000 	.word	0x40080000
   8410c:	00084199 	.word	0x00084199

00084110 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   84110:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   84112:	f1a1 030e 	sub.w	r3, r1, #14
   84116:	2b01      	cmp	r3, #1
   84118:	d802      	bhi.n	84120 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
   8411a:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
   8411e:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84120:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84124:	b672      	cpsid	i
   84126:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8412a:	2500      	movs	r5, #0
   8412c:	4b0a      	ldr	r3, [pc, #40]	; (84158 <efc_perform_command+0x48>)
   8412e:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84130:	0212      	lsls	r2, r2, #8
   84132:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   84136:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   8413a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   8413e:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   84140:	4311      	orrs	r1, r2
   84142:	4b06      	ldr	r3, [pc, #24]	; (8415c <efc_perform_command+0x4c>)
   84144:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84146:	2c00      	cmp	r4, #0
   84148:	d1e9      	bne.n	8411e <efc_perform_command+0xe>
		cpu_irq_enable();
   8414a:	2201      	movs	r2, #1
   8414c:	4b02      	ldr	r3, [pc, #8]	; (84158 <efc_perform_command+0x48>)
   8414e:	701a      	strb	r2, [r3, #0]
   84150:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84154:	b662      	cpsie	i
   84156:	bd38      	pop	{r3, r4, r5, pc}
   84158:	20000b60 	.word	0x20000b60
   8415c:	2000006d 	.word	0x2000006d

00084160 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   84160:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   84162:	0189      	lsls	r1, r1, #6
   84164:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   84166:	2402      	movs	r4, #2
   84168:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8416a:	f04f 31ff 	mov.w	r1, #4294967295
   8416e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   84170:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   84172:	605a      	str	r2, [r3, #4]
}
   84174:	bc10      	pop	{r4}
   84176:	4770      	bx	lr

00084178 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   84178:	0189      	lsls	r1, r1, #6
   8417a:	2305      	movs	r3, #5
   8417c:	5043      	str	r3, [r0, r1]
   8417e:	4770      	bx	lr

00084180 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   84180:	0189      	lsls	r1, r1, #6
   84182:	2302      	movs	r3, #2
   84184:	5043      	str	r3, [r0, r1]
   84186:	4770      	bx	lr

00084188 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   84188:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8418c:	61ca      	str	r2, [r1, #28]
   8418e:	4770      	bx	lr

00084190 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   84190:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   84194:	624a      	str	r2, [r1, #36]	; 0x24
   84196:	4770      	bx	lr

00084198 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   84198:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   8419c:	6a08      	ldr	r0, [r1, #32]
}
   8419e:	4770      	bx	lr

000841a0 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   841a0:	b570      	push	{r4, r5, r6, lr}
   841a2:	b086      	sub	sp, #24
   841a4:	4604      	mov	r4, r0
   841a6:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   841a8:	2304      	movs	r3, #4
   841aa:	9300      	str	r3, [sp, #0]
   841ac:	ab02      	add	r3, sp, #8
   841ae:	220f      	movs	r2, #15
   841b0:	210e      	movs	r1, #14
   841b2:	480d      	ldr	r0, [pc, #52]	; (841e8 <flash_read_unique_id+0x48>)
   841b4:	4d0d      	ldr	r5, [pc, #52]	; (841ec <flash_read_unique_id+0x4c>)
   841b6:	47a8      	blx	r5
   841b8:	b118      	cbz	r0, 841c2 <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   841ba:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
   841bc:	4628      	mov	r0, r5
   841be:	b006      	add	sp, #24
   841c0:	bd70      	pop	{r4, r5, r6, pc}
   841c2:	4605      	mov	r5, r0
   841c4:	2e04      	cmp	r6, #4
   841c6:	bf28      	it	cs
   841c8:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   841ca:	b156      	cbz	r6, 841e2 <flash_read_unique_id+0x42>
   841cc:	aa02      	add	r2, sp, #8
   841ce:	4623      	mov	r3, r4
   841d0:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
   841d4:	f852 0b04 	ldr.w	r0, [r2], #4
   841d8:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   841dc:	428b      	cmp	r3, r1
   841de:	d1f9      	bne.n	841d4 <flash_read_unique_id+0x34>
   841e0:	e7ec      	b.n	841bc <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
   841e2:	4635      	mov	r5, r6
   841e4:	e7ea      	b.n	841bc <flash_read_unique_id+0x1c>
   841e6:	bf00      	nop
   841e8:	400e0800 	.word	0x400e0800
   841ec:	20000001 	.word	0x20000001

000841f0 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   841f0:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   841f2:	2006      	movs	r0, #6
   841f4:	4c02      	ldr	r4, [pc, #8]	; (84200 <ui_init+0x10>)
   841f6:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   841f8:	2007      	movs	r0, #7
   841fa:	47a0      	blx	r4
   841fc:	bd10      	pop	{r4, pc}
   841fe:	bf00      	nop
   84200:	00084591 	.word	0x00084591

00084204 <ui_powerdown>:
}

void ui_powerdown(void)
{
   84204:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   84206:	2006      	movs	r0, #6
   84208:	4c03      	ldr	r4, [pc, #12]	; (84218 <ui_powerdown+0x14>)
   8420a:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   8420c:	2007      	movs	r0, #7
   8420e:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   84210:	201d      	movs	r0, #29
   84212:	4b02      	ldr	r3, [pc, #8]	; (8421c <ui_powerdown+0x18>)
   84214:	4798      	blx	r3
   84216:	bd10      	pop	{r4, pc}
   84218:	00084591 	.word	0x00084591
   8421c:	000846e9 	.word	0x000846e9

00084220 <ui_wakeup>:
		
}

void ui_wakeup(void)
{
   84220:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   84222:	2006      	movs	r0, #6
   84224:	4b02      	ldr	r3, [pc, #8]	; (84230 <ui_wakeup+0x10>)
   84226:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   84228:	201d      	movs	r0, #29
   8422a:	4b02      	ldr	r3, [pc, #8]	; (84234 <ui_wakeup+0x14>)
   8422c:	4798      	blx	r3
   8422e:	bd08      	pop	{r3, pc}
   84230:	000845b5 	.word	0x000845b5
   84234:	000846cf 	.word	0x000846cf

00084238 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   84238:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   8423a:	4b0b      	ldr	r3, [pc, #44]	; (84268 <ui_process+0x30>)
   8423c:	fba3 2300 	umull	r2, r3, r3, r0
   84240:	099b      	lsrs	r3, r3, #6
   84242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   84246:	fb02 0013 	mls	r0, r2, r3, r0
   8424a:	b280      	uxth	r0, r0
   8424c:	b118      	cbz	r0, 84256 <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   8424e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   84252:	d004      	beq.n	8425e <ui_process+0x26>
   84254:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   84256:	2006      	movs	r0, #6
   84258:	4b04      	ldr	r3, [pc, #16]	; (8426c <ui_process+0x34>)
   8425a:	4798      	blx	r3
   8425c:	bd08      	pop	{r3, pc}
		LED_Off(LED0_GPIO);
   8425e:	2006      	movs	r0, #6
   84260:	4b03      	ldr	r3, [pc, #12]	; (84270 <ui_process+0x38>)
   84262:	4798      	blx	r3
	}
}
   84264:	e7f6      	b.n	84254 <ui_process+0x1c>
   84266:	bf00      	nop
   84268:	10624dd3 	.word	0x10624dd3
   8426c:	000845b5 	.word	0x000845b5
   84270:	00084591 	.word	0x00084591

00084274 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   84274:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   84276:	203e      	movs	r0, #62	; 0x3e
   84278:	4b07      	ldr	r3, [pc, #28]	; (84298 <sysclk_enable_usb+0x24>)
   8427a:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   8427c:	4c07      	ldr	r4, [pc, #28]	; (8429c <sysclk_enable_usb+0x28>)
   8427e:	47a0      	blx	r4
   84280:	2800      	cmp	r0, #0
   84282:	d0fc      	beq.n	8427e <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   84284:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   84288:	4b05      	ldr	r3, [pc, #20]	; (842a0 <sysclk_enable_usb+0x2c>)
   8428a:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   8428c:	4c05      	ldr	r4, [pc, #20]	; (842a4 <sysclk_enable_usb+0x30>)
   8428e:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84290:	2800      	cmp	r0, #0
   84292:	d0fc      	beq.n	8428e <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   84294:	bd10      	pop	{r4, pc}
   84296:	bf00      	nop
   84298:	000849d1 	.word	0x000849d1
   8429c:	000849f9 	.word	0x000849f9
   842a0:	400e0400 	.word	0x400e0400
   842a4:	00084a59 	.word	0x00084a59

000842a8 <sysclk_disable_usb>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   842a8:	4a02      	ldr	r2, [pc, #8]	; (842b4 <sysclk_disable_usb+0xc>)
   842aa:	69d3      	ldr	r3, [r2, #28]
   842ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   842b0:	61d3      	str	r3, [r2, #28]
   842b2:	4770      	bx	lr
   842b4:	400e0400 	.word	0x400e0400

000842b8 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   842b8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   842ba:	4812      	ldr	r0, [pc, #72]	; (84304 <sysclk_init+0x4c>)
   842bc:	4b12      	ldr	r3, [pc, #72]	; (84308 <sysclk_init+0x50>)
   842be:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   842c0:	203e      	movs	r0, #62	; 0x3e
   842c2:	4b12      	ldr	r3, [pc, #72]	; (8430c <sysclk_init+0x54>)
   842c4:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   842c6:	4c12      	ldr	r4, [pc, #72]	; (84310 <sysclk_init+0x58>)
   842c8:	47a0      	blx	r4
   842ca:	2800      	cmp	r0, #0
   842cc:	d0fc      	beq.n	842c8 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   842ce:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   842d2:	4b10      	ldr	r3, [pc, #64]	; (84314 <sysclk_init+0x5c>)
   842d4:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   842d6:	4c10      	ldr	r4, [pc, #64]	; (84318 <sysclk_init+0x60>)
   842d8:	47a0      	blx	r4
   842da:	2800      	cmp	r0, #0
   842dc:	d0fc      	beq.n	842d8 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   842de:	4b0f      	ldr	r3, [pc, #60]	; (8431c <sysclk_init+0x64>)
   842e0:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   842e2:	4a0f      	ldr	r2, [pc, #60]	; (84320 <sysclk_init+0x68>)
   842e4:	4b0f      	ldr	r3, [pc, #60]	; (84324 <sysclk_init+0x6c>)
   842e6:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   842e8:	4c0f      	ldr	r4, [pc, #60]	; (84328 <sysclk_init+0x70>)
   842ea:	47a0      	blx	r4
   842ec:	2800      	cmp	r0, #0
   842ee:	d0fc      	beq.n	842ea <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   842f0:	2010      	movs	r0, #16
   842f2:	4b0e      	ldr	r3, [pc, #56]	; (8432c <sysclk_init+0x74>)
   842f4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   842f6:	4b0e      	ldr	r3, [pc, #56]	; (84330 <sysclk_init+0x78>)
   842f8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   842fa:	4802      	ldr	r0, [pc, #8]	; (84304 <sysclk_init+0x4c>)
   842fc:	4b02      	ldr	r3, [pc, #8]	; (84308 <sysclk_init+0x50>)
   842fe:	4798      	blx	r3
   84300:	bd10      	pop	{r4, pc}
   84302:	bf00      	nop
   84304:	05b8d800 	.word	0x05b8d800
   84308:	2000013d 	.word	0x2000013d
   8430c:	000849d1 	.word	0x000849d1
   84310:	000849f9 	.word	0x000849f9
   84314:	00084a19 	.word	0x00084a19
   84318:	00084a09 	.word	0x00084a09
   8431c:	00084a39 	.word	0x00084a39
   84320:	200f3f01 	.word	0x200f3f01
   84324:	400e0400 	.word	0x400e0400
   84328:	00084a49 	.word	0x00084a49
   8432c:	0008496d 	.word	0x0008496d
   84330:	000862c9 	.word	0x000862c9

00084334 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   84334:	4b01      	ldr	r3, [pc, #4]	; (8433c <udi_vendor_getsetting+0x8>)
   84336:	7818      	ldrb	r0, [r3, #0]
   84338:	4770      	bx	lr
   8433a:	bf00      	nop
   8433c:	20002262 	.word	0x20002262

00084340 <udi_vendor_enable>:
{
   84340:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84342:	4b05      	ldr	r3, [pc, #20]	; (84358 <udi_vendor_enable+0x18>)
   84344:	4798      	blx	r3
   84346:	78c3      	ldrb	r3, [r0, #3]
   84348:	4a04      	ldr	r2, [pc, #16]	; (8435c <udi_vendor_enable+0x1c>)
   8434a:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   8434c:	b10b      	cbz	r3, 84352 <udi_vendor_enable+0x12>
	return true;
   8434e:	2001      	movs	r0, #1
}
   84350:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84352:	4b03      	ldr	r3, [pc, #12]	; (84360 <udi_vendor_enable+0x20>)
   84354:	4798      	blx	r3
   84356:	bd08      	pop	{r3, pc}
   84358:	00082c21 	.word	0x00082c21
   8435c:	20002262 	.word	0x20002262
   84360:	00081391 	.word	0x00081391

00084364 <udi_vendor_disable>:
{
   84364:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   84366:	4b03      	ldr	r3, [pc, #12]	; (84374 <udi_vendor_disable+0x10>)
   84368:	781b      	ldrb	r3, [r3, #0]
   8436a:	b103      	cbz	r3, 8436e <udi_vendor_disable+0xa>
   8436c:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   8436e:	4b02      	ldr	r3, [pc, #8]	; (84378 <udi_vendor_disable+0x14>)
   84370:	4798      	blx	r3
}
   84372:	e7fb      	b.n	8436c <udi_vendor_disable+0x8>
   84374:	20002262 	.word	0x20002262
   84378:	000813b9 	.word	0x000813b9

0008437c <udi_vendor_setup>:
{
   8437c:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   8437e:	4b0b      	ldr	r3, [pc, #44]	; (843ac <udi_vendor_setup+0x30>)
   84380:	781b      	ldrb	r3, [r3, #0]
   84382:	f013 0f80 	tst.w	r3, #128	; 0x80
   84386:	d105      	bne.n	84394 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84388:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8438c:	2b40      	cmp	r3, #64	; 0x40
   8438e:	d00a      	beq.n	843a6 <udi_vendor_setup+0x2a>
	return false; // Not supported request
   84390:	2000      	movs	r0, #0
}
   84392:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84394:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84398:	2b40      	cmp	r3, #64	; 0x40
   8439a:	d001      	beq.n	843a0 <udi_vendor_setup+0x24>
	return false; // Not supported request
   8439c:	2000      	movs	r0, #0
   8439e:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   843a0:	4b03      	ldr	r3, [pc, #12]	; (843b0 <udi_vendor_setup+0x34>)
   843a2:	4798      	blx	r3
   843a4:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   843a6:	4b03      	ldr	r3, [pc, #12]	; (843b4 <udi_vendor_setup+0x38>)
   843a8:	4798      	blx	r3
   843aa:	bd08      	pop	{r3, pc}
   843ac:	2000287c 	.word	0x2000287c
   843b0:	00081419 	.word	0x00081419
   843b4:	000813c5 	.word	0x000813c5

000843b8 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   843b8:	b510      	push	{r4, lr}
   843ba:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   843bc:	9200      	str	r2, [sp, #0]
   843be:	460b      	mov	r3, r1
   843c0:	4602      	mov	r2, r0
   843c2:	2100      	movs	r1, #0
   843c4:	2081      	movs	r0, #129	; 0x81
   843c6:	4c02      	ldr	r4, [pc, #8]	; (843d0 <udi_vendor_bulk_in_run+0x18>)
   843c8:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   843ca:	b002      	add	sp, #8
   843cc:	bd10      	pop	{r4, pc}
   843ce:	bf00      	nop
   843d0:	00085b59 	.word	0x00085b59

000843d4 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   843d4:	b510      	push	{r4, lr}
   843d6:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   843d8:	9200      	str	r2, [sp, #0]
   843da:	460b      	mov	r3, r1
   843dc:	4602      	mov	r2, r0
   843de:	2100      	movs	r1, #0
   843e0:	2002      	movs	r0, #2
   843e2:	4c02      	ldr	r4, [pc, #8]	; (843ec <udi_vendor_bulk_out_run+0x18>)
   843e4:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   843e6:	b002      	add	sp, #8
   843e8:	bd10      	pop	{r4, pc}
   843ea:	bf00      	nop
   843ec:	00085b59 	.word	0x00085b59

000843f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   843f0:	4b0b      	ldr	r3, [pc, #44]	; (84420 <cpu_irq_enter_critical+0x30>)
   843f2:	681b      	ldr	r3, [r3, #0]
   843f4:	b92b      	cbnz	r3, 84402 <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   843f6:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   843fa:	b13b      	cbz	r3, 8440c <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   843fc:	2200      	movs	r2, #0
   843fe:	4b09      	ldr	r3, [pc, #36]	; (84424 <cpu_irq_enter_critical+0x34>)
   84400:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   84402:	4a07      	ldr	r2, [pc, #28]	; (84420 <cpu_irq_enter_critical+0x30>)
   84404:	6813      	ldr	r3, [r2, #0]
   84406:	3301      	adds	r3, #1
   84408:	6013      	str	r3, [r2, #0]
   8440a:	4770      	bx	lr
  __ASM volatile ("cpsid i");
   8440c:	b672      	cpsid	i
   8440e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   84412:	2200      	movs	r2, #0
   84414:	4b04      	ldr	r3, [pc, #16]	; (84428 <cpu_irq_enter_critical+0x38>)
   84416:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   84418:	2201      	movs	r2, #1
   8441a:	4b02      	ldr	r3, [pc, #8]	; (84424 <cpu_irq_enter_critical+0x34>)
   8441c:	701a      	strb	r2, [r3, #0]
   8441e:	e7f0      	b.n	84402 <cpu_irq_enter_critical+0x12>
   84420:	20002264 	.word	0x20002264
   84424:	20002268 	.word	0x20002268
   84428:	20000b60 	.word	0x20000b60

0008442c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   8442c:	4b07      	ldr	r3, [pc, #28]	; (8444c <cpu_irq_leave_critical+0x20>)
   8442e:	681a      	ldr	r2, [r3, #0]
   84430:	3a01      	subs	r2, #1
   84432:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   84434:	681b      	ldr	r3, [r3, #0]
   84436:	b943      	cbnz	r3, 8444a <cpu_irq_leave_critical+0x1e>
   84438:	4b05      	ldr	r3, [pc, #20]	; (84450 <cpu_irq_leave_critical+0x24>)
   8443a:	781b      	ldrb	r3, [r3, #0]
   8443c:	b12b      	cbz	r3, 8444a <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   8443e:	2201      	movs	r2, #1
   84440:	4b04      	ldr	r3, [pc, #16]	; (84454 <cpu_irq_leave_critical+0x28>)
   84442:	701a      	strb	r2, [r3, #0]
   84444:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84448:	b662      	cpsie	i
   8444a:	4770      	bx	lr
   8444c:	20002264 	.word	0x20002264
   84450:	20002268 	.word	0x20002268
   84454:	20000b60 	.word	0x20000b60

00084458 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   84458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   8445c:	b980      	cbnz	r0, 84480 <_read+0x28>
   8445e:	460c      	mov	r4, r1
   84460:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   84462:	2a00      	cmp	r2, #0
   84464:	dd0f      	ble.n	84486 <_read+0x2e>
   84466:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   84468:	4e08      	ldr	r6, [pc, #32]	; (8448c <_read+0x34>)
   8446a:	4d09      	ldr	r5, [pc, #36]	; (84490 <_read+0x38>)
   8446c:	6830      	ldr	r0, [r6, #0]
   8446e:	4621      	mov	r1, r4
   84470:	682b      	ldr	r3, [r5, #0]
   84472:	4798      	blx	r3
		ptr++;
   84474:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   84476:	42bc      	cmp	r4, r7
   84478:	d1f8      	bne.n	8446c <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8447a:	4640      	mov	r0, r8
   8447c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84480:	f04f 38ff 	mov.w	r8, #4294967295
   84484:	e7f9      	b.n	8447a <_read+0x22>
	for (; len > 0; --len) {
   84486:	4680      	mov	r8, r0
   84488:	e7f7      	b.n	8447a <_read+0x22>
   8448a:	bf00      	nop
   8448c:	20002878 	.word	0x20002878
   84490:	20002870 	.word	0x20002870

00084494 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   84494:	3801      	subs	r0, #1
   84496:	2802      	cmp	r0, #2
   84498:	d815      	bhi.n	844c6 <_write+0x32>
{
   8449a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8449e:	460e      	mov	r6, r1
   844a0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   844a2:	b19a      	cbz	r2, 844cc <_write+0x38>
   844a4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   844a6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 844e0 <_write+0x4c>
   844aa:	4f0c      	ldr	r7, [pc, #48]	; (844dc <_write+0x48>)
   844ac:	f8d8 0000 	ldr.w	r0, [r8]
   844b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   844b4:	683b      	ldr	r3, [r7, #0]
   844b6:	4798      	blx	r3
   844b8:	2800      	cmp	r0, #0
   844ba:	db0a      	blt.n	844d2 <_write+0x3e>
   844bc:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   844be:	3c01      	subs	r4, #1
   844c0:	d1f4      	bne.n	844ac <_write+0x18>
   844c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   844c6:	f04f 30ff 	mov.w	r0, #4294967295
   844ca:	4770      	bx	lr
	for (; len != 0; --len) {
   844cc:	4610      	mov	r0, r2
   844ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   844d2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   844d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   844da:	bf00      	nop
   844dc:	20002874 	.word	0x20002874
   844e0:	20002878 	.word	0x20002878

000844e4 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   844e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   844e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   844ea:	2006      	movs	r0, #6
   844ec:	4c17      	ldr	r4, [pc, #92]	; (8454c <iopins_normal+0x68>)
   844ee:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   844f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   844f4:	2007      	movs	r0, #7
   844f6:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   844f8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   844fc:	201d      	movs	r0, #29
   844fe:	47a0      	blx	r4
	board_power(0);
   84500:	201d      	movs	r0, #29
   84502:	4b13      	ldr	r3, [pc, #76]	; (84550 <iopins_normal+0x6c>)
   84504:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   84506:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8450a:	2008      	movs	r0, #8
   8450c:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   8450e:	2008      	movs	r0, #8
   84510:	4e10      	ldr	r6, [pc, #64]	; (84554 <iopins_normal+0x70>)
   84512:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   84514:	4f10      	ldr	r7, [pc, #64]	; (84558 <iopins_normal+0x74>)
   84516:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   8451a:	21ff      	movs	r1, #255	; 0xff
   8451c:	4638      	mov	r0, r7
   8451e:	4d0f      	ldr	r5, [pc, #60]	; (8455c <iopins_normal+0x78>)
   84520:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   84522:	21ff      	movs	r1, #255	; 0xff
   84524:	4638      	mov	r0, r7
   84526:	4b0e      	ldr	r3, [pc, #56]	; (84560 <iopins_normal+0x7c>)
   84528:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   8452a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8452e:	2035      	movs	r0, #53	; 0x35
   84530:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   84532:	2035      	movs	r0, #53	; 0x35
   84534:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   84536:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8453a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8453e:	4809      	ldr	r0, [pc, #36]	; (84564 <iopins_normal+0x80>)
   84540:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   84542:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84546:	201b      	movs	r0, #27
   84548:	47a0      	blx	r4
   8454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8454c:	00084725 	.word	0x00084725
   84550:	000846e9 	.word	0x000846e9
   84554:	000846cf 	.word	0x000846cf
   84558:	400e0e00 	.word	0x400e0e00
   8455c:	000847f5 	.word	0x000847f5
   84560:	000846a1 	.word	0x000846a1
   84564:	400e0c00 	.word	0x400e0c00

00084568 <board_init>:
#  endif
#endif	
}

void board_init(void)
{
   84568:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8456a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8456e:	4b05      	ldr	r3, [pc, #20]	; (84584 <board_init+0x1c>)
   84570:	605a      	str	r2, [r3, #4]
   84572:	200a      	movs	r0, #10
   84574:	4c04      	ldr	r4, [pc, #16]	; (84588 <board_init+0x20>)
   84576:	47a0      	blx	r4
   84578:	200b      	movs	r0, #11
   8457a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   8457c:	4b03      	ldr	r3, [pc, #12]	; (8458c <board_init+0x24>)
   8457e:	4798      	blx	r3
   84580:	bd10      	pop	{r4, pc}
   84582:	bf00      	nop
   84584:	400e1250 	.word	0x400e1250
   84588:	00084a69 	.word	0x00084a69
   8458c:	000844e5 	.word	0x000844e5

00084590 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   84590:	b510      	push	{r4, lr}
   84592:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84594:	2806      	cmp	r0, #6
   84596:	d002      	beq.n	8459e <LED_Off+0xe>
   84598:	2c07      	cmp	r4, #7
   8459a:	d004      	beq.n	845a6 <LED_Off+0x16>
   8459c:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   8459e:	2006      	movs	r0, #6
   845a0:	4b03      	ldr	r3, [pc, #12]	; (845b0 <LED_Off+0x20>)
   845a2:	4798      	blx	r3
   845a4:	e7f8      	b.n	84598 <LED_Off+0x8>
   845a6:	2007      	movs	r0, #7
   845a8:	4b01      	ldr	r3, [pc, #4]	; (845b0 <LED_Off+0x20>)
   845aa:	4798      	blx	r3
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   845ac:	e7f6      	b.n	8459c <LED_Off+0xc>
   845ae:	bf00      	nop
   845b0:	000846e9 	.word	0x000846e9

000845b4 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   845b4:	b510      	push	{r4, lr}
   845b6:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   845b8:	2806      	cmp	r0, #6
   845ba:	d002      	beq.n	845c2 <LED_On+0xe>
   845bc:	2c07      	cmp	r4, #7
   845be:	d004      	beq.n	845ca <LED_On+0x16>
   845c0:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   845c2:	2006      	movs	r0, #6
   845c4:	4b03      	ldr	r3, [pc, #12]	; (845d4 <LED_On+0x20>)
   845c6:	4798      	blx	r3
   845c8:	e7f8      	b.n	845bc <LED_On+0x8>
   845ca:	2007      	movs	r0, #7
   845cc:	4b01      	ldr	r3, [pc, #4]	; (845d4 <LED_On+0x20>)
   845ce:	4798      	blx	r3
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   845d0:	e7f6      	b.n	845c0 <LED_On+0xc>
   845d2:	bf00      	nop
   845d4:	000846cf 	.word	0x000846cf

000845d8 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   845d8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   845dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   845e0:	670a      	str	r2, [r1, #112]	; 0x70
   845e2:	4770      	bx	lr

000845e4 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   845e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   845e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   845ec:	674a      	str	r2, [r1, #116]	; 0x74
   845ee:	4770      	bx	lr

000845f0 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   845f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   845f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   845f8:	678a      	str	r2, [r1, #120]	; 0x78
   845fa:	4770      	bx	lr

000845fc <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   845fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84600:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84604:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   84608:	4770      	bx	lr

0008460a <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8460a:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8460c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   84610:	d016      	beq.n	84640 <pio_set_peripheral+0x36>
   84612:	d80b      	bhi.n	8462c <pio_set_peripheral+0x22>
   84614:	b149      	cbz	r1, 8462a <pio_set_peripheral+0x20>
   84616:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8461a:	d105      	bne.n	84628 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8461c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8461e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   84620:	400b      	ands	r3, r1
   84622:	ea23 0302 	bic.w	r3, r3, r2
   84626:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   84628:	6042      	str	r2, [r0, #4]
   8462a:	4770      	bx	lr
	switch (ul_type) {
   8462c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   84630:	d0fb      	beq.n	8462a <pio_set_peripheral+0x20>
   84632:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   84636:	d0f8      	beq.n	8462a <pio_set_peripheral+0x20>
   84638:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8463c:	d1f4      	bne.n	84628 <pio_set_peripheral+0x1e>
   8463e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   84640:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   84642:	4313      	orrs	r3, r2
   84644:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   84646:	e7ef      	b.n	84628 <pio_set_peripheral+0x1e>

00084648 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   84648:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8464a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8464e:	bf14      	ite	ne
   84650:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84652:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   84654:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   84658:	bf14      	ite	ne
   8465a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8465c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   8465e:	f012 0f02 	tst.w	r2, #2
   84662:	d107      	bne.n	84674 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   84664:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   84668:	bf18      	it	ne
   8466a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   8466e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   84670:	6001      	str	r1, [r0, #0]
   84672:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   84674:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   84678:	e7f9      	b.n	8466e <pio_set_input+0x26>

0008467a <pio_set_output>:
{
   8467a:	b410      	push	{r4}
   8467c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   8467e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   84680:	b944      	cbnz	r4, 84694 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   84682:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   84684:	b143      	cbz	r3, 84698 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   84686:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   84688:	b942      	cbnz	r2, 8469c <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8468a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8468c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8468e:	6001      	str	r1, [r0, #0]
}
   84690:	bc10      	pop	{r4}
   84692:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   84694:	6641      	str	r1, [r0, #100]	; 0x64
   84696:	e7f5      	b.n	84684 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   84698:	6541      	str	r1, [r0, #84]	; 0x54
   8469a:	e7f5      	b.n	84688 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8469c:	6301      	str	r1, [r0, #48]	; 0x30
   8469e:	e7f5      	b.n	8468c <pio_set_output+0x12>

000846a0 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   846a0:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   846a4:	4770      	bx	lr

000846a6 <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   846a6:	6381      	str	r1, [r0, #56]	; 0x38
   846a8:	4770      	bx	lr

000846aa <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   846aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   846ac:	4770      	bx	lr

000846ae <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   846ae:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   846b0:	4770      	bx	lr

000846b2 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   846b2:	0943      	lsrs	r3, r0, #5
   846b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   846b8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   846bc:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   846be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   846c0:	f000 001f 	and.w	r0, r0, #31
   846c4:	fa23 f000 	lsr.w	r0, r3, r0
}
   846c8:	f000 0001 	and.w	r0, r0, #1
   846cc:	4770      	bx	lr

000846ce <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   846ce:	0943      	lsrs	r3, r0, #5
   846d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   846d4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   846d8:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   846da:	f000 001f 	and.w	r0, r0, #31
   846de:	2201      	movs	r2, #1
   846e0:	fa02 f000 	lsl.w	r0, r2, r0
   846e4:	6318      	str	r0, [r3, #48]	; 0x30
   846e6:	4770      	bx	lr

000846e8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   846e8:	0943      	lsrs	r3, r0, #5
   846ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   846ee:	f203 7306 	addw	r3, r3, #1798	; 0x706
   846f2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   846f4:	f000 001f 	and.w	r0, r0, #31
   846f8:	2201      	movs	r2, #1
   846fa:	fa02 f000 	lsl.w	r0, r2, r0
   846fe:	6358      	str	r0, [r3, #52]	; 0x34
   84700:	4770      	bx	lr

00084702 <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84702:	0943      	lsrs	r3, r0, #5
   84704:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84708:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8470c:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   8470e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   84710:	f000 021f 	and.w	r2, r0, #31
   84714:	2001      	movs	r0, #1
   84716:	4090      	lsls	r0, r2
   84718:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8471a:	bf14      	ite	ne
   8471c:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8471e:	6318      	streq	r0, [r3, #48]	; 0x30
   84720:	4770      	bx	lr
	...

00084724 <pio_configure_pin>:
{
   84724:	b570      	push	{r4, r5, r6, lr}
   84726:	b082      	sub	sp, #8
   84728:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8472a:	0943      	lsrs	r3, r0, #5
   8472c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84730:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84734:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   84736:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8473a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8473e:	d031      	beq.n	847a4 <pio_configure_pin+0x80>
   84740:	d816      	bhi.n	84770 <pio_configure_pin+0x4c>
   84742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84746:	d01b      	beq.n	84780 <pio_configure_pin+0x5c>
   84748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8474c:	d116      	bne.n	8477c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8474e:	f000 001f 	and.w	r0, r0, #31
   84752:	2601      	movs	r6, #1
   84754:	4086      	lsls	r6, r0
   84756:	4632      	mov	r2, r6
   84758:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8475c:	4620      	mov	r0, r4
   8475e:	4b22      	ldr	r3, [pc, #136]	; (847e8 <pio_configure_pin+0xc4>)
   84760:	4798      	blx	r3
	if (ul_pull_up_enable) {
   84762:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   84766:	bf14      	ite	ne
   84768:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8476a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8476c:	2001      	movs	r0, #1
   8476e:	e017      	b.n	847a0 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   84770:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84774:	d021      	beq.n	847ba <pio_configure_pin+0x96>
   84776:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8477a:	d01e      	beq.n	847ba <pio_configure_pin+0x96>
		return 0;
   8477c:	2000      	movs	r0, #0
   8477e:	e00f      	b.n	847a0 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   84780:	f000 001f 	and.w	r0, r0, #31
   84784:	2601      	movs	r6, #1
   84786:	4086      	lsls	r6, r0
   84788:	4632      	mov	r2, r6
   8478a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8478e:	4620      	mov	r0, r4
   84790:	4b15      	ldr	r3, [pc, #84]	; (847e8 <pio_configure_pin+0xc4>)
   84792:	4798      	blx	r3
	if (ul_pull_up_enable) {
   84794:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   84798:	bf14      	ite	ne
   8479a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8479c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8479e:	2001      	movs	r0, #1
}
   847a0:	b002      	add	sp, #8
   847a2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   847a4:	f000 011f 	and.w	r1, r0, #31
   847a8:	2601      	movs	r6, #1
   847aa:	462a      	mov	r2, r5
   847ac:	fa06 f101 	lsl.w	r1, r6, r1
   847b0:	4620      	mov	r0, r4
   847b2:	4b0e      	ldr	r3, [pc, #56]	; (847ec <pio_configure_pin+0xc8>)
   847b4:	4798      	blx	r3
	return 1;
   847b6:	4630      	mov	r0, r6
		break;
   847b8:	e7f2      	b.n	847a0 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   847ba:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   847be:	f000 011f 	and.w	r1, r0, #31
   847c2:	2601      	movs	r6, #1
   847c4:	ea05 0306 	and.w	r3, r5, r6
   847c8:	9300      	str	r3, [sp, #0]
   847ca:	f3c5 0380 	ubfx	r3, r5, #2, #1
   847ce:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   847d2:	bf14      	ite	ne
   847d4:	2200      	movne	r2, #0
   847d6:	2201      	moveq	r2, #1
   847d8:	fa06 f101 	lsl.w	r1, r6, r1
   847dc:	4620      	mov	r0, r4
   847de:	4c04      	ldr	r4, [pc, #16]	; (847f0 <pio_configure_pin+0xcc>)
   847e0:	47a0      	blx	r4
	return 1;
   847e2:	4630      	mov	r0, r6
		break;
   847e4:	e7dc      	b.n	847a0 <pio_configure_pin+0x7c>
   847e6:	bf00      	nop
   847e8:	0008460b 	.word	0x0008460b
   847ec:	00084649 	.word	0x00084649
   847f0:	0008467b 	.word	0x0008467b

000847f4 <pio_configure_pin_group>:
{
   847f4:	b570      	push	{r4, r5, r6, lr}
   847f6:	b082      	sub	sp, #8
   847f8:	4605      	mov	r5, r0
   847fa:	460e      	mov	r6, r1
   847fc:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   847fe:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   84802:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84806:	d027      	beq.n	84858 <pio_configure_pin_group+0x64>
   84808:	d811      	bhi.n	8482e <pio_configure_pin_group+0x3a>
   8480a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8480e:	d016      	beq.n	8483e <pio_configure_pin_group+0x4a>
   84810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84814:	d111      	bne.n	8483a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   84816:	460a      	mov	r2, r1
   84818:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8481c:	4b19      	ldr	r3, [pc, #100]	; (84884 <pio_configure_pin_group+0x90>)
   8481e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   84820:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   84824:	bf14      	ite	ne
   84826:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84828:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8482a:	2001      	movs	r0, #1
   8482c:	e012      	b.n	84854 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8482e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84832:	d015      	beq.n	84860 <pio_configure_pin_group+0x6c>
   84834:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84838:	d012      	beq.n	84860 <pio_configure_pin_group+0x6c>
		return 0;
   8483a:	2000      	movs	r0, #0
   8483c:	e00a      	b.n	84854 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8483e:	460a      	mov	r2, r1
   84840:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84844:	4b0f      	ldr	r3, [pc, #60]	; (84884 <pio_configure_pin_group+0x90>)
   84846:	4798      	blx	r3
	if (ul_pull_up_enable) {
   84848:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8484c:	bf14      	ite	ne
   8484e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84850:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   84852:	2001      	movs	r0, #1
}
   84854:	b002      	add	sp, #8
   84856:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   84858:	4b0b      	ldr	r3, [pc, #44]	; (84888 <pio_configure_pin_group+0x94>)
   8485a:	4798      	blx	r3
	return 1;
   8485c:	2001      	movs	r0, #1
		break;
   8485e:	e7f9      	b.n	84854 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84860:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   84864:	f004 0301 	and.w	r3, r4, #1
   84868:	9300      	str	r3, [sp, #0]
   8486a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8486e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   84872:	bf14      	ite	ne
   84874:	2200      	movne	r2, #0
   84876:	2201      	moveq	r2, #1
   84878:	4631      	mov	r1, r6
   8487a:	4628      	mov	r0, r5
   8487c:	4c03      	ldr	r4, [pc, #12]	; (8488c <pio_configure_pin_group+0x98>)
   8487e:	47a0      	blx	r4
	return 1;
   84880:	2001      	movs	r0, #1
		break;
   84882:	e7e7      	b.n	84854 <pio_configure_pin_group+0x60>
   84884:	0008460b 	.word	0x0008460b
   84888:	00084649 	.word	0x00084649
   8488c:	0008467b 	.word	0x0008467b

00084890 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   84890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84894:	4604      	mov	r4, r0
   84896:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   84898:	4b0e      	ldr	r3, [pc, #56]	; (848d4 <pio_handler_process+0x44>)
   8489a:	4798      	blx	r3
   8489c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8489e:	4620      	mov	r0, r4
   848a0:	4b0d      	ldr	r3, [pc, #52]	; (848d8 <pio_handler_process+0x48>)
   848a2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   848a4:	4005      	ands	r5, r0
   848a6:	d013      	beq.n	848d0 <pio_handler_process+0x40>
   848a8:	4c0c      	ldr	r4, [pc, #48]	; (848dc <pio_handler_process+0x4c>)
   848aa:	f104 0660 	add.w	r6, r4, #96	; 0x60
   848ae:	e003      	b.n	848b8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   848b0:	42b4      	cmp	r4, r6
   848b2:	d00d      	beq.n	848d0 <pio_handler_process+0x40>
   848b4:	3410      	adds	r4, #16
		while (status != 0) {
   848b6:	b15d      	cbz	r5, 848d0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   848b8:	6820      	ldr	r0, [r4, #0]
   848ba:	4540      	cmp	r0, r8
   848bc:	d1f8      	bne.n	848b0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   848be:	6861      	ldr	r1, [r4, #4]
   848c0:	4229      	tst	r1, r5
   848c2:	d0f5      	beq.n	848b0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   848c4:	68e3      	ldr	r3, [r4, #12]
   848c6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   848c8:	6863      	ldr	r3, [r4, #4]
   848ca:	ea25 0503 	bic.w	r5, r5, r3
   848ce:	e7ef      	b.n	848b0 <pio_handler_process+0x20>
   848d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   848d4:	000846ab 	.word	0x000846ab
   848d8:	000846af 	.word	0x000846af
   848dc:	2000226c 	.word	0x2000226c

000848e0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   848e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   848e2:	210a      	movs	r1, #10
   848e4:	4801      	ldr	r0, [pc, #4]	; (848ec <PIOA_Handler+0xc>)
   848e6:	4b02      	ldr	r3, [pc, #8]	; (848f0 <PIOA_Handler+0x10>)
   848e8:	4798      	blx	r3
   848ea:	bd08      	pop	{r3, pc}
   848ec:	400e0c00 	.word	0x400e0c00
   848f0:	00084891 	.word	0x00084891

000848f4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   848f4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   848f6:	210b      	movs	r1, #11
   848f8:	4801      	ldr	r0, [pc, #4]	; (84900 <PIOB_Handler+0xc>)
   848fa:	4b02      	ldr	r3, [pc, #8]	; (84904 <PIOB_Handler+0x10>)
   848fc:	4798      	blx	r3
   848fe:	bd08      	pop	{r3, pc}
   84900:	400e0e00 	.word	0x400e0e00
   84904:	00084891 	.word	0x00084891

00084908 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84908:	4a17      	ldr	r2, [pc, #92]	; (84968 <pmc_switch_mck_to_mainck+0x60>)
   8490a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8490c:	f023 0303 	bic.w	r3, r3, #3
   84910:	f043 0301 	orr.w	r3, r3, #1
   84914:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84916:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84918:	f013 0f08 	tst.w	r3, #8
   8491c:	d10a      	bne.n	84934 <pmc_switch_mck_to_mainck+0x2c>
   8491e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84922:	4911      	ldr	r1, [pc, #68]	; (84968 <pmc_switch_mck_to_mainck+0x60>)
   84924:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84926:	f012 0f08 	tst.w	r2, #8
   8492a:	d103      	bne.n	84934 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8492c:	3b01      	subs	r3, #1
   8492e:	d1f9      	bne.n	84924 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   84930:	2001      	movs	r0, #1
   84932:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84934:	4a0c      	ldr	r2, [pc, #48]	; (84968 <pmc_switch_mck_to_mainck+0x60>)
   84936:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8493c:	4318      	orrs	r0, r3
   8493e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84940:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84942:	f013 0f08 	tst.w	r3, #8
   84946:	d10a      	bne.n	8495e <pmc_switch_mck_to_mainck+0x56>
   84948:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8494c:	4906      	ldr	r1, [pc, #24]	; (84968 <pmc_switch_mck_to_mainck+0x60>)
   8494e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84950:	f012 0f08 	tst.w	r2, #8
   84954:	d105      	bne.n	84962 <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84956:	3b01      	subs	r3, #1
   84958:	d1f9      	bne.n	8494e <pmc_switch_mck_to_mainck+0x46>
			return 1;
   8495a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8495c:	4770      	bx	lr
	return 0;
   8495e:	2000      	movs	r0, #0
   84960:	4770      	bx	lr
   84962:	2000      	movs	r0, #0
   84964:	4770      	bx	lr
   84966:	bf00      	nop
   84968:	400e0400 	.word	0x400e0400

0008496c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8496c:	4a17      	ldr	r2, [pc, #92]	; (849cc <pmc_switch_mck_to_pllack+0x60>)
   8496e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   84974:	4318      	orrs	r0, r3
   84976:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84978:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8497a:	f013 0f08 	tst.w	r3, #8
   8497e:	d10a      	bne.n	84996 <pmc_switch_mck_to_pllack+0x2a>
   84980:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84984:	4911      	ldr	r1, [pc, #68]	; (849cc <pmc_switch_mck_to_pllack+0x60>)
   84986:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84988:	f012 0f08 	tst.w	r2, #8
   8498c:	d103      	bne.n	84996 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8498e:	3b01      	subs	r3, #1
   84990:	d1f9      	bne.n	84986 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   84992:	2001      	movs	r0, #1
   84994:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84996:	4a0d      	ldr	r2, [pc, #52]	; (849cc <pmc_switch_mck_to_pllack+0x60>)
   84998:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8499a:	f023 0303 	bic.w	r3, r3, #3
   8499e:	f043 0302 	orr.w	r3, r3, #2
   849a2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   849a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   849a6:	f013 0f08 	tst.w	r3, #8
   849aa:	d10a      	bne.n	849c2 <pmc_switch_mck_to_pllack+0x56>
   849ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   849b0:	4906      	ldr	r1, [pc, #24]	; (849cc <pmc_switch_mck_to_pllack+0x60>)
   849b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   849b4:	f012 0f08 	tst.w	r2, #8
   849b8:	d105      	bne.n	849c6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   849ba:	3b01      	subs	r3, #1
   849bc:	d1f9      	bne.n	849b2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   849be:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   849c0:	4770      	bx	lr
	return 0;
   849c2:	2000      	movs	r0, #0
   849c4:	4770      	bx	lr
   849c6:	2000      	movs	r0, #0
   849c8:	4770      	bx	lr
   849ca:	bf00      	nop
   849cc:	400e0400 	.word	0x400e0400

000849d0 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   849d0:	4a08      	ldr	r2, [pc, #32]	; (849f4 <pmc_osc_enable_main_xtal+0x24>)
   849d2:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   849d4:	f023 0303 	bic.w	r3, r3, #3
   849d8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   849dc:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   849e0:	0200      	lsls	r0, r0, #8
   849e2:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   849e4:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   849e6:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   849e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   849ea:	f013 0f01 	tst.w	r3, #1
   849ee:	d0fb      	beq.n	849e8 <pmc_osc_enable_main_xtal+0x18>
}
   849f0:	4770      	bx	lr
   849f2:	bf00      	nop
   849f4:	400e0400 	.word	0x400e0400

000849f8 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   849f8:	4b02      	ldr	r3, [pc, #8]	; (84a04 <pmc_osc_is_ready_main_xtal+0xc>)
   849fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   849fc:	f000 0001 	and.w	r0, r0, #1
   84a00:	4770      	bx	lr
   84a02:	bf00      	nop
   84a04:	400e0400 	.word	0x400e0400

00084a08 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84a08:	4b02      	ldr	r3, [pc, #8]	; (84a14 <pmc_osc_is_ready_mainck+0xc>)
   84a0a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84a0c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   84a10:	4770      	bx	lr
   84a12:	bf00      	nop
   84a14:	400e0400 	.word	0x400e0400

00084a18 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   84a18:	4b06      	ldr	r3, [pc, #24]	; (84a34 <pmc_mainck_osc_select+0x1c>)
   84a1a:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   84a1c:	b930      	cbnz	r0, 84a2c <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   84a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   84a22:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84a26:	4a03      	ldr	r2, [pc, #12]	; (84a34 <pmc_mainck_osc_select+0x1c>)
   84a28:	6213      	str	r3, [r2, #32]
   84a2a:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   84a2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   84a30:	e7f7      	b.n	84a22 <pmc_mainck_osc_select+0xa>
   84a32:	bf00      	nop
   84a34:	400e0400 	.word	0x400e0400

00084a38 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84a38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   84a3c:	4b01      	ldr	r3, [pc, #4]	; (84a44 <pmc_disable_pllack+0xc>)
   84a3e:	629a      	str	r2, [r3, #40]	; 0x28
   84a40:	4770      	bx	lr
   84a42:	bf00      	nop
   84a44:	400e0400 	.word	0x400e0400

00084a48 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84a48:	4b02      	ldr	r3, [pc, #8]	; (84a54 <pmc_is_locked_pllack+0xc>)
   84a4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84a4c:	f000 0002 	and.w	r0, r0, #2
   84a50:	4770      	bx	lr
   84a52:	bf00      	nop
   84a54:	400e0400 	.word	0x400e0400

00084a58 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   84a58:	4b02      	ldr	r3, [pc, #8]	; (84a64 <pmc_is_locked_upll+0xc>)
   84a5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84a5c:	f000 0040 	and.w	r0, r0, #64	; 0x40
   84a60:	4770      	bx	lr
   84a62:	bf00      	nop
   84a64:	400e0400 	.word	0x400e0400

00084a68 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   84a68:	281d      	cmp	r0, #29
   84a6a:	d80e      	bhi.n	84a8a <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   84a6c:	281f      	cmp	r0, #31
   84a6e:	d80e      	bhi.n	84a8e <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   84a70:	4b09      	ldr	r3, [pc, #36]	; (84a98 <pmc_enable_periph_clk+0x30>)
   84a72:	699a      	ldr	r2, [r3, #24]
   84a74:	2301      	movs	r3, #1
   84a76:	4083      	lsls	r3, r0
   84a78:	4393      	bics	r3, r2
   84a7a:	d00a      	beq.n	84a92 <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   84a7c:	2301      	movs	r3, #1
   84a7e:	fa03 f000 	lsl.w	r0, r3, r0
   84a82:	4b05      	ldr	r3, [pc, #20]	; (84a98 <pmc_enable_periph_clk+0x30>)
   84a84:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   84a86:	2000      	movs	r0, #0
   84a88:	4770      	bx	lr
		return 1;
   84a8a:	2001      	movs	r0, #1
   84a8c:	4770      	bx	lr
	return 0;
   84a8e:	2000      	movs	r0, #0
   84a90:	4770      	bx	lr
   84a92:	2000      	movs	r0, #0
}
   84a94:	4770      	bx	lr
   84a96:	bf00      	nop
   84a98:	400e0400 	.word	0x400e0400

00084a9c <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   84a9c:	281d      	cmp	r0, #29
   84a9e:	d810      	bhi.n	84ac2 <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   84aa0:	281f      	cmp	r0, #31
   84aa2:	d810      	bhi.n	84ac6 <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   84aa4:	4b09      	ldr	r3, [pc, #36]	; (84acc <pmc_disable_periph_clk+0x30>)
   84aa6:	699a      	ldr	r2, [r3, #24]
   84aa8:	2301      	movs	r3, #1
   84aaa:	4083      	lsls	r3, r0
   84aac:	4393      	bics	r3, r2
   84aae:	d001      	beq.n	84ab4 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   84ab0:	2000      	movs	r0, #0
}
   84ab2:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   84ab4:	2301      	movs	r3, #1
   84ab6:	fa03 f000 	lsl.w	r0, r3, r0
   84aba:	4b04      	ldr	r3, [pc, #16]	; (84acc <pmc_disable_periph_clk+0x30>)
   84abc:	6158      	str	r0, [r3, #20]
	return 0;
   84abe:	2000      	movs	r0, #0
   84ac0:	4770      	bx	lr
		return 1;
   84ac2:	2001      	movs	r0, #1
   84ac4:	4770      	bx	lr
	return 0;
   84ac6:	2000      	movs	r0, #0
   84ac8:	4770      	bx	lr
   84aca:	bf00      	nop
   84acc:	400e0400 	.word	0x400e0400

00084ad0 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   84ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
   84ad4:	fa03 f000 	lsl.w	r0, r3, r0
   84ad8:	4b01      	ldr	r3, [pc, #4]	; (84ae0 <pmc_enable_pck+0x10>)
   84ada:	6018      	str	r0, [r3, #0]
   84adc:	4770      	bx	lr
   84ade:	bf00      	nop
   84ae0:	400e0400 	.word	0x400e0400

00084ae4 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   84ae4:	4b03      	ldr	r3, [pc, #12]	; (84af4 <pmc_set_fast_startup_input+0x10>)
   84ae6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   84ae8:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   84aec:	4310      	orrs	r0, r2
   84aee:	6718      	str	r0, [r3, #112]	; 0x70
   84af0:	4770      	bx	lr
   84af2:	bf00      	nop
   84af4:	400e0400 	.word	0x400e0400

00084af8 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   84af8:	4b02      	ldr	r3, [pc, #8]	; (84b04 <pmc_is_wakeup_clocks_restored+0xc>)
   84afa:	7818      	ldrb	r0, [r3, #0]
}
   84afc:	f080 0001 	eor.w	r0, r0, #1
   84b00:	4770      	bx	lr
   84b02:	bf00      	nop
   84b04:	200022dc 	.word	0x200022dc

00084b08 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   84b08:	b508      	push	{r3, lr}
   84b0a:	2014      	movs	r0, #20
   84b0c:	4b01      	ldr	r3, [pc, #4]	; (84b14 <spi_enable_clock+0xc>)
   84b0e:	4798      	blx	r3
   84b10:	bd08      	pop	{r3, pc}
   84b12:	bf00      	nop
   84b14:	00084a69 	.word	0x00084a69

00084b18 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   84b18:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   84b1a:	2014      	movs	r0, #20
   84b1c:	4b01      	ldr	r3, [pc, #4]	; (84b24 <spi_disable_clock+0xc>)
   84b1e:	4798      	blx	r3
   84b20:	bd08      	pop	{r3, pc}
   84b22:	bf00      	nop
   84b24:	00084a9d 	.word	0x00084a9d

00084b28 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   84b28:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   84b2a:	f643 2399 	movw	r3, #15001	; 0x3a99
   84b2e:	6904      	ldr	r4, [r0, #16]
   84b30:	f014 0f01 	tst.w	r4, #1
   84b34:	d103      	bne.n	84b3e <spi_read+0x16>
		if (!timeout--) {
   84b36:	3b01      	subs	r3, #1
   84b38:	d1f9      	bne.n	84b2e <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   84b3a:	2001      	movs	r0, #1
   84b3c:	e009      	b.n	84b52 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   84b3e:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   84b40:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   84b42:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   84b46:	bf1c      	itt	ne
   84b48:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   84b4c:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   84b4e:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   84b50:	2000      	movs	r0, #0
}
   84b52:	bc10      	pop	{r4}
   84b54:	4770      	bx	lr

00084b56 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   84b56:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   84b58:	f643 2499 	movw	r4, #15001	; 0x3a99
   84b5c:	6905      	ldr	r5, [r0, #16]
   84b5e:	f015 0f02 	tst.w	r5, #2
   84b62:	d103      	bne.n	84b6c <spi_write+0x16>
		if (!timeout--) {
   84b64:	3c01      	subs	r4, #1
   84b66:	d1f9      	bne.n	84b5c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   84b68:	2001      	movs	r0, #1
   84b6a:	e00c      	b.n	84b86 <spi_write+0x30>
   84b6c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   84b6e:	f014 0f02 	tst.w	r4, #2
   84b72:	d006      	beq.n	84b82 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   84b74:	0412      	lsls	r2, r2, #16
   84b76:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   84b7a:	4311      	orrs	r1, r2
		if (uc_last) {
   84b7c:	b10b      	cbz	r3, 84b82 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   84b7e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   84b82:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   84b84:	2000      	movs	r0, #0
}
   84b86:	bc30      	pop	{r4, r5}
   84b88:	4770      	bx	lr

00084b8a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   84b8a:	b932      	cbnz	r2, 84b9a <spi_set_clock_polarity+0x10>
   84b8c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   84b90:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84b92:	f023 0301 	bic.w	r3, r3, #1
   84b96:	6303      	str	r3, [r0, #48]	; 0x30
   84b98:	4770      	bx	lr
   84b9a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   84b9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84ba0:	f043 0301 	orr.w	r3, r3, #1
   84ba4:	6303      	str	r3, [r0, #48]	; 0x30
   84ba6:	4770      	bx	lr

00084ba8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   84ba8:	b932      	cbnz	r2, 84bb8 <spi_set_clock_phase+0x10>
   84baa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   84bae:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84bb0:	f023 0302 	bic.w	r3, r3, #2
   84bb4:	6303      	str	r3, [r0, #48]	; 0x30
   84bb6:	4770      	bx	lr
   84bb8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   84bbc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84bbe:	f043 0302 	orr.w	r3, r3, #2
   84bc2:	6303      	str	r3, [r0, #48]	; 0x30
   84bc4:	4770      	bx	lr

00084bc6 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   84bc6:	1e43      	subs	r3, r0, #1
   84bc8:	4419      	add	r1, r3
   84bca:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   84bce:	1e43      	subs	r3, r0, #1
   84bd0:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   84bd2:	bf94      	ite	ls
   84bd4:	b200      	sxthls	r0, r0
		return -1;
   84bd6:	f04f 30ff 	movhi.w	r0, #4294967295
}
   84bda:	4770      	bx	lr

00084bdc <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   84bdc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   84be0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   84be6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   84be8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84bea:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   84bee:	630a      	str	r2, [r1, #48]	; 0x30
   84bf0:	4770      	bx	lr
	...

00084bf4 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   84bf4:	4603      	mov	r3, r0
   84bf6:	b9a8      	cbnz	r0, 84c24 <udd_sleep_mode+0x30>
   84bf8:	4a17      	ldr	r2, [pc, #92]	; (84c58 <udd_sleep_mode+0x64>)
   84bfa:	7812      	ldrb	r2, [r2, #0]
   84bfc:	b342      	cbz	r2, 84c50 <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84bfe:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   84c02:	b672      	cpsid	i
   84c04:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84c08:	4914      	ldr	r1, [pc, #80]	; (84c5c <udd_sleep_mode+0x68>)
   84c0a:	7008      	strb	r0, [r1, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   84c0c:	4814      	ldr	r0, [pc, #80]	; (84c60 <udd_sleep_mode+0x6c>)
   84c0e:	7881      	ldrb	r1, [r0, #2]
   84c10:	3901      	subs	r1, #1
   84c12:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84c14:	b9e2      	cbnz	r2, 84c50 <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   84c16:	2101      	movs	r1, #1
   84c18:	4a10      	ldr	r2, [pc, #64]	; (84c5c <udd_sleep_mode+0x68>)
   84c1a:	7011      	strb	r1, [r2, #0]
   84c1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84c20:	b662      	cpsie	i
   84c22:	e015      	b.n	84c50 <udd_sleep_mode+0x5c>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   84c24:	4a0c      	ldr	r2, [pc, #48]	; (84c58 <udd_sleep_mode+0x64>)
   84c26:	7812      	ldrb	r2, [r2, #0]
   84c28:	b992      	cbnz	r2, 84c50 <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84c2a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   84c2e:	b672      	cpsid	i
   84c30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84c34:	2000      	movs	r0, #0
   84c36:	4909      	ldr	r1, [pc, #36]	; (84c5c <udd_sleep_mode+0x68>)
   84c38:	7008      	strb	r0, [r1, #0]
	++sleepmgr_locks[mode];
   84c3a:	4809      	ldr	r0, [pc, #36]	; (84c60 <udd_sleep_mode+0x6c>)
   84c3c:	7881      	ldrb	r1, [r0, #2]
   84c3e:	3101      	adds	r1, #1
   84c40:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84c42:	b92a      	cbnz	r2, 84c50 <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   84c44:	2101      	movs	r1, #1
   84c46:	4a05      	ldr	r2, [pc, #20]	; (84c5c <udd_sleep_mode+0x68>)
   84c48:	7011      	strb	r1, [r2, #0]
   84c4a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84c4e:	b662      	cpsie	i
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   84c50:	4a01      	ldr	r2, [pc, #4]	; (84c58 <udd_sleep_mode+0x64>)
   84c52:	7013      	strb	r3, [r2, #0]
}
   84c54:	4770      	bx	lr
   84c56:	bf00      	nop
   84c58:	200022de 	.word	0x200022de
   84c5c:	20000b60 	.word	0x20000b60
   84c60:	20002868 	.word	0x20002868

00084c64 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84c64:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84c68:	b672      	cpsid	i
   84c6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84c6e:	2100      	movs	r1, #0
   84c70:	4a0d      	ldr	r2, [pc, #52]	; (84ca8 <udd_ctrl_init+0x44>)
   84c72:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   84c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84c78:	4a0c      	ldr	r2, [pc, #48]	; (84cac <udd_ctrl_init+0x48>)
   84c7a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   84c7e:	b92b      	cbnz	r3, 84c8c <udd_ctrl_init+0x28>
		cpu_irq_enable();
   84c80:	2201      	movs	r2, #1
   84c82:	4b09      	ldr	r3, [pc, #36]	; (84ca8 <udd_ctrl_init+0x44>)
   84c84:	701a      	strb	r2, [r3, #0]
   84c86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84c8a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   84c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
   84c90:	4b06      	ldr	r3, [pc, #24]	; (84cac <udd_ctrl_init+0x48>)
   84c92:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   84c96:	4a06      	ldr	r2, [pc, #24]	; (84cb0 <udd_ctrl_init+0x4c>)
   84c98:	2300      	movs	r3, #0
   84c9a:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84c9c:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   84c9e:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84ca0:	4a04      	ldr	r2, [pc, #16]	; (84cb4 <udd_ctrl_init+0x50>)
   84ca2:	7013      	strb	r3, [r2, #0]
   84ca4:	4770      	bx	lr
   84ca6:	bf00      	nop
   84ca8:	20000b60 	.word	0x20000b60
   84cac:	400a4000 	.word	0x400a4000
   84cb0:	2000287c 	.word	0x2000287c
   84cb4:	200022e4 	.word	0x200022e4

00084cb8 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84cb8:	2205      	movs	r2, #5
   84cba:	4b03      	ldr	r3, [pc, #12]	; (84cc8 <udd_ctrl_stall_data+0x10>)
   84cbc:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   84cbe:	2220      	movs	r2, #32
   84cc0:	4b02      	ldr	r3, [pc, #8]	; (84ccc <udd_ctrl_stall_data+0x14>)
   84cc2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84cc6:	4770      	bx	lr
   84cc8:	200022e4 	.word	0x200022e4
   84ccc:	400a4000 	.word	0x400a4000

00084cd0 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84cd0:	2203      	movs	r2, #3
   84cd2:	4b11      	ldr	r3, [pc, #68]	; (84d18 <udd_ctrl_send_zlp_in+0x48>)
   84cd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84cd6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   84cda:	b672      	cpsid	i
   84cdc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84ce0:	2100      	movs	r1, #0
   84ce2:	4b0e      	ldr	r3, [pc, #56]	; (84d1c <udd_ctrl_send_zlp_in+0x4c>)
   84ce4:	7019      	strb	r1, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   84ce6:	4b0e      	ldr	r3, [pc, #56]	; (84d20 <udd_ctrl_send_zlp_in+0x50>)
   84ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84cec:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84cf0:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84cf4:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84cf8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   84cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   84d00:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   84d04:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84d08:	b92a      	cbnz	r2, 84d16 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   84d0a:	2201      	movs	r2, #1
   84d0c:	4b03      	ldr	r3, [pc, #12]	; (84d1c <udd_ctrl_send_zlp_in+0x4c>)
   84d0e:	701a      	strb	r2, [r3, #0]
   84d10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84d14:	b662      	cpsie	i
   84d16:	4770      	bx	lr
   84d18:	200022e4 	.word	0x200022e4
   84d1c:	20000b60 	.word	0x20000b60
   84d20:	400a4000 	.word	0x400a4000

00084d24 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   84d24:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   84d26:	4b02      	ldr	r3, [pc, #8]	; (84d30 <udd_ctrl_endofrequest+0xc>)
   84d28:	691b      	ldr	r3, [r3, #16]
   84d2a:	b103      	cbz	r3, 84d2e <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   84d2c:	4798      	blx	r3
   84d2e:	bd08      	pop	{r3, pc}
   84d30:	2000287c 	.word	0x2000287c

00084d34 <udd_ctrl_in_sent>:
{
   84d34:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d36:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84d3a:	b672      	cpsid	i
   84d3c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84d40:	2100      	movs	r1, #0
   84d42:	4a4c      	ldr	r2, [pc, #304]	; (84e74 <udd_ctrl_in_sent+0x140>)
   84d44:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   84d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84d4a:	4a4b      	ldr	r2, [pc, #300]	; (84e78 <udd_ctrl_in_sent+0x144>)
   84d4c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   84d50:	b92b      	cbnz	r3, 84d5e <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   84d52:	2201      	movs	r2, #1
   84d54:	4b47      	ldr	r3, [pc, #284]	; (84e74 <udd_ctrl_in_sent+0x140>)
   84d56:	701a      	strb	r2, [r3, #0]
   84d58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84d5c:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84d5e:	4b47      	ldr	r3, [pc, #284]	; (84e7c <udd_ctrl_in_sent+0x148>)
   84d60:	781b      	ldrb	r3, [r3, #0]
   84d62:	2b03      	cmp	r3, #3
   84d64:	d057      	beq.n	84e16 <udd_ctrl_in_sent+0xe2>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84d66:	4b46      	ldr	r3, [pc, #280]	; (84e80 <udd_ctrl_in_sent+0x14c>)
   84d68:	881b      	ldrh	r3, [r3, #0]
   84d6a:	4a46      	ldr	r2, [pc, #280]	; (84e84 <udd_ctrl_in_sent+0x150>)
   84d6c:	8994      	ldrh	r4, [r2, #12]
   84d6e:	1ae4      	subs	r4, r4, r3
   84d70:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   84d72:	b9c4      	cbnz	r4, 84da6 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84d74:	4a44      	ldr	r2, [pc, #272]	; (84e88 <udd_ctrl_in_sent+0x154>)
   84d76:	8811      	ldrh	r1, [r2, #0]
   84d78:	440b      	add	r3, r1
   84d7a:	b29b      	uxth	r3, r3
   84d7c:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84d7e:	4a41      	ldr	r2, [pc, #260]	; (84e84 <udd_ctrl_in_sent+0x150>)
   84d80:	88d2      	ldrh	r2, [r2, #6]
   84d82:	429a      	cmp	r2, r3
   84d84:	d04c      	beq.n	84e20 <udd_ctrl_in_sent+0xec>
				|| b_shortpacket) {
   84d86:	4b41      	ldr	r3, [pc, #260]	; (84e8c <udd_ctrl_in_sent+0x158>)
   84d88:	781b      	ldrb	r3, [r3, #0]
   84d8a:	2b00      	cmp	r3, #0
   84d8c:	d148      	bne.n	84e20 <udd_ctrl_in_sent+0xec>
		if ((!udd_g_ctrlreq.over_under_run)
   84d8e:	4b3d      	ldr	r3, [pc, #244]	; (84e84 <udd_ctrl_in_sent+0x150>)
   84d90:	695b      	ldr	r3, [r3, #20]
   84d92:	2b00      	cmp	r3, #0
   84d94:	d05f      	beq.n	84e56 <udd_ctrl_in_sent+0x122>
				|| (!udd_g_ctrlreq.over_under_run())) {
   84d96:	4798      	blx	r3
   84d98:	2800      	cmp	r0, #0
   84d9a:	d05c      	beq.n	84e56 <udd_ctrl_in_sent+0x122>
			udd_ctrl_payload_buf_cnt = 0;
   84d9c:	2200      	movs	r2, #0
   84d9e:	4b38      	ldr	r3, [pc, #224]	; (84e80 <udd_ctrl_in_sent+0x14c>)
   84da0:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   84da2:	4b38      	ldr	r3, [pc, #224]	; (84e84 <udd_ctrl_in_sent+0x150>)
   84da4:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   84da6:	2c3f      	cmp	r4, #63	; 0x3f
   84da8:	d955      	bls.n	84e56 <udd_ctrl_in_sent+0x122>
		b_shortpacket = false;
   84daa:	2200      	movs	r2, #0
   84dac:	4b37      	ldr	r3, [pc, #220]	; (84e8c <udd_ctrl_in_sent+0x158>)
   84dae:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   84db0:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84db2:	4b34      	ldr	r3, [pc, #208]	; (84e84 <udd_ctrl_in_sent+0x150>)
   84db4:	689a      	ldr	r2, [r3, #8]
   84db6:	4b32      	ldr	r3, [pc, #200]	; (84e80 <udd_ctrl_in_sent+0x14c>)
   84db8:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84dba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   84dbe:	b672      	cpsid	i
   84dc0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84dc4:	2100      	movs	r1, #0
   84dc6:	4b2b      	ldr	r3, [pc, #172]	; (84e74 <udd_ctrl_in_sent+0x140>)
   84dc8:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   84dca:	4b2b      	ldr	r3, [pc, #172]	; (84e78 <udd_ctrl_in_sent+0x144>)
   84dcc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84dd0:	f413 7f00 	tst.w	r3, #512	; 0x200
   84dd4:	d143      	bne.n	84e5e <udd_ctrl_in_sent+0x12a>
	for (i = 0; i < nb_remain; i++) {
   84dd6:	b144      	cbz	r4, 84dea <udd_ctrl_in_sent+0xb6>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84dd8:	442a      	add	r2, r5
   84dda:	4b2d      	ldr	r3, [pc, #180]	; (84e90 <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   84ddc:	f812 1b01 	ldrb.w	r1, [r2], #1
   84de0:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
   84de4:	b2d9      	uxtb	r1, r3
   84de6:	42a1      	cmp	r1, r4
   84de8:	d3f8      	bcc.n	84ddc <udd_ctrl_in_sent+0xa8>
	udd_ctrl_payload_buf_cnt += nb_remain;
   84dea:	442c      	add	r4, r5
   84dec:	4b24      	ldr	r3, [pc, #144]	; (84e80 <udd_ctrl_in_sent+0x14c>)
   84dee:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   84df0:	4b21      	ldr	r3, [pc, #132]	; (84e78 <udd_ctrl_in_sent+0x144>)
   84df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84df6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84dfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
   84dfe:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84e02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84e06:	b928      	cbnz	r0, 84e14 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   84e08:	2201      	movs	r2, #1
   84e0a:	4b1a      	ldr	r3, [pc, #104]	; (84e74 <udd_ctrl_in_sent+0x140>)
   84e0c:	701a      	strb	r2, [r3, #0]
   84e0e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84e12:	b662      	cpsie	i
   84e14:	bd38      	pop	{r3, r4, r5, pc}
		udd_ctrl_endofrequest();
   84e16:	4b1f      	ldr	r3, [pc, #124]	; (84e94 <udd_ctrl_in_sent+0x160>)
   84e18:	4798      	blx	r3
		udd_ctrl_init();
   84e1a:	4b1f      	ldr	r3, [pc, #124]	; (84e98 <udd_ctrl_in_sent+0x164>)
   84e1c:	4798      	blx	r3
		return;
   84e1e:	bd38      	pop	{r3, r4, r5, pc}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84e20:	2204      	movs	r2, #4
   84e22:	4b16      	ldr	r3, [pc, #88]	; (84e7c <udd_ctrl_in_sent+0x148>)
   84e24:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84e26:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84e2a:	b672      	cpsid	i
   84e2c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e30:	2100      	movs	r1, #0
   84e32:	4a10      	ldr	r2, [pc, #64]	; (84e74 <udd_ctrl_in_sent+0x140>)
   84e34:	7011      	strb	r1, [r2, #0]
	udd_ack_nak_in(0);
   84e36:	4a10      	ldr	r2, [pc, #64]	; (84e78 <udd_ctrl_in_sent+0x144>)
   84e38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84e3c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   84e40:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84e44:	2b00      	cmp	r3, #0
   84e46:	d1e5      	bne.n	84e14 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   84e48:	2201      	movs	r2, #1
   84e4a:	4b0a      	ldr	r3, [pc, #40]	; (84e74 <udd_ctrl_in_sent+0x140>)
   84e4c:	701a      	strb	r2, [r3, #0]
   84e4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84e52:	b662      	cpsie	i
   84e54:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   84e56:	2201      	movs	r2, #1
   84e58:	4b0c      	ldr	r3, [pc, #48]	; (84e8c <udd_ctrl_in_sent+0x158>)
   84e5a:	701a      	strb	r2, [r3, #0]
   84e5c:	e7a9      	b.n	84db2 <udd_ctrl_in_sent+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
   84e5e:	b928      	cbnz	r0, 84e6c <udd_ctrl_in_sent+0x138>
		cpu_irq_enable();
   84e60:	2201      	movs	r2, #1
   84e62:	4b04      	ldr	r3, [pc, #16]	; (84e74 <udd_ctrl_in_sent+0x140>)
   84e64:	701a      	strb	r2, [r3, #0]
   84e66:	f3bf 8f5f 	dmb	sy
   84e6a:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84e6c:	2204      	movs	r2, #4
   84e6e:	4b03      	ldr	r3, [pc, #12]	; (84e7c <udd_ctrl_in_sent+0x148>)
   84e70:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   84e72:	bd38      	pop	{r3, r4, r5, pc}
   84e74:	20000b60 	.word	0x20000b60
   84e78:	400a4000 	.word	0x400a4000
   84e7c:	200022e4 	.word	0x200022e4
   84e80:	200022e0 	.word	0x200022e0
   84e84:	2000287c 	.word	0x2000287c
   84e88:	200022e2 	.word	0x200022e2
   84e8c:	200022dd 	.word	0x200022dd
   84e90:	20180000 	.word	0x20180000
   84e94:	00084d25 	.word	0x00084d25
   84e98:	00084c65 	.word	0x00084c65

00084e9c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   84e9c:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
   84e9e:	7d03      	ldrb	r3, [r0, #20]
   84ea0:	f013 0f01 	tst.w	r3, #1
   84ea4:	d013      	beq.n	84ece <udd_ep_finish_job+0x32>
   84ea6:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
   84ea8:	7d03      	ldrb	r3, [r0, #20]
   84eaa:	f36f 0300 	bfc	r3, #0, #1
   84eae:	7503      	strb	r3, [r0, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   84eb0:	6804      	ldr	r4, [r0, #0]
   84eb2:	b164      	cbz	r4, 84ece <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   84eb4:	f102 0308 	add.w	r3, r2, #8
   84eb8:	015b      	lsls	r3, r3, #5
   84eba:	4905      	ldr	r1, [pc, #20]	; (84ed0 <udd_ep_finish_job+0x34>)
   84ebc:	58cb      	ldr	r3, [r1, r3]
   84ebe:	f013 0f08 	tst.w	r3, #8
		ep_num |= USB_EP_DIR_IN;
   84ec2:	bf18      	it	ne
   84ec4:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84ec8:	6881      	ldr	r1, [r0, #8]
   84eca:	4628      	mov	r0, r5
   84ecc:	47a0      	blx	r4
   84ece:	bd38      	pop	{r3, r4, r5, pc}
   84ed0:	400a4000 	.word	0x400a4000

00084ed4 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   84ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   84ed6:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   84ed8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84edc:	4a59      	ldr	r2, [pc, #356]	; (85044 <udd_ep_trans_done+0x170>)
   84ede:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   84ee2:	7d12      	ldrb	r2, [r2, #20]
   84ee4:	f012 0f01 	tst.w	r2, #1
   84ee8:	f000 809e 	beq.w	85028 <udd_ep_trans_done+0x154>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   84eec:	460a      	mov	r2, r1
   84eee:	4955      	ldr	r1, [pc, #340]	; (85044 <udd_ep_trans_done+0x170>)
   84ef0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   84ef4:	68d4      	ldr	r4, [r2, #12]
   84ef6:	6892      	ldr	r2, [r2, #8]
   84ef8:	4294      	cmp	r4, r2
   84efa:	d079      	beq.n	84ff0 <udd_ep_trans_done+0x11c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   84efc:	1b12      	subs	r2, r2, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   84efe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   84f02:	bf92      	itee	ls
   84f04:	0417      	lslls	r7, r2, #16
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84f06:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   84f0a:	2700      	movhi	r7, #0
   84f0c:	0141      	lsls	r1, r0, #5
   84f0e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   84f12:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
		}
		if (Is_udd_endpoint_in(ep)) {
   84f16:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   84f1a:	f015 0f08 	tst.w	r5, #8
   84f1e:	d014      	beq.n	84f4a <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   84f20:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   84f24:	f005 0507 	and.w	r5, r5, #7
   84f28:	2108      	movs	r1, #8
   84f2a:	40a9      	lsls	r1, r5
   84f2c:	3901      	subs	r1, #1
   84f2e:	4211      	tst	r1, r2
   84f30:	d013      	beq.n	84f5a <udd_ep_trans_done+0x86>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   84f32:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   84f36:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84f3a:	4d42      	ldr	r5, [pc, #264]	; (85044 <udd_ep_trans_done+0x170>)
   84f3c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   84f40:	7d0d      	ldrb	r5, [r1, #20]
   84f42:	f36f 0541 	bfc	r5, #1, #1
   84f46:	750d      	strb	r5, [r1, #20]
   84f48:	e007      	b.n	84f5a <udd_ep_trans_done+0x86>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84f4a:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   84f4e:	f3c5 1501 	ubfx	r5, r5, #4, #2
   84f52:	2d01      	cmp	r5, #1
   84f54:	d035      	beq.n	84fc2 <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   84f56:	f047 0714 	orr.w	r7, r7, #20
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   84f5a:	493b      	ldr	r1, [pc, #236]	; (85048 <udd_ep_trans_done+0x174>)
   84f5c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   84f60:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   84f64:	4e37      	ldr	r6, [pc, #220]	; (85044 <udd_ep_trans_done+0x170>)
   84f66:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   84f6a:	686d      	ldr	r5, [r5, #4]
   84f6c:	442c      	add	r4, r5
   84f6e:	604c      	str	r4, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84f70:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   84f74:	b672      	cpsid	i
   84f76:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84f7a:	2600      	movs	r6, #0
   84f7c:	4c33      	ldr	r4, [pc, #204]	; (8504c <udd_ep_trans_done+0x178>)
   84f7e:	7026      	strb	r6, [r4, #0]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   84f80:	68cc      	ldr	r4, [r1, #12]
   84f82:	f014 0f10 	tst.w	r4, #16
   84f86:	d125      	bne.n	84fd4 <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   84f88:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   84f8c:	608f      	str	r7, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   84f8e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   84f92:	492c      	ldr	r1, [pc, #176]	; (85044 <udd_ep_trans_done+0x170>)
   84f94:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   84f98:	68c8      	ldr	r0, [r1, #12]
   84f9a:	4410      	add	r0, r2
   84f9c:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   84f9e:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   84fa0:	4a2b      	ldr	r2, [pc, #172]	; (85050 <udd_ep_trans_done+0x17c>)
   84fa2:	6911      	ldr	r1, [r2, #16]
   84fa4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   84fa8:	fa00 f303 	lsl.w	r3, r0, r3
   84fac:	430b      	orrs	r3, r1
   84fae:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84fb0:	2d00      	cmp	r5, #0
   84fb2:	d139      	bne.n	85028 <udd_ep_trans_done+0x154>
		cpu_irq_enable();
   84fb4:	2201      	movs	r2, #1
   84fb6:	4b25      	ldr	r3, [pc, #148]	; (8504c <udd_ep_trans_done+0x178>)
   84fb8:	701a      	strb	r2, [r3, #0]
   84fba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84fbe:	b662      	cpsie	i
   84fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84fc2:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   84fc6:	f005 0507 	and.w	r5, r5, #7
   84fca:	2108      	movs	r1, #8
   84fcc:	40a9      	lsls	r1, r5
   84fce:	428a      	cmp	r2, r1
   84fd0:	d8c3      	bhi.n	84f5a <udd_ep_trans_done+0x86>
   84fd2:	e7c0      	b.n	84f56 <udd_ep_trans_done+0x82>
	if (cpu_irq_is_enabled_flags(flags))
   84fd4:	b92d      	cbnz	r5, 84fe2 <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
   84fd6:	2101      	movs	r1, #1
   84fd8:	4a1c      	ldr	r2, [pc, #112]	; (8504c <udd_ep_trans_done+0x178>)
   84fda:	7011      	strb	r1, [r2, #0]
   84fdc:	f3bf 8f5f 	dmb	sy
   84fe0:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   84fe2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84fe6:	4917      	ldr	r1, [pc, #92]	; (85044 <udd_ep_trans_done+0x170>)
   84fe8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   84fec:	68d1      	ldr	r1, [r2, #12]
   84fee:	6091      	str	r1, [r2, #8]
   84ff0:	0142      	lsls	r2, r0, #5
   84ff2:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84ff6:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
	}
	if (Is_udd_endpoint_in(ep)) {
   84ffa:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   84ffe:	f011 0f08 	tst.w	r1, #8
   85002:	d008      	beq.n	85016 <udd_ep_trans_done+0x142>
		if (ptr_job->b_shortpacket) {
   85004:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85008:	4c0e      	ldr	r4, [pc, #56]	; (85044 <udd_ep_trans_done+0x170>)
   8500a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   8500e:	7d09      	ldrb	r1, [r1, #20]
   85010:	f011 0f02 	tst.w	r1, #2
   85014:	d109      	bne.n	8502a <udd_ep_trans_done+0x156>
   85016:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
   85018:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			udd_enable_endpoint_interrupt(ep);
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   8501c:	2100      	movs	r1, #0
   8501e:	4809      	ldr	r0, [pc, #36]	; (85044 <udd_ep_trans_done+0x170>)
   85020:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   85024:	4b0b      	ldr	r3, [pc, #44]	; (85054 <udd_ep_trans_done+0x180>)
   85026:	4798      	blx	r3
   85028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			udd_enable_tx_pkt_ready_interrupt(ep);
   8502a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8502e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   85032:	4b07      	ldr	r3, [pc, #28]	; (85050 <udd_ep_trans_done+0x17c>)
   85034:	6919      	ldr	r1, [r3, #16]
   85036:	f44f 7280 	mov.w	r2, #256	; 0x100
   8503a:	fa02 f000 	lsl.w	r0, r2, r0
   8503e:	4308      	orrs	r0, r1
   85040:	6118      	str	r0, [r3, #16]
			return;
   85042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85044:	200022e8 	.word	0x200022e8
   85048:	400a4300 	.word	0x400a4300
   8504c:	20000b60 	.word	0x20000b60
   85050:	400a4000 	.word	0x400a4000
   85054:	00084e9d 	.word	0x00084e9d

00085058 <UDPHS_Handler>:
{
   85058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   8505c:	201d      	movs	r0, #29
   8505e:	4ba6      	ldr	r3, [pc, #664]	; (852f8 <UDPHS_Handler+0x2a0>)
   85060:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   85062:	4ba6      	ldr	r3, [pc, #664]	; (852fc <UDPHS_Handler+0x2a4>)
   85064:	4798      	blx	r3
   85066:	b920      	cbnz	r0, 85072 <UDPHS_Handler+0x1a>
   85068:	4ba5      	ldr	r3, [pc, #660]	; (85300 <UDPHS_Handler+0x2a8>)
   8506a:	695b      	ldr	r3, [r3, #20]
   8506c:	f013 0f02 	tst.w	r3, #2
   85070:	d00f      	beq.n	85092 <UDPHS_Handler+0x3a>
	if (Is_udd_sof()) {
   85072:	4ba3      	ldr	r3, [pc, #652]	; (85300 <UDPHS_Handler+0x2a8>)
   85074:	695b      	ldr	r3, [r3, #20]
   85076:	f013 0f08 	tst.w	r3, #8
   8507a:	d015      	beq.n	850a8 <UDPHS_Handler+0x50>
		udd_ack_sof();
   8507c:	4ba0      	ldr	r3, [pc, #640]	; (85300 <UDPHS_Handler+0x2a8>)
   8507e:	2208      	movs	r2, #8
   85080:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   85082:	695b      	ldr	r3, [r3, #20]
   85084:	f013 0f01 	tst.w	r3, #1
   85088:	d00b      	beq.n	850a2 <UDPHS_Handler+0x4a>
		UDC_SOF_EVENT();
   8508a:	4b9e      	ldr	r3, [pc, #632]	; (85304 <UDPHS_Handler+0x2ac>)
   8508c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8508e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("cpsid i");
   85092:	b672      	cpsid	i
   85094:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   85098:	2200      	movs	r2, #0
   8509a:	4b9b      	ldr	r3, [pc, #620]	; (85308 <UDPHS_Handler+0x2b0>)
   8509c:	701a      	strb	r2, [r3, #0]
		return;
   8509e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   850a2:	4b9a      	ldr	r3, [pc, #616]	; (8530c <UDPHS_Handler+0x2b4>)
   850a4:	4798      	blx	r3
   850a6:	e7f0      	b.n	8508a <UDPHS_Handler+0x32>
	if (Is_udd_msof()) {
   850a8:	4b95      	ldr	r3, [pc, #596]	; (85300 <UDPHS_Handler+0x2a8>)
   850aa:	695b      	ldr	r3, [r3, #20]
   850ac:	f013 0f04 	tst.w	r3, #4
   850b0:	d137      	bne.n	85122 <UDPHS_Handler+0xca>
	uint32_t status = udd_get_endpoint_status(0);
   850b2:	4a93      	ldr	r2, [pc, #588]	; (85300 <UDPHS_Handler+0x2a8>)
   850b4:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   850b8:	6952      	ldr	r2, [r2, #20]
   850ba:	f412 7f80 	tst.w	r2, #256	; 0x100
   850be:	d029      	beq.n	85114 <UDPHS_Handler+0xbc>
	udd_disable_nak_in_interrupt(0);
   850c0:	4a8f      	ldr	r2, [pc, #572]	; (85300 <UDPHS_Handler+0x2a8>)
   850c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   850c6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   850ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   850ce:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   850d2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   850d6:	d12b      	bne.n	85130 <UDPHS_Handler+0xd8>
	if (Is_udd_endpoint_status_in_sent(status)
   850d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
   850dc:	d006      	beq.n	850ec <UDPHS_Handler+0x94>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   850de:	4a88      	ldr	r2, [pc, #544]	; (85300 <UDPHS_Handler+0x2a8>)
   850e0:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   850e4:	f412 6f80 	tst.w	r2, #1024	; 0x400
   850e8:	f040 808f 	bne.w	8520a <UDPHS_Handler+0x1b2>
	if (Is_udd_endpoint_status_out_received(status)) {
   850ec:	f413 7f00 	tst.w	r3, #512	; 0x200
   850f0:	f040 808f 	bne.w	85212 <UDPHS_Handler+0x1ba>
	if (Is_udd_endpoint_status_stall(status)) {
   850f4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   850f8:	d004      	beq.n	85104 <UDPHS_Handler+0xac>
		udd_ack_stall(0);
   850fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   850fe:	4a80      	ldr	r2, [pc, #512]	; (85300 <UDPHS_Handler+0x2a8>)
   85100:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   85104:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   85108:	f040 813c 	bne.w	85384 <UDPHS_Handler+0x32c>
	if (Is_udd_endpoint_status_nak_in(status)) {
   8510c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   85110:	f040 814e 	bne.w	853b0 <UDPHS_Handler+0x358>
	for (i = 0; i < nb_data; i++) {
   85114:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85116:	497a      	ldr	r1, [pc, #488]	; (85300 <UDPHS_Handler+0x2a8>)
   85118:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8511c:	f44f 7c80 	mov.w	ip, #256	; 0x100
   85120:	e199      	b.n	85456 <UDPHS_Handler+0x3fe>
		udd_ack_msof();
   85122:	2204      	movs	r2, #4
   85124:	4b76      	ldr	r3, [pc, #472]	; (85300 <UDPHS_Handler+0x2a8>)
   85126:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   85128:	4b78      	ldr	r3, [pc, #480]	; (8530c <UDPHS_Handler+0x2b4>)
   8512a:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8512c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85130:	4b77      	ldr	r3, [pc, #476]	; (85310 <UDPHS_Handler+0x2b8>)
   85132:	781b      	ldrb	r3, [r3, #0]
   85134:	2b00      	cmp	r3, #0
   85136:	d141      	bne.n	851bc <UDPHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
   85138:	4b71      	ldr	r3, [pc, #452]	; (85300 <UDPHS_Handler+0x2a8>)
   8513a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8513e:	f3c3 530a 	ubfx	r3, r3, #20, #11
   85142:	2b08      	cmp	r3, #8
   85144:	d13f      	bne.n	851c6 <UDPHS_Handler+0x16e>
   85146:	4a73      	ldr	r2, [pc, #460]	; (85314 <UDPHS_Handler+0x2bc>)
   85148:	4b73      	ldr	r3, [pc, #460]	; (85318 <UDPHS_Handler+0x2c0>)
	for (i = 0; i < 8; i++) {
   8514a:	4874      	ldr	r0, [pc, #464]	; (8531c <UDPHS_Handler+0x2c4>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   8514c:	f813 1b01 	ldrb.w	r1, [r3], #1
   85150:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   85154:	4283      	cmp	r3, r0
   85156:	d1f9      	bne.n	8514c <UDPHS_Handler+0xf4>
	if (udc_process_setup() == false) {
   85158:	4b71      	ldr	r3, [pc, #452]	; (85320 <UDPHS_Handler+0x2c8>)
   8515a:	4798      	blx	r3
   8515c:	2800      	cmp	r0, #0
   8515e:	d03b      	beq.n	851d8 <UDPHS_Handler+0x180>
	udd_ack_setup_received(0);
   85160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85164:	4b66      	ldr	r3, [pc, #408]	; (85300 <UDPHS_Handler+0x2a8>)
   85166:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   8516a:	4b6e      	ldr	r3, [pc, #440]	; (85324 <UDPHS_Handler+0x2cc>)
   8516c:	f993 3000 	ldrsb.w	r3, [r3]
   85170:	2b00      	cmp	r3, #0
   85172:	db3a      	blt.n	851ea <UDPHS_Handler+0x192>
		if (0 == udd_g_ctrlreq.req.wLength) {
   85174:	4b6b      	ldr	r3, [pc, #428]	; (85324 <UDPHS_Handler+0x2cc>)
   85176:	88db      	ldrh	r3, [r3, #6]
   85178:	2b00      	cmp	r3, #0
   8517a:	d042      	beq.n	85202 <UDPHS_Handler+0x1aa>
		udd_ctrl_prev_payload_buf_cnt = 0;
   8517c:	2200      	movs	r2, #0
   8517e:	4b6a      	ldr	r3, [pc, #424]	; (85328 <UDPHS_Handler+0x2d0>)
   85180:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85182:	4b6a      	ldr	r3, [pc, #424]	; (8532c <UDPHS_Handler+0x2d4>)
   85184:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85186:	2101      	movs	r1, #1
   85188:	4b61      	ldr	r3, [pc, #388]	; (85310 <UDPHS_Handler+0x2b8>)
   8518a:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
   8518c:	495c      	ldr	r1, [pc, #368]	; (85300 <UDPHS_Handler+0x2a8>)
   8518e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   85192:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85196:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   8519a:	b672      	cpsid	i
   8519c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   851a0:	4c59      	ldr	r4, [pc, #356]	; (85308 <UDPHS_Handler+0x2b0>)
   851a2:	7022      	strb	r2, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   851a4:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   851a8:	2b00      	cmp	r3, #0
   851aa:	f040 8266 	bne.w	8567a <UDPHS_Handler+0x622>
		cpu_irq_enable();
   851ae:	2201      	movs	r2, #1
   851b0:	7022      	strb	r2, [r4, #0]
   851b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   851b6:	b662      	cpsie	i
   851b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_endofrequest();
   851bc:	4b5c      	ldr	r3, [pc, #368]	; (85330 <UDPHS_Handler+0x2d8>)
   851be:	4798      	blx	r3
		udd_ctrl_init();
   851c0:	4b5c      	ldr	r3, [pc, #368]	; (85334 <UDPHS_Handler+0x2dc>)
   851c2:	4798      	blx	r3
   851c4:	e7b8      	b.n	85138 <UDPHS_Handler+0xe0>
		udd_ctrl_stall_data();
   851c6:	4b5c      	ldr	r3, [pc, #368]	; (85338 <UDPHS_Handler+0x2e0>)
   851c8:	4798      	blx	r3
		udd_ack_setup_received(0);
   851ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   851ce:	4b4c      	ldr	r3, [pc, #304]	; (85300 <UDPHS_Handler+0x2a8>)
   851d0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   851d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_stall_data();
   851d8:	4b57      	ldr	r3, [pc, #348]	; (85338 <UDPHS_Handler+0x2e0>)
   851da:	4798      	blx	r3
		udd_ack_setup_received(0);
   851dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   851e0:	4b47      	ldr	r3, [pc, #284]	; (85300 <UDPHS_Handler+0x2a8>)
   851e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   851e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_prev_payload_buf_cnt = 0;
   851ea:	2300      	movs	r3, #0
   851ec:	4a4e      	ldr	r2, [pc, #312]	; (85328 <UDPHS_Handler+0x2d0>)
   851ee:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   851f0:	4a4e      	ldr	r2, [pc, #312]	; (8532c <UDPHS_Handler+0x2d4>)
   851f2:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   851f4:	2202      	movs	r2, #2
   851f6:	4b46      	ldr	r3, [pc, #280]	; (85310 <UDPHS_Handler+0x2b8>)
   851f8:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   851fa:	4b50      	ldr	r3, [pc, #320]	; (8533c <UDPHS_Handler+0x2e4>)
   851fc:	4798      	blx	r3
   851fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_send_zlp_in();
   85202:	4b4f      	ldr	r3, [pc, #316]	; (85340 <UDPHS_Handler+0x2e8>)
   85204:	4798      	blx	r3
   85206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_in_sent();
   8520a:	4b4c      	ldr	r3, [pc, #304]	; (8533c <UDPHS_Handler+0x2e4>)
   8520c:	4798      	blx	r3
   8520e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   85212:	4b3f      	ldr	r3, [pc, #252]	; (85310 <UDPHS_Handler+0x2b8>)
   85214:	781b      	ldrb	r3, [r3, #0]
   85216:	2b01      	cmp	r3, #1
   85218:	d00c      	beq.n	85234 <UDPHS_Handler+0x1dc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8521a:	2b02      	cmp	r3, #2
   8521c:	d004      	beq.n	85228 <UDPHS_Handler+0x1d0>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8521e:	2b04      	cmp	r3, #4
   85220:	d002      	beq.n	85228 <UDPHS_Handler+0x1d0>
			udd_ctrl_stall_data();
   85222:	4b45      	ldr	r3, [pc, #276]	; (85338 <UDPHS_Handler+0x2e0>)
   85224:	4798      	blx	r3
   85226:	e001      	b.n	8522c <UDPHS_Handler+0x1d4>
			udd_ctrl_endofrequest();
   85228:	4b41      	ldr	r3, [pc, #260]	; (85330 <UDPHS_Handler+0x2d8>)
   8522a:	4798      	blx	r3
		udd_ctrl_init();
   8522c:	4b41      	ldr	r3, [pc, #260]	; (85334 <UDPHS_Handler+0x2dc>)
   8522e:	4798      	blx	r3
   85230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nb_data = udd_byte_count(0);
   85234:	4b32      	ldr	r3, [pc, #200]	; (85300 <UDPHS_Handler+0x2a8>)
   85236:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   8523a:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   8523e:	4b39      	ldr	r3, [pc, #228]	; (85324 <UDPHS_Handler+0x2cc>)
   85240:	899b      	ldrh	r3, [r3, #12]
   85242:	4a3a      	ldr	r2, [pc, #232]	; (8532c <UDPHS_Handler+0x2d4>)
   85244:	8814      	ldrh	r4, [r2, #0]
   85246:	1822      	adds	r2, r4, r0
   85248:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8524a:	bfbc      	itt	lt
   8524c:	1b1b      	sublt	r3, r3, r4
   8524e:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85250:	4b34      	ldr	r3, [pc, #208]	; (85324 <UDPHS_Handler+0x2cc>)
   85252:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   85254:	b178      	cbz	r0, 85276 <UDPHS_Handler+0x21e>
   85256:	1e63      	subs	r3, r4, #1
   85258:	441a      	add	r2, r3
   8525a:	4b2f      	ldr	r3, [pc, #188]	; (85318 <UDPHS_Handler+0x2c0>)
		*ptr_dest++ = *ptr_src++;
   8525c:	f813 1b01 	ldrb.w	r1, [r3], #1
   85260:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
   85264:	b2d9      	uxtb	r1, r3
   85266:	4281      	cmp	r1, r0
   85268:	d3f8      	bcc.n	8525c <UDPHS_Handler+0x204>
	udd_ctrl_payload_buf_cnt += nb_data;
   8526a:	4404      	add	r4, r0
   8526c:	b2a4      	uxth	r4, r4
   8526e:	4b2f      	ldr	r3, [pc, #188]	; (8532c <UDPHS_Handler+0x2d4>)
   85270:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85272:	2840      	cmp	r0, #64	; 0x40
   85274:	d00e      	beq.n	85294 <UDPHS_Handler+0x23c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85276:	4b2b      	ldr	r3, [pc, #172]	; (85324 <UDPHS_Handler+0x2cc>)
   85278:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8527a:	695b      	ldr	r3, [r3, #20]
   8527c:	b10b      	cbz	r3, 85282 <UDPHS_Handler+0x22a>
			if (!udd_g_ctrlreq.over_under_run()) {
   8527e:	4798      	blx	r3
   85280:	b380      	cbz	r0, 852e4 <UDPHS_Handler+0x28c>
		udd_ack_out_received(0);
   85282:	f44f 7200 	mov.w	r2, #512	; 0x200
   85286:	4b1e      	ldr	r3, [pc, #120]	; (85300 <UDPHS_Handler+0x2a8>)
   85288:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   8528c:	4b2c      	ldr	r3, [pc, #176]	; (85340 <UDPHS_Handler+0x2e8>)
   8528e:	4798      	blx	r3
   85290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (udd_g_ctrlreq.req.wLength <=
   85294:	4b23      	ldr	r3, [pc, #140]	; (85324 <UDPHS_Handler+0x2cc>)
   85296:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   85298:	4b23      	ldr	r3, [pc, #140]	; (85328 <UDPHS_Handler+0x2d0>)
   8529a:	881b      	ldrh	r3, [r3, #0]
   8529c:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   8529e:	429a      	cmp	r2, r3
   852a0:	dde9      	ble.n	85276 <UDPHS_Handler+0x21e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   852a2:	4b20      	ldr	r3, [pc, #128]	; (85324 <UDPHS_Handler+0x2cc>)
   852a4:	899b      	ldrh	r3, [r3, #12]
   852a6:	42a3      	cmp	r3, r4
   852a8:	d04c      	beq.n	85344 <UDPHS_Handler+0x2ec>
	udd_ack_out_received(0);
   852aa:	4a15      	ldr	r2, [pc, #84]	; (85300 <UDPHS_Handler+0x2a8>)
   852ac:	f44f 7300 	mov.w	r3, #512	; 0x200
   852b0:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	udd_ack_nak_in(0);
   852b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   852b8:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   852bc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   852c0:	b672      	cpsid	i
   852c2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   852c6:	2400      	movs	r4, #0
   852c8:	480f      	ldr	r0, [pc, #60]	; (85308 <UDPHS_Handler+0x2b0>)
   852ca:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   852cc:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   852d0:	2b00      	cmp	r3, #0
   852d2:	f040 81d2 	bne.w	8567a <UDPHS_Handler+0x622>
		cpu_irq_enable();
   852d6:	2201      	movs	r2, #1
   852d8:	7002      	strb	r2, [r0, #0]
   852da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   852de:	b662      	cpsie	i
   852e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				udd_ctrl_stall_data();
   852e4:	4b14      	ldr	r3, [pc, #80]	; (85338 <UDPHS_Handler+0x2e0>)
   852e6:	4798      	blx	r3
				udd_ack_out_received(0);
   852e8:	f44f 7200 	mov.w	r2, #512	; 0x200
   852ec:	4b04      	ldr	r3, [pc, #16]	; (85300 <UDPHS_Handler+0x2a8>)
   852ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   852f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   852f6:	bf00      	nop
   852f8:	00084a69 	.word	0x00084a69
   852fc:	00084af9 	.word	0x00084af9
   85300:	400a4000 	.word	0x400a4000
   85304:	00081371 	.word	0x00081371
   85308:	20000b60 	.word	0x20000b60
   8530c:	00082c95 	.word	0x00082c95
   85310:	200022e4 	.word	0x200022e4
   85314:	2000287b 	.word	0x2000287b
   85318:	20180000 	.word	0x20180000
   8531c:	20180008 	.word	0x20180008
   85320:	00082cd5 	.word	0x00082cd5
   85324:	2000287c 	.word	0x2000287c
   85328:	200022e2 	.word	0x200022e2
   8532c:	200022e0 	.word	0x200022e0
   85330:	00084d25 	.word	0x00084d25
   85334:	00084c65 	.word	0x00084c65
   85338:	00084cb9 	.word	0x00084cb9
   8533c:	00084d35 	.word	0x00084d35
   85340:	00084cd1 	.word	0x00084cd1
		if (!udd_g_ctrlreq.over_under_run) {
   85344:	4bb0      	ldr	r3, [pc, #704]	; (85608 <UDPHS_Handler+0x5b0>)
   85346:	695b      	ldr	r3, [r3, #20]
   85348:	b153      	cbz	r3, 85360 <UDPHS_Handler+0x308>
		if (!udd_g_ctrlreq.over_under_run()) {
   8534a:	4798      	blx	r3
   8534c:	b188      	cbz	r0, 85372 <UDPHS_Handler+0x31a>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8534e:	49af      	ldr	r1, [pc, #700]	; (8560c <UDPHS_Handler+0x5b4>)
   85350:	4aaf      	ldr	r2, [pc, #700]	; (85610 <UDPHS_Handler+0x5b8>)
   85352:	880b      	ldrh	r3, [r1, #0]
   85354:	8810      	ldrh	r0, [r2, #0]
   85356:	4403      	add	r3, r0
   85358:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8535a:	2300      	movs	r3, #0
   8535c:	8013      	strh	r3, [r2, #0]
   8535e:	e7a4      	b.n	852aa <UDPHS_Handler+0x252>
			udd_ctrl_stall_data();
   85360:	4bac      	ldr	r3, [pc, #688]	; (85614 <UDPHS_Handler+0x5bc>)
   85362:	4798      	blx	r3
			udd_ack_out_received(0);
   85364:	f44f 7200 	mov.w	r2, #512	; 0x200
   85368:	4bab      	ldr	r3, [pc, #684]	; (85618 <UDPHS_Handler+0x5c0>)
   8536a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   8536e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_stall_data();
   85372:	4ba8      	ldr	r3, [pc, #672]	; (85614 <UDPHS_Handler+0x5bc>)
   85374:	4798      	blx	r3
			udd_ack_out_received(0);
   85376:	f44f 7200 	mov.w	r2, #512	; 0x200
   8537a:	4ba7      	ldr	r3, [pc, #668]	; (85618 <UDPHS_Handler+0x5c0>)
   8537c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_out(0);
   85384:	4ba4      	ldr	r3, [pc, #656]	; (85618 <UDPHS_Handler+0x5c0>)
   85386:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8538a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   8538e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85392:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85396:	f040 8170 	bne.w	8567a <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8539a:	4ba0      	ldr	r3, [pc, #640]	; (8561c <UDPHS_Handler+0x5c4>)
   8539c:	781b      	ldrb	r3, [r3, #0]
   8539e:	2b03      	cmp	r3, #3
   853a0:	f040 816b 	bne.w	8567a <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   853a4:	2220      	movs	r2, #32
   853a6:	4b9c      	ldr	r3, [pc, #624]	; (85618 <UDPHS_Handler+0x5c0>)
   853a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   853ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_in(0);
   853b0:	4b99      	ldr	r3, [pc, #612]	; (85618 <UDPHS_Handler+0x5c0>)
   853b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   853b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   853ba:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   853be:	f413 7f00 	tst.w	r3, #512	; 0x200
   853c2:	f040 815a 	bne.w	8567a <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   853c6:	4b95      	ldr	r3, [pc, #596]	; (8561c <UDPHS_Handler+0x5c4>)
   853c8:	781b      	ldrb	r3, [r3, #0]
   853ca:	2b01      	cmp	r3, #1
   853cc:	d008      	beq.n	853e0 <UDPHS_Handler+0x388>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   853ce:	2b04      	cmp	r3, #4
   853d0:	f040 8153 	bne.w	8567a <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   853d4:	2220      	movs	r2, #32
   853d6:	4b90      	ldr	r3, [pc, #576]	; (85618 <UDPHS_Handler+0x5c0>)
   853d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   853dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_send_zlp_in();
   853e0:	4b8f      	ldr	r3, [pc, #572]	; (85620 <UDPHS_Handler+0x5c8>)
   853e2:	4798      	blx	r3
   853e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (udd_endpoint_dma_get_status(ep)
   853e8:	4b8e      	ldr	r3, [pc, #568]	; (85624 <UDPHS_Handler+0x5cc>)
   853ea:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   853ee:	68da      	ldr	r2, [r3, #12]
   853f0:	f012 0f01 	tst.w	r2, #1
   853f4:	f040 8141 	bne.w	8567a <UDPHS_Handler+0x622>
			udd_disable_endpoint_dma_interrupt(ep);
   853f8:	4987      	ldr	r1, [pc, #540]	; (85618 <UDPHS_Handler+0x5c0>)
   853fa:	690a      	ldr	r2, [r1, #16]
   853fc:	ea22 0606 	bic.w	r6, r2, r6
   85400:	610e      	str	r6, [r1, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   85402:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   85404:	0c1b      	lsrs	r3, r3, #16
   85406:	d008      	beq.n	8541a <UDPHS_Handler+0x3c2>
				ptr_job->buf_cnt -= nb_remaining;
   85408:	4a87      	ldr	r2, [pc, #540]	; (85628 <UDPHS_Handler+0x5d0>)
   8540a:	006c      	lsls	r4, r5, #1
   8540c:	1965      	adds	r5, r4, r5
   8540e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   85412:	68e9      	ldr	r1, [r5, #12]
   85414:	1acb      	subs	r3, r1, r3
   85416:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   85418:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
   8541a:	4b84      	ldr	r3, [pc, #528]	; (8562c <UDPHS_Handler+0x5d4>)
   8541c:	4798      	blx	r3
   8541e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   85422:	0163      	lsls	r3, r4, #5
   85424:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85428:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8542c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85430:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   85434:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   85438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   8543c:	4602      	mov	r2, r0
   8543e:	2100      	movs	r1, #0
   85440:	4879      	ldr	r0, [pc, #484]	; (85628 <UDPHS_Handler+0x5d0>)
   85442:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   85446:	4b7a      	ldr	r3, [pc, #488]	; (85630 <UDPHS_Handler+0x5d8>)
   85448:	4798      	blx	r3
   8544a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8544e:	3301      	adds	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85450:	2b07      	cmp	r3, #7
   85452:	f000 80fd 	beq.w	85650 <UDPHS_Handler+0x5f8>
   85456:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
   85458:	461c      	mov	r4, r3
   8545a:	1e5d      	subs	r5, r3, #1
   8545c:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8545e:	690f      	ldr	r7, [r1, #16]
   85460:	fa0e f605 	lsl.w	r6, lr, r5
   85464:	4237      	tst	r7, r6
   85466:	d002      	beq.n	8546e <UDPHS_Handler+0x416>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   85468:	694a      	ldr	r2, [r1, #20]
   8546a:	4216      	tst	r6, r2
   8546c:	d1bc      	bne.n	853e8 <UDPHS_Handler+0x390>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8546e:	690f      	ldr	r7, [r1, #16]
   85470:	fa0c f604 	lsl.w	r6, ip, r4
   85474:	4237      	tst	r7, r6
   85476:	d0ea      	beq.n	8544e <UDPHS_Handler+0x3f6>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   85478:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   8547c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85480:	f412 6f00 	tst.w	r2, #2048	; 0x800
   85484:	d006      	beq.n	85494 <UDPHS_Handler+0x43c>
					&& !Is_udd_tx_pkt_ready(ep)) {
   85486:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   8548a:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   8548e:	f412 6f00 	tst.w	r2, #2048	; 0x800
   85492:	d0c6      	beq.n	85422 <UDPHS_Handler+0x3ca>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   85494:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85498:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   8549c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   854a0:	d0d5      	beq.n	8544e <UDPHS_Handler+0x3f6>
					&& (0 == udd_nb_busy_bank(ep))) {
   854a2:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   854a6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   854aa:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   854ae:	d1ce      	bne.n	8544e <UDPHS_Handler+0x3f6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   854b0:	4b59      	ldr	r3, [pc, #356]	; (85618 <UDPHS_Handler+0x5c0>)
   854b2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   854b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   854ba:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   854be:	691a      	ldr	r2, [r3, #16]
   854c0:	ea22 0606 	bic.w	r6, r2, r6
   854c4:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   854c6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   854ca:	4b57      	ldr	r3, [pc, #348]	; (85628 <UDPHS_Handler+0x5d0>)
   854cc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   854d0:	f898 2014 	ldrb.w	r2, [r8, #20]
   854d4:	f36f 0282 	bfc	r2, #2, #1
   854d8:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   854dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   854e0:	f023 0302 	bic.w	r3, r3, #2
   854e4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   854e8:	2320      	movs	r3, #32
   854ea:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   854ee:	2340      	movs	r3, #64	; 0x40
   854f0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   854f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_reset();
   854f8:	2210      	movs	r2, #16
   854fa:	4b47      	ldr	r3, [pc, #284]	; (85618 <UDPHS_Handler+0x5c0>)
   854fc:	619a      	str	r2, [r3, #24]
   854fe:	4d4a      	ldr	r5, [pc, #296]	; (85628 <UDPHS_Handler+0x5d0>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85500:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   85502:	2701      	movs	r7, #1
   85504:	4e4a      	ldr	r6, [pc, #296]	; (85630 <UDPHS_Handler+0x5d8>)
   85506:	3401      	adds	r4, #1
   85508:	b2e4      	uxtb	r4, r4
   8550a:	4622      	mov	r2, r4
   8550c:	4639      	mov	r1, r7
   8550e:	4628      	mov	r0, r5
   85510:	47b0      	blx	r6
   85512:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85514:	2c06      	cmp	r4, #6
   85516:	d1f6      	bne.n	85506 <UDPHS_Handler+0x4ae>
		udc_reset();
   85518:	4b46      	ldr	r3, [pc, #280]	; (85634 <UDPHS_Handler+0x5dc>)
   8551a:	4798      	blx	r3
	udd_configure_address(0);
   8551c:	4b3e      	ldr	r3, [pc, #248]	; (85618 <UDPHS_Handler+0x5c0>)
   8551e:	681a      	ldr	r2, [r3, #0]
   85520:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   85524:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   85526:	681a      	ldr	r2, [r3, #0]
   85528:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8552c:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   8552e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85532:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   85536:	f022 0203 	bic.w	r2, r2, #3
   8553a:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   8553e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   85542:	2201      	movs	r2, #1
   85544:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85548:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   8554c:	b672      	cpsid	i
   8554e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85552:	2000      	movs	r0, #0
   85554:	4938      	ldr	r1, [pc, #224]	; (85638 <UDPHS_Handler+0x5e0>)
   85556:	7008      	strb	r0, [r1, #0]
	udd_enable_setup_received_interrupt(0);
   85558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8555c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   85560:	f44f 7100 	mov.w	r1, #512	; 0x200
   85564:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   85568:	6919      	ldr	r1, [r3, #16]
   8556a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   8556e:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   85570:	b92a      	cbnz	r2, 8557e <UDPHS_Handler+0x526>
		cpu_irq_enable();
   85572:	2201      	movs	r2, #1
   85574:	4b30      	ldr	r3, [pc, #192]	; (85638 <UDPHS_Handler+0x5e0>)
   85576:	701a      	strb	r2, [r3, #0]
   85578:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8557c:	b662      	cpsie	i
		udd_ctrl_init();
   8557e:	4b2f      	ldr	r3, [pc, #188]	; (8563c <UDPHS_Handler+0x5e4>)
   85580:	4798      	blx	r3
		udd_enable_sof_interrupt();
   85582:	4b25      	ldr	r3, [pc, #148]	; (85618 <UDPHS_Handler+0x5c0>)
   85584:	691a      	ldr	r2, [r3, #16]
   85586:	f042 0208 	orr.w	r2, r2, #8
   8558a:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   8558c:	691a      	ldr	r2, [r3, #16]
   8558e:	f042 0204 	orr.w	r2, r2, #4
   85592:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   85594:	691a      	ldr	r2, [r3, #16]
   85596:	f042 0202 	orr.w	r2, r2, #2
   8559a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   8559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_wake_up();
   855a0:	4b1d      	ldr	r3, [pc, #116]	; (85618 <UDPHS_Handler+0x5c0>)
   855a2:	2220      	movs	r2, #32
   855a4:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   855a6:	691a      	ldr	r2, [r3, #16]
   855a8:	f022 0202 	bic.w	r2, r2, #2
   855ac:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   855ae:	691a      	ldr	r2, [r3, #16]
   855b0:	f042 0220 	orr.w	r2, r2, #32
   855b4:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   855b6:	2202      	movs	r2, #2
   855b8:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   855ba:	201d      	movs	r0, #29
   855bc:	4b20      	ldr	r3, [pc, #128]	; (85640 <UDPHS_Handler+0x5e8>)
   855be:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   855c0:	4b20      	ldr	r3, [pc, #128]	; (85644 <UDPHS_Handler+0x5ec>)
   855c2:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   855c4:	2000      	movs	r0, #0
   855c6:	4b20      	ldr	r3, [pc, #128]	; (85648 <UDPHS_Handler+0x5f0>)
   855c8:	4798      	blx	r3
		goto udd_interrupt_end;
   855ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_sleep_mode(true); // Enter in IDLE mode
   855ce:	2001      	movs	r0, #1
   855d0:	4b1d      	ldr	r3, [pc, #116]	; (85648 <UDPHS_Handler+0x5f0>)
   855d2:	4798      	blx	r3
		udd_ack_suspend();
   855d4:	4b10      	ldr	r3, [pc, #64]	; (85618 <UDPHS_Handler+0x5c0>)
   855d6:	2202      	movs	r2, #2
   855d8:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   855da:	2220      	movs	r2, #32
   855dc:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   855de:	691a      	ldr	r2, [r3, #16]
   855e0:	f022 0220 	bic.w	r2, r2, #32
   855e4:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   855e6:	691a      	ldr	r2, [r3, #16]
   855e8:	f042 0202 	orr.w	r2, r2, #2
   855ec:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   855ee:	691a      	ldr	r2, [r3, #16]
   855f0:	f042 0208 	orr.w	r2, r2, #8
   855f4:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   855f6:	691a      	ldr	r2, [r3, #16]
   855f8:	f042 0204 	orr.w	r2, r2, #4
   855fc:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   855fe:	4b13      	ldr	r3, [pc, #76]	; (8564c <UDPHS_Handler+0x5f4>)
   85600:	4798      	blx	r3
		goto udd_interrupt_end;
   85602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85606:	bf00      	nop
   85608:	2000287c 	.word	0x2000287c
   8560c:	200022e2 	.word	0x200022e2
   85610:	200022e0 	.word	0x200022e0
   85614:	00084cb9 	.word	0x00084cb9
   85618:	400a4000 	.word	0x400a4000
   8561c:	200022e4 	.word	0x200022e4
   85620:	00084cd1 	.word	0x00084cd1
   85624:	400a4300 	.word	0x400a4300
   85628:	200022e8 	.word	0x200022e8
   8562c:	00084ed5 	.word	0x00084ed5
   85630:	00084e9d 	.word	0x00084e9d
   85634:	00082c39 	.word	0x00082c39
   85638:	20000b60 	.word	0x20000b60
   8563c:	00084c65 	.word	0x00084c65
   85640:	00084a9d 	.word	0x00084a9d
   85644:	00081359 	.word	0x00081359
   85648:	00084bf5 	.word	0x00084bf5
   8564c:	00081365 	.word	0x00081365
	if (Is_udd_reset()) {
   85650:	4b0b      	ldr	r3, [pc, #44]	; (85680 <UDPHS_Handler+0x628>)
   85652:	695b      	ldr	r3, [r3, #20]
   85654:	f013 0f10 	tst.w	r3, #16
   85658:	f47f af4e 	bne.w	854f8 <UDPHS_Handler+0x4a0>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8565c:	4b08      	ldr	r3, [pc, #32]	; (85680 <UDPHS_Handler+0x628>)
   8565e:	691b      	ldr	r3, [r3, #16]
   85660:	f013 0f02 	tst.w	r3, #2
   85664:	d004      	beq.n	85670 <UDPHS_Handler+0x618>
   85666:	4b06      	ldr	r3, [pc, #24]	; (85680 <UDPHS_Handler+0x628>)
   85668:	695b      	ldr	r3, [r3, #20]
   8566a:	f013 0f02 	tst.w	r3, #2
   8566e:	d197      	bne.n	855a0 <UDPHS_Handler+0x548>
	if (Is_udd_wake_up()) {
   85670:	4b03      	ldr	r3, [pc, #12]	; (85680 <UDPHS_Handler+0x628>)
   85672:	695b      	ldr	r3, [r3, #20]
   85674:	f013 0f20 	tst.w	r3, #32
   85678:	d1a9      	bne.n	855ce <UDPHS_Handler+0x576>
   8567a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8567e:	bf00      	nop
   85680:	400a4000 	.word	0x400a4000

00085684 <udd_disable>:
{
   85684:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85686:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   8568a:	b672      	cpsid	i
   8568c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85690:	4e13      	ldr	r6, [pc, #76]	; (856e0 <udd_disable+0x5c>)
   85692:	2400      	movs	r4, #0
   85694:	7034      	strb	r4, [r6, #0]
	udd_reset_periph();
   85696:	4a13      	ldr	r2, [pc, #76]	; (856e4 <udd_disable+0x60>)
   85698:	6813      	ldr	r3, [r2, #0]
   8569a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8569e:	6013      	str	r3, [r2, #0]
	sysclk_disable_usb();
   856a0:	4b11      	ldr	r3, [pc, #68]	; (856e8 <udd_disable+0x64>)
   856a2:	4798      	blx	r3
	pmc_disable_periph_clk(ID_UDPHS);
   856a4:	201d      	movs	r0, #29
   856a6:	4b11      	ldr	r3, [pc, #68]	; (856ec <udd_disable+0x68>)
   856a8:	4798      	blx	r3
	udd_sleep_mode(false);
   856aa:	4620      	mov	r0, r4
   856ac:	4b10      	ldr	r3, [pc, #64]	; (856f0 <udd_disable+0x6c>)
   856ae:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   856b0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   856b4:	b672      	cpsid	i
   856b6:	f3bf 8f5f 	dmb	sy
   856ba:	7034      	strb	r4, [r6, #0]
	--sleepmgr_locks[mode];
   856bc:	490d      	ldr	r1, [pc, #52]	; (856f4 <udd_disable+0x70>)
   856be:	78ca      	ldrb	r2, [r1, #3]
   856c0:	3a01      	subs	r2, #1
   856c2:	70ca      	strb	r2, [r1, #3]
	if (cpu_irq_is_enabled_flags(flags))
   856c4:	b923      	cbnz	r3, 856d0 <udd_disable+0x4c>
		cpu_irq_enable();
   856c6:	2201      	movs	r2, #1
   856c8:	7032      	strb	r2, [r6, #0]
   856ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   856ce:	b662      	cpsie	i
	if (cpu_irq_is_enabled_flags(flags))
   856d0:	b92d      	cbnz	r5, 856de <udd_disable+0x5a>
		cpu_irq_enable();
   856d2:	2201      	movs	r2, #1
   856d4:	4b02      	ldr	r3, [pc, #8]	; (856e0 <udd_disable+0x5c>)
   856d6:	701a      	strb	r2, [r3, #0]
   856d8:	f3bf 8f5f 	dmb	sy
   856dc:	b662      	cpsie	i
   856de:	bd70      	pop	{r4, r5, r6, pc}
   856e0:	20000b60 	.word	0x20000b60
   856e4:	400a4000 	.word	0x400a4000
   856e8:	000842a9 	.word	0x000842a9
   856ec:	00084a9d 	.word	0x00084a9d
   856f0:	00084bf5 	.word	0x00084bf5
   856f4:	20002868 	.word	0x20002868

000856f8 <udd_attach>:
{
   856f8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   856fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   856fe:	b672      	cpsid	i
   85700:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85704:	2200      	movs	r2, #0
   85706:	4b1d      	ldr	r3, [pc, #116]	; (8577c <udd_attach+0x84>)
   85708:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   8570a:	2001      	movs	r0, #1
   8570c:	4b1c      	ldr	r3, [pc, #112]	; (85780 <udd_attach+0x88>)
   8570e:	4798      	blx	r3
	udd_enable_periph_ck();
   85710:	201d      	movs	r0, #29
   85712:	4b1c      	ldr	r3, [pc, #112]	; (85784 <udd_attach+0x8c>)
   85714:	4798      	blx	r3
	udd_attach_device();
   85716:	4b1c      	ldr	r3, [pc, #112]	; (85788 <udd_attach+0x90>)
   85718:	681a      	ldr	r2, [r3, #0]
   8571a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8571e:	601a      	str	r2, [r3, #0]
   85720:	681a      	ldr	r2, [r3, #0]
   85722:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   85726:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   85728:	691a      	ldr	r2, [r3, #16]
   8572a:	f042 0210 	orr.w	r2, r2, #16
   8572e:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   85730:	691a      	ldr	r2, [r3, #16]
   85732:	f042 0202 	orr.w	r2, r2, #2
   85736:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   85738:	691a      	ldr	r2, [r3, #16]
   8573a:	f042 0220 	orr.w	r2, r2, #32
   8573e:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   85740:	691a      	ldr	r2, [r3, #16]
   85742:	f042 0208 	orr.w	r2, r2, #8
   85746:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   85748:	691a      	ldr	r2, [r3, #16]
   8574a:	f042 0204 	orr.w	r2, r2, #4
   8574e:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   85750:	2208      	movs	r2, #8
   85752:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   85754:	2204      	movs	r2, #4
   85756:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   85758:	2210      	movs	r2, #16
   8575a:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   8575c:	2202      	movs	r2, #2
   8575e:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   85760:	2220      	movs	r2, #32
   85762:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   85764:	201d      	movs	r0, #29
   85766:	4b09      	ldr	r3, [pc, #36]	; (8578c <udd_attach+0x94>)
   85768:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   8576a:	b92c      	cbnz	r4, 85778 <udd_attach+0x80>
		cpu_irq_enable();
   8576c:	2201      	movs	r2, #1
   8576e:	4b03      	ldr	r3, [pc, #12]	; (8577c <udd_attach+0x84>)
   85770:	701a      	strb	r2, [r3, #0]
   85772:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85776:	b662      	cpsie	i
   85778:	bd10      	pop	{r4, pc}
   8577a:	bf00      	nop
   8577c:	20000b60 	.word	0x20000b60
   85780:	00084bf5 	.word	0x00084bf5
   85784:	00084a69 	.word	0x00084a69
   85788:	400a4000 	.word	0x400a4000
   8578c:	00084a9d 	.word	0x00084a9d

00085790 <udd_enable>:
{
   85790:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   85792:	4b2a      	ldr	r3, [pc, #168]	; (8583c <udd_enable+0xac>)
   85794:	4798      	blx	r3
	udd_enable_periph_ck();
   85796:	201d      	movs	r0, #29
   85798:	4b29      	ldr	r3, [pc, #164]	; (85840 <udd_enable+0xb0>)
   8579a:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8579c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   857a0:	b672      	cpsid	i
   857a2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   857a6:	2200      	movs	r2, #0
   857a8:	4b26      	ldr	r3, [pc, #152]	; (85844 <udd_enable+0xb4>)
   857aa:	701a      	strb	r2, [r3, #0]
	udd_enable_periph();
   857ac:	4926      	ldr	r1, [pc, #152]	; (85848 <udd_enable+0xb8>)
   857ae:	680b      	ldr	r3, [r1, #0]
   857b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   857b4:	600b      	str	r3, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   857b6:	4b25      	ldr	r3, [pc, #148]	; (8584c <udd_enable+0xbc>)
   857b8:	2140      	movs	r1, #64	; 0x40
   857ba:	f883 131d 	strb.w	r1, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   857be:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   857c2:	6019      	str	r1, [r3, #0]
		udd_ep_job[i].busy = false;
   857c4:	4822      	ldr	r0, [pc, #136]	; (85850 <udd_enable+0xc0>)
   857c6:	0053      	lsls	r3, r2, #1
   857c8:	1899      	adds	r1, r3, r2
   857ca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   857ce:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   857d0:	4413      	add	r3, r2
   857d2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   857d6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   857da:	f36f 0182 	bfc	r1, #2, #1
   857de:	7519      	strb	r1, [r3, #20]
   857e0:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   857e2:	2a06      	cmp	r2, #6
   857e4:	d1ef      	bne.n	857c6 <udd_enable+0x36>
	udd_high_speed_enable();
   857e6:	4a18      	ldr	r2, [pc, #96]	; (85848 <udd_enable+0xb8>)
   857e8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   857ec:	f023 0303 	bic.w	r3, r3, #3
   857f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   857f4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   857f8:	4b16      	ldr	r3, [pc, #88]	; (85854 <udd_enable+0xc4>)
   857fa:	4798      	blx	r3
	udd_b_idle = false;
   857fc:	2200      	movs	r2, #0
   857fe:	4b16      	ldr	r3, [pc, #88]	; (85858 <udd_enable+0xc8>)
   85800:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85802:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85806:	b672      	cpsid	i
   85808:	f3bf 8f5f 	dmb	sy
   8580c:	490d      	ldr	r1, [pc, #52]	; (85844 <udd_enable+0xb4>)
   8580e:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
   85810:	4912      	ldr	r1, [pc, #72]	; (8585c <udd_enable+0xcc>)
   85812:	78ca      	ldrb	r2, [r1, #3]
   85814:	3201      	adds	r2, #1
   85816:	70ca      	strb	r2, [r1, #3]
	if (cpu_irq_is_enabled_flags(flags))
   85818:	b92b      	cbnz	r3, 85826 <udd_enable+0x96>
		cpu_irq_enable();
   8581a:	2201      	movs	r2, #1
   8581c:	4b09      	ldr	r3, [pc, #36]	; (85844 <udd_enable+0xb4>)
   8581e:	701a      	strb	r2, [r3, #0]
   85820:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85824:	b662      	cpsie	i
	udd_attach();
   85826:	4b0e      	ldr	r3, [pc, #56]	; (85860 <udd_enable+0xd0>)
   85828:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   8582a:	b92c      	cbnz	r4, 85838 <udd_enable+0xa8>
		cpu_irq_enable();
   8582c:	2201      	movs	r2, #1
   8582e:	4b05      	ldr	r3, [pc, #20]	; (85844 <udd_enable+0xb4>)
   85830:	701a      	strb	r2, [r3, #0]
   85832:	f3bf 8f5f 	dmb	sy
   85836:	b662      	cpsie	i
   85838:	bd10      	pop	{r4, pc}
   8583a:	bf00      	nop
   8583c:	00084275 	.word	0x00084275
   85840:	00084a69 	.word	0x00084a69
   85844:	20000b60 	.word	0x20000b60
   85848:	400a4000 	.word	0x400a4000
   8584c:	e000e100 	.word	0xe000e100
   85850:	200022e8 	.word	0x200022e8
   85854:	00084ae5 	.word	0x00084ae5
   85858:	200022de 	.word	0x200022de
   8585c:	20002868 	.word	0x20002868
   85860:	000856f9 	.word	0x000856f9

00085864 <udd_detach>:
{
   85864:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   85866:	201d      	movs	r0, #29
   85868:	4b08      	ldr	r3, [pc, #32]	; (8588c <udd_detach+0x28>)
   8586a:	4798      	blx	r3
	udd_detach_device();
   8586c:	4b08      	ldr	r3, [pc, #32]	; (85890 <udd_detach+0x2c>)
   8586e:	681a      	ldr	r2, [r3, #0]
   85870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   85874:	601a      	str	r2, [r3, #0]
   85876:	681a      	ldr	r2, [r3, #0]
   85878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8587c:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   8587e:	201d      	movs	r0, #29
   85880:	4b04      	ldr	r3, [pc, #16]	; (85894 <udd_detach+0x30>)
   85882:	4798      	blx	r3
	udd_sleep_mode(false);
   85884:	2000      	movs	r0, #0
   85886:	4b04      	ldr	r3, [pc, #16]	; (85898 <udd_detach+0x34>)
   85888:	4798      	blx	r3
   8588a:	bd08      	pop	{r3, pc}
   8588c:	00084a69 	.word	0x00084a69
   85890:	400a4000 	.word	0x400a4000
   85894:	00084a9d 	.word	0x00084a9d
   85898:	00084bf5 	.word	0x00084bf5

0008589c <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   8589c:	4b02      	ldr	r3, [pc, #8]	; (858a8 <udd_is_high_speed+0xc>)
   8589e:	6958      	ldr	r0, [r3, #20]
}
   858a0:	f000 0001 	and.w	r0, r0, #1
   858a4:	4770      	bx	lr
   858a6:	bf00      	nop
   858a8:	400a4000 	.word	0x400a4000

000858ac <udd_set_address>:
	udd_disable_address();
   858ac:	4b08      	ldr	r3, [pc, #32]	; (858d0 <udd_set_address+0x24>)
   858ae:	681a      	ldr	r2, [r3, #0]
   858b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   858b4:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   858b6:	681a      	ldr	r2, [r3, #0]
   858b8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   858bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   858c0:	4302      	orrs	r2, r0
   858c2:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   858c4:	681a      	ldr	r2, [r3, #0]
   858c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   858ca:	601a      	str	r2, [r3, #0]
   858cc:	4770      	bx	lr
   858ce:	bf00      	nop
   858d0:	400a4000 	.word	0x400a4000

000858d4 <udd_getaddress>:
	return udd_get_configured_address();
   858d4:	4b02      	ldr	r3, [pc, #8]	; (858e0 <udd_getaddress+0xc>)
   858d6:	6818      	ldr	r0, [r3, #0]
}
   858d8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   858dc:	4770      	bx	lr
   858de:	bf00      	nop
   858e0:	400a4000 	.word	0x400a4000

000858e4 <udd_get_frame_number>:
	return udd_frame_number();
   858e4:	4b02      	ldr	r3, [pc, #8]	; (858f0 <udd_get_frame_number+0xc>)
   858e6:	6858      	ldr	r0, [r3, #4]
}
   858e8:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   858ec:	4770      	bx	lr
   858ee:	bf00      	nop
   858f0:	400a4000 	.word	0x400a4000

000858f4 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   858f4:	4b02      	ldr	r3, [pc, #8]	; (85900 <udd_get_micro_frame_number+0xc>)
   858f6:	6858      	ldr	r0, [r3, #4]
}
   858f8:	f000 0007 	and.w	r0, r0, #7
   858fc:	4770      	bx	lr
   858fe:	bf00      	nop
   85900:	400a4000 	.word	0x400a4000

00085904 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   85904:	4b01      	ldr	r3, [pc, #4]	; (8590c <udd_set_setup_payload+0x8>)
   85906:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   85908:	8199      	strh	r1, [r3, #12]
   8590a:	4770      	bx	lr
   8590c:	2000287c 	.word	0x2000287c

00085910 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85910:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   85914:	2a06      	cmp	r2, #6
   85916:	d900      	bls.n	8591a <udd_ep_free+0xa>
   85918:	4770      	bx	lr
{
   8591a:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   8591c:	0153      	lsls	r3, r2, #5
   8591e:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   85922:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   85926:	2101      	movs	r1, #1
   85928:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   8592c:	4603      	mov	r3, r0
	udd_configure_endpoint_bank(ep_index, 0);
   8592e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   85932:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   85936:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8593a:	1e56      	subs	r6, r2, #1
   8593c:	4c07      	ldr	r4, [pc, #28]	; (8595c <udd_ep_free+0x4c>)
   8593e:	fa06 f501 	lsl.w	r5, r6, r1
   85942:	19a8      	adds	r0, r5, r6
   85944:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   85948:	4b05      	ldr	r3, [pc, #20]	; (85960 <udd_ep_free+0x50>)
   8594a:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   8594c:	4435      	add	r5, r6
   8594e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   85952:	7d23      	ldrb	r3, [r4, #20]
   85954:	f36f 0382 	bfc	r3, #2, #1
   85958:	7523      	strb	r3, [r4, #20]
   8595a:	bd70      	pop	{r4, r5, r6, pc}
   8595c:	200022e8 	.word	0x200022e8
   85960:	00084e9d 	.word	0x00084e9d

00085964 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   85964:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   85968:	0143      	lsls	r3, r0, #5
   8596a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8596e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85972:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   85976:	f013 0f20 	tst.w	r3, #32
   8597a:	d109      	bne.n	85990 <udd_ep_is_halted+0x2c>
   8597c:	3801      	subs	r0, #1
   8597e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   85982:	4b04      	ldr	r3, [pc, #16]	; (85994 <udd_ep_is_halted+0x30>)
   85984:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   85988:	7d00      	ldrb	r0, [r0, #20]
   8598a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   8598e:	4770      	bx	lr
   85990:	2001      	movs	r0, #1
}
   85992:	4770      	bx	lr
   85994:	200022e8 	.word	0x200022e8

00085998 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85998:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8599c:	2b06      	cmp	r3, #6
   8599e:	d852      	bhi.n	85a46 <udd_ep_set_halt+0xae>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   859a0:	015a      	lsls	r2, r3, #5
   859a2:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   859a6:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   859aa:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   859ae:	f012 0f20 	tst.w	r2, #32
   859b2:	d14a      	bne.n	85a4a <udd_ep_set_halt+0xb2>
{
   859b4:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   859b6:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   859b8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   859bc:	4a26      	ldr	r2, [pc, #152]	; (85a58 <udd_ep_set_halt+0xc0>)
   859be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   859c2:	7d12      	ldrb	r2, [r2, #20]
   859c4:	f012 0f04 	tst.w	r2, #4
   859c8:	d141      	bne.n	85a4e <udd_ep_set_halt+0xb6>
	if (ptr_job->busy == true) {
   859ca:	f012 0f01 	tst.w	r2, #1
   859ce:	d141      	bne.n	85a54 <udd_ep_set_halt+0xbc>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   859d0:	f010 0f80 	tst.w	r0, #128	; 0x80
   859d4:	d113      	bne.n	859fe <udd_ep_set_halt+0x66>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   859d6:	015b      	lsls	r3, r3, #5
   859d8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   859dc:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   859e0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   859e4:	f022 0202 	bic.w	r2, r2, #2
   859e8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   859ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   859f0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   859f4:	2220      	movs	r2, #32
   859f6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   859fa:	2001      	movs	r0, #1
   859fc:	e028      	b.n	85a50 <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   859fe:	015a      	lsls	r2, r3, #5
   85a00:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   85a04:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   85a08:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85a0c:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   85a10:	d0e1      	beq.n	859d6 <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   85a12:	4a11      	ldr	r2, [pc, #68]	; (85a58 <udd_ep_set_halt+0xc0>)
   85a14:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   85a18:	f101 0210 	add.w	r2, r1, #16
   85a1c:	7d09      	ldrb	r1, [r1, #20]
   85a1e:	f041 0104 	orr.w	r1, r1, #4
   85a22:	7111      	strb	r1, [r2, #4]
			udd_enable_bank_interrupt(ep_index);
   85a24:	490d      	ldr	r1, [pc, #52]	; (85a5c <udd_ep_set_halt+0xc4>)
   85a26:	f103 0208 	add.w	r2, r3, #8
   85a2a:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   85a2e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   85a32:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   85a34:	6908      	ldr	r0, [r1, #16]
   85a36:	f44f 7280 	mov.w	r2, #256	; 0x100
   85a3a:	fa02 f303 	lsl.w	r3, r2, r3
   85a3e:	4303      	orrs	r3, r0
   85a40:	610b      	str	r3, [r1, #16]
			return true;
   85a42:	2001      	movs	r0, #1
   85a44:	e004      	b.n	85a50 <udd_ep_set_halt+0xb8>
		return false;
   85a46:	2000      	movs	r0, #0
   85a48:	4770      	bx	lr
		return true; // Already STALL
   85a4a:	2001      	movs	r0, #1
   85a4c:	4770      	bx	lr
   85a4e:	2001      	movs	r0, #1
}
   85a50:	bc10      	pop	{r4}
   85a52:	4770      	bx	lr
		return false; // Job on going, stall impossible
   85a54:	2000      	movs	r0, #0
   85a56:	e7fb      	b.n	85a50 <udd_ep_set_halt+0xb8>
   85a58:	200022e8 	.word	0x200022e8
   85a5c:	400a4000 	.word	0x400a4000

00085a60 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   85a60:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   85a64:	2806      	cmp	r0, #6
   85a66:	d864      	bhi.n	85b32 <udd_ep_clear_halt+0xd2>
{
   85a68:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   85a6a:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   85a6c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   85a70:	4b37      	ldr	r3, [pc, #220]	; (85b50 <udd_ep_clear_halt+0xf0>)
   85a72:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   85a76:	7d1b      	ldrb	r3, [r3, #20]
   85a78:	f013 0f04 	tst.w	r3, #4
   85a7c:	d05b      	beq.n	85b36 <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   85a7e:	460b      	mov	r3, r1
   85a80:	4933      	ldr	r1, [pc, #204]	; (85b50 <udd_ep_clear_halt+0xf0>)
   85a82:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   85a86:	7d19      	ldrb	r1, [r3, #20]
   85a88:	f36f 0182 	bfc	r1, #2, #1
   85a8c:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   85a8e:	4b31      	ldr	r3, [pc, #196]	; (85b54 <udd_ep_clear_halt+0xf4>)
   85a90:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   85a94:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   85a98:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   85a9c:	6919      	ldr	r1, [r3, #16]
   85a9e:	f44f 7480 	mov.w	r4, #256	; 0x100
   85aa2:	4084      	lsls	r4, r0
   85aa4:	ea21 0104 	bic.w	r1, r1, r4
   85aa8:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   85aaa:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   85aae:	f013 0f20 	tst.w	r3, #32
   85ab2:	d024      	beq.n	85afe <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   85ab4:	0143      	lsls	r3, r0, #5
   85ab6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85aba:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85abe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85ac2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85ac6:	d00b      	beq.n	85ae0 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   85ac8:	0143      	lsls	r3, r0, #5
   85aca:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85ace:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85ad6:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   85ada:	2140      	movs	r1, #64	; 0x40
   85adc:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   85ae0:	0143      	lsls	r3, r0, #5
   85ae2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85ae6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85aea:	2120      	movs	r1, #32
   85aec:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
   85af0:	4618      	mov	r0, r3
		udd_enable_endpoint_bank_autoswitch(ep);
   85af2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   85af6:	f043 0302 	orr.w	r3, r3, #2
   85afa:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   85afe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   85b02:	4913      	ldr	r1, [pc, #76]	; (85b50 <udd_ep_clear_halt+0xf0>)
   85b04:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   85b08:	7d1b      	ldrb	r3, [r3, #20]
   85b0a:	f013 0f01 	tst.w	r3, #1
   85b0e:	d101      	bne.n	85b14 <udd_ep_clear_halt+0xb4>
	return true;
   85b10:	2001      	movs	r0, #1
   85b12:	bd38      	pop	{r3, r4, r5, pc}
			ptr_job->busy = false;
   85b14:	4608      	mov	r0, r1
   85b16:	0051      	lsls	r1, r2, #1
   85b18:	188b      	adds	r3, r1, r2
   85b1a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   85b1e:	7d1c      	ldrb	r4, [r3, #20]
   85b20:	f36f 0400 	bfc	r4, #0, #1
   85b24:	751c      	strb	r4, [r3, #20]
			ptr_job->call_nohalt();
   85b26:	440a      	add	r2, r1
   85b28:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
   85b2c:	4798      	blx	r3
	return true;
   85b2e:	2001      	movs	r0, #1
   85b30:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   85b32:	2000      	movs	r0, #0
   85b34:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep)) {
   85b36:	0143      	lsls	r3, r0, #5
   85b38:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85b3c:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85b40:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85b44:	f013 0f20 	tst.w	r3, #32
   85b48:	d1b4      	bne.n	85ab4 <udd_ep_clear_halt+0x54>
	return true;
   85b4a:	2001      	movs	r0, #1
}
   85b4c:	bd38      	pop	{r3, r4, r5, pc}
   85b4e:	bf00      	nop
   85b50:	200022e8 	.word	0x200022e8
   85b54:	400a4000 	.word	0x400a4000

00085b58 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   85b58:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   85b5c:	2806      	cmp	r0, #6
   85b5e:	d861      	bhi.n	85c24 <udd_ep_run+0xcc>
{
   85b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   85b62:	0144      	lsls	r4, r0, #5
   85b64:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85b68:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85b6c:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   85b70:	f014 0f01 	tst.w	r4, #1
   85b74:	d058      	beq.n	85c28 <udd_ep_run+0xd0>
			|| Is_udd_endpoint_stall_requested(ep)
   85b76:	0144      	lsls	r4, r0, #5
   85b78:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85b7c:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85b80:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   85b84:	f014 0f20 	tst.w	r4, #32
   85b88:	d150      	bne.n	85c2c <udd_ep_run+0xd4>
	ptr_job = &udd_ep_job[ep - 1];
   85b8a:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   85b8c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   85b90:	4d29      	ldr	r5, [pc, #164]	; (85c38 <udd_ep_run+0xe0>)
   85b92:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   85b96:	7d2d      	ldrb	r5, [r5, #20]
   85b98:	f015 0f04 	tst.w	r5, #4
   85b9c:	d148      	bne.n	85c30 <udd_ep_run+0xd8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85b9e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   85ba2:	b672      	cpsid	i
   85ba4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85ba8:	f04f 0e00 	mov.w	lr, #0
   85bac:	4e23      	ldr	r6, [pc, #140]	; (85c3c <udd_ep_run+0xe4>)
   85bae:	f886 e000 	strb.w	lr, [r6]
	if (ptr_job->busy == true) {
   85bb2:	f015 0f01 	tst.w	r5, #1
   85bb6:	d008      	beq.n	85bca <udd_ep_run+0x72>
	if (cpu_irq_is_enabled_flags(flags))
   85bb8:	2f00      	cmp	r7, #0
   85bba:	d13b      	bne.n	85c34 <udd_ep_run+0xdc>
		cpu_irq_enable();
   85bbc:	2201      	movs	r2, #1
   85bbe:	7032      	strb	r2, [r6, #0]
   85bc0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85bc4:	b662      	cpsie	i
		return false; // Job already on going
   85bc6:	4670      	mov	r0, lr
   85bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job->busy = true;
   85bca:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   85bce:	4e1a      	ldr	r6, [pc, #104]	; (85c38 <udd_ep_run+0xe0>)
   85bd0:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   85bd4:	7d2e      	ldrb	r6, [r5, #20]
   85bd6:	f046 0601 	orr.w	r6, r6, #1
   85bda:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   85bdc:	b92f      	cbnz	r7, 85bea <udd_ep_run+0x92>
		cpu_irq_enable();
   85bde:	2601      	movs	r6, #1
   85be0:	4d16      	ldr	r5, [pc, #88]	; (85c3c <udd_ep_run+0xe4>)
   85be2:	702e      	strb	r6, [r5, #0]
   85be4:	f3bf 8f5f 	dmb	sy
   85be8:	b662      	cpsie	i
	ptr_job->buf = buf;
   85bea:	4f13      	ldr	r7, [pc, #76]	; (85c38 <udd_ep_run+0xe0>)
   85bec:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   85bf0:	00ed      	lsls	r5, r5, #3
   85bf2:	197e      	adds	r6, r7, r5
   85bf4:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   85bf6:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   85bf8:	2200      	movs	r2, #0
   85bfa:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   85bfc:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   85bfe:	9a06      	ldr	r2, [sp, #24]
   85c00:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   85c02:	b911      	cbnz	r1, 85c0a <udd_ep_run+0xb2>
   85c04:	fab3 f183 	clz	r1, r3
   85c08:	0949      	lsrs	r1, r1, #5
   85c0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   85c0e:	4b0a      	ldr	r3, [pc, #40]	; (85c38 <udd_ep_run+0xe0>)
   85c10:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   85c14:	7d23      	ldrb	r3, [r4, #20]
   85c16:	f361 0341 	bfi	r3, r1, #1, #1
   85c1a:	7523      	strb	r3, [r4, #20]
	udd_ep_trans_done(ep);
   85c1c:	4b08      	ldr	r3, [pc, #32]	; (85c40 <udd_ep_run+0xe8>)
   85c1e:	4798      	blx	r3
	return true;
   85c20:	2001      	movs	r0, #1
   85c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   85c24:	2000      	movs	r0, #0
   85c26:	4770      	bx	lr
		return false; // Endpoint is halted
   85c28:	2000      	movs	r0, #0
   85c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85c2c:	2000      	movs	r0, #0
   85c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85c30:	2000      	movs	r0, #0
   85c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Job already on going
   85c34:	2000      	movs	r0, #0
}
   85c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85c38:	200022e8 	.word	0x200022e8
   85c3c:	20000b60 	.word	0x20000b60
   85c40:	00084ed5 	.word	0x00084ed5

00085c44 <udd_ep_alloc>:
{
   85c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85c48:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   85c4a:	f000 060f 	and.w	r6, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   85c4e:	2e06      	cmp	r6, #6
   85c50:	f200 812a 	bhi.w	85ea8 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   85c54:	0173      	lsls	r3, r6, #5
   85c56:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85c5a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85c5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   85c62:	f013 0301 	ands.w	r3, r3, #1
   85c66:	f040 8124 	bne.w	85eb2 <udd_ep_alloc+0x26e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   85c6a:	f001 0403 	and.w	r4, r1, #3
   85c6e:	2c02      	cmp	r4, #2
   85c70:	d03f      	beq.n	85cf2 <udd_ep_alloc+0xae>
   85c72:	2c03      	cmp	r4, #3
   85c74:	d04b      	beq.n	85d0e <udd_ep_alloc+0xca>
   85c76:	2c01      	cmp	r4, #1
   85c78:	d001      	beq.n	85c7e <udd_ep_alloc+0x3a>
		return false;
   85c7a:	2300      	movs	r3, #0
   85c7c:	e115      	b.n	85eaa <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   85c7e:	b136      	cbz	r6, 85c8e <udd_ep_alloc+0x4a>
   85c80:	1ef7      	subs	r7, r6, #3
   85c82:	b2ff      	uxtb	r7, r7
   85c84:	2f01      	cmp	r7, #1
   85c86:	bf94      	ite	ls
   85c88:	2700      	movls	r7, #0
   85c8a:	2701      	movhi	r7, #1
   85c8c:	e000      	b.n	85c90 <udd_ep_alloc+0x4c>
   85c8e:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   85c90:	f04f 0c02 	mov.w	ip, #2
	if (b_iso_hbw) {
   85c94:	b3a7      	cbz	r7, 85d00 <udd_ep_alloc+0xbc>
		switch(MaxEndpointSize & (0x3u << 11)) {
   85c96:	f402 54c0 	and.w	r4, r2, #6144	; 0x1800
   85c9a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   85c9e:	d03a      	beq.n	85d16 <udd_ep_alloc+0xd2>
			nb_tran = 1;
   85ca0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85ca4:	bf0c      	ite	eq
   85ca6:	f04f 0e03 	moveq.w	lr, #3
   85caa:	f04f 0e01 	movne.w	lr, #1
		MaxEndpointSize &= ~(0x3u << 11);
   85cae:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   85cb2:	b292      	uxth	r2, r2
   85cb4:	0174      	lsls	r4, r6, #5
   85cb6:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85cba:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85cbe:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
   85cc2:	f425 757f 	bic.w	r5, r5, #1020	; 0x3fc
   85cc6:	f025 0503 	bic.w	r5, r5, #3
   85cca:	0109      	lsls	r1, r1, #4
   85ccc:	f001 0130 	and.w	r1, r1, #48	; 0x30
   85cd0:	b240      	sxtb	r0, r0
   85cd2:	2800      	cmp	r0, #0
   85cd4:	bfac      	ite	ge
   85cd6:	4618      	movge	r0, r3
   85cd8:	2008      	movlt	r0, #8
   85cda:	f5a2 6880 	sub.w	r8, r2, #1024	; 0x400
   85cde:	fa1f f888 	uxth.w	r8, r8
   85ce2:	f5b8 4f7c 	cmp.w	r8, #64512	; 0xfc00
   85ce6:	d319      	bcc.n	85d1c <udd_ep_alloc+0xd8>
   85ce8:	2a08      	cmp	r2, #8
   85cea:	d932      	bls.n	85d52 <udd_ep_alloc+0x10e>
   85cec:	0052      	lsls	r2, r2, #1
   85cee:	3a01      	subs	r2, #1
   85cf0:	e016      	b.n	85d20 <udd_ep_alloc+0xdc>
	bool b_iso_hbw = false;
   85cf2:	2700      	movs	r7, #0
   85cf4:	2e03      	cmp	r6, #3
   85cf6:	bf34      	ite	cc
   85cf8:	f04f 0c02 	movcc.w	ip, #2
   85cfc:	f04f 0c01 	movcs.w	ip, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   85d00:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   85d04:	f040 80d7 	bne.w	85eb6 <udd_ep_alloc+0x272>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   85d08:	f04f 0e00 	mov.w	lr, #0
   85d0c:	e7d2      	b.n	85cb4 <udd_ep_alloc+0x70>
	bool b_iso_hbw = false;
   85d0e:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   85d10:	f04f 0c01 	mov.w	ip, #1
   85d14:	e7be      	b.n	85c94 <udd_ep_alloc+0x50>
			nb_tran = 2;
   85d16:	f04f 0e02 	mov.w	lr, #2
   85d1a:	e7c8      	b.n	85cae <udd_ep_alloc+0x6a>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85d1c:	f240 72ff 	movw	r2, #2047	; 0x7ff
   85d20:	fab2 f282 	clz	r2, r2
   85d24:	ea41 1c8c 	orr.w	ip, r1, ip, lsl #6
   85d28:	ea4c 0c00 	orr.w	ip, ip, r0
   85d2c:	f1c2 021c 	rsb	r2, r2, #28
   85d30:	ea4c 0202 	orr.w	r2, ip, r2
   85d34:	b10f      	cbz	r7, 85d3a <udd_ep_alloc+0xf6>
   85d36:	ea4f 230e 	mov.w	r3, lr, lsl #8
   85d3a:	4313      	orrs	r3, r2
   85d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   85d40:	432b      	orrs	r3, r5
   85d42:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   85d46:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   85d4a:	2b00      	cmp	r3, #0
   85d4c:	db03      	blt.n	85d56 <udd_ep_alloc+0x112>
		return false;
   85d4e:	2300      	movs	r3, #0
   85d50:	e0ab      	b.n	85eaa <udd_ep_alloc+0x266>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85d52:	220f      	movs	r2, #15
   85d54:	e7e4      	b.n	85d20 <udd_ep_alloc+0xdc>
	udd_enable_endpoint(ep);
   85d56:	2301      	movs	r3, #1
   85d58:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   85d5c:	2306      	movs	r3, #6
   85d5e:	2700      	movs	r7, #0
		if (Is_udd_endpoint_enabled(i)) {
   85d60:	4857      	ldr	r0, [pc, #348]	; (85ec0 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   85d62:	2401      	movs	r4, #1
   85d64:	e003      	b.n	85d6e <udd_ep_alloc+0x12a>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85d66:	3b01      	subs	r3, #1
   85d68:	b2db      	uxtb	r3, r3
   85d6a:	429e      	cmp	r6, r3
   85d6c:	d81e      	bhi.n	85dac <udd_ep_alloc+0x168>
		if (Is_udd_endpoint_enabled(i)) {
   85d6e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   85d72:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85d76:	f012 0f01 	tst.w	r2, #1
   85d7a:	d0f4      	beq.n	85d66 <udd_ep_alloc+0x122>
   85d7c:	015a      	lsls	r2, r3, #5
   85d7e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   85d82:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
			bank = udd_get_endpoint_bank(i);
   85d86:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   85d8a:	f3c1 1181 	ubfx	r1, r1, #6, #2
   85d8e:	005d      	lsls	r5, r3, #1
   85d90:	40a9      	lsls	r1, r5
   85d92:	430f      	orrs	r7, r1
   85d94:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   85d96:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   85d9a:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   85d9e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   85da2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   85da6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   85daa:	e7dc      	b.n	85d66 <udd_ep_alloc+0x122>
   85dac:	0075      	lsls	r5, r6, #1
   85dae:	4634      	mov	r4, r6
   85db0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   85db4:	4b43      	ldr	r3, [pc, #268]	; (85ec4 <udd_ep_alloc+0x280>)
   85db6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
		bool b_restart = ptr_job->busy;
   85dba:	4698      	mov	r8, r3
		udd_enable_endpoint(i);
   85dbc:	f04f 0901 	mov.w	r9, #1
			b_restart = udd_ep_run(i,
   85dc0:	f8df a104 	ldr.w	sl, [pc, #260]	; 85ec8 <udd_ep_alloc+0x284>
   85dc4:	e021      	b.n	85e0a <udd_ep_alloc+0x1c6>
			if (NULL == ptr_job->call_trans) {
   85dc6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   85dca:	4a3e      	ldr	r2, [pc, #248]	; (85ec4 <udd_ep_alloc+0x280>)
   85dcc:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   85dd0:	2c00      	cmp	r4, #0
   85dd2:	d072      	beq.n	85eba <udd_ep_alloc+0x276>
			if (Is_udd_endpoint_in(i)) {
   85dd4:	f10e 0308 	add.w	r3, lr, #8
   85dd8:	015b      	lsls	r3, r3, #5
   85dda:	4a39      	ldr	r2, [pc, #228]	; (85ec0 <udd_ep_alloc+0x27c>)
   85ddc:	58d3      	ldr	r3, [r2, r3]
   85dde:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   85de2:	bf18      	it	ne
   85de4:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   85de8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   85dec:	4b35      	ldr	r3, [pc, #212]	; (85ec4 <udd_ep_alloc+0x280>)
   85dee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   85df2:	4602      	mov	r2, r0
   85df4:	68c9      	ldr	r1, [r1, #12]
   85df6:	2001      	movs	r0, #1
   85df8:	47a0      	blx	r4
			return false;
   85dfa:	2300      	movs	r3, #0
   85dfc:	e055      	b.n	85eaa <udd_ep_alloc+0x266>
   85dfe:	3502      	adds	r5, #2
   85e00:	3401      	adds	r4, #1
   85e02:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   85e04:	b2e3      	uxtb	r3, r4
   85e06:	2b06      	cmp	r3, #6
   85e08:	d84c      	bhi.n	85ea4 <udd_ep_alloc+0x260>
   85e0a:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   85e0c:	46a6      	mov	lr, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   85e0e:	fa47 f205 	asr.w	r2, r7, r5
		if (bank == 0) {
   85e12:	f012 0203 	ands.w	r2, r2, #3
   85e16:	d0f2      	beq.n	85dfe <udd_ep_alloc+0x1ba>
   85e18:	1e61      	subs	r1, r4, #1
		bool b_restart = ptr_job->busy;
   85e1a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   85e1e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   85e22:	f893 b014 	ldrb.w	fp, [r3, #20]
   85e26:	f00b 0c01 	and.w	ip, fp, #1
		ptr_job->busy = false;
   85e2a:	f36f 0b00 	bfc	fp, #0, #1
   85e2e:	f883 b014 	strb.w	fp, [r3, #20]
   85e32:	0163      	lsls	r3, r4, #5
   85e34:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85e38:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
		udd_configure_endpoint_bank(i, bank);
   85e3c:	f8d3 b100 	ldr.w	fp, [r3, #256]	; 0x100
   85e40:	f02b 0bc0 	bic.w	fp, fp, #192	; 0xc0
   85e44:	ea4b 1282 	orr.w	r2, fp, r2, lsl #6
   85e48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   85e4c:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   85e50:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85e54:	2a00      	cmp	r2, #0
   85e56:	dab6      	bge.n	85dc6 <udd_ep_alloc+0x182>
		udd_enable_endpoint_bank_autoswitch(i);
   85e58:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   85e5c:	f042 0202 	orr.w	r2, r2, #2
   85e60:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   85e64:	f1bc 0f00 	cmp.w	ip, #0
   85e68:	d0c9      	beq.n	85dfe <udd_ep_alloc+0x1ba>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   85e6a:	f856 3c0c 	ldr.w	r3, [r6, #-12]
   85e6e:	f856 2c08 	ldr.w	r2, [r6, #-8]
   85e72:	1a9a      	subs	r2, r3, r2
   85e74:	f846 2c0c 	str.w	r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   85e78:	f856 3c10 	ldr.w	r3, [r6, #-16]
					ptr_job->b_shortpacket,
   85e7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   85e80:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   85e84:	f891 e014 	ldrb.w	lr, [r1, #20]
			b_restart = udd_ep_run(i,
   85e88:	f856 1c18 	ldr.w	r1, [r6, #-24]
   85e8c:	9100      	str	r1, [sp, #0]
   85e8e:	1a9b      	subs	r3, r3, r2
   85e90:	f856 1c14 	ldr.w	r1, [r6, #-20]
   85e94:	440a      	add	r2, r1
   85e96:	f3ce 0140 	ubfx	r1, lr, #1, #1
   85e9a:	47d0      	blx	sl
			if (!b_restart) {
   85e9c:	4603      	mov	r3, r0
   85e9e:	2800      	cmp	r0, #0
   85ea0:	d1ad      	bne.n	85dfe <udd_ep_alloc+0x1ba>
   85ea2:	e002      	b.n	85eaa <udd_ep_alloc+0x266>
	return true;
   85ea4:	2301      	movs	r3, #1
   85ea6:	e000      	b.n	85eaa <udd_ep_alloc+0x266>
		return false;
   85ea8:	2300      	movs	r3, #0
}
   85eaa:	4618      	mov	r0, r3
   85eac:	b003      	add	sp, #12
   85eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   85eb2:	2300      	movs	r3, #0
   85eb4:	e7f9      	b.n	85eaa <udd_ep_alloc+0x266>
		return false;
   85eb6:	2300      	movs	r3, #0
   85eb8:	e7f7      	b.n	85eaa <udd_ep_alloc+0x266>
				return false;
   85eba:	2300      	movs	r3, #0
   85ebc:	e7f5      	b.n	85eaa <udd_ep_alloc+0x266>
   85ebe:	bf00      	nop
   85ec0:	400a4000 	.word	0x400a4000
   85ec4:	200022e8 	.word	0x200022e8
   85ec8:	00085b59 	.word	0x00085b59

00085ecc <udd_ep_abort>:
{
   85ecc:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85ece:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   85ed2:	4b13      	ldr	r3, [pc, #76]	; (85f20 <udd_ep_abort+0x54>)
   85ed4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   85ed8:	2100      	movs	r1, #0
   85eda:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   85edc:	f010 0f80 	tst.w	r0, #128	; 0x80
   85ee0:	d116      	bne.n	85f10 <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85ee2:	1e50      	subs	r0, r2, #1
   85ee4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   85ee8:	2101      	movs	r1, #1
   85eea:	4b0e      	ldr	r3, [pc, #56]	; (85f24 <udd_ep_abort+0x58>)
   85eec:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   85ef0:	4b0d      	ldr	r3, [pc, #52]	; (85f28 <udd_ep_abort+0x5c>)
   85ef2:	4798      	blx	r3
   85ef4:	bd10      	pop	{r4, pc}
			udd_kill_last_in_bank(ep_index);
   85ef6:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
			while(Is_udd_kill_last(ep_index));
   85efa:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   85efe:	f413 7f00 	tst.w	r3, #512	; 0x200
   85f02:	d1fa      	bne.n	85efa <udd_ep_abort+0x2e>
		for(;udd_nb_busy_bank(ep_index);) {
   85f04:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   85f08:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   85f0c:	d1f3      	bne.n	85ef6 <udd_ep_abort+0x2a>
   85f0e:	e7e8      	b.n	85ee2 <udd_ep_abort+0x16>
   85f10:	4906      	ldr	r1, [pc, #24]	; (85f2c <udd_ep_abort+0x60>)
   85f12:	eb01 1042 	add.w	r0, r1, r2, lsl #5
			udd_kill_last_in_bank(ep_index);
   85f16:	f44f 7400 	mov.w	r4, #512	; 0x200
			while(Is_udd_kill_last(ep_index));
   85f1a:	4601      	mov	r1, r0
   85f1c:	e7f2      	b.n	85f04 <udd_ep_abort+0x38>
   85f1e:	bf00      	nop
   85f20:	400a4300 	.word	0x400a4300
   85f24:	200022e8 	.word	0x200022e8
   85f28:	00084e9d 	.word	0x00084e9d
   85f2c:	400a4000 	.word	0x400a4000

00085f30 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   85f30:	4a07      	ldr	r2, [pc, #28]	; (85f50 <udd_test_mode_j+0x20>)
   85f32:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85f36:	f023 0303 	bic.w	r3, r3, #3
   85f3a:	f043 0302 	orr.w	r3, r3, #2
   85f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   85f42:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85f46:	f043 0304 	orr.w	r3, r3, #4
   85f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   85f4e:	4770      	bx	lr
   85f50:	400a4000 	.word	0x400a4000

00085f54 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   85f54:	4a07      	ldr	r2, [pc, #28]	; (85f74 <udd_test_mode_k+0x20>)
   85f56:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85f5a:	f023 0303 	bic.w	r3, r3, #3
   85f5e:	f043 0302 	orr.w	r3, r3, #2
   85f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   85f66:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85f6a:	f043 0308 	orr.w	r3, r3, #8
   85f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   85f72:	4770      	bx	lr
   85f74:	400a4000 	.word	0x400a4000

00085f78 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   85f78:	4a04      	ldr	r2, [pc, #16]	; (85f8c <udd_test_mode_se0_nak+0x14>)
   85f7a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85f7e:	f023 0303 	bic.w	r3, r3, #3
   85f82:	f043 0302 	orr.w	r3, r3, #2
   85f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   85f8a:	4770      	bx	lr
   85f8c:	400a4000 	.word	0x400a4000

00085f90 <udd_test_mode_packet>:
{
   85f90:	b430      	push	{r4, r5}
   85f92:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   85f94:	466c      	mov	r4, sp
   85f96:	4d20      	ldr	r5, [pc, #128]	; (86018 <udd_test_mode_packet+0x88>)
   85f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85fa4:	e895 0003 	ldmia.w	r5, {r0, r1}
   85fa8:	f844 0b04 	str.w	r0, [r4], #4
   85fac:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   85fae:	4b1b      	ldr	r3, [pc, #108]	; (8601c <udd_test_mode_packet+0x8c>)
   85fb0:	2101      	movs	r1, #1
   85fb2:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   85fb6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85fba:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   85fbe:	f022 0203 	bic.w	r2, r2, #3
   85fc2:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   85fc6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   85fca:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   85fce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   85fd2:	f022 0203 	bic.w	r2, r2, #3
   85fd6:	f042 0202 	orr.w	r2, r2, #2
   85fda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   85fde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   85fe2:	f042 0210 	orr.w	r2, r2, #16
   85fe6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
   85fea:	4a0d      	ldr	r2, [pc, #52]	; (86020 <udd_test_mode_packet+0x90>)
	ptr_src = test_packet;
   85fec:	466b      	mov	r3, sp
	for (i = 0; i < sizeof(test_packet); i++) {
   85fee:	f10d 0035 	add.w	r0, sp, #53	; 0x35
		*ptr_dest++ = *ptr_src++;
   85ff2:	f813 1b01 	ldrb.w	r1, [r3], #1
   85ff6:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   85ffa:	4283      	cmp	r3, r0
   85ffc:	d1f9      	bne.n	85ff2 <udd_test_mode_packet+0x62>
	udd_ack_in_send(0);
   85ffe:	4b07      	ldr	r3, [pc, #28]	; (8601c <udd_test_mode_packet+0x8c>)
   86000:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86004:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   86008:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8600c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   86010:	b00e      	add	sp, #56	; 0x38
   86012:	bc30      	pop	{r4, r5}
   86014:	4770      	bx	lr
   86016:	bf00      	nop
   86018:	0008cbb0 	.word	0x0008cbb0
   8601c:	400a4000 	.word	0x400a4000
   86020:	2017ffff 	.word	0x2017ffff

00086024 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86024:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   86026:	010b      	lsls	r3, r1, #4
   86028:	4293      	cmp	r3, r2
   8602a:	d914      	bls.n	86056 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8602c:	00c9      	lsls	r1, r1, #3
   8602e:	084b      	lsrs	r3, r1, #1
   86030:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   86034:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   86038:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8603a:	1e5c      	subs	r4, r3, #1
   8603c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86040:	428c      	cmp	r4, r1
   86042:	d901      	bls.n	86048 <usart_set_async_baudrate+0x24>
		return 1;
   86044:	2001      	movs	r0, #1
   86046:	e017      	b.n	86078 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   86048:	6841      	ldr	r1, [r0, #4]
   8604a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8604e:	6041      	str	r1, [r0, #4]
   86050:	e00c      	b.n	8606c <usart_set_async_baudrate+0x48>
		return 1;
   86052:	2001      	movs	r0, #1
   86054:	e010      	b.n	86078 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86056:	0859      	lsrs	r1, r3, #1
   86058:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   8605c:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   86060:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86062:	1e5c      	subs	r4, r3, #1
   86064:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86068:	428c      	cmp	r4, r1
   8606a:	d8f2      	bhi.n	86052 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8606c:	0412      	lsls	r2, r2, #16
   8606e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   86072:	431a      	orrs	r2, r3
   86074:	6202      	str	r2, [r0, #32]

	return 0;
   86076:	2000      	movs	r0, #0
}
   86078:	bc10      	pop	{r4}
   8607a:	4770      	bx	lr

0008607c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   8607c:	4b0a      	ldr	r3, [pc, #40]	; (860a8 <usart_reset+0x2c>)
   8607e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   86082:	2300      	movs	r3, #0
   86084:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   86086:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   86088:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8608a:	2388      	movs	r3, #136	; 0x88
   8608c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8608e:	2324      	movs	r3, #36	; 0x24
   86090:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   86092:	f44f 7380 	mov.w	r3, #256	; 0x100
   86096:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   86098:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   8609c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   8609e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   860a2:	6003      	str	r3, [r0, #0]
   860a4:	4770      	bx	lr
   860a6:	bf00      	nop
   860a8:	55534100 	.word	0x55534100

000860ac <usart_init_rs232>:
{
   860ac:	b570      	push	{r4, r5, r6, lr}
   860ae:	4605      	mov	r5, r0
   860b0:	460c      	mov	r4, r1
   860b2:	4616      	mov	r6, r2
	usart_reset(p_usart);
   860b4:	4b0f      	ldr	r3, [pc, #60]	; (860f4 <usart_init_rs232+0x48>)
   860b6:	4798      	blx	r3
	ul_reg_val = 0;
   860b8:	2200      	movs	r2, #0
   860ba:	4b0f      	ldr	r3, [pc, #60]	; (860f8 <usart_init_rs232+0x4c>)
   860bc:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   860be:	b1a4      	cbz	r4, 860ea <usart_init_rs232+0x3e>
   860c0:	4632      	mov	r2, r6
   860c2:	6821      	ldr	r1, [r4, #0]
   860c4:	4628      	mov	r0, r5
   860c6:	4b0d      	ldr	r3, [pc, #52]	; (860fc <usart_init_rs232+0x50>)
   860c8:	4798      	blx	r3
   860ca:	4602      	mov	r2, r0
   860cc:	b978      	cbnz	r0, 860ee <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   860ce:	6863      	ldr	r3, [r4, #4]
   860d0:	68a1      	ldr	r1, [r4, #8]
   860d2:	430b      	orrs	r3, r1
   860d4:	6921      	ldr	r1, [r4, #16]
   860d6:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   860d8:	68e1      	ldr	r1, [r4, #12]
   860da:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   860dc:	4906      	ldr	r1, [pc, #24]	; (860f8 <usart_init_rs232+0x4c>)
   860de:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   860e0:	6869      	ldr	r1, [r5, #4]
   860e2:	430b      	orrs	r3, r1
   860e4:	606b      	str	r3, [r5, #4]
}
   860e6:	4610      	mov	r0, r2
   860e8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   860ea:	2201      	movs	r2, #1
   860ec:	e7fb      	b.n	860e6 <usart_init_rs232+0x3a>
   860ee:	2201      	movs	r2, #1
   860f0:	e7f9      	b.n	860e6 <usart_init_rs232+0x3a>
   860f2:	bf00      	nop
   860f4:	0008607d 	.word	0x0008607d
   860f8:	20002378 	.word	0x20002378
   860fc:	00086025 	.word	0x00086025

00086100 <usart_init_sync_master>:
{
   86100:	b570      	push	{r4, r5, r6, lr}
   86102:	4604      	mov	r4, r0
   86104:	460e      	mov	r6, r1
   86106:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86108:	4b15      	ldr	r3, [pc, #84]	; (86160 <usart_init_sync_master+0x60>)
   8610a:	4798      	blx	r3
	ul_reg_val = 0;
   8610c:	2200      	movs	r2, #0
   8610e:	4b15      	ldr	r3, [pc, #84]	; (86164 <usart_init_sync_master+0x64>)
   86110:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   86112:	b306      	cbz	r6, 86156 <usart_init_sync_master+0x56>
   86114:	6833      	ldr	r3, [r6, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86116:	eb05 0253 	add.w	r2, r5, r3, lsr #1
   8611a:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8611e:	1e51      	subs	r1, r2, #1
   86120:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86124:	4299      	cmp	r1, r3
   86126:	d818      	bhi.n	8615a <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86128:	6222      	str	r2, [r4, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   8612a:	6863      	ldr	r3, [r4, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   8612c:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86134:	6063      	str	r3, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86136:	6873      	ldr	r3, [r6, #4]
   86138:	68b2      	ldr	r2, [r6, #8]
   8613a:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   8613c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86140:	6932      	ldr	r2, [r6, #16]
   86142:	4313      	orrs	r3, r2
   86144:	68f2      	ldr	r2, [r6, #12]
   86146:	4313      	orrs	r3, r2
   86148:	4a06      	ldr	r2, [pc, #24]	; (86164 <usart_init_sync_master+0x64>)
   8614a:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   8614c:	6862      	ldr	r2, [r4, #4]
   8614e:	4313      	orrs	r3, r2
   86150:	6063      	str	r3, [r4, #4]
	return 0;
   86152:	2000      	movs	r0, #0
   86154:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86156:	2001      	movs	r0, #1
   86158:	bd70      	pop	{r4, r5, r6, pc}
   8615a:	2001      	movs	r0, #1
}
   8615c:	bd70      	pop	{r4, r5, r6, pc}
   8615e:	bf00      	nop
   86160:	0008607d 	.word	0x0008607d
   86164:	2000237c 	.word	0x2000237c

00086168 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   86168:	2340      	movs	r3, #64	; 0x40
   8616a:	6003      	str	r3, [r0, #0]
   8616c:	4770      	bx	lr

0008616e <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   8616e:	2380      	movs	r3, #128	; 0x80
   86170:	6003      	str	r3, [r0, #0]
   86172:	4770      	bx	lr

00086174 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   86174:	2310      	movs	r3, #16
   86176:	6003      	str	r3, [r0, #0]
   86178:	4770      	bx	lr

0008617a <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   8617a:	2320      	movs	r3, #32
   8617c:	6003      	str	r3, [r0, #0]
   8617e:	4770      	bx	lr

00086180 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   86180:	6081      	str	r1, [r0, #8]
   86182:	4770      	bx	lr

00086184 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   86184:	60c1      	str	r1, [r0, #12]
   86186:	4770      	bx	lr

00086188 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   86188:	6900      	ldr	r0, [r0, #16]
}
   8618a:	4770      	bx	lr

0008618c <usart_get_status>:
	return p_usart->US_CSR;
   8618c:	6940      	ldr	r0, [r0, #20]
}
   8618e:	4770      	bx	lr

00086190 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   86190:	6940      	ldr	r0, [r0, #20]
}
   86192:	f3c0 2040 	ubfx	r0, r0, #9, #1
   86196:	4770      	bx	lr

00086198 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86198:	6943      	ldr	r3, [r0, #20]
   8619a:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   8619e:	bf1d      	ittte	ne
   861a0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   861a4:	61c1      	strne	r1, [r0, #28]
	return 0;
   861a6:	2000      	movne	r0, #0
		return 1;
   861a8:	2001      	moveq	r0, #1
}
   861aa:	4770      	bx	lr

000861ac <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   861ac:	6943      	ldr	r3, [r0, #20]
   861ae:	f013 0f02 	tst.w	r3, #2
   861b2:	d0fb      	beq.n	861ac <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   861b4:	f3c1 0108 	ubfx	r1, r1, #0, #9
   861b8:	61c1      	str	r1, [r0, #28]
}
   861ba:	2000      	movs	r0, #0
   861bc:	4770      	bx	lr

000861be <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   861be:	6943      	ldr	r3, [r0, #20]
   861c0:	f013 0f01 	tst.w	r3, #1
   861c4:	d005      	beq.n	861d2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   861c6:	6983      	ldr	r3, [r0, #24]
   861c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   861cc:	600b      	str	r3, [r1, #0]
	return 0;
   861ce:	2000      	movs	r0, #0
   861d0:	4770      	bx	lr
		return 1;
   861d2:	2001      	movs	r0, #1
}
   861d4:	4770      	bx	lr

000861d6 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   861d6:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   861d8:	23ac      	movs	r3, #172	; 0xac
   861da:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   861dc:	680b      	ldr	r3, [r1, #0]
   861de:	684a      	ldr	r2, [r1, #4]
   861e0:	fbb3 f3f2 	udiv	r3, r3, r2
   861e4:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   861e6:	1e5c      	subs	r4, r3, #1
   861e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   861ec:	4294      	cmp	r4, r2
   861ee:	d80b      	bhi.n	86208 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   861f0:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   861f2:	688b      	ldr	r3, [r1, #8]
   861f4:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   861f6:	f240 2302 	movw	r3, #514	; 0x202
   861fa:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   861fe:	2350      	movs	r3, #80	; 0x50
   86200:	6003      	str	r3, [r0, #0]

	return 0;
   86202:	2000      	movs	r0, #0
}
   86204:	bc10      	pop	{r4}
   86206:	4770      	bx	lr
		return 1;
   86208:	2001      	movs	r0, #1
   8620a:	e7fb      	b.n	86204 <uart_init+0x2e>

0008620c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8620c:	6943      	ldr	r3, [r0, #20]
   8620e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   86212:	bf1a      	itte	ne
   86214:	61c1      	strne	r1, [r0, #28]
	return 0;
   86216:	2000      	movne	r0, #0
		return 1;
   86218:	2001      	moveq	r0, #1
}
   8621a:	4770      	bx	lr

0008621c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8621c:	6943      	ldr	r3, [r0, #20]
   8621e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   86222:	bf1d      	ittte	ne
   86224:	6983      	ldrne	r3, [r0, #24]
   86226:	700b      	strbne	r3, [r1, #0]
	return 0;
   86228:	2000      	movne	r0, #0
		return 1;
   8622a:	2001      	moveq	r0, #1
}
   8622c:	4770      	bx	lr

0008622e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8622e:	e7fe      	b.n	8622e <Dummy_Handler>

00086230 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   86230:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   86232:	4b1c      	ldr	r3, [pc, #112]	; (862a4 <Reset_Handler+0x74>)
   86234:	4a1c      	ldr	r2, [pc, #112]	; (862a8 <Reset_Handler+0x78>)
   86236:	429a      	cmp	r2, r3
   86238:	d010      	beq.n	8625c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8623a:	4b1c      	ldr	r3, [pc, #112]	; (862ac <Reset_Handler+0x7c>)
   8623c:	4a19      	ldr	r2, [pc, #100]	; (862a4 <Reset_Handler+0x74>)
   8623e:	429a      	cmp	r2, r3
   86240:	d20c      	bcs.n	8625c <Reset_Handler+0x2c>
   86242:	3b01      	subs	r3, #1
   86244:	1a9b      	subs	r3, r3, r2
   86246:	f023 0303 	bic.w	r3, r3, #3
   8624a:	3304      	adds	r3, #4
   8624c:	4413      	add	r3, r2
   8624e:	4916      	ldr	r1, [pc, #88]	; (862a8 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   86250:	f851 0b04 	ldr.w	r0, [r1], #4
   86254:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   86258:	429a      	cmp	r2, r3
   8625a:	d1f9      	bne.n	86250 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8625c:	4b14      	ldr	r3, [pc, #80]	; (862b0 <Reset_Handler+0x80>)
   8625e:	4a15      	ldr	r2, [pc, #84]	; (862b4 <Reset_Handler+0x84>)
   86260:	429a      	cmp	r2, r3
   86262:	d20a      	bcs.n	8627a <Reset_Handler+0x4a>
   86264:	3b01      	subs	r3, #1
   86266:	1a9b      	subs	r3, r3, r2
   86268:	f023 0303 	bic.w	r3, r3, #3
   8626c:	3304      	adds	r3, #4
   8626e:	4413      	add	r3, r2
		*pDest++ = 0;
   86270:	2100      	movs	r1, #0
   86272:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   86276:	4293      	cmp	r3, r2
   86278:	d1fb      	bne.n	86272 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8627a:	4b0f      	ldr	r3, [pc, #60]	; (862b8 <Reset_Handler+0x88>)
   8627c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   86280:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   86284:	490d      	ldr	r1, [pc, #52]	; (862bc <Reset_Handler+0x8c>)
   86286:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   86288:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8628c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   86290:	d203      	bcs.n	8629a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   86292:	688b      	ldr	r3, [r1, #8]
   86294:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   86298:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8629a:	4b09      	ldr	r3, [pc, #36]	; (862c0 <Reset_Handler+0x90>)
   8629c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8629e:	4b09      	ldr	r3, [pc, #36]	; (862c4 <Reset_Handler+0x94>)
   862a0:	4798      	blx	r3
   862a2:	e7fe      	b.n	862a2 <Reset_Handler+0x72>
   862a4:	20000000 	.word	0x20000000
   862a8:	0008cf64 	.word	0x0008cf64
   862ac:	20001538 	.word	0x20001538
   862b0:	200028bc 	.word	0x200028bc
   862b4:	20001538 	.word	0x20001538
   862b8:	00080000 	.word	0x00080000
   862bc:	e000ed00 	.word	0xe000ed00
   862c0:	00086a69 	.word	0x00086a69
   862c4:	0008653d 	.word	0x0008653d

000862c8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   862c8:	4b3d      	ldr	r3, [pc, #244]	; (863c0 <SystemCoreClockUpdate+0xf8>)
   862ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   862cc:	f003 0303 	and.w	r3, r3, #3
   862d0:	2b03      	cmp	r3, #3
   862d2:	d80e      	bhi.n	862f2 <SystemCoreClockUpdate+0x2a>
   862d4:	e8df f003 	tbb	[pc, r3]
   862d8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   862dc:	4b39      	ldr	r3, [pc, #228]	; (863c4 <SystemCoreClockUpdate+0xfc>)
   862de:	695b      	ldr	r3, [r3, #20]
   862e0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   862e4:	bf14      	ite	ne
   862e6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   862ea:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   862ee:	4b36      	ldr	r3, [pc, #216]	; (863c8 <SystemCoreClockUpdate+0x100>)
   862f0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   862f2:	4b33      	ldr	r3, [pc, #204]	; (863c0 <SystemCoreClockUpdate+0xf8>)
   862f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   862f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   862fa:	2b70      	cmp	r3, #112	; 0x70
   862fc:	d057      	beq.n	863ae <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   862fe:	4b30      	ldr	r3, [pc, #192]	; (863c0 <SystemCoreClockUpdate+0xf8>)
   86300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   86302:	4931      	ldr	r1, [pc, #196]	; (863c8 <SystemCoreClockUpdate+0x100>)
   86304:	f3c2 1202 	ubfx	r2, r2, #4, #3
   86308:	680b      	ldr	r3, [r1, #0]
   8630a:	40d3      	lsrs	r3, r2
   8630c:	600b      	str	r3, [r1, #0]
   8630e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86310:	4b2b      	ldr	r3, [pc, #172]	; (863c0 <SystemCoreClockUpdate+0xf8>)
   86312:	6a1b      	ldr	r3, [r3, #32]
   86314:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   86318:	d003      	beq.n	86322 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8631a:	4a2c      	ldr	r2, [pc, #176]	; (863cc <SystemCoreClockUpdate+0x104>)
   8631c:	4b2a      	ldr	r3, [pc, #168]	; (863c8 <SystemCoreClockUpdate+0x100>)
   8631e:	601a      	str	r2, [r3, #0]
   86320:	e7e7      	b.n	862f2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   86322:	4a2b      	ldr	r2, [pc, #172]	; (863d0 <SystemCoreClockUpdate+0x108>)
   86324:	4b28      	ldr	r3, [pc, #160]	; (863c8 <SystemCoreClockUpdate+0x100>)
   86326:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   86328:	4b25      	ldr	r3, [pc, #148]	; (863c0 <SystemCoreClockUpdate+0xf8>)
   8632a:	6a1b      	ldr	r3, [r3, #32]
   8632c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86330:	2b10      	cmp	r3, #16
   86332:	d005      	beq.n	86340 <SystemCoreClockUpdate+0x78>
   86334:	2b20      	cmp	r3, #32
   86336:	d1dc      	bne.n	862f2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   86338:	4a24      	ldr	r2, [pc, #144]	; (863cc <SystemCoreClockUpdate+0x104>)
   8633a:	4b23      	ldr	r3, [pc, #140]	; (863c8 <SystemCoreClockUpdate+0x100>)
   8633c:	601a      	str	r2, [r3, #0]
				break;
   8633e:	e7d8      	b.n	862f2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   86340:	4a24      	ldr	r2, [pc, #144]	; (863d4 <SystemCoreClockUpdate+0x10c>)
   86342:	4b21      	ldr	r3, [pc, #132]	; (863c8 <SystemCoreClockUpdate+0x100>)
   86344:	601a      	str	r2, [r3, #0]
				break;
   86346:	e7d4      	b.n	862f2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86348:	4b1d      	ldr	r3, [pc, #116]	; (863c0 <SystemCoreClockUpdate+0xf8>)
   8634a:	6a1b      	ldr	r3, [r3, #32]
   8634c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   86350:	d00c      	beq.n	8636c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86352:	4a1e      	ldr	r2, [pc, #120]	; (863cc <SystemCoreClockUpdate+0x104>)
   86354:	4b1c      	ldr	r3, [pc, #112]	; (863c8 <SystemCoreClockUpdate+0x100>)
   86356:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   86358:	4b19      	ldr	r3, [pc, #100]	; (863c0 <SystemCoreClockUpdate+0xf8>)
   8635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8635c:	f003 0303 	and.w	r3, r3, #3
   86360:	2b02      	cmp	r3, #2
   86362:	d016      	beq.n	86392 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   86364:	4a1c      	ldr	r2, [pc, #112]	; (863d8 <SystemCoreClockUpdate+0x110>)
   86366:	4b18      	ldr	r3, [pc, #96]	; (863c8 <SystemCoreClockUpdate+0x100>)
   86368:	601a      	str	r2, [r3, #0]
   8636a:	e7c2      	b.n	862f2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8636c:	4a18      	ldr	r2, [pc, #96]	; (863d0 <SystemCoreClockUpdate+0x108>)
   8636e:	4b16      	ldr	r3, [pc, #88]	; (863c8 <SystemCoreClockUpdate+0x100>)
   86370:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   86372:	4b13      	ldr	r3, [pc, #76]	; (863c0 <SystemCoreClockUpdate+0xf8>)
   86374:	6a1b      	ldr	r3, [r3, #32]
   86376:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8637a:	2b10      	cmp	r3, #16
   8637c:	d005      	beq.n	8638a <SystemCoreClockUpdate+0xc2>
   8637e:	2b20      	cmp	r3, #32
   86380:	d1ea      	bne.n	86358 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   86382:	4a12      	ldr	r2, [pc, #72]	; (863cc <SystemCoreClockUpdate+0x104>)
   86384:	4b10      	ldr	r3, [pc, #64]	; (863c8 <SystemCoreClockUpdate+0x100>)
   86386:	601a      	str	r2, [r3, #0]
				break;
   86388:	e7e6      	b.n	86358 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8638a:	4a12      	ldr	r2, [pc, #72]	; (863d4 <SystemCoreClockUpdate+0x10c>)
   8638c:	4b0e      	ldr	r3, [pc, #56]	; (863c8 <SystemCoreClockUpdate+0x100>)
   8638e:	601a      	str	r2, [r3, #0]
				break;
   86390:	e7e2      	b.n	86358 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   86392:	4a0b      	ldr	r2, [pc, #44]	; (863c0 <SystemCoreClockUpdate+0xf8>)
   86394:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   86396:	6a92      	ldr	r2, [r2, #40]	; 0x28
   86398:	480b      	ldr	r0, [pc, #44]	; (863c8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8639a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8639e:	6803      	ldr	r3, [r0, #0]
   863a0:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   863a4:	b2d2      	uxtb	r2, r2
   863a6:	fbb3 f3f2 	udiv	r3, r3, r2
   863aa:	6003      	str	r3, [r0, #0]
   863ac:	e7a1      	b.n	862f2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   863ae:	4a06      	ldr	r2, [pc, #24]	; (863c8 <SystemCoreClockUpdate+0x100>)
   863b0:	6813      	ldr	r3, [r2, #0]
   863b2:	490a      	ldr	r1, [pc, #40]	; (863dc <SystemCoreClockUpdate+0x114>)
   863b4:	fba1 1303 	umull	r1, r3, r1, r3
   863b8:	085b      	lsrs	r3, r3, #1
   863ba:	6013      	str	r3, [r2, #0]
   863bc:	4770      	bx	lr
   863be:	bf00      	nop
   863c0:	400e0400 	.word	0x400e0400
   863c4:	400e1210 	.word	0x400e1210
   863c8:	20000b64 	.word	0x20000b64
   863cc:	00b71b00 	.word	0x00b71b00
   863d0:	003d0900 	.word	0x003d0900
   863d4:	007a1200 	.word	0x007a1200
   863d8:	0e4e1c00 	.word	0x0e4e1c00
   863dc:	aaaaaaab 	.word	0xaaaaaaab

000863e0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   863e0:	4b0a      	ldr	r3, [pc, #40]	; (8640c <_sbrk+0x2c>)
   863e2:	681b      	ldr	r3, [r3, #0]
   863e4:	b153      	cbz	r3, 863fc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   863e6:	4b09      	ldr	r3, [pc, #36]	; (8640c <_sbrk+0x2c>)
   863e8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   863ea:	181a      	adds	r2, r3, r0
   863ec:	4908      	ldr	r1, [pc, #32]	; (86410 <_sbrk+0x30>)
   863ee:	4291      	cmp	r1, r2
   863f0:	db08      	blt.n	86404 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   863f2:	4610      	mov	r0, r2
   863f4:	4a05      	ldr	r2, [pc, #20]	; (8640c <_sbrk+0x2c>)
   863f6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   863f8:	4618      	mov	r0, r3
   863fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   863fc:	4a05      	ldr	r2, [pc, #20]	; (86414 <_sbrk+0x34>)
   863fe:	4b03      	ldr	r3, [pc, #12]	; (8640c <_sbrk+0x2c>)
   86400:	601a      	str	r2, [r3, #0]
   86402:	e7f0      	b.n	863e6 <_sbrk+0x6>
		return (caddr_t) -1;	
   86404:	f04f 30ff 	mov.w	r0, #4294967295
}
   86408:	4770      	bx	lr
   8640a:	bf00      	nop
   8640c:	20002380 	.word	0x20002380
   86410:	2007fffc 	.word	0x2007fffc
   86414:	200815d0 	.word	0x200815d0

00086418 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   86418:	f04f 30ff 	mov.w	r0, #4294967295
   8641c:	4770      	bx	lr

0008641e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8641e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   86422:	604b      	str	r3, [r1, #4]

	return 0;
}
   86424:	2000      	movs	r0, #0
   86426:	4770      	bx	lr

00086428 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   86428:	2001      	movs	r0, #1
   8642a:	4770      	bx	lr

0008642c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8642c:	2000      	movs	r0, #0
   8642e:	4770      	bx	lr

00086430 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   86430:	b5f0      	push	{r4, r5, r6, r7, lr}
   86432:	b083      	sub	sp, #12
   86434:	4604      	mov	r4, r0
   86436:	460d      	mov	r5, r1
	uint32_t val = 0;
   86438:	2300      	movs	r3, #0
   8643a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8643c:	4b19      	ldr	r3, [pc, #100]	; (864a4 <usart_serial_getchar+0x74>)
   8643e:	4298      	cmp	r0, r3
   86440:	d00a      	beq.n	86458 <usart_serial_getchar+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   86442:	4b19      	ldr	r3, [pc, #100]	; (864a8 <usart_serial_getchar+0x78>)
   86444:	4298      	cmp	r0, r3
   86446:	d00f      	beq.n	86468 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   86448:	4b18      	ldr	r3, [pc, #96]	; (864ac <usart_serial_getchar+0x7c>)
   8644a:	4298      	cmp	r0, r3
   8644c:	d016      	beq.n	8647c <usart_serial_getchar+0x4c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8644e:	4b18      	ldr	r3, [pc, #96]	; (864b0 <usart_serial_getchar+0x80>)
   86450:	429c      	cmp	r4, r3
   86452:	d01d      	beq.n	86490 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   86454:	b003      	add	sp, #12
   86456:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   86458:	461f      	mov	r7, r3
   8645a:	4e16      	ldr	r6, [pc, #88]	; (864b4 <usart_serial_getchar+0x84>)
   8645c:	4629      	mov	r1, r5
   8645e:	4638      	mov	r0, r7
   86460:	47b0      	blx	r6
   86462:	2800      	cmp	r0, #0
   86464:	d1fa      	bne.n	8645c <usart_serial_getchar+0x2c>
   86466:	e7f2      	b.n	8644e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   86468:	461e      	mov	r6, r3
   8646a:	4c13      	ldr	r4, [pc, #76]	; (864b8 <usart_serial_getchar+0x88>)
   8646c:	a901      	add	r1, sp, #4
   8646e:	4630      	mov	r0, r6
   86470:	47a0      	blx	r4
   86472:	2800      	cmp	r0, #0
   86474:	d1fa      	bne.n	8646c <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
   86476:	9b01      	ldr	r3, [sp, #4]
   86478:	702b      	strb	r3, [r5, #0]
   8647a:	e7eb      	b.n	86454 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8647c:	461e      	mov	r6, r3
   8647e:	4c0e      	ldr	r4, [pc, #56]	; (864b8 <usart_serial_getchar+0x88>)
   86480:	a901      	add	r1, sp, #4
   86482:	4630      	mov	r0, r6
   86484:	47a0      	blx	r4
   86486:	2800      	cmp	r0, #0
   86488:	d1fa      	bne.n	86480 <usart_serial_getchar+0x50>
		*data = (uint8_t)(val & 0xFF);
   8648a:	9b01      	ldr	r3, [sp, #4]
   8648c:	702b      	strb	r3, [r5, #0]
   8648e:	e7e1      	b.n	86454 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   86490:	461e      	mov	r6, r3
   86492:	4c09      	ldr	r4, [pc, #36]	; (864b8 <usart_serial_getchar+0x88>)
   86494:	a901      	add	r1, sp, #4
   86496:	4630      	mov	r0, r6
   86498:	47a0      	blx	r4
   8649a:	2800      	cmp	r0, #0
   8649c:	d1fa      	bne.n	86494 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
   8649e:	9b01      	ldr	r3, [sp, #4]
   864a0:	702b      	strb	r3, [r5, #0]
}
   864a2:	e7d7      	b.n	86454 <usart_serial_getchar+0x24>
   864a4:	400e0600 	.word	0x400e0600
   864a8:	40090000 	.word	0x40090000
   864ac:	40094000 	.word	0x40094000
   864b0:	40098000 	.word	0x40098000
   864b4:	0008621d 	.word	0x0008621d
   864b8:	000861bf 	.word	0x000861bf

000864bc <usart_serial_putchar>:
{
   864bc:	b570      	push	{r4, r5, r6, lr}
   864be:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   864c0:	4b18      	ldr	r3, [pc, #96]	; (86524 <usart_serial_putchar+0x68>)
   864c2:	4298      	cmp	r0, r3
   864c4:	d00a      	beq.n	864dc <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   864c6:	4b18      	ldr	r3, [pc, #96]	; (86528 <usart_serial_putchar+0x6c>)
   864c8:	4298      	cmp	r0, r3
   864ca:	d010      	beq.n	864ee <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   864cc:	4b17      	ldr	r3, [pc, #92]	; (8652c <usart_serial_putchar+0x70>)
   864ce:	4298      	cmp	r0, r3
   864d0:	d016      	beq.n	86500 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   864d2:	4b17      	ldr	r3, [pc, #92]	; (86530 <usart_serial_putchar+0x74>)
   864d4:	4298      	cmp	r0, r3
   864d6:	d01c      	beq.n	86512 <usart_serial_putchar+0x56>
	return 0;
   864d8:	2000      	movs	r0, #0
}
   864da:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   864dc:	461e      	mov	r6, r3
   864de:	4d15      	ldr	r5, [pc, #84]	; (86534 <usart_serial_putchar+0x78>)
   864e0:	4621      	mov	r1, r4
   864e2:	4630      	mov	r0, r6
   864e4:	47a8      	blx	r5
   864e6:	2800      	cmp	r0, #0
   864e8:	d1fa      	bne.n	864e0 <usart_serial_putchar+0x24>
		return 1;
   864ea:	2001      	movs	r0, #1
   864ec:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   864ee:	461e      	mov	r6, r3
   864f0:	4d11      	ldr	r5, [pc, #68]	; (86538 <usart_serial_putchar+0x7c>)
   864f2:	4621      	mov	r1, r4
   864f4:	4630      	mov	r0, r6
   864f6:	47a8      	blx	r5
   864f8:	2800      	cmp	r0, #0
   864fa:	d1fa      	bne.n	864f2 <usart_serial_putchar+0x36>
		return 1;
   864fc:	2001      	movs	r0, #1
   864fe:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   86500:	461e      	mov	r6, r3
   86502:	4d0d      	ldr	r5, [pc, #52]	; (86538 <usart_serial_putchar+0x7c>)
   86504:	4621      	mov	r1, r4
   86506:	4630      	mov	r0, r6
   86508:	47a8      	blx	r5
   8650a:	2800      	cmp	r0, #0
   8650c:	d1fa      	bne.n	86504 <usart_serial_putchar+0x48>
		return 1;
   8650e:	2001      	movs	r0, #1
   86510:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   86512:	461e      	mov	r6, r3
   86514:	4d08      	ldr	r5, [pc, #32]	; (86538 <usart_serial_putchar+0x7c>)
   86516:	4621      	mov	r1, r4
   86518:	4630      	mov	r0, r6
   8651a:	47a8      	blx	r5
   8651c:	2800      	cmp	r0, #0
   8651e:	d1fa      	bne.n	86516 <usart_serial_putchar+0x5a>
		return 1;
   86520:	2001      	movs	r0, #1
   86522:	bd70      	pop	{r4, r5, r6, pc}
   86524:	400e0600 	.word	0x400e0600
   86528:	40090000 	.word	0x40090000
   8652c:	40094000 	.word	0x40094000
   86530:	40098000 	.word	0x40098000
   86534:	0008620d 	.word	0x0008620d
   86538:	00086199 	.word	0x00086199

0008653c <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   8653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86540:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   86542:	2110      	movs	r1, #16
   86544:	eb0d 0001 	add.w	r0, sp, r1
   86548:	4b54      	ldr	r3, [pc, #336]	; (8669c <main+0x160>)
   8654a:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   8654c:	2008      	movs	r0, #8
   8654e:	4d54      	ldr	r5, [pc, #336]	; (866a0 <main+0x164>)
   86550:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   86552:	4c54      	ldr	r4, [pc, #336]	; (866a4 <main+0x168>)
   86554:	4b54      	ldr	r3, [pc, #336]	; (866a8 <main+0x16c>)
   86556:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   86558:	4a54      	ldr	r2, [pc, #336]	; (866ac <main+0x170>)
   8655a:	4b55      	ldr	r3, [pc, #340]	; (866b0 <main+0x174>)
   8655c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8655e:	4a55      	ldr	r2, [pc, #340]	; (866b4 <main+0x178>)
   86560:	4b55      	ldr	r3, [pc, #340]	; (866b8 <main+0x17c>)
   86562:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   86564:	4b55      	ldr	r3, [pc, #340]	; (866bc <main+0x180>)
   86566:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   86568:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8656c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8656e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   86572:	9303      	str	r3, [sp, #12]
   86574:	2008      	movs	r0, #8
   86576:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   86578:	a901      	add	r1, sp, #4
   8657a:	4620      	mov	r0, r4
   8657c:	4b50      	ldr	r3, [pc, #320]	; (866c0 <main+0x184>)
   8657e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   86580:	4d50      	ldr	r5, [pc, #320]	; (866c4 <main+0x188>)
   86582:	682b      	ldr	r3, [r5, #0]
   86584:	2100      	movs	r1, #0
   86586:	6898      	ldr	r0, [r3, #8]
   86588:	4c4f      	ldr	r4, [pc, #316]	; (866c8 <main+0x18c>)
   8658a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8658c:	682b      	ldr	r3, [r5, #0]
   8658e:	2100      	movs	r1, #0
   86590:	6858      	ldr	r0, [r3, #4]
   86592:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   86594:	2101      	movs	r1, #1
   86596:	4b4d      	ldr	r3, [pc, #308]	; (866cc <main+0x190>)
   86598:	7019      	strb	r1, [r3, #0]
   8659a:	f3bf 8f5f 	dmb	sy
   8659e:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   865a0:	4b4b      	ldr	r3, [pc, #300]	; (866d0 <main+0x194>)
   865a2:	2200      	movs	r2, #0
   865a4:	701a      	strb	r2, [r3, #0]
   865a6:	705a      	strb	r2, [r3, #1]
   865a8:	709a      	strb	r2, [r3, #2]
   865aa:	70da      	strb	r2, [r3, #3]
   865ac:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   865ae:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   865b0:	4b48      	ldr	r3, [pc, #288]	; (866d4 <main+0x198>)
   865b2:	4798      	blx	r3
	board_init();
   865b4:	4b48      	ldr	r3, [pc, #288]	; (866d8 <main+0x19c>)
   865b6:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   865b8:	4b48      	ldr	r3, [pc, #288]	; (866dc <main+0x1a0>)
   865ba:	4798      	blx	r3
   865bc:	ad04      	add	r5, sp, #16
   865be:	4c48      	ldr	r4, [pc, #288]	; (866e0 <main+0x1a4>)
   865c0:	f104 0820 	add.w	r8, r4, #32

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   865c4:	4f47      	ldr	r7, [pc, #284]	; (866e4 <main+0x1a8>)
   865c6:	4e48      	ldr	r6, [pc, #288]	; (866e8 <main+0x1ac>)
   865c8:	f855 2b04 	ldr.w	r2, [r5], #4
   865cc:	4639      	mov	r1, r7
   865ce:	4620      	mov	r0, r4
   865d0:	47b0      	blx	r6
   865d2:	3408      	adds	r4, #8
	for(unsigned int i = 0; i < 4; i++){
   865d4:	45a0      	cmp	r8, r4
   865d6:	d1f7      	bne.n	865c8 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   865d8:	4c41      	ldr	r4, [pc, #260]	; (866e0 <main+0x1a4>)
   865da:	2600      	movs	r6, #0
   865dc:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   865e0:	4a42      	ldr	r2, [pc, #264]	; (866ec <main+0x1b0>)
   865e2:	4943      	ldr	r1, [pc, #268]	; (866f0 <main+0x1b4>)
   865e4:	4843      	ldr	r0, [pc, #268]	; (866f4 <main+0x1b8>)
   865e6:	4f44      	ldr	r7, [pc, #272]	; (866f8 <main+0x1bc>)
   865e8:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   865ea:	4621      	mov	r1, r4
   865ec:	4843      	ldr	r0, [pc, #268]	; (866fc <main+0x1c0>)
   865ee:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   865f0:	2009      	movs	r0, #9
   865f2:	4b2b      	ldr	r3, [pc, #172]	; (866a0 <main+0x164>)
   865f4:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   865f6:	4d42      	ldr	r5, [pc, #264]	; (86700 <main+0x1c4>)
   865f8:	4629      	mov	r1, r5
   865fa:	2029      	movs	r0, #41	; 0x29
   865fc:	4c41      	ldr	r4, [pc, #260]	; (86704 <main+0x1c8>)
   865fe:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   86600:	4629      	mov	r1, r5
   86602:	202a      	movs	r0, #42	; 0x2a
   86604:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   86606:	4629      	mov	r1, r5
   86608:	202b      	movs	r0, #43	; 0x2b
   8660a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   8660c:	4629      	mov	r1, r5
   8660e:	202c      	movs	r0, #44	; 0x2c
   86610:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   86612:	4629      	mov	r1, r5
   86614:	202d      	movs	r0, #45	; 0x2d
   86616:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   86618:	4629      	mov	r1, r5
   8661a:	202e      	movs	r0, #46	; 0x2e
   8661c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8661e:	4629      	mov	r1, r5
   86620:	202f      	movs	r0, #47	; 0x2f
   86622:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   86624:	4629      	mov	r1, r5
   86626:	2030      	movs	r0, #48	; 0x30
   86628:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8662a:	4629      	mov	r1, r5
   8662c:	2033      	movs	r0, #51	; 0x33
   8662e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   86630:	4629      	mov	r1, r5
   86632:	2037      	movs	r0, #55	; 0x37
   86634:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   86636:	4629      	mov	r1, r5
   86638:	2034      	movs	r0, #52	; 0x34
   8663a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   8663c:	4832      	ldr	r0, [pc, #200]	; (86708 <main+0x1cc>)
   8663e:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   86640:	4c32      	ldr	r4, [pc, #200]	; (8670c <main+0x1d0>)
   86642:	4a33      	ldr	r2, [pc, #204]	; (86710 <main+0x1d4>)
   86644:	4631      	mov	r1, r6
   86646:	4620      	mov	r0, r4
   86648:	4b32      	ldr	r3, [pc, #200]	; (86714 <main+0x1d8>)
   8664a:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   8664c:	4a32      	ldr	r2, [pc, #200]	; (86718 <main+0x1dc>)
   8664e:	4631      	mov	r1, r6
   86650:	4620      	mov	r0, r4
   86652:	4b32      	ldr	r3, [pc, #200]	; (8671c <main+0x1e0>)
   86654:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   86656:	4a32      	ldr	r2, [pc, #200]	; (86720 <main+0x1e4>)
   86658:	4631      	mov	r1, r6
   8665a:	4620      	mov	r0, r4
   8665c:	4b31      	ldr	r3, [pc, #196]	; (86724 <main+0x1e8>)
   8665e:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   86660:	2203      	movs	r2, #3
   86662:	4631      	mov	r1, r6
   86664:	4620      	mov	r0, r4
   86666:	4b30      	ldr	r3, [pc, #192]	; (86728 <main+0x1ec>)
   86668:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   8666a:	4b30      	ldr	r3, [pc, #192]	; (8672c <main+0x1f0>)
   8666c:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   8666e:	4b30      	ldr	r3, [pc, #192]	; (86730 <main+0x1f4>)
   86670:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   86672:	2204      	movs	r2, #4
   86674:	4b2f      	ldr	r3, [pc, #188]	; (86734 <main+0x1f8>)
   86676:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   86678:	4630      	mov	r0, r6
   8667a:	4b2f      	ldr	r3, [pc, #188]	; (86738 <main+0x1fc>)
   8667c:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   8667e:	482f      	ldr	r0, [pc, #188]	; (8673c <main+0x200>)
   86680:	47b8      	blx	r7
	naeusb_register_handlers();
   86682:	4b2f      	ldr	r3, [pc, #188]	; (86740 <main+0x204>)
   86684:	4798      	blx	r3
	naeusart_register_handlers();
   86686:	4b2f      	ldr	r3, [pc, #188]	; (86744 <main+0x208>)
   86688:	4798      	blx	r3
	openadc_register_handlers();
   8668a:	4b2f      	ldr	r3, [pc, #188]	; (86748 <main+0x20c>)
   8668c:	4798      	blx	r3
	mpsse_register_handlers();
   8668e:	4b2f      	ldr	r3, [pc, #188]	; (8674c <main+0x210>)
   86690:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		cdc_send_to_pc();
   86692:	4d2f      	ldr	r5, [pc, #188]	; (86750 <main+0x214>)
		MPSSE_main_sendrecv_byte();
   86694:	4c2f      	ldr	r4, [pc, #188]	; (86754 <main+0x218>)
		cdc_send_to_pc();
   86696:	47a8      	blx	r5
		MPSSE_main_sendrecv_byte();
   86698:	47a0      	blx	r4
   8669a:	e7fc      	b.n	86696 <main+0x15a>
   8669c:	000841a1 	.word	0x000841a1
   866a0:	00084a69 	.word	0x00084a69
   866a4:	400e0600 	.word	0x400e0600
   866a8:	20002878 	.word	0x20002878
   866ac:	000864bd 	.word	0x000864bd
   866b0:	20002874 	.word	0x20002874
   866b4:	00086431 	.word	0x00086431
   866b8:	20002870 	.word	0x20002870
   866bc:	05b8d800 	.word	0x05b8d800
   866c0:	000861d7 	.word	0x000861d7
   866c4:	20000b8c 	.word	0x20000b8c
   866c8:	00086c69 	.word	0x00086c69
   866cc:	20000b60 	.word	0x20000b60
   866d0:	20002868 	.word	0x20002868
   866d4:	000842b9 	.word	0x000842b9
   866d8:	00084569 	.word	0x00084569
   866dc:	00083e65 	.word	0x00083e65
   866e0:	20000b68 	.word	0x20000b68
   866e4:	0008cbe8 	.word	0x0008cbe8
   866e8:	00086e09 	.word	0x00086e09
   866ec:	0008cbf0 	.word	0x0008cbf0
   866f0:	0008cbfc 	.word	0x0008cbfc
   866f4:	0008cc08 	.word	0x0008cc08
   866f8:	00086ab9 	.word	0x00086ab9
   866fc:	0008cc3c 	.word	0x0008cc3c
   86700:	08000001 	.word	0x08000001
   86704:	00084725 	.word	0x00084725
   86708:	0008cc50 	.word	0x0008cc50
   8670c:	400e0000 	.word	0x400e0000
   86710:	01010100 	.word	0x01010100
   86714:	000845d9 	.word	0x000845d9
   86718:	01030101 	.word	0x01030101
   8671c:	000845e5 	.word	0x000845e5
   86720:	00040002 	.word	0x00040002
   86724:	000845f1 	.word	0x000845f1
   86728:	000845fd 	.word	0x000845fd
   8672c:	000841f1 	.word	0x000841f1
   86730:	00082c2d 	.word	0x00082c2d
   86734:	400e0400 	.word	0x400e0400
   86738:	00084ad1 	.word	0x00084ad1
   8673c:	0008cc70 	.word	0x0008cc70
   86740:	000815b9 	.word	0x000815b9
   86744:	000827c1 	.word	0x000827c1
   86748:	00082311 	.word	0x00082311
   8674c:	00081e95 	.word	0x00081e95
   86750:	00082a21 	.word	0x00082a21
   86754:	00081eb5 	.word	0x00081eb5

00086758 <__aeabi_uldivmod>:
   86758:	b953      	cbnz	r3, 86770 <__aeabi_uldivmod+0x18>
   8675a:	b94a      	cbnz	r2, 86770 <__aeabi_uldivmod+0x18>
   8675c:	2900      	cmp	r1, #0
   8675e:	bf08      	it	eq
   86760:	2800      	cmpeq	r0, #0
   86762:	bf1c      	itt	ne
   86764:	f04f 31ff 	movne.w	r1, #4294967295
   86768:	f04f 30ff 	movne.w	r0, #4294967295
   8676c:	f000 b97a 	b.w	86a64 <__aeabi_idiv0>
   86770:	f1ad 0c08 	sub.w	ip, sp, #8
   86774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86778:	f000 f806 	bl	86788 <__udivmoddi4>
   8677c:	f8dd e004 	ldr.w	lr, [sp, #4]
   86780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86784:	b004      	add	sp, #16
   86786:	4770      	bx	lr

00086788 <__udivmoddi4>:
   86788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8678c:	468c      	mov	ip, r1
   8678e:	460e      	mov	r6, r1
   86790:	4604      	mov	r4, r0
   86792:	9d08      	ldr	r5, [sp, #32]
   86794:	2b00      	cmp	r3, #0
   86796:	d150      	bne.n	8683a <__udivmoddi4+0xb2>
   86798:	428a      	cmp	r2, r1
   8679a:	4617      	mov	r7, r2
   8679c:	d96c      	bls.n	86878 <__udivmoddi4+0xf0>
   8679e:	fab2 fe82 	clz	lr, r2
   867a2:	f1be 0f00 	cmp.w	lr, #0
   867a6:	d00b      	beq.n	867c0 <__udivmoddi4+0x38>
   867a8:	f1ce 0c20 	rsb	ip, lr, #32
   867ac:	fa01 f60e 	lsl.w	r6, r1, lr
   867b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   867b4:	fa02 f70e 	lsl.w	r7, r2, lr
   867b8:	ea4c 0c06 	orr.w	ip, ip, r6
   867bc:	fa00 f40e 	lsl.w	r4, r0, lr
   867c0:	0c3a      	lsrs	r2, r7, #16
   867c2:	fbbc f9f2 	udiv	r9, ip, r2
   867c6:	b2bb      	uxth	r3, r7
   867c8:	fb02 cc19 	mls	ip, r2, r9, ip
   867cc:	fb09 fa03 	mul.w	sl, r9, r3
   867d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   867d4:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   867d8:	45b2      	cmp	sl, r6
   867da:	d90a      	bls.n	867f2 <__udivmoddi4+0x6a>
   867dc:	19f6      	adds	r6, r6, r7
   867de:	f109 31ff 	add.w	r1, r9, #4294967295
   867e2:	f080 8125 	bcs.w	86a30 <__udivmoddi4+0x2a8>
   867e6:	45b2      	cmp	sl, r6
   867e8:	f240 8122 	bls.w	86a30 <__udivmoddi4+0x2a8>
   867ec:	f1a9 0902 	sub.w	r9, r9, #2
   867f0:	443e      	add	r6, r7
   867f2:	eba6 060a 	sub.w	r6, r6, sl
   867f6:	fbb6 f0f2 	udiv	r0, r6, r2
   867fa:	fb02 6610 	mls	r6, r2, r0, r6
   867fe:	fb00 f303 	mul.w	r3, r0, r3
   86802:	b2a4      	uxth	r4, r4
   86804:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   86808:	42a3      	cmp	r3, r4
   8680a:	d909      	bls.n	86820 <__udivmoddi4+0x98>
   8680c:	19e4      	adds	r4, r4, r7
   8680e:	f100 32ff 	add.w	r2, r0, #4294967295
   86812:	f080 810b 	bcs.w	86a2c <__udivmoddi4+0x2a4>
   86816:	42a3      	cmp	r3, r4
   86818:	f240 8108 	bls.w	86a2c <__udivmoddi4+0x2a4>
   8681c:	3802      	subs	r0, #2
   8681e:	443c      	add	r4, r7
   86820:	2100      	movs	r1, #0
   86822:	1ae4      	subs	r4, r4, r3
   86824:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86828:	2d00      	cmp	r5, #0
   8682a:	d062      	beq.n	868f2 <__udivmoddi4+0x16a>
   8682c:	2300      	movs	r3, #0
   8682e:	fa24 f40e 	lsr.w	r4, r4, lr
   86832:	602c      	str	r4, [r5, #0]
   86834:	606b      	str	r3, [r5, #4]
   86836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8683a:	428b      	cmp	r3, r1
   8683c:	d907      	bls.n	8684e <__udivmoddi4+0xc6>
   8683e:	2d00      	cmp	r5, #0
   86840:	d055      	beq.n	868ee <__udivmoddi4+0x166>
   86842:	2100      	movs	r1, #0
   86844:	e885 0041 	stmia.w	r5, {r0, r6}
   86848:	4608      	mov	r0, r1
   8684a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8684e:	fab3 f183 	clz	r1, r3
   86852:	2900      	cmp	r1, #0
   86854:	f040 808f 	bne.w	86976 <__udivmoddi4+0x1ee>
   86858:	42b3      	cmp	r3, r6
   8685a:	d302      	bcc.n	86862 <__udivmoddi4+0xda>
   8685c:	4282      	cmp	r2, r0
   8685e:	f200 80fc 	bhi.w	86a5a <__udivmoddi4+0x2d2>
   86862:	1a84      	subs	r4, r0, r2
   86864:	eb66 0603 	sbc.w	r6, r6, r3
   86868:	2001      	movs	r0, #1
   8686a:	46b4      	mov	ip, r6
   8686c:	2d00      	cmp	r5, #0
   8686e:	d040      	beq.n	868f2 <__udivmoddi4+0x16a>
   86870:	e885 1010 	stmia.w	r5, {r4, ip}
   86874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86878:	b912      	cbnz	r2, 86880 <__udivmoddi4+0xf8>
   8687a:	2701      	movs	r7, #1
   8687c:	fbb7 f7f2 	udiv	r7, r7, r2
   86880:	fab7 fe87 	clz	lr, r7
   86884:	f1be 0f00 	cmp.w	lr, #0
   86888:	d135      	bne.n	868f6 <__udivmoddi4+0x16e>
   8688a:	2101      	movs	r1, #1
   8688c:	1bf6      	subs	r6, r6, r7
   8688e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86892:	fa1f f887 	uxth.w	r8, r7
   86896:	fbb6 f2fc 	udiv	r2, r6, ip
   8689a:	fb0c 6612 	mls	r6, ip, r2, r6
   8689e:	fb08 f002 	mul.w	r0, r8, r2
   868a2:	0c23      	lsrs	r3, r4, #16
   868a4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   868a8:	42b0      	cmp	r0, r6
   868aa:	d907      	bls.n	868bc <__udivmoddi4+0x134>
   868ac:	19f6      	adds	r6, r6, r7
   868ae:	f102 33ff 	add.w	r3, r2, #4294967295
   868b2:	d202      	bcs.n	868ba <__udivmoddi4+0x132>
   868b4:	42b0      	cmp	r0, r6
   868b6:	f200 80d2 	bhi.w	86a5e <__udivmoddi4+0x2d6>
   868ba:	461a      	mov	r2, r3
   868bc:	1a36      	subs	r6, r6, r0
   868be:	fbb6 f0fc 	udiv	r0, r6, ip
   868c2:	fb0c 6610 	mls	r6, ip, r0, r6
   868c6:	fb08 f800 	mul.w	r8, r8, r0
   868ca:	b2a3      	uxth	r3, r4
   868cc:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   868d0:	45a0      	cmp	r8, r4
   868d2:	d907      	bls.n	868e4 <__udivmoddi4+0x15c>
   868d4:	19e4      	adds	r4, r4, r7
   868d6:	f100 33ff 	add.w	r3, r0, #4294967295
   868da:	d202      	bcs.n	868e2 <__udivmoddi4+0x15a>
   868dc:	45a0      	cmp	r8, r4
   868de:	f200 80b9 	bhi.w	86a54 <__udivmoddi4+0x2cc>
   868e2:	4618      	mov	r0, r3
   868e4:	eba4 0408 	sub.w	r4, r4, r8
   868e8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   868ec:	e79c      	b.n	86828 <__udivmoddi4+0xa0>
   868ee:	4629      	mov	r1, r5
   868f0:	4628      	mov	r0, r5
   868f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   868f6:	fa07 f70e 	lsl.w	r7, r7, lr
   868fa:	f1ce 0320 	rsb	r3, lr, #32
   868fe:	fa26 f203 	lsr.w	r2, r6, r3
   86902:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86906:	fbb2 f1fc 	udiv	r1, r2, ip
   8690a:	fa1f f887 	uxth.w	r8, r7
   8690e:	fb0c 2211 	mls	r2, ip, r1, r2
   86912:	fa06 f60e 	lsl.w	r6, r6, lr
   86916:	fa20 f303 	lsr.w	r3, r0, r3
   8691a:	fb01 f908 	mul.w	r9, r1, r8
   8691e:	4333      	orrs	r3, r6
   86920:	0c1e      	lsrs	r6, r3, #16
   86922:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86926:	45b1      	cmp	r9, r6
   86928:	fa00 f40e 	lsl.w	r4, r0, lr
   8692c:	d909      	bls.n	86942 <__udivmoddi4+0x1ba>
   8692e:	19f6      	adds	r6, r6, r7
   86930:	f101 32ff 	add.w	r2, r1, #4294967295
   86934:	f080 808c 	bcs.w	86a50 <__udivmoddi4+0x2c8>
   86938:	45b1      	cmp	r9, r6
   8693a:	f240 8089 	bls.w	86a50 <__udivmoddi4+0x2c8>
   8693e:	3902      	subs	r1, #2
   86940:	443e      	add	r6, r7
   86942:	eba6 0609 	sub.w	r6, r6, r9
   86946:	fbb6 f0fc 	udiv	r0, r6, ip
   8694a:	fb0c 6210 	mls	r2, ip, r0, r6
   8694e:	fb00 f908 	mul.w	r9, r0, r8
   86952:	b29e      	uxth	r6, r3
   86954:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86958:	45b1      	cmp	r9, r6
   8695a:	d907      	bls.n	8696c <__udivmoddi4+0x1e4>
   8695c:	19f6      	adds	r6, r6, r7
   8695e:	f100 33ff 	add.w	r3, r0, #4294967295
   86962:	d271      	bcs.n	86a48 <__udivmoddi4+0x2c0>
   86964:	45b1      	cmp	r9, r6
   86966:	d96f      	bls.n	86a48 <__udivmoddi4+0x2c0>
   86968:	3802      	subs	r0, #2
   8696a:	443e      	add	r6, r7
   8696c:	eba6 0609 	sub.w	r6, r6, r9
   86970:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   86974:	e78f      	b.n	86896 <__udivmoddi4+0x10e>
   86976:	f1c1 0720 	rsb	r7, r1, #32
   8697a:	fa22 f807 	lsr.w	r8, r2, r7
   8697e:	408b      	lsls	r3, r1
   86980:	ea48 0303 	orr.w	r3, r8, r3
   86984:	fa26 f407 	lsr.w	r4, r6, r7
   86988:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   8698c:	fbb4 f9fe 	udiv	r9, r4, lr
   86990:	fa1f fc83 	uxth.w	ip, r3
   86994:	fb0e 4419 	mls	r4, lr, r9, r4
   86998:	408e      	lsls	r6, r1
   8699a:	fa20 f807 	lsr.w	r8, r0, r7
   8699e:	fb09 fa0c 	mul.w	sl, r9, ip
   869a2:	ea48 0806 	orr.w	r8, r8, r6
   869a6:	ea4f 4618 	mov.w	r6, r8, lsr #16
   869aa:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   869ae:	45a2      	cmp	sl, r4
   869b0:	fa02 f201 	lsl.w	r2, r2, r1
   869b4:	fa00 f601 	lsl.w	r6, r0, r1
   869b8:	d908      	bls.n	869cc <__udivmoddi4+0x244>
   869ba:	18e4      	adds	r4, r4, r3
   869bc:	f109 30ff 	add.w	r0, r9, #4294967295
   869c0:	d244      	bcs.n	86a4c <__udivmoddi4+0x2c4>
   869c2:	45a2      	cmp	sl, r4
   869c4:	d942      	bls.n	86a4c <__udivmoddi4+0x2c4>
   869c6:	f1a9 0902 	sub.w	r9, r9, #2
   869ca:	441c      	add	r4, r3
   869cc:	eba4 040a 	sub.w	r4, r4, sl
   869d0:	fbb4 f0fe 	udiv	r0, r4, lr
   869d4:	fb0e 4410 	mls	r4, lr, r0, r4
   869d8:	fb00 fc0c 	mul.w	ip, r0, ip
   869dc:	fa1f f888 	uxth.w	r8, r8
   869e0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   869e4:	45a4      	cmp	ip, r4
   869e6:	d907      	bls.n	869f8 <__udivmoddi4+0x270>
   869e8:	18e4      	adds	r4, r4, r3
   869ea:	f100 3eff 	add.w	lr, r0, #4294967295
   869ee:	d229      	bcs.n	86a44 <__udivmoddi4+0x2bc>
   869f0:	45a4      	cmp	ip, r4
   869f2:	d927      	bls.n	86a44 <__udivmoddi4+0x2bc>
   869f4:	3802      	subs	r0, #2
   869f6:	441c      	add	r4, r3
   869f8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   869fc:	fba0 8902 	umull	r8, r9, r0, r2
   86a00:	eba4 0c0c 	sub.w	ip, r4, ip
   86a04:	45cc      	cmp	ip, r9
   86a06:	46c2      	mov	sl, r8
   86a08:	46ce      	mov	lr, r9
   86a0a:	d315      	bcc.n	86a38 <__udivmoddi4+0x2b0>
   86a0c:	d012      	beq.n	86a34 <__udivmoddi4+0x2ac>
   86a0e:	b155      	cbz	r5, 86a26 <__udivmoddi4+0x29e>
   86a10:	ebb6 030a 	subs.w	r3, r6, sl
   86a14:	eb6c 060e 	sbc.w	r6, ip, lr
   86a18:	fa06 f707 	lsl.w	r7, r6, r7
   86a1c:	40cb      	lsrs	r3, r1
   86a1e:	431f      	orrs	r7, r3
   86a20:	40ce      	lsrs	r6, r1
   86a22:	602f      	str	r7, [r5, #0]
   86a24:	606e      	str	r6, [r5, #4]
   86a26:	2100      	movs	r1, #0
   86a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86a2c:	4610      	mov	r0, r2
   86a2e:	e6f7      	b.n	86820 <__udivmoddi4+0x98>
   86a30:	4689      	mov	r9, r1
   86a32:	e6de      	b.n	867f2 <__udivmoddi4+0x6a>
   86a34:	4546      	cmp	r6, r8
   86a36:	d2ea      	bcs.n	86a0e <__udivmoddi4+0x286>
   86a38:	ebb8 0a02 	subs.w	sl, r8, r2
   86a3c:	eb69 0e03 	sbc.w	lr, r9, r3
   86a40:	3801      	subs	r0, #1
   86a42:	e7e4      	b.n	86a0e <__udivmoddi4+0x286>
   86a44:	4670      	mov	r0, lr
   86a46:	e7d7      	b.n	869f8 <__udivmoddi4+0x270>
   86a48:	4618      	mov	r0, r3
   86a4a:	e78f      	b.n	8696c <__udivmoddi4+0x1e4>
   86a4c:	4681      	mov	r9, r0
   86a4e:	e7bd      	b.n	869cc <__udivmoddi4+0x244>
   86a50:	4611      	mov	r1, r2
   86a52:	e776      	b.n	86942 <__udivmoddi4+0x1ba>
   86a54:	3802      	subs	r0, #2
   86a56:	443c      	add	r4, r7
   86a58:	e744      	b.n	868e4 <__udivmoddi4+0x15c>
   86a5a:	4608      	mov	r0, r1
   86a5c:	e706      	b.n	8686c <__udivmoddi4+0xe4>
   86a5e:	3a02      	subs	r2, #2
   86a60:	443e      	add	r6, r7
   86a62:	e72b      	b.n	868bc <__udivmoddi4+0x134>

00086a64 <__aeabi_idiv0>:
   86a64:	4770      	bx	lr
   86a66:	bf00      	nop

00086a68 <__libc_init_array>:
   86a68:	b570      	push	{r4, r5, r6, lr}
   86a6a:	4e0f      	ldr	r6, [pc, #60]	; (86aa8 <__libc_init_array+0x40>)
   86a6c:	4d0f      	ldr	r5, [pc, #60]	; (86aac <__libc_init_array+0x44>)
   86a6e:	1b76      	subs	r6, r6, r5
   86a70:	10b6      	asrs	r6, r6, #2
   86a72:	bf18      	it	ne
   86a74:	2400      	movne	r4, #0
   86a76:	d005      	beq.n	86a84 <__libc_init_array+0x1c>
   86a78:	3401      	adds	r4, #1
   86a7a:	f855 3b04 	ldr.w	r3, [r5], #4
   86a7e:	4798      	blx	r3
   86a80:	42a6      	cmp	r6, r4
   86a82:	d1f9      	bne.n	86a78 <__libc_init_array+0x10>
   86a84:	4e0a      	ldr	r6, [pc, #40]	; (86ab0 <__libc_init_array+0x48>)
   86a86:	4d0b      	ldr	r5, [pc, #44]	; (86ab4 <__libc_init_array+0x4c>)
   86a88:	f006 fa56 	bl	8cf38 <_init>
   86a8c:	1b76      	subs	r6, r6, r5
   86a8e:	10b6      	asrs	r6, r6, #2
   86a90:	bf18      	it	ne
   86a92:	2400      	movne	r4, #0
   86a94:	d006      	beq.n	86aa4 <__libc_init_array+0x3c>
   86a96:	3401      	adds	r4, #1
   86a98:	f855 3b04 	ldr.w	r3, [r5], #4
   86a9c:	4798      	blx	r3
   86a9e:	42a6      	cmp	r6, r4
   86aa0:	d1f9      	bne.n	86a96 <__libc_init_array+0x2e>
   86aa2:	bd70      	pop	{r4, r5, r6, pc}
   86aa4:	bd70      	pop	{r4, r5, r6, pc}
   86aa6:	bf00      	nop
   86aa8:	0008cf44 	.word	0x0008cf44
   86aac:	0008cf44 	.word	0x0008cf44
   86ab0:	0008cf4c 	.word	0x0008cf4c
   86ab4:	0008cf44 	.word	0x0008cf44

00086ab8 <iprintf>:
   86ab8:	b40f      	push	{r0, r1, r2, r3}
   86aba:	b510      	push	{r4, lr}
   86abc:	4b07      	ldr	r3, [pc, #28]	; (86adc <iprintf+0x24>)
   86abe:	b082      	sub	sp, #8
   86ac0:	ac04      	add	r4, sp, #16
   86ac2:	f854 2b04 	ldr.w	r2, [r4], #4
   86ac6:	6818      	ldr	r0, [r3, #0]
   86ac8:	4623      	mov	r3, r4
   86aca:	6881      	ldr	r1, [r0, #8]
   86acc:	9401      	str	r4, [sp, #4]
   86ace:	f001 fce1 	bl	88494 <_vfiprintf_r>
   86ad2:	b002      	add	sp, #8
   86ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   86ad8:	b004      	add	sp, #16
   86ada:	4770      	bx	lr
   86adc:	20000b8c 	.word	0x20000b8c

00086ae0 <memcpy>:
   86ae0:	4684      	mov	ip, r0
   86ae2:	ea41 0300 	orr.w	r3, r1, r0
   86ae6:	f013 0303 	ands.w	r3, r3, #3
   86aea:	d149      	bne.n	86b80 <memcpy+0xa0>
   86aec:	3a40      	subs	r2, #64	; 0x40
   86aee:	d323      	bcc.n	86b38 <memcpy+0x58>
   86af0:	680b      	ldr	r3, [r1, #0]
   86af2:	6003      	str	r3, [r0, #0]
   86af4:	684b      	ldr	r3, [r1, #4]
   86af6:	6043      	str	r3, [r0, #4]
   86af8:	688b      	ldr	r3, [r1, #8]
   86afa:	6083      	str	r3, [r0, #8]
   86afc:	68cb      	ldr	r3, [r1, #12]
   86afe:	60c3      	str	r3, [r0, #12]
   86b00:	690b      	ldr	r3, [r1, #16]
   86b02:	6103      	str	r3, [r0, #16]
   86b04:	694b      	ldr	r3, [r1, #20]
   86b06:	6143      	str	r3, [r0, #20]
   86b08:	698b      	ldr	r3, [r1, #24]
   86b0a:	6183      	str	r3, [r0, #24]
   86b0c:	69cb      	ldr	r3, [r1, #28]
   86b0e:	61c3      	str	r3, [r0, #28]
   86b10:	6a0b      	ldr	r3, [r1, #32]
   86b12:	6203      	str	r3, [r0, #32]
   86b14:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86b16:	6243      	str	r3, [r0, #36]	; 0x24
   86b18:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86b1a:	6283      	str	r3, [r0, #40]	; 0x28
   86b1c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86b1e:	62c3      	str	r3, [r0, #44]	; 0x2c
   86b20:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86b22:	6303      	str	r3, [r0, #48]	; 0x30
   86b24:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86b26:	6343      	str	r3, [r0, #52]	; 0x34
   86b28:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86b2a:	6383      	str	r3, [r0, #56]	; 0x38
   86b2c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86b2e:	63c3      	str	r3, [r0, #60]	; 0x3c
   86b30:	3040      	adds	r0, #64	; 0x40
   86b32:	3140      	adds	r1, #64	; 0x40
   86b34:	3a40      	subs	r2, #64	; 0x40
   86b36:	d2db      	bcs.n	86af0 <memcpy+0x10>
   86b38:	3230      	adds	r2, #48	; 0x30
   86b3a:	d30b      	bcc.n	86b54 <memcpy+0x74>
   86b3c:	680b      	ldr	r3, [r1, #0]
   86b3e:	6003      	str	r3, [r0, #0]
   86b40:	684b      	ldr	r3, [r1, #4]
   86b42:	6043      	str	r3, [r0, #4]
   86b44:	688b      	ldr	r3, [r1, #8]
   86b46:	6083      	str	r3, [r0, #8]
   86b48:	68cb      	ldr	r3, [r1, #12]
   86b4a:	60c3      	str	r3, [r0, #12]
   86b4c:	3010      	adds	r0, #16
   86b4e:	3110      	adds	r1, #16
   86b50:	3a10      	subs	r2, #16
   86b52:	d2f3      	bcs.n	86b3c <memcpy+0x5c>
   86b54:	320c      	adds	r2, #12
   86b56:	d305      	bcc.n	86b64 <memcpy+0x84>
   86b58:	f851 3b04 	ldr.w	r3, [r1], #4
   86b5c:	f840 3b04 	str.w	r3, [r0], #4
   86b60:	3a04      	subs	r2, #4
   86b62:	d2f9      	bcs.n	86b58 <memcpy+0x78>
   86b64:	3204      	adds	r2, #4
   86b66:	d008      	beq.n	86b7a <memcpy+0x9a>
   86b68:	07d2      	lsls	r2, r2, #31
   86b6a:	bf1c      	itt	ne
   86b6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86b70:	f800 3b01 	strbne.w	r3, [r0], #1
   86b74:	d301      	bcc.n	86b7a <memcpy+0x9a>
   86b76:	880b      	ldrh	r3, [r1, #0]
   86b78:	8003      	strh	r3, [r0, #0]
   86b7a:	4660      	mov	r0, ip
   86b7c:	4770      	bx	lr
   86b7e:	bf00      	nop
   86b80:	2a08      	cmp	r2, #8
   86b82:	d313      	bcc.n	86bac <memcpy+0xcc>
   86b84:	078b      	lsls	r3, r1, #30
   86b86:	d0b1      	beq.n	86aec <memcpy+0xc>
   86b88:	f010 0303 	ands.w	r3, r0, #3
   86b8c:	d0ae      	beq.n	86aec <memcpy+0xc>
   86b8e:	f1c3 0304 	rsb	r3, r3, #4
   86b92:	1ad2      	subs	r2, r2, r3
   86b94:	07db      	lsls	r3, r3, #31
   86b96:	bf1c      	itt	ne
   86b98:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86b9c:	f800 3b01 	strbne.w	r3, [r0], #1
   86ba0:	d3a4      	bcc.n	86aec <memcpy+0xc>
   86ba2:	f831 3b02 	ldrh.w	r3, [r1], #2
   86ba6:	f820 3b02 	strh.w	r3, [r0], #2
   86baa:	e79f      	b.n	86aec <memcpy+0xc>
   86bac:	3a04      	subs	r2, #4
   86bae:	d3d9      	bcc.n	86b64 <memcpy+0x84>
   86bb0:	3a01      	subs	r2, #1
   86bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
   86bb6:	f800 3b01 	strb.w	r3, [r0], #1
   86bba:	d2f9      	bcs.n	86bb0 <memcpy+0xd0>
   86bbc:	780b      	ldrb	r3, [r1, #0]
   86bbe:	7003      	strb	r3, [r0, #0]
   86bc0:	784b      	ldrb	r3, [r1, #1]
   86bc2:	7043      	strb	r3, [r0, #1]
   86bc4:	788b      	ldrb	r3, [r1, #2]
   86bc6:	7083      	strb	r3, [r0, #2]
   86bc8:	4660      	mov	r0, ip
   86bca:	4770      	bx	lr

00086bcc <memset>:
   86bcc:	b470      	push	{r4, r5, r6}
   86bce:	0786      	lsls	r6, r0, #30
   86bd0:	d046      	beq.n	86c60 <memset+0x94>
   86bd2:	1e54      	subs	r4, r2, #1
   86bd4:	2a00      	cmp	r2, #0
   86bd6:	d041      	beq.n	86c5c <memset+0x90>
   86bd8:	b2ca      	uxtb	r2, r1
   86bda:	4603      	mov	r3, r0
   86bdc:	e002      	b.n	86be4 <memset+0x18>
   86bde:	f114 34ff 	adds.w	r4, r4, #4294967295
   86be2:	d33b      	bcc.n	86c5c <memset+0x90>
   86be4:	f803 2b01 	strb.w	r2, [r3], #1
   86be8:	079d      	lsls	r5, r3, #30
   86bea:	d1f8      	bne.n	86bde <memset+0x12>
   86bec:	2c03      	cmp	r4, #3
   86bee:	d92e      	bls.n	86c4e <memset+0x82>
   86bf0:	b2cd      	uxtb	r5, r1
   86bf2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86bf6:	2c0f      	cmp	r4, #15
   86bf8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86bfc:	d919      	bls.n	86c32 <memset+0x66>
   86bfe:	4626      	mov	r6, r4
   86c00:	f103 0210 	add.w	r2, r3, #16
   86c04:	3e10      	subs	r6, #16
   86c06:	2e0f      	cmp	r6, #15
   86c08:	f842 5c10 	str.w	r5, [r2, #-16]
   86c0c:	f842 5c0c 	str.w	r5, [r2, #-12]
   86c10:	f842 5c08 	str.w	r5, [r2, #-8]
   86c14:	f842 5c04 	str.w	r5, [r2, #-4]
   86c18:	f102 0210 	add.w	r2, r2, #16
   86c1c:	d8f2      	bhi.n	86c04 <memset+0x38>
   86c1e:	f1a4 0210 	sub.w	r2, r4, #16
   86c22:	f022 020f 	bic.w	r2, r2, #15
   86c26:	f004 040f 	and.w	r4, r4, #15
   86c2a:	3210      	adds	r2, #16
   86c2c:	2c03      	cmp	r4, #3
   86c2e:	4413      	add	r3, r2
   86c30:	d90d      	bls.n	86c4e <memset+0x82>
   86c32:	461e      	mov	r6, r3
   86c34:	4622      	mov	r2, r4
   86c36:	3a04      	subs	r2, #4
   86c38:	2a03      	cmp	r2, #3
   86c3a:	f846 5b04 	str.w	r5, [r6], #4
   86c3e:	d8fa      	bhi.n	86c36 <memset+0x6a>
   86c40:	1f22      	subs	r2, r4, #4
   86c42:	f022 0203 	bic.w	r2, r2, #3
   86c46:	3204      	adds	r2, #4
   86c48:	4413      	add	r3, r2
   86c4a:	f004 0403 	and.w	r4, r4, #3
   86c4e:	b12c      	cbz	r4, 86c5c <memset+0x90>
   86c50:	b2c9      	uxtb	r1, r1
   86c52:	441c      	add	r4, r3
   86c54:	f803 1b01 	strb.w	r1, [r3], #1
   86c58:	429c      	cmp	r4, r3
   86c5a:	d1fb      	bne.n	86c54 <memset+0x88>
   86c5c:	bc70      	pop	{r4, r5, r6}
   86c5e:	4770      	bx	lr
   86c60:	4614      	mov	r4, r2
   86c62:	4603      	mov	r3, r0
   86c64:	e7c2      	b.n	86bec <memset+0x20>
   86c66:	bf00      	nop

00086c68 <setbuf>:
   86c68:	2900      	cmp	r1, #0
   86c6a:	bf0c      	ite	eq
   86c6c:	2202      	moveq	r2, #2
   86c6e:	2200      	movne	r2, #0
   86c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86c74:	f000 b800 	b.w	86c78 <setvbuf>

00086c78 <setvbuf>:
   86c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86c7c:	4d61      	ldr	r5, [pc, #388]	; (86e04 <setvbuf+0x18c>)
   86c7e:	b083      	sub	sp, #12
   86c80:	682d      	ldr	r5, [r5, #0]
   86c82:	4604      	mov	r4, r0
   86c84:	460f      	mov	r7, r1
   86c86:	4690      	mov	r8, r2
   86c88:	461e      	mov	r6, r3
   86c8a:	b115      	cbz	r5, 86c92 <setvbuf+0x1a>
   86c8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   86c8e:	2b00      	cmp	r3, #0
   86c90:	d064      	beq.n	86d5c <setvbuf+0xe4>
   86c92:	f1b8 0f02 	cmp.w	r8, #2
   86c96:	d006      	beq.n	86ca6 <setvbuf+0x2e>
   86c98:	f1b8 0f01 	cmp.w	r8, #1
   86c9c:	f200 809f 	bhi.w	86dde <setvbuf+0x166>
   86ca0:	2e00      	cmp	r6, #0
   86ca2:	f2c0 809c 	blt.w	86dde <setvbuf+0x166>
   86ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   86ca8:	07d8      	lsls	r0, r3, #31
   86caa:	d534      	bpl.n	86d16 <setvbuf+0x9e>
   86cac:	4621      	mov	r1, r4
   86cae:	4628      	mov	r0, r5
   86cb0:	f003 fb40 	bl	8a334 <_fflush_r>
   86cb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86cb6:	b141      	cbz	r1, 86cca <setvbuf+0x52>
   86cb8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86cbc:	4299      	cmp	r1, r3
   86cbe:	d002      	beq.n	86cc6 <setvbuf+0x4e>
   86cc0:	4628      	mov	r0, r5
   86cc2:	f003 fcb5 	bl	8a630 <_free_r>
   86cc6:	2300      	movs	r3, #0
   86cc8:	6323      	str	r3, [r4, #48]	; 0x30
   86cca:	2200      	movs	r2, #0
   86ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86cd0:	61a2      	str	r2, [r4, #24]
   86cd2:	6062      	str	r2, [r4, #4]
   86cd4:	061a      	lsls	r2, r3, #24
   86cd6:	d43a      	bmi.n	86d4e <setvbuf+0xd6>
   86cd8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   86cdc:	f023 0303 	bic.w	r3, r3, #3
   86ce0:	f1b8 0f02 	cmp.w	r8, #2
   86ce4:	81a3      	strh	r3, [r4, #12]
   86ce6:	d01d      	beq.n	86d24 <setvbuf+0xac>
   86ce8:	ab01      	add	r3, sp, #4
   86cea:	466a      	mov	r2, sp
   86cec:	4621      	mov	r1, r4
   86cee:	4628      	mov	r0, r5
   86cf0:	f003 ff4a 	bl	8ab88 <__swhatbuf_r>
   86cf4:	89a3      	ldrh	r3, [r4, #12]
   86cf6:	4318      	orrs	r0, r3
   86cf8:	81a0      	strh	r0, [r4, #12]
   86cfa:	2e00      	cmp	r6, #0
   86cfc:	d132      	bne.n	86d64 <setvbuf+0xec>
   86cfe:	9e00      	ldr	r6, [sp, #0]
   86d00:	4630      	mov	r0, r6
   86d02:	f003 ffb9 	bl	8ac78 <malloc>
   86d06:	4607      	mov	r7, r0
   86d08:	2800      	cmp	r0, #0
   86d0a:	d06b      	beq.n	86de4 <setvbuf+0x16c>
   86d0c:	89a3      	ldrh	r3, [r4, #12]
   86d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86d12:	81a3      	strh	r3, [r4, #12]
   86d14:	e028      	b.n	86d68 <setvbuf+0xf0>
   86d16:	89a3      	ldrh	r3, [r4, #12]
   86d18:	0599      	lsls	r1, r3, #22
   86d1a:	d4c7      	bmi.n	86cac <setvbuf+0x34>
   86d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86d1e:	f003 ff2f 	bl	8ab80 <__retarget_lock_acquire_recursive>
   86d22:	e7c3      	b.n	86cac <setvbuf+0x34>
   86d24:	2500      	movs	r5, #0
   86d26:	2600      	movs	r6, #0
   86d28:	2001      	movs	r0, #1
   86d2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   86d30:	f043 0302 	orr.w	r3, r3, #2
   86d34:	60a6      	str	r6, [r4, #8]
   86d36:	07ce      	lsls	r6, r1, #31
   86d38:	81a3      	strh	r3, [r4, #12]
   86d3a:	6160      	str	r0, [r4, #20]
   86d3c:	6022      	str	r2, [r4, #0]
   86d3e:	6122      	str	r2, [r4, #16]
   86d40:	d401      	bmi.n	86d46 <setvbuf+0xce>
   86d42:	0598      	lsls	r0, r3, #22
   86d44:	d53e      	bpl.n	86dc4 <setvbuf+0x14c>
   86d46:	4628      	mov	r0, r5
   86d48:	b003      	add	sp, #12
   86d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86d4e:	6921      	ldr	r1, [r4, #16]
   86d50:	4628      	mov	r0, r5
   86d52:	f003 fc6d 	bl	8a630 <_free_r>
   86d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86d5a:	e7bd      	b.n	86cd8 <setvbuf+0x60>
   86d5c:	4628      	mov	r0, r5
   86d5e:	f003 fb41 	bl	8a3e4 <__sinit>
   86d62:	e796      	b.n	86c92 <setvbuf+0x1a>
   86d64:	2f00      	cmp	r7, #0
   86d66:	d0cb      	beq.n	86d00 <setvbuf+0x88>
   86d68:	6bab      	ldr	r3, [r5, #56]	; 0x38
   86d6a:	2b00      	cmp	r3, #0
   86d6c:	d033      	beq.n	86dd6 <setvbuf+0x15e>
   86d6e:	9b00      	ldr	r3, [sp, #0]
   86d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86d74:	429e      	cmp	r6, r3
   86d76:	bf1c      	itt	ne
   86d78:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   86d7c:	81a2      	strhne	r2, [r4, #12]
   86d7e:	f1b8 0f01 	cmp.w	r8, #1
   86d82:	bf04      	itt	eq
   86d84:	f042 0201 	orreq.w	r2, r2, #1
   86d88:	81a2      	strheq	r2, [r4, #12]
   86d8a:	b292      	uxth	r2, r2
   86d8c:	f012 0308 	ands.w	r3, r2, #8
   86d90:	6027      	str	r7, [r4, #0]
   86d92:	6127      	str	r7, [r4, #16]
   86d94:	6166      	str	r6, [r4, #20]
   86d96:	d00e      	beq.n	86db6 <setvbuf+0x13e>
   86d98:	07d1      	lsls	r1, r2, #31
   86d9a:	d51a      	bpl.n	86dd2 <setvbuf+0x15a>
   86d9c:	2300      	movs	r3, #0
   86d9e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   86da0:	4276      	negs	r6, r6
   86da2:	f015 0501 	ands.w	r5, r5, #1
   86da6:	61a6      	str	r6, [r4, #24]
   86da8:	60a3      	str	r3, [r4, #8]
   86daa:	d009      	beq.n	86dc0 <setvbuf+0x148>
   86dac:	2500      	movs	r5, #0
   86dae:	4628      	mov	r0, r5
   86db0:	b003      	add	sp, #12
   86db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86db6:	60a3      	str	r3, [r4, #8]
   86db8:	6e65      	ldr	r5, [r4, #100]	; 0x64
   86dba:	f015 0501 	ands.w	r5, r5, #1
   86dbe:	d1f5      	bne.n	86dac <setvbuf+0x134>
   86dc0:	0593      	lsls	r3, r2, #22
   86dc2:	d4c0      	bmi.n	86d46 <setvbuf+0xce>
   86dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86dc6:	f003 fedd 	bl	8ab84 <__retarget_lock_release_recursive>
   86dca:	4628      	mov	r0, r5
   86dcc:	b003      	add	sp, #12
   86dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86dd2:	60a6      	str	r6, [r4, #8]
   86dd4:	e7f0      	b.n	86db8 <setvbuf+0x140>
   86dd6:	4628      	mov	r0, r5
   86dd8:	f003 fb04 	bl	8a3e4 <__sinit>
   86ddc:	e7c7      	b.n	86d6e <setvbuf+0xf6>
   86dde:	f04f 35ff 	mov.w	r5, #4294967295
   86de2:	e7b0      	b.n	86d46 <setvbuf+0xce>
   86de4:	f8dd 9000 	ldr.w	r9, [sp]
   86de8:	45b1      	cmp	r9, r6
   86dea:	d004      	beq.n	86df6 <setvbuf+0x17e>
   86dec:	4648      	mov	r0, r9
   86dee:	f003 ff43 	bl	8ac78 <malloc>
   86df2:	4607      	mov	r7, r0
   86df4:	b920      	cbnz	r0, 86e00 <setvbuf+0x188>
   86df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86dfa:	f04f 35ff 	mov.w	r5, #4294967295
   86dfe:	e792      	b.n	86d26 <setvbuf+0xae>
   86e00:	464e      	mov	r6, r9
   86e02:	e783      	b.n	86d0c <setvbuf+0x94>
   86e04:	20000b8c 	.word	0x20000b8c

00086e08 <sprintf>:
   86e08:	b40e      	push	{r1, r2, r3}
   86e0a:	4601      	mov	r1, r0
   86e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   86e0e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   86e12:	f44f 7702 	mov.w	r7, #520	; 0x208
   86e16:	f64f 76ff 	movw	r6, #65535	; 0xffff
   86e1a:	b09c      	sub	sp, #112	; 0x70
   86e1c:	ac21      	add	r4, sp, #132	; 0x84
   86e1e:	f854 2b04 	ldr.w	r2, [r4], #4
   86e22:	4b0b      	ldr	r3, [pc, #44]	; (86e50 <sprintf+0x48>)
   86e24:	9102      	str	r1, [sp, #8]
   86e26:	9106      	str	r1, [sp, #24]
   86e28:	6818      	ldr	r0, [r3, #0]
   86e2a:	a902      	add	r1, sp, #8
   86e2c:	4623      	mov	r3, r4
   86e2e:	9401      	str	r4, [sp, #4]
   86e30:	f8ad 7014 	strh.w	r7, [sp, #20]
   86e34:	9504      	str	r5, [sp, #16]
   86e36:	9507      	str	r5, [sp, #28]
   86e38:	f8ad 6016 	strh.w	r6, [sp, #22]
   86e3c:	f000 f86a 	bl	86f14 <_svfprintf_r>
   86e40:	2200      	movs	r2, #0
   86e42:	9b02      	ldr	r3, [sp, #8]
   86e44:	701a      	strb	r2, [r3, #0]
   86e46:	b01c      	add	sp, #112	; 0x70
   86e48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   86e4c:	b003      	add	sp, #12
   86e4e:	4770      	bx	lr
   86e50:	20000b8c 	.word	0x20000b8c

00086e54 <strlen>:
   86e54:	f020 0103 	bic.w	r1, r0, #3
   86e58:	f010 0003 	ands.w	r0, r0, #3
   86e5c:	f1c0 0000 	rsb	r0, r0, #0
   86e60:	f851 3b04 	ldr.w	r3, [r1], #4
   86e64:	f100 0c04 	add.w	ip, r0, #4
   86e68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   86e6c:	f06f 0200 	mvn.w	r2, #0
   86e70:	bf1c      	itt	ne
   86e72:	fa22 f20c 	lsrne.w	r2, r2, ip
   86e76:	4313      	orrne	r3, r2
   86e78:	f04f 0c01 	mov.w	ip, #1
   86e7c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   86e80:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   86e84:	eba3 020c 	sub.w	r2, r3, ip
   86e88:	ea22 0203 	bic.w	r2, r2, r3
   86e8c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   86e90:	bf04      	itt	eq
   86e92:	f851 3b04 	ldreq.w	r3, [r1], #4
   86e96:	3004      	addeq	r0, #4
   86e98:	d0f4      	beq.n	86e84 <strlen+0x30>
   86e9a:	f1c2 0100 	rsb	r1, r2, #0
   86e9e:	ea02 0201 	and.w	r2, r2, r1
   86ea2:	fab2 f282 	clz	r2, r2
   86ea6:	f1c2 021f 	rsb	r2, r2, #31
   86eaa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   86eae:	4770      	bx	lr

00086eb0 <strncpy>:
   86eb0:	ea40 0301 	orr.w	r3, r0, r1
   86eb4:	f013 0f03 	tst.w	r3, #3
   86eb8:	b470      	push	{r4, r5, r6}
   86eba:	4603      	mov	r3, r0
   86ebc:	d024      	beq.n	86f08 <strncpy+0x58>
   86ebe:	b1a2      	cbz	r2, 86eea <strncpy+0x3a>
   86ec0:	780c      	ldrb	r4, [r1, #0]
   86ec2:	3a01      	subs	r2, #1
   86ec4:	701c      	strb	r4, [r3, #0]
   86ec6:	3101      	adds	r1, #1
   86ec8:	3301      	adds	r3, #1
   86eca:	b13c      	cbz	r4, 86edc <strncpy+0x2c>
   86ecc:	b16a      	cbz	r2, 86eea <strncpy+0x3a>
   86ece:	f811 4b01 	ldrb.w	r4, [r1], #1
   86ed2:	3a01      	subs	r2, #1
   86ed4:	f803 4b01 	strb.w	r4, [r3], #1
   86ed8:	2c00      	cmp	r4, #0
   86eda:	d1f7      	bne.n	86ecc <strncpy+0x1c>
   86edc:	b12a      	cbz	r2, 86eea <strncpy+0x3a>
   86ede:	2100      	movs	r1, #0
   86ee0:	441a      	add	r2, r3
   86ee2:	f803 1b01 	strb.w	r1, [r3], #1
   86ee6:	429a      	cmp	r2, r3
   86ee8:	d1fb      	bne.n	86ee2 <strncpy+0x32>
   86eea:	bc70      	pop	{r4, r5, r6}
   86eec:	4770      	bx	lr
   86eee:	460e      	mov	r6, r1
   86ef0:	f851 5b04 	ldr.w	r5, [r1], #4
   86ef4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   86ef8:	ea24 0405 	bic.w	r4, r4, r5
   86efc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   86f00:	d105      	bne.n	86f0e <strncpy+0x5e>
   86f02:	3a04      	subs	r2, #4
   86f04:	f843 5b04 	str.w	r5, [r3], #4
   86f08:	2a03      	cmp	r2, #3
   86f0a:	d8f0      	bhi.n	86eee <strncpy+0x3e>
   86f0c:	e7d7      	b.n	86ebe <strncpy+0xe>
   86f0e:	4631      	mov	r1, r6
   86f10:	e7d6      	b.n	86ec0 <strncpy+0x10>
   86f12:	bf00      	nop

00086f14 <_svfprintf_r>:
   86f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86f18:	b0c3      	sub	sp, #268	; 0x10c
   86f1a:	460c      	mov	r4, r1
   86f1c:	910b      	str	r1, [sp, #44]	; 0x2c
   86f1e:	4692      	mov	sl, r2
   86f20:	930f      	str	r3, [sp, #60]	; 0x3c
   86f22:	900c      	str	r0, [sp, #48]	; 0x30
   86f24:	f003 fe1a 	bl	8ab5c <_localeconv_r>
   86f28:	6803      	ldr	r3, [r0, #0]
   86f2a:	4618      	mov	r0, r3
   86f2c:	931a      	str	r3, [sp, #104]	; 0x68
   86f2e:	f7ff ff91 	bl	86e54 <strlen>
   86f32:	89a3      	ldrh	r3, [r4, #12]
   86f34:	9019      	str	r0, [sp, #100]	; 0x64
   86f36:	0619      	lsls	r1, r3, #24
   86f38:	d503      	bpl.n	86f42 <_svfprintf_r+0x2e>
   86f3a:	6923      	ldr	r3, [r4, #16]
   86f3c:	2b00      	cmp	r3, #0
   86f3e:	f001 8035 	beq.w	87fac <_svfprintf_r+0x1098>
   86f42:	2300      	movs	r3, #0
   86f44:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   86f48:	46c8      	mov	r8, r9
   86f4a:	9315      	str	r3, [sp, #84]	; 0x54
   86f4c:	9313      	str	r3, [sp, #76]	; 0x4c
   86f4e:	9314      	str	r3, [sp, #80]	; 0x50
   86f50:	9318      	str	r3, [sp, #96]	; 0x60
   86f52:	931b      	str	r3, [sp, #108]	; 0x6c
   86f54:	9309      	str	r3, [sp, #36]	; 0x24
   86f56:	9316      	str	r3, [sp, #88]	; 0x58
   86f58:	9317      	str	r3, [sp, #92]	; 0x5c
   86f5a:	9327      	str	r3, [sp, #156]	; 0x9c
   86f5c:	9326      	str	r3, [sp, #152]	; 0x98
   86f5e:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   86f62:	f89a 3000 	ldrb.w	r3, [sl]
   86f66:	4654      	mov	r4, sl
   86f68:	b1eb      	cbz	r3, 86fa6 <_svfprintf_r+0x92>
   86f6a:	2b25      	cmp	r3, #37	; 0x25
   86f6c:	d102      	bne.n	86f74 <_svfprintf_r+0x60>
   86f6e:	e01a      	b.n	86fa6 <_svfprintf_r+0x92>
   86f70:	2b25      	cmp	r3, #37	; 0x25
   86f72:	d003      	beq.n	86f7c <_svfprintf_r+0x68>
   86f74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   86f78:	2b00      	cmp	r3, #0
   86f7a:	d1f9      	bne.n	86f70 <_svfprintf_r+0x5c>
   86f7c:	eba4 050a 	sub.w	r5, r4, sl
   86f80:	b18d      	cbz	r5, 86fa6 <_svfprintf_r+0x92>
   86f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86f84:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86f86:	3301      	adds	r3, #1
   86f88:	442a      	add	r2, r5
   86f8a:	2b07      	cmp	r3, #7
   86f8c:	f8c8 a000 	str.w	sl, [r8]
   86f90:	f8c8 5004 	str.w	r5, [r8, #4]
   86f94:	9227      	str	r2, [sp, #156]	; 0x9c
   86f96:	9326      	str	r3, [sp, #152]	; 0x98
   86f98:	f300 808a 	bgt.w	870b0 <_svfprintf_r+0x19c>
   86f9c:	f108 0808 	add.w	r8, r8, #8
   86fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86fa2:	442b      	add	r3, r5
   86fa4:	9309      	str	r3, [sp, #36]	; 0x24
   86fa6:	7823      	ldrb	r3, [r4, #0]
   86fa8:	2b00      	cmp	r3, #0
   86faa:	f000 8089 	beq.w	870c0 <_svfprintf_r+0x1ac>
   86fae:	2300      	movs	r3, #0
   86fb0:	f04f 30ff 	mov.w	r0, #4294967295
   86fb4:	461a      	mov	r2, r3
   86fb6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86fba:	4619      	mov	r1, r3
   86fbc:	930d      	str	r3, [sp, #52]	; 0x34
   86fbe:	469b      	mov	fp, r3
   86fc0:	7863      	ldrb	r3, [r4, #1]
   86fc2:	f104 0a01 	add.w	sl, r4, #1
   86fc6:	900a      	str	r0, [sp, #40]	; 0x28
   86fc8:	f10a 0a01 	add.w	sl, sl, #1
   86fcc:	f1a3 0020 	sub.w	r0, r3, #32
   86fd0:	2858      	cmp	r0, #88	; 0x58
   86fd2:	f200 83b7 	bhi.w	87744 <_svfprintf_r+0x830>
   86fd6:	e8df f010 	tbh	[pc, r0, lsl #1]
   86fda:	034c      	.short	0x034c
   86fdc:	03b503b5 	.word	0x03b503b5
   86fe0:	03b50354 	.word	0x03b50354
   86fe4:	03b503b5 	.word	0x03b503b5
   86fe8:	03b503b5 	.word	0x03b503b5
   86fec:	005903b5 	.word	0x005903b5
   86ff0:	03b50359 	.word	0x03b50359
   86ff4:	02140066 	.word	0x02140066
   86ff8:	022f03b5 	.word	0x022f03b5
   86ffc:	03a503a5 	.word	0x03a503a5
   87000:	03a503a5 	.word	0x03a503a5
   87004:	03a503a5 	.word	0x03a503a5
   87008:	03a503a5 	.word	0x03a503a5
   8700c:	03b503a5 	.word	0x03b503a5
   87010:	03b503b5 	.word	0x03b503b5
   87014:	03b503b5 	.word	0x03b503b5
   87018:	03b503b5 	.word	0x03b503b5
   8701c:	03b503b5 	.word	0x03b503b5
   87020:	028b03b5 	.word	0x028b03b5
   87024:	03b502d3 	.word	0x03b502d3
   87028:	03b502d3 	.word	0x03b502d3
   8702c:	03b503b5 	.word	0x03b503b5
   87030:	031b03b5 	.word	0x031b03b5
   87034:	03b503b5 	.word	0x03b503b5
   87038:	03b50320 	.word	0x03b50320
   8703c:	03b503b5 	.word	0x03b503b5
   87040:	03b503b5 	.word	0x03b503b5
   87044:	03b50234 	.word	0x03b50234
   87048:	024b03b5 	.word	0x024b03b5
   8704c:	03b503b5 	.word	0x03b503b5
   87050:	03b503b5 	.word	0x03b503b5
   87054:	03b503b5 	.word	0x03b503b5
   87058:	03b503b5 	.word	0x03b503b5
   8705c:	03b503b5 	.word	0x03b503b5
   87060:	039e0276 	.word	0x039e0276
   87064:	02d302d3 	.word	0x02d302d3
   87068:	036302d3 	.word	0x036302d3
   8706c:	03b5039e 	.word	0x03b5039e
   87070:	036803b5 	.word	0x036803b5
   87074:	037503b5 	.word	0x037503b5
   87078:	038c01dd 	.word	0x038c01dd
   8707c:	03b5035e 	.word	0x03b5035e
   87080:	03b501f2 	.word	0x03b501f2
   87084:	03b50087 	.word	0x03b50087
   87088:	033203b5 	.word	0x033203b5
   8708c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8708e:	6823      	ldr	r3, [r4, #0]
   87090:	4618      	mov	r0, r3
   87092:	930d      	str	r3, [sp, #52]	; 0x34
   87094:	4623      	mov	r3, r4
   87096:	2800      	cmp	r0, #0
   87098:	f103 0304 	add.w	r3, r3, #4
   8709c:	930f      	str	r3, [sp, #60]	; 0x3c
   8709e:	da04      	bge.n	870aa <_svfprintf_r+0x196>
   870a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   870a2:	425b      	negs	r3, r3
   870a4:	930d      	str	r3, [sp, #52]	; 0x34
   870a6:	f04b 0b04 	orr.w	fp, fp, #4
   870aa:	f89a 3000 	ldrb.w	r3, [sl]
   870ae:	e78b      	b.n	86fc8 <_svfprintf_r+0xb4>
   870b0:	aa25      	add	r2, sp, #148	; 0x94
   870b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   870b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   870b6:	f004 fe5d 	bl	8bd74 <__ssprint_r>
   870ba:	b940      	cbnz	r0, 870ce <_svfprintf_r+0x1ba>
   870bc:	46c8      	mov	r8, r9
   870be:	e76f      	b.n	86fa0 <_svfprintf_r+0x8c>
   870c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   870c2:	b123      	cbz	r3, 870ce <_svfprintf_r+0x1ba>
   870c4:	980c      	ldr	r0, [sp, #48]	; 0x30
   870c6:	aa25      	add	r2, sp, #148	; 0x94
   870c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   870ca:	f004 fe53 	bl	8bd74 <__ssprint_r>
   870ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   870d0:	899b      	ldrh	r3, [r3, #12]
   870d2:	f013 0f40 	tst.w	r3, #64	; 0x40
   870d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   870d8:	bf18      	it	ne
   870da:	f04f 33ff 	movne.w	r3, #4294967295
   870de:	9309      	str	r3, [sp, #36]	; 0x24
   870e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   870e2:	b043      	add	sp, #268	; 0x10c
   870e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   870e8:	f01b 0f20 	tst.w	fp, #32
   870ec:	9311      	str	r3, [sp, #68]	; 0x44
   870ee:	f040 81af 	bne.w	87450 <_svfprintf_r+0x53c>
   870f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   870f4:	f01b 0f10 	tst.w	fp, #16
   870f8:	4613      	mov	r3, r2
   870fa:	f040 859a 	bne.w	87c32 <_svfprintf_r+0xd1e>
   870fe:	f01b 0f40 	tst.w	fp, #64	; 0x40
   87102:	f000 8596 	beq.w	87c32 <_svfprintf_r+0xd1e>
   87106:	2500      	movs	r5, #0
   87108:	2301      	movs	r3, #1
   8710a:	8814      	ldrh	r4, [r2, #0]
   8710c:	3204      	adds	r2, #4
   8710e:	920f      	str	r2, [sp, #60]	; 0x3c
   87110:	2200      	movs	r2, #0
   87112:	4617      	mov	r7, r2
   87114:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   87118:	990a      	ldr	r1, [sp, #40]	; 0x28
   8711a:	1c4a      	adds	r2, r1, #1
   8711c:	f000 8210 	beq.w	87540 <_svfprintf_r+0x62c>
   87120:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   87124:	9207      	str	r2, [sp, #28]
   87126:	ea54 0205 	orrs.w	r2, r4, r5
   8712a:	f040 820f 	bne.w	8754c <_svfprintf_r+0x638>
   8712e:	2900      	cmp	r1, #0
   87130:	f040 8431 	bne.w	87996 <_svfprintf_r+0xa82>
   87134:	2b00      	cmp	r3, #0
   87136:	f040 8539 	bne.w	87bac <_svfprintf_r+0xc98>
   8713a:	f01b 0301 	ands.w	r3, fp, #1
   8713e:	930e      	str	r3, [sp, #56]	; 0x38
   87140:	f000 8662 	beq.w	87e08 <_svfprintf_r+0xef4>
   87144:	2330      	movs	r3, #48	; 0x30
   87146:	ae42      	add	r6, sp, #264	; 0x108
   87148:	f806 3d41 	strb.w	r3, [r6, #-65]!
   8714c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8714e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87150:	4293      	cmp	r3, r2
   87152:	bfb8      	it	lt
   87154:	4613      	movlt	r3, r2
   87156:	9308      	str	r3, [sp, #32]
   87158:	2300      	movs	r3, #0
   8715a:	9312      	str	r3, [sp, #72]	; 0x48
   8715c:	b117      	cbz	r7, 87164 <_svfprintf_r+0x250>
   8715e:	9b08      	ldr	r3, [sp, #32]
   87160:	3301      	adds	r3, #1
   87162:	9308      	str	r3, [sp, #32]
   87164:	9b07      	ldr	r3, [sp, #28]
   87166:	f013 0302 	ands.w	r3, r3, #2
   8716a:	9310      	str	r3, [sp, #64]	; 0x40
   8716c:	d002      	beq.n	87174 <_svfprintf_r+0x260>
   8716e:	9b08      	ldr	r3, [sp, #32]
   87170:	3302      	adds	r3, #2
   87172:	9308      	str	r3, [sp, #32]
   87174:	9b07      	ldr	r3, [sp, #28]
   87176:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   8717a:	f040 8310 	bne.w	8779e <_svfprintf_r+0x88a>
   8717e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87180:	9a08      	ldr	r2, [sp, #32]
   87182:	eba3 0b02 	sub.w	fp, r3, r2
   87186:	f1bb 0f00 	cmp.w	fp, #0
   8718a:	f340 8308 	ble.w	8779e <_svfprintf_r+0x88a>
   8718e:	f1bb 0f10 	cmp.w	fp, #16
   87192:	f340 87b2 	ble.w	880fa <_svfprintf_r+0x11e6>
   87196:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87198:	4643      	mov	r3, r8
   8719a:	4621      	mov	r1, r4
   8719c:	46a8      	mov	r8, r5
   8719e:	2710      	movs	r7, #16
   871a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   871a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   871a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   871a6:	e006      	b.n	871b6 <_svfprintf_r+0x2a2>
   871a8:	f1ab 0b10 	sub.w	fp, fp, #16
   871ac:	f1bb 0f10 	cmp.w	fp, #16
   871b0:	f103 0308 	add.w	r3, r3, #8
   871b4:	dd18      	ble.n	871e8 <_svfprintf_r+0x2d4>
   871b6:	3201      	adds	r2, #1
   871b8:	48ab      	ldr	r0, [pc, #684]	; (87468 <_svfprintf_r+0x554>)
   871ba:	3110      	adds	r1, #16
   871bc:	2a07      	cmp	r2, #7
   871be:	9127      	str	r1, [sp, #156]	; 0x9c
   871c0:	9226      	str	r2, [sp, #152]	; 0x98
   871c2:	e883 0081 	stmia.w	r3, {r0, r7}
   871c6:	ddef      	ble.n	871a8 <_svfprintf_r+0x294>
   871c8:	aa25      	add	r2, sp, #148	; 0x94
   871ca:	4629      	mov	r1, r5
   871cc:	4620      	mov	r0, r4
   871ce:	f004 fdd1 	bl	8bd74 <__ssprint_r>
   871d2:	2800      	cmp	r0, #0
   871d4:	f47f af7b 	bne.w	870ce <_svfprintf_r+0x1ba>
   871d8:	f1ab 0b10 	sub.w	fp, fp, #16
   871dc:	f1bb 0f10 	cmp.w	fp, #16
   871e0:	464b      	mov	r3, r9
   871e2:	9927      	ldr	r1, [sp, #156]	; 0x9c
   871e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   871e6:	dce6      	bgt.n	871b6 <_svfprintf_r+0x2a2>
   871e8:	4645      	mov	r5, r8
   871ea:	460c      	mov	r4, r1
   871ec:	4698      	mov	r8, r3
   871ee:	3201      	adds	r2, #1
   871f0:	4b9d      	ldr	r3, [pc, #628]	; (87468 <_svfprintf_r+0x554>)
   871f2:	445c      	add	r4, fp
   871f4:	2a07      	cmp	r2, #7
   871f6:	9427      	str	r4, [sp, #156]	; 0x9c
   871f8:	9226      	str	r2, [sp, #152]	; 0x98
   871fa:	e888 0808 	stmia.w	r8, {r3, fp}
   871fe:	f300 82c3 	bgt.w	87788 <_svfprintf_r+0x874>
   87202:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87206:	f108 0808 	add.w	r8, r8, #8
   8720a:	b187      	cbz	r7, 8722e <_svfprintf_r+0x31a>
   8720c:	2101      	movs	r1, #1
   8720e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87210:	440c      	add	r4, r1
   87212:	440b      	add	r3, r1
   87214:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   87218:	2b07      	cmp	r3, #7
   8721a:	9427      	str	r4, [sp, #156]	; 0x9c
   8721c:	9326      	str	r3, [sp, #152]	; 0x98
   8721e:	f8c8 1004 	str.w	r1, [r8, #4]
   87222:	f8c8 2000 	str.w	r2, [r8]
   87226:	f300 83cd 	bgt.w	879c4 <_svfprintf_r+0xab0>
   8722a:	f108 0808 	add.w	r8, r8, #8
   8722e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87230:	b17b      	cbz	r3, 87252 <_svfprintf_r+0x33e>
   87232:	2102      	movs	r1, #2
   87234:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87236:	440c      	add	r4, r1
   87238:	3301      	adds	r3, #1
   8723a:	aa1e      	add	r2, sp, #120	; 0x78
   8723c:	2b07      	cmp	r3, #7
   8723e:	9427      	str	r4, [sp, #156]	; 0x9c
   87240:	9326      	str	r3, [sp, #152]	; 0x98
   87242:	f8c8 1004 	str.w	r1, [r8, #4]
   87246:	f8c8 2000 	str.w	r2, [r8]
   8724a:	f300 8411 	bgt.w	87a70 <_svfprintf_r+0xb5c>
   8724e:	f108 0808 	add.w	r8, r8, #8
   87252:	2d80      	cmp	r5, #128	; 0x80
   87254:	f000 8304 	beq.w	87860 <_svfprintf_r+0x94c>
   87258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8725a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8725c:	1a9f      	subs	r7, r3, r2
   8725e:	2f00      	cmp	r7, #0
   87260:	dd37      	ble.n	872d2 <_svfprintf_r+0x3be>
   87262:	2f10      	cmp	r7, #16
   87264:	f340 8679 	ble.w	87f5a <_svfprintf_r+0x1046>
   87268:	4d80      	ldr	r5, [pc, #512]	; (8746c <_svfprintf_r+0x558>)
   8726a:	4642      	mov	r2, r8
   8726c:	4621      	mov	r1, r4
   8726e:	46b0      	mov	r8, r6
   87270:	f04f 0b10 	mov.w	fp, #16
   87274:	462e      	mov	r6, r5
   87276:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87278:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8727a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8727c:	e004      	b.n	87288 <_svfprintf_r+0x374>
   8727e:	3f10      	subs	r7, #16
   87280:	2f10      	cmp	r7, #16
   87282:	f102 0208 	add.w	r2, r2, #8
   87286:	dd15      	ble.n	872b4 <_svfprintf_r+0x3a0>
   87288:	3301      	adds	r3, #1
   8728a:	3110      	adds	r1, #16
   8728c:	2b07      	cmp	r3, #7
   8728e:	9127      	str	r1, [sp, #156]	; 0x9c
   87290:	9326      	str	r3, [sp, #152]	; 0x98
   87292:	e882 0840 	stmia.w	r2, {r6, fp}
   87296:	ddf2      	ble.n	8727e <_svfprintf_r+0x36a>
   87298:	aa25      	add	r2, sp, #148	; 0x94
   8729a:	4629      	mov	r1, r5
   8729c:	4620      	mov	r0, r4
   8729e:	f004 fd69 	bl	8bd74 <__ssprint_r>
   872a2:	2800      	cmp	r0, #0
   872a4:	f47f af13 	bne.w	870ce <_svfprintf_r+0x1ba>
   872a8:	3f10      	subs	r7, #16
   872aa:	2f10      	cmp	r7, #16
   872ac:	464a      	mov	r2, r9
   872ae:	9927      	ldr	r1, [sp, #156]	; 0x9c
   872b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   872b2:	dce9      	bgt.n	87288 <_svfprintf_r+0x374>
   872b4:	4635      	mov	r5, r6
   872b6:	460c      	mov	r4, r1
   872b8:	4646      	mov	r6, r8
   872ba:	4690      	mov	r8, r2
   872bc:	3301      	adds	r3, #1
   872be:	443c      	add	r4, r7
   872c0:	2b07      	cmp	r3, #7
   872c2:	9427      	str	r4, [sp, #156]	; 0x9c
   872c4:	9326      	str	r3, [sp, #152]	; 0x98
   872c6:	e888 00a0 	stmia.w	r8, {r5, r7}
   872ca:	f300 8370 	bgt.w	879ae <_svfprintf_r+0xa9a>
   872ce:	f108 0808 	add.w	r8, r8, #8
   872d2:	9b07      	ldr	r3, [sp, #28]
   872d4:	05df      	lsls	r7, r3, #23
   872d6:	f100 8264 	bmi.w	877a2 <_svfprintf_r+0x88e>
   872da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   872dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   872de:	3301      	adds	r3, #1
   872e0:	440c      	add	r4, r1
   872e2:	2b07      	cmp	r3, #7
   872e4:	9427      	str	r4, [sp, #156]	; 0x9c
   872e6:	f8c8 6000 	str.w	r6, [r8]
   872ea:	f8c8 1004 	str.w	r1, [r8, #4]
   872ee:	9326      	str	r3, [sp, #152]	; 0x98
   872f0:	f300 83b3 	bgt.w	87a5a <_svfprintf_r+0xb46>
   872f4:	f108 0808 	add.w	r8, r8, #8
   872f8:	9b07      	ldr	r3, [sp, #28]
   872fa:	075b      	lsls	r3, r3, #29
   872fc:	d53b      	bpl.n	87376 <_svfprintf_r+0x462>
   872fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87300:	9a08      	ldr	r2, [sp, #32]
   87302:	1a9d      	subs	r5, r3, r2
   87304:	2d00      	cmp	r5, #0
   87306:	dd36      	ble.n	87376 <_svfprintf_r+0x462>
   87308:	2d10      	cmp	r5, #16
   8730a:	f340 8721 	ble.w	88150 <_svfprintf_r+0x123c>
   8730e:	2610      	movs	r6, #16
   87310:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87312:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87314:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   87318:	e004      	b.n	87324 <_svfprintf_r+0x410>
   8731a:	3d10      	subs	r5, #16
   8731c:	2d10      	cmp	r5, #16
   8731e:	f108 0808 	add.w	r8, r8, #8
   87322:	dd16      	ble.n	87352 <_svfprintf_r+0x43e>
   87324:	3301      	adds	r3, #1
   87326:	4a50      	ldr	r2, [pc, #320]	; (87468 <_svfprintf_r+0x554>)
   87328:	3410      	adds	r4, #16
   8732a:	2b07      	cmp	r3, #7
   8732c:	9427      	str	r4, [sp, #156]	; 0x9c
   8732e:	9326      	str	r3, [sp, #152]	; 0x98
   87330:	e888 0044 	stmia.w	r8, {r2, r6}
   87334:	ddf1      	ble.n	8731a <_svfprintf_r+0x406>
   87336:	aa25      	add	r2, sp, #148	; 0x94
   87338:	4659      	mov	r1, fp
   8733a:	4638      	mov	r0, r7
   8733c:	f004 fd1a 	bl	8bd74 <__ssprint_r>
   87340:	2800      	cmp	r0, #0
   87342:	f47f aec4 	bne.w	870ce <_svfprintf_r+0x1ba>
   87346:	3d10      	subs	r5, #16
   87348:	2d10      	cmp	r5, #16
   8734a:	46c8      	mov	r8, r9
   8734c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8734e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87350:	dce8      	bgt.n	87324 <_svfprintf_r+0x410>
   87352:	3301      	adds	r3, #1
   87354:	4a44      	ldr	r2, [pc, #272]	; (87468 <_svfprintf_r+0x554>)
   87356:	442c      	add	r4, r5
   87358:	2b07      	cmp	r3, #7
   8735a:	9427      	str	r4, [sp, #156]	; 0x9c
   8735c:	9326      	str	r3, [sp, #152]	; 0x98
   8735e:	e888 0024 	stmia.w	r8, {r2, r5}
   87362:	dd08      	ble.n	87376 <_svfprintf_r+0x462>
   87364:	aa25      	add	r2, sp, #148	; 0x94
   87366:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87368:	980c      	ldr	r0, [sp, #48]	; 0x30
   8736a:	f004 fd03 	bl	8bd74 <__ssprint_r>
   8736e:	2800      	cmp	r0, #0
   87370:	f47f aead 	bne.w	870ce <_svfprintf_r+0x1ba>
   87374:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87376:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8737a:	9908      	ldr	r1, [sp, #32]
   8737c:	428a      	cmp	r2, r1
   8737e:	bfac      	ite	ge
   87380:	189b      	addge	r3, r3, r2
   87382:	185b      	addlt	r3, r3, r1
   87384:	9309      	str	r3, [sp, #36]	; 0x24
   87386:	2c00      	cmp	r4, #0
   87388:	f040 82fb 	bne.w	87982 <_svfprintf_r+0xa6e>
   8738c:	2300      	movs	r3, #0
   8738e:	46c8      	mov	r8, r9
   87390:	9326      	str	r3, [sp, #152]	; 0x98
   87392:	e5e6      	b.n	86f62 <_svfprintf_r+0x4e>
   87394:	9311      	str	r3, [sp, #68]	; 0x44
   87396:	f01b 0320 	ands.w	r3, fp, #32
   8739a:	f040 8145 	bne.w	87628 <_svfprintf_r+0x714>
   8739e:	f01b 0210 	ands.w	r2, fp, #16
   873a2:	f040 8466 	bne.w	87c72 <_svfprintf_r+0xd5e>
   873a6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   873aa:	f000 8462 	beq.w	87c72 <_svfprintf_r+0xd5e>
   873ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
   873b0:	4613      	mov	r3, r2
   873b2:	460a      	mov	r2, r1
   873b4:	3204      	adds	r2, #4
   873b6:	880c      	ldrh	r4, [r1, #0]
   873b8:	2500      	movs	r5, #0
   873ba:	920f      	str	r2, [sp, #60]	; 0x3c
   873bc:	e6a8      	b.n	87110 <_svfprintf_r+0x1fc>
   873be:	2500      	movs	r5, #0
   873c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   873c2:	9311      	str	r3, [sp, #68]	; 0x44
   873c4:	6816      	ldr	r6, [r2, #0]
   873c6:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   873ca:	1d14      	adds	r4, r2, #4
   873cc:	2e00      	cmp	r6, #0
   873ce:	f000 86cd 	beq.w	8816c <_svfprintf_r+0x1258>
   873d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   873d4:	1c53      	adds	r3, r2, #1
   873d6:	f000 861b 	beq.w	88010 <_svfprintf_r+0x10fc>
   873da:	4629      	mov	r1, r5
   873dc:	4630      	mov	r0, r6
   873de:	f003 ff0b 	bl	8b1f8 <memchr>
   873e2:	2800      	cmp	r0, #0
   873e4:	f000 870d 	beq.w	88202 <_svfprintf_r+0x12ee>
   873e8:	1b83      	subs	r3, r0, r6
   873ea:	950a      	str	r5, [sp, #40]	; 0x28
   873ec:	930e      	str	r3, [sp, #56]	; 0x38
   873ee:	940f      	str	r4, [sp, #60]	; 0x3c
   873f0:	f8cd b01c 	str.w	fp, [sp, #28]
   873f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   873f8:	9308      	str	r3, [sp, #32]
   873fa:	9512      	str	r5, [sp, #72]	; 0x48
   873fc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87400:	e6ac      	b.n	8715c <_svfprintf_r+0x248>
   87402:	f89a 3000 	ldrb.w	r3, [sl]
   87406:	f10a 0401 	add.w	r4, sl, #1
   8740a:	2b2a      	cmp	r3, #42	; 0x2a
   8740c:	f000 87c2 	beq.w	88394 <_svfprintf_r+0x1480>
   87410:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   87414:	2809      	cmp	r0, #9
   87416:	46a2      	mov	sl, r4
   87418:	f200 8718 	bhi.w	8824c <_svfprintf_r+0x1338>
   8741c:	2300      	movs	r3, #0
   8741e:	461c      	mov	r4, r3
   87420:	f81a 3b01 	ldrb.w	r3, [sl], #1
   87424:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   87428:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   8742c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   87430:	2809      	cmp	r0, #9
   87432:	d9f5      	bls.n	87420 <_svfprintf_r+0x50c>
   87434:	940a      	str	r4, [sp, #40]	; 0x28
   87436:	e5c9      	b.n	86fcc <_svfprintf_r+0xb8>
   87438:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   8743c:	f89a 3000 	ldrb.w	r3, [sl]
   87440:	e5c2      	b.n	86fc8 <_svfprintf_r+0xb4>
   87442:	f04b 0b10 	orr.w	fp, fp, #16
   87446:	f01b 0f20 	tst.w	fp, #32
   8744a:	9311      	str	r3, [sp, #68]	; 0x44
   8744c:	f43f ae51 	beq.w	870f2 <_svfprintf_r+0x1de>
   87450:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   87452:	3407      	adds	r4, #7
   87454:	f024 0307 	bic.w	r3, r4, #7
   87458:	f103 0208 	add.w	r2, r3, #8
   8745c:	e9d3 4500 	ldrd	r4, r5, [r3]
   87460:	920f      	str	r2, [sp, #60]	; 0x3c
   87462:	2301      	movs	r3, #1
   87464:	e654      	b.n	87110 <_svfprintf_r+0x1fc>
   87466:	bf00      	nop
   87468:	0008ccd8 	.word	0x0008ccd8
   8746c:	0008cce8 	.word	0x0008cce8
   87470:	9311      	str	r3, [sp, #68]	; 0x44
   87472:	2a00      	cmp	r2, #0
   87474:	f040 87ad 	bne.w	883d2 <_svfprintf_r+0x14be>
   87478:	4bbe      	ldr	r3, [pc, #760]	; (87774 <_svfprintf_r+0x860>)
   8747a:	f01b 0f20 	tst.w	fp, #32
   8747e:	9318      	str	r3, [sp, #96]	; 0x60
   87480:	f040 80e7 	bne.w	87652 <_svfprintf_r+0x73e>
   87484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87486:	f01b 0f10 	tst.w	fp, #16
   8748a:	4613      	mov	r3, r2
   8748c:	f040 83d8 	bne.w	87c40 <_svfprintf_r+0xd2c>
   87490:	f01b 0f40 	tst.w	fp, #64	; 0x40
   87494:	f000 83d4 	beq.w	87c40 <_svfprintf_r+0xd2c>
   87498:	2500      	movs	r5, #0
   8749a:	3304      	adds	r3, #4
   8749c:	8814      	ldrh	r4, [r2, #0]
   8749e:	930f      	str	r3, [sp, #60]	; 0x3c
   874a0:	f01b 0f01 	tst.w	fp, #1
   874a4:	f000 80e3 	beq.w	8766e <_svfprintf_r+0x75a>
   874a8:	ea54 0305 	orrs.w	r3, r4, r5
   874ac:	f000 80df 	beq.w	8766e <_svfprintf_r+0x75a>
   874b0:	2330      	movs	r3, #48	; 0x30
   874b2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   874b6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   874ba:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   874be:	f04b 0b02 	orr.w	fp, fp, #2
   874c2:	2302      	movs	r3, #2
   874c4:	e624      	b.n	87110 <_svfprintf_r+0x1fc>
   874c6:	2201      	movs	r2, #1
   874c8:	9311      	str	r3, [sp, #68]	; 0x44
   874ca:	2300      	movs	r3, #0
   874cc:	4611      	mov	r1, r2
   874ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   874d0:	9208      	str	r2, [sp, #32]
   874d2:	6802      	ldr	r2, [r0, #0]
   874d4:	461f      	mov	r7, r3
   874d6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   874da:	930a      	str	r3, [sp, #40]	; 0x28
   874dc:	9312      	str	r3, [sp, #72]	; 0x48
   874de:	1d03      	adds	r3, r0, #4
   874e0:	f8cd b01c 	str.w	fp, [sp, #28]
   874e4:	910e      	str	r1, [sp, #56]	; 0x38
   874e6:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   874ea:	930f      	str	r3, [sp, #60]	; 0x3c
   874ec:	ae28      	add	r6, sp, #160	; 0xa0
   874ee:	e639      	b.n	87164 <_svfprintf_r+0x250>
   874f0:	9311      	str	r3, [sp, #68]	; 0x44
   874f2:	2a00      	cmp	r2, #0
   874f4:	f040 8784 	bne.w	88400 <_svfprintf_r+0x14ec>
   874f8:	f04b 0b10 	orr.w	fp, fp, #16
   874fc:	f01b 0f20 	tst.w	fp, #32
   87500:	f040 8475 	bne.w	87dee <_svfprintf_r+0xeda>
   87504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87506:	f01b 0f10 	tst.w	fp, #16
   8750a:	4613      	mov	r3, r2
   8750c:	f040 839d 	bne.w	87c4a <_svfprintf_r+0xd36>
   87510:	f01b 0f40 	tst.w	fp, #64	; 0x40
   87514:	f000 8399 	beq.w	87c4a <_svfprintf_r+0xd36>
   87518:	f9b2 4000 	ldrsh.w	r4, [r2]
   8751c:	3304      	adds	r3, #4
   8751e:	17e5      	asrs	r5, r4, #31
   87520:	930f      	str	r3, [sp, #60]	; 0x3c
   87522:	4622      	mov	r2, r4
   87524:	462b      	mov	r3, r5
   87526:	2a00      	cmp	r2, #0
   87528:	f173 0300 	sbcs.w	r3, r3, #0
   8752c:	f2c0 8398 	blt.w	87c60 <_svfprintf_r+0xd4c>
   87530:	990a      	ldr	r1, [sp, #40]	; 0x28
   87532:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87536:	1c4a      	adds	r2, r1, #1
   87538:	f04f 0301 	mov.w	r3, #1
   8753c:	f47f adf0 	bne.w	87120 <_svfprintf_r+0x20c>
   87540:	ea54 0205 	orrs.w	r2, r4, r5
   87544:	f000 8229 	beq.w	8799a <_svfprintf_r+0xa86>
   87548:	f8cd b01c 	str.w	fp, [sp, #28]
   8754c:	2b01      	cmp	r3, #1
   8754e:	f000 830e 	beq.w	87b6e <_svfprintf_r+0xc5a>
   87552:	2b02      	cmp	r3, #2
   87554:	f040 829c 	bne.w	87a90 <_svfprintf_r+0xb7c>
   87558:	464e      	mov	r6, r9
   8755a:	9818      	ldr	r0, [sp, #96]	; 0x60
   8755c:	0923      	lsrs	r3, r4, #4
   8755e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   87562:	0929      	lsrs	r1, r5, #4
   87564:	f004 020f 	and.w	r2, r4, #15
   87568:	460d      	mov	r5, r1
   8756a:	461c      	mov	r4, r3
   8756c:	5c83      	ldrb	r3, [r0, r2]
   8756e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   87572:	ea54 0305 	orrs.w	r3, r4, r5
   87576:	d1f1      	bne.n	8755c <_svfprintf_r+0x648>
   87578:	eba9 0306 	sub.w	r3, r9, r6
   8757c:	930e      	str	r3, [sp, #56]	; 0x38
   8757e:	e5e5      	b.n	8714c <_svfprintf_r+0x238>
   87580:	9311      	str	r3, [sp, #68]	; 0x44
   87582:	2a00      	cmp	r2, #0
   87584:	f040 8738 	bne.w	883f8 <_svfprintf_r+0x14e4>
   87588:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8758a:	f01b 0f08 	tst.w	fp, #8
   8758e:	f104 0407 	add.w	r4, r4, #7
   87592:	f000 84cf 	beq.w	87f34 <_svfprintf_r+0x1020>
   87596:	f024 0307 	bic.w	r3, r4, #7
   8759a:	f103 0208 	add.w	r2, r3, #8
   8759e:	920f      	str	r2, [sp, #60]	; 0x3c
   875a0:	681a      	ldr	r2, [r3, #0]
   875a2:	685b      	ldr	r3, [r3, #4]
   875a4:	9215      	str	r2, [sp, #84]	; 0x54
   875a6:	9314      	str	r3, [sp, #80]	; 0x50
   875a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   875aa:	9d15      	ldr	r5, [sp, #84]	; 0x54
   875ac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   875b0:	4628      	mov	r0, r5
   875b2:	4621      	mov	r1, r4
   875b4:	f04f 32ff 	mov.w	r2, #4294967295
   875b8:	4b6f      	ldr	r3, [pc, #444]	; (87778 <_svfprintf_r+0x864>)
   875ba:	f005 faa7 	bl	8cb0c <__aeabi_dcmpun>
   875be:	2800      	cmp	r0, #0
   875c0:	f040 8434 	bne.w	87e2c <_svfprintf_r+0xf18>
   875c4:	4628      	mov	r0, r5
   875c6:	4621      	mov	r1, r4
   875c8:	f04f 32ff 	mov.w	r2, #4294967295
   875cc:	4b6a      	ldr	r3, [pc, #424]	; (87778 <_svfprintf_r+0x864>)
   875ce:	f005 fa7f 	bl	8cad0 <__aeabi_dcmple>
   875d2:	2800      	cmp	r0, #0
   875d4:	f040 842a 	bne.w	87e2c <_svfprintf_r+0xf18>
   875d8:	a815      	add	r0, sp, #84	; 0x54
   875da:	c80d      	ldmia	r0, {r0, r2, r3}
   875dc:	9914      	ldr	r1, [sp, #80]	; 0x50
   875de:	f005 fa6d 	bl	8cabc <__aeabi_dcmplt>
   875e2:	2800      	cmp	r0, #0
   875e4:	f040 85d4 	bne.w	88190 <_svfprintf_r+0x127c>
   875e8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   875ec:	2303      	movs	r3, #3
   875ee:	461a      	mov	r2, r3
   875f0:	9308      	str	r3, [sp, #32]
   875f2:	2300      	movs	r3, #0
   875f4:	4e61      	ldr	r6, [pc, #388]	; (8777c <_svfprintf_r+0x868>)
   875f6:	4619      	mov	r1, r3
   875f8:	930a      	str	r3, [sp, #40]	; 0x28
   875fa:	4b61      	ldr	r3, [pc, #388]	; (87780 <_svfprintf_r+0x86c>)
   875fc:	920e      	str	r2, [sp, #56]	; 0x38
   875fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   87600:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   87604:	9007      	str	r0, [sp, #28]
   87606:	9112      	str	r1, [sp, #72]	; 0x48
   87608:	2a47      	cmp	r2, #71	; 0x47
   8760a:	bfd8      	it	le
   8760c:	461e      	movle	r6, r3
   8760e:	e5a5      	b.n	8715c <_svfprintf_r+0x248>
   87610:	f04b 0b08 	orr.w	fp, fp, #8
   87614:	f89a 3000 	ldrb.w	r3, [sl]
   87618:	e4d6      	b.n	86fc8 <_svfprintf_r+0xb4>
   8761a:	f04b 0b10 	orr.w	fp, fp, #16
   8761e:	9311      	str	r3, [sp, #68]	; 0x44
   87620:	f01b 0320 	ands.w	r3, fp, #32
   87624:	f43f aebb 	beq.w	8739e <_svfprintf_r+0x48a>
   87628:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8762a:	3407      	adds	r4, #7
   8762c:	f024 0307 	bic.w	r3, r4, #7
   87630:	f103 0208 	add.w	r2, r3, #8
   87634:	e9d3 4500 	ldrd	r4, r5, [r3]
   87638:	920f      	str	r2, [sp, #60]	; 0x3c
   8763a:	2300      	movs	r3, #0
   8763c:	e568      	b.n	87110 <_svfprintf_r+0x1fc>
   8763e:	9311      	str	r3, [sp, #68]	; 0x44
   87640:	2a00      	cmp	r2, #0
   87642:	f040 86c2 	bne.w	883ca <_svfprintf_r+0x14b6>
   87646:	4b4f      	ldr	r3, [pc, #316]	; (87784 <_svfprintf_r+0x870>)
   87648:	f01b 0f20 	tst.w	fp, #32
   8764c:	9318      	str	r3, [sp, #96]	; 0x60
   8764e:	f43f af19 	beq.w	87484 <_svfprintf_r+0x570>
   87652:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   87654:	f01b 0f01 	tst.w	fp, #1
   87658:	f104 0407 	add.w	r4, r4, #7
   8765c:	f024 0307 	bic.w	r3, r4, #7
   87660:	f103 0208 	add.w	r2, r3, #8
   87664:	920f      	str	r2, [sp, #60]	; 0x3c
   87666:	e9d3 4500 	ldrd	r4, r5, [r3]
   8766a:	f47f af1d 	bne.w	874a8 <_svfprintf_r+0x594>
   8766e:	2302      	movs	r3, #2
   87670:	e54e      	b.n	87110 <_svfprintf_r+0x1fc>
   87672:	f89a 3000 	ldrb.w	r3, [sl]
   87676:	2900      	cmp	r1, #0
   87678:	f47f aca6 	bne.w	86fc8 <_svfprintf_r+0xb4>
   8767c:	2201      	movs	r2, #1
   8767e:	2120      	movs	r1, #32
   87680:	e4a2      	b.n	86fc8 <_svfprintf_r+0xb4>
   87682:	f04b 0b01 	orr.w	fp, fp, #1
   87686:	f89a 3000 	ldrb.w	r3, [sl]
   8768a:	e49d      	b.n	86fc8 <_svfprintf_r+0xb4>
   8768c:	f89a 3000 	ldrb.w	r3, [sl]
   87690:	2201      	movs	r2, #1
   87692:	212b      	movs	r1, #43	; 0x2b
   87694:	e498      	b.n	86fc8 <_svfprintf_r+0xb4>
   87696:	f04b 0b20 	orr.w	fp, fp, #32
   8769a:	f89a 3000 	ldrb.w	r3, [sl]
   8769e:	e493      	b.n	86fc8 <_svfprintf_r+0xb4>
   876a0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   876a4:	f89a 3000 	ldrb.w	r3, [sl]
   876a8:	e48e      	b.n	86fc8 <_svfprintf_r+0xb4>
   876aa:	f89a 3000 	ldrb.w	r3, [sl]
   876ae:	2b6c      	cmp	r3, #108	; 0x6c
   876b0:	bf03      	ittte	eq
   876b2:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   876b6:	f04b 0b20 	orreq.w	fp, fp, #32
   876ba:	f10a 0a01 	addeq.w	sl, sl, #1
   876be:	f04b 0b10 	orrne.w	fp, fp, #16
   876c2:	e481      	b.n	86fc8 <_svfprintf_r+0xb4>
   876c4:	2a00      	cmp	r2, #0
   876c6:	f040 867c 	bne.w	883c2 <_svfprintf_r+0x14ae>
   876ca:	f01b 0f20 	tst.w	fp, #32
   876ce:	f040 8452 	bne.w	87f76 <_svfprintf_r+0x1062>
   876d2:	f01b 0f10 	tst.w	fp, #16
   876d6:	f040 8438 	bne.w	87f4a <_svfprintf_r+0x1036>
   876da:	f01b 0f40 	tst.w	fp, #64	; 0x40
   876de:	f000 8434 	beq.w	87f4a <_svfprintf_r+0x1036>
   876e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   876e4:	6813      	ldr	r3, [r2, #0]
   876e6:	3204      	adds	r2, #4
   876e8:	920f      	str	r2, [sp, #60]	; 0x3c
   876ea:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   876ee:	801a      	strh	r2, [r3, #0]
   876f0:	e437      	b.n	86f62 <_svfprintf_r+0x4e>
   876f2:	2378      	movs	r3, #120	; 0x78
   876f4:	2230      	movs	r2, #48	; 0x30
   876f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   876f8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   876fc:	9311      	str	r3, [sp, #68]	; 0x44
   876fe:	1d03      	adds	r3, r0, #4
   87700:	930f      	str	r3, [sp, #60]	; 0x3c
   87702:	4b20      	ldr	r3, [pc, #128]	; (87784 <_svfprintf_r+0x870>)
   87704:	6804      	ldr	r4, [r0, #0]
   87706:	9318      	str	r3, [sp, #96]	; 0x60
   87708:	f04b 0b02 	orr.w	fp, fp, #2
   8770c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   87710:	2500      	movs	r5, #0
   87712:	2302      	movs	r3, #2
   87714:	e4fc      	b.n	87110 <_svfprintf_r+0x1fc>
   87716:	9311      	str	r3, [sp, #68]	; 0x44
   87718:	2a00      	cmp	r2, #0
   8771a:	f43f aeef 	beq.w	874fc <_svfprintf_r+0x5e8>
   8771e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87722:	e6eb      	b.n	874fc <_svfprintf_r+0x5e8>
   87724:	2000      	movs	r0, #0
   87726:	4604      	mov	r4, r0
   87728:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8772c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   87730:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   87734:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   87738:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8773c:	2809      	cmp	r0, #9
   8773e:	d9f5      	bls.n	8772c <_svfprintf_r+0x818>
   87740:	940d      	str	r4, [sp, #52]	; 0x34
   87742:	e443      	b.n	86fcc <_svfprintf_r+0xb8>
   87744:	9311      	str	r3, [sp, #68]	; 0x44
   87746:	2a00      	cmp	r2, #0
   87748:	f040 864a 	bne.w	883e0 <_svfprintf_r+0x14cc>
   8774c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8774e:	2a00      	cmp	r2, #0
   87750:	f43f acb6 	beq.w	870c0 <_svfprintf_r+0x1ac>
   87754:	2300      	movs	r3, #0
   87756:	2101      	movs	r1, #1
   87758:	461f      	mov	r7, r3
   8775a:	9108      	str	r1, [sp, #32]
   8775c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   87760:	f8cd b01c 	str.w	fp, [sp, #28]
   87764:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   87768:	930a      	str	r3, [sp, #40]	; 0x28
   8776a:	9312      	str	r3, [sp, #72]	; 0x48
   8776c:	910e      	str	r1, [sp, #56]	; 0x38
   8776e:	ae28      	add	r6, sp, #160	; 0xa0
   87770:	e4f8      	b.n	87164 <_svfprintf_r+0x250>
   87772:	bf00      	nop
   87774:	0008cca4 	.word	0x0008cca4
   87778:	7fefffff 	.word	0x7fefffff
   8777c:	0008cc98 	.word	0x0008cc98
   87780:	0008cc94 	.word	0x0008cc94
   87784:	0008ccb8 	.word	0x0008ccb8
   87788:	aa25      	add	r2, sp, #148	; 0x94
   8778a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8778c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8778e:	f004 faf1 	bl	8bd74 <__ssprint_r>
   87792:	2800      	cmp	r0, #0
   87794:	f47f ac9b 	bne.w	870ce <_svfprintf_r+0x1ba>
   87798:	46c8      	mov	r8, r9
   8779a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8779e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   877a0:	e533      	b.n	8720a <_svfprintf_r+0x2f6>
   877a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   877a4:	2b65      	cmp	r3, #101	; 0x65
   877a6:	f340 809a 	ble.w	878de <_svfprintf_r+0x9ca>
   877aa:	a815      	add	r0, sp, #84	; 0x54
   877ac:	c80d      	ldmia	r0, {r0, r2, r3}
   877ae:	9914      	ldr	r1, [sp, #80]	; 0x50
   877b0:	f005 f97a 	bl	8caa8 <__aeabi_dcmpeq>
   877b4:	2800      	cmp	r0, #0
   877b6:	f000 8193 	beq.w	87ae0 <_svfprintf_r+0xbcc>
   877ba:	2101      	movs	r1, #1
   877bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   877be:	4ab5      	ldr	r2, [pc, #724]	; (87a94 <_svfprintf_r+0xb80>)
   877c0:	440b      	add	r3, r1
   877c2:	440c      	add	r4, r1
   877c4:	2b07      	cmp	r3, #7
   877c6:	9427      	str	r4, [sp, #156]	; 0x9c
   877c8:	9326      	str	r3, [sp, #152]	; 0x98
   877ca:	f8c8 1004 	str.w	r1, [r8, #4]
   877ce:	f8c8 2000 	str.w	r2, [r8]
   877d2:	f300 83c6 	bgt.w	87f62 <_svfprintf_r+0x104e>
   877d6:	f108 0808 	add.w	r8, r8, #8
   877da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   877dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   877de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   877e0:	4293      	cmp	r3, r2
   877e2:	db03      	blt.n	877ec <_svfprintf_r+0x8d8>
   877e4:	9b07      	ldr	r3, [sp, #28]
   877e6:	07dd      	lsls	r5, r3, #31
   877e8:	f57f ad86 	bpl.w	872f8 <_svfprintf_r+0x3e4>
   877ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
   877ee:	9919      	ldr	r1, [sp, #100]	; 0x64
   877f0:	3301      	adds	r3, #1
   877f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   877f4:	440c      	add	r4, r1
   877f6:	2b07      	cmp	r3, #7
   877f8:	f8c8 2000 	str.w	r2, [r8]
   877fc:	f8c8 1004 	str.w	r1, [r8, #4]
   87800:	9427      	str	r4, [sp, #156]	; 0x9c
   87802:	9326      	str	r3, [sp, #152]	; 0x98
   87804:	f300 83c4 	bgt.w	87f90 <_svfprintf_r+0x107c>
   87808:	f108 0808 	add.w	r8, r8, #8
   8780c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8780e:	1e5e      	subs	r6, r3, #1
   87810:	2e00      	cmp	r6, #0
   87812:	f77f ad71 	ble.w	872f8 <_svfprintf_r+0x3e4>
   87816:	2e10      	cmp	r6, #16
   87818:	f340 8575 	ble.w	88306 <_svfprintf_r+0x13f2>
   8781c:	4622      	mov	r2, r4
   8781e:	2710      	movs	r7, #16
   87820:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87822:	4d9d      	ldr	r5, [pc, #628]	; (87a98 <_svfprintf_r+0xb84>)
   87824:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87828:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8782a:	e005      	b.n	87838 <_svfprintf_r+0x924>
   8782c:	f108 0808 	add.w	r8, r8, #8
   87830:	3e10      	subs	r6, #16
   87832:	2e10      	cmp	r6, #16
   87834:	f340 8225 	ble.w	87c82 <_svfprintf_r+0xd6e>
   87838:	3301      	adds	r3, #1
   8783a:	3210      	adds	r2, #16
   8783c:	2b07      	cmp	r3, #7
   8783e:	9227      	str	r2, [sp, #156]	; 0x9c
   87840:	9326      	str	r3, [sp, #152]	; 0x98
   87842:	e888 00a0 	stmia.w	r8, {r5, r7}
   87846:	ddf1      	ble.n	8782c <_svfprintf_r+0x918>
   87848:	aa25      	add	r2, sp, #148	; 0x94
   8784a:	4621      	mov	r1, r4
   8784c:	4658      	mov	r0, fp
   8784e:	f004 fa91 	bl	8bd74 <__ssprint_r>
   87852:	2800      	cmp	r0, #0
   87854:	f47f ac3b 	bne.w	870ce <_svfprintf_r+0x1ba>
   87858:	46c8      	mov	r8, r9
   8785a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8785c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8785e:	e7e7      	b.n	87830 <_svfprintf_r+0x91c>
   87860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87862:	9a08      	ldr	r2, [sp, #32]
   87864:	1a9f      	subs	r7, r3, r2
   87866:	2f00      	cmp	r7, #0
   87868:	f77f acf6 	ble.w	87258 <_svfprintf_r+0x344>
   8786c:	2f10      	cmp	r7, #16
   8786e:	f340 84a8 	ble.w	881c2 <_svfprintf_r+0x12ae>
   87872:	4d89      	ldr	r5, [pc, #548]	; (87a98 <_svfprintf_r+0xb84>)
   87874:	4642      	mov	r2, r8
   87876:	4621      	mov	r1, r4
   87878:	46b0      	mov	r8, r6
   8787a:	f04f 0b10 	mov.w	fp, #16
   8787e:	462e      	mov	r6, r5
   87880:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87882:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87884:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87886:	e004      	b.n	87892 <_svfprintf_r+0x97e>
   87888:	3f10      	subs	r7, #16
   8788a:	2f10      	cmp	r7, #16
   8788c:	f102 0208 	add.w	r2, r2, #8
   87890:	dd15      	ble.n	878be <_svfprintf_r+0x9aa>
   87892:	3301      	adds	r3, #1
   87894:	3110      	adds	r1, #16
   87896:	2b07      	cmp	r3, #7
   87898:	9127      	str	r1, [sp, #156]	; 0x9c
   8789a:	9326      	str	r3, [sp, #152]	; 0x98
   8789c:	e882 0840 	stmia.w	r2, {r6, fp}
   878a0:	ddf2      	ble.n	87888 <_svfprintf_r+0x974>
   878a2:	aa25      	add	r2, sp, #148	; 0x94
   878a4:	4629      	mov	r1, r5
   878a6:	4620      	mov	r0, r4
   878a8:	f004 fa64 	bl	8bd74 <__ssprint_r>
   878ac:	2800      	cmp	r0, #0
   878ae:	f47f ac0e 	bne.w	870ce <_svfprintf_r+0x1ba>
   878b2:	3f10      	subs	r7, #16
   878b4:	2f10      	cmp	r7, #16
   878b6:	464a      	mov	r2, r9
   878b8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   878ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   878bc:	dce9      	bgt.n	87892 <_svfprintf_r+0x97e>
   878be:	4635      	mov	r5, r6
   878c0:	460c      	mov	r4, r1
   878c2:	4646      	mov	r6, r8
   878c4:	4690      	mov	r8, r2
   878c6:	3301      	adds	r3, #1
   878c8:	443c      	add	r4, r7
   878ca:	2b07      	cmp	r3, #7
   878cc:	9427      	str	r4, [sp, #156]	; 0x9c
   878ce:	9326      	str	r3, [sp, #152]	; 0x98
   878d0:	e888 00a0 	stmia.w	r8, {r5, r7}
   878d4:	f300 829e 	bgt.w	87e14 <_svfprintf_r+0xf00>
   878d8:	f108 0808 	add.w	r8, r8, #8
   878dc:	e4bc      	b.n	87258 <_svfprintf_r+0x344>
   878de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   878e0:	2b01      	cmp	r3, #1
   878e2:	f340 824f 	ble.w	87d84 <_svfprintf_r+0xe70>
   878e6:	2301      	movs	r3, #1
   878e8:	9f26      	ldr	r7, [sp, #152]	; 0x98
   878ea:	441c      	add	r4, r3
   878ec:	441f      	add	r7, r3
   878ee:	2f07      	cmp	r7, #7
   878f0:	9427      	str	r4, [sp, #156]	; 0x9c
   878f2:	f8c8 6000 	str.w	r6, [r8]
   878f6:	9726      	str	r7, [sp, #152]	; 0x98
   878f8:	f8c8 3004 	str.w	r3, [r8, #4]
   878fc:	f300 825f 	bgt.w	87dbe <_svfprintf_r+0xeaa>
   87900:	f108 0808 	add.w	r8, r8, #8
   87904:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87906:	3701      	adds	r7, #1
   87908:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8790a:	4414      	add	r4, r2
   8790c:	2f07      	cmp	r7, #7
   8790e:	9427      	str	r4, [sp, #156]	; 0x9c
   87910:	9726      	str	r7, [sp, #152]	; 0x98
   87912:	f8c8 3000 	str.w	r3, [r8]
   87916:	f8c8 2004 	str.w	r2, [r8, #4]
   8791a:	f300 825c 	bgt.w	87dd6 <_svfprintf_r+0xec2>
   8791e:	f108 0808 	add.w	r8, r8, #8
   87922:	a815      	add	r0, sp, #84	; 0x54
   87924:	c80d      	ldmia	r0, {r0, r2, r3}
   87926:	9914      	ldr	r1, [sp, #80]	; 0x50
   87928:	f005 f8be 	bl	8caa8 <__aeabi_dcmpeq>
   8792c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8792e:	2800      	cmp	r0, #0
   87930:	f040 8141 	bne.w	87bb6 <_svfprintf_r+0xca2>
   87934:	3b01      	subs	r3, #1
   87936:	3701      	adds	r7, #1
   87938:	3601      	adds	r6, #1
   8793a:	441c      	add	r4, r3
   8793c:	2f07      	cmp	r7, #7
   8793e:	f8c8 6000 	str.w	r6, [r8]
   87942:	9726      	str	r7, [sp, #152]	; 0x98
   87944:	9427      	str	r4, [sp, #156]	; 0x9c
   87946:	f8c8 3004 	str.w	r3, [r8, #4]
   8794a:	f300 8166 	bgt.w	87c1a <_svfprintf_r+0xd06>
   8794e:	f108 0808 	add.w	r8, r8, #8
   87952:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87954:	3701      	adds	r7, #1
   87956:	4414      	add	r4, r2
   87958:	ab21      	add	r3, sp, #132	; 0x84
   8795a:	2f07      	cmp	r7, #7
   8795c:	9427      	str	r4, [sp, #156]	; 0x9c
   8795e:	9726      	str	r7, [sp, #152]	; 0x98
   87960:	f8c8 2004 	str.w	r2, [r8, #4]
   87964:	f8c8 3000 	str.w	r3, [r8]
   87968:	f77f acc4 	ble.w	872f4 <_svfprintf_r+0x3e0>
   8796c:	aa25      	add	r2, sp, #148	; 0x94
   8796e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87970:	980c      	ldr	r0, [sp, #48]	; 0x30
   87972:	f004 f9ff 	bl	8bd74 <__ssprint_r>
   87976:	2800      	cmp	r0, #0
   87978:	f47f aba9 	bne.w	870ce <_svfprintf_r+0x1ba>
   8797c:	46c8      	mov	r8, r9
   8797e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87980:	e4ba      	b.n	872f8 <_svfprintf_r+0x3e4>
   87982:	aa25      	add	r2, sp, #148	; 0x94
   87984:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87986:	980c      	ldr	r0, [sp, #48]	; 0x30
   87988:	f004 f9f4 	bl	8bd74 <__ssprint_r>
   8798c:	2800      	cmp	r0, #0
   8798e:	f43f acfd 	beq.w	8738c <_svfprintf_r+0x478>
   87992:	f7ff bb9c 	b.w	870ce <_svfprintf_r+0x1ba>
   87996:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8799a:	2b01      	cmp	r3, #1
   8799c:	f000 817e 	beq.w	87c9c <_svfprintf_r+0xd88>
   879a0:	2b02      	cmp	r3, #2
   879a2:	d171      	bne.n	87a88 <_svfprintf_r+0xb74>
   879a4:	f8cd b01c 	str.w	fp, [sp, #28]
   879a8:	2400      	movs	r4, #0
   879aa:	2500      	movs	r5, #0
   879ac:	e5d4      	b.n	87558 <_svfprintf_r+0x644>
   879ae:	aa25      	add	r2, sp, #148	; 0x94
   879b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   879b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   879b4:	f004 f9de 	bl	8bd74 <__ssprint_r>
   879b8:	2800      	cmp	r0, #0
   879ba:	f47f ab88 	bne.w	870ce <_svfprintf_r+0x1ba>
   879be:	46c8      	mov	r8, r9
   879c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   879c2:	e486      	b.n	872d2 <_svfprintf_r+0x3be>
   879c4:	aa25      	add	r2, sp, #148	; 0x94
   879c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   879c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   879ca:	f004 f9d3 	bl	8bd74 <__ssprint_r>
   879ce:	2800      	cmp	r0, #0
   879d0:	f47f ab7d 	bne.w	870ce <_svfprintf_r+0x1ba>
   879d4:	46c8      	mov	r8, r9
   879d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   879d8:	e429      	b.n	8722e <_svfprintf_r+0x31a>
   879da:	2001      	movs	r0, #1
   879dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   879de:	4a2d      	ldr	r2, [pc, #180]	; (87a94 <_svfprintf_r+0xb80>)
   879e0:	4403      	add	r3, r0
   879e2:	4404      	add	r4, r0
   879e4:	2b07      	cmp	r3, #7
   879e6:	9427      	str	r4, [sp, #156]	; 0x9c
   879e8:	9326      	str	r3, [sp, #152]	; 0x98
   879ea:	f8c8 0004 	str.w	r0, [r8, #4]
   879ee:	f8c8 2000 	str.w	r2, [r8]
   879f2:	f340 82d8 	ble.w	87fa6 <_svfprintf_r+0x1092>
   879f6:	aa25      	add	r2, sp, #148	; 0x94
   879f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   879fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   879fc:	f004 f9ba 	bl	8bd74 <__ssprint_r>
   87a00:	2800      	cmp	r0, #0
   87a02:	f47f ab64 	bne.w	870ce <_svfprintf_r+0x1ba>
   87a06:	46c8      	mov	r8, r9
   87a08:	991f      	ldr	r1, [sp, #124]	; 0x7c
   87a0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87a0c:	b929      	cbnz	r1, 87a1a <_svfprintf_r+0xb06>
   87a0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87a10:	b91b      	cbnz	r3, 87a1a <_svfprintf_r+0xb06>
   87a12:	9b07      	ldr	r3, [sp, #28]
   87a14:	07d8      	lsls	r0, r3, #31
   87a16:	f57f ac6f 	bpl.w	872f8 <_svfprintf_r+0x3e4>
   87a1a:	9819      	ldr	r0, [sp, #100]	; 0x64
   87a1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87a1e:	4602      	mov	r2, r0
   87a20:	3301      	adds	r3, #1
   87a22:	4422      	add	r2, r4
   87a24:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   87a26:	2b07      	cmp	r3, #7
   87a28:	9227      	str	r2, [sp, #156]	; 0x9c
   87a2a:	f8c8 4000 	str.w	r4, [r8]
   87a2e:	f8c8 0004 	str.w	r0, [r8, #4]
   87a32:	9326      	str	r3, [sp, #152]	; 0x98
   87a34:	f300 8431 	bgt.w	8829a <_svfprintf_r+0x1386>
   87a38:	f108 0808 	add.w	r8, r8, #8
   87a3c:	2900      	cmp	r1, #0
   87a3e:	f2c0 8409 	blt.w	88254 <_svfprintf_r+0x1340>
   87a42:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87a44:	3301      	adds	r3, #1
   87a46:	188c      	adds	r4, r1, r2
   87a48:	2b07      	cmp	r3, #7
   87a4a:	9427      	str	r4, [sp, #156]	; 0x9c
   87a4c:	9326      	str	r3, [sp, #152]	; 0x98
   87a4e:	f8c8 6000 	str.w	r6, [r8]
   87a52:	f8c8 1004 	str.w	r1, [r8, #4]
   87a56:	f77f ac4d 	ble.w	872f4 <_svfprintf_r+0x3e0>
   87a5a:	aa25      	add	r2, sp, #148	; 0x94
   87a5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87a5e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87a60:	f004 f988 	bl	8bd74 <__ssprint_r>
   87a64:	2800      	cmp	r0, #0
   87a66:	f47f ab32 	bne.w	870ce <_svfprintf_r+0x1ba>
   87a6a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87a6c:	46c8      	mov	r8, r9
   87a6e:	e443      	b.n	872f8 <_svfprintf_r+0x3e4>
   87a70:	aa25      	add	r2, sp, #148	; 0x94
   87a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87a74:	980c      	ldr	r0, [sp, #48]	; 0x30
   87a76:	f004 f97d 	bl	8bd74 <__ssprint_r>
   87a7a:	2800      	cmp	r0, #0
   87a7c:	f47f ab27 	bne.w	870ce <_svfprintf_r+0x1ba>
   87a80:	46c8      	mov	r8, r9
   87a82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87a84:	f7ff bbe5 	b.w	87252 <_svfprintf_r+0x33e>
   87a88:	2400      	movs	r4, #0
   87a8a:	2500      	movs	r5, #0
   87a8c:	f8cd b01c 	str.w	fp, [sp, #28]
   87a90:	4649      	mov	r1, r9
   87a92:	e004      	b.n	87a9e <_svfprintf_r+0xb8a>
   87a94:	0008ccd4 	.word	0x0008ccd4
   87a98:	0008cce8 	.word	0x0008cce8
   87a9c:	4631      	mov	r1, r6
   87a9e:	08e2      	lsrs	r2, r4, #3
   87aa0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   87aa4:	08e8      	lsrs	r0, r5, #3
   87aa6:	f004 0307 	and.w	r3, r4, #7
   87aaa:	4605      	mov	r5, r0
   87aac:	4614      	mov	r4, r2
   87aae:	3330      	adds	r3, #48	; 0x30
   87ab0:	ea54 0205 	orrs.w	r2, r4, r5
   87ab4:	f801 3c01 	strb.w	r3, [r1, #-1]
   87ab8:	f101 36ff 	add.w	r6, r1, #4294967295
   87abc:	d1ee      	bne.n	87a9c <_svfprintf_r+0xb88>
   87abe:	9a07      	ldr	r2, [sp, #28]
   87ac0:	07d2      	lsls	r2, r2, #31
   87ac2:	f57f ad59 	bpl.w	87578 <_svfprintf_r+0x664>
   87ac6:	2b30      	cmp	r3, #48	; 0x30
   87ac8:	f43f ad56 	beq.w	87578 <_svfprintf_r+0x664>
   87acc:	2330      	movs	r3, #48	; 0x30
   87ace:	3902      	subs	r1, #2
   87ad0:	f806 3c01 	strb.w	r3, [r6, #-1]
   87ad4:	eba9 0301 	sub.w	r3, r9, r1
   87ad8:	930e      	str	r3, [sp, #56]	; 0x38
   87ada:	460e      	mov	r6, r1
   87adc:	f7ff bb36 	b.w	8714c <_svfprintf_r+0x238>
   87ae0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   87ae2:	2900      	cmp	r1, #0
   87ae4:	f77f af79 	ble.w	879da <_svfprintf_r+0xac6>
   87ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87aea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87aec:	4293      	cmp	r3, r2
   87aee:	bfa8      	it	ge
   87af0:	4613      	movge	r3, r2
   87af2:	2b00      	cmp	r3, #0
   87af4:	461f      	mov	r7, r3
   87af6:	dd0b      	ble.n	87b10 <_svfprintf_r+0xbfc>
   87af8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87afa:	443c      	add	r4, r7
   87afc:	3301      	adds	r3, #1
   87afe:	2b07      	cmp	r3, #7
   87b00:	9427      	str	r4, [sp, #156]	; 0x9c
   87b02:	e888 00c0 	stmia.w	r8, {r6, r7}
   87b06:	9326      	str	r3, [sp, #152]	; 0x98
   87b08:	f300 82fb 	bgt.w	88102 <_svfprintf_r+0x11ee>
   87b0c:	f108 0808 	add.w	r8, r8, #8
   87b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87b12:	2f00      	cmp	r7, #0
   87b14:	bfa8      	it	ge
   87b16:	1bdb      	subge	r3, r3, r7
   87b18:	2b00      	cmp	r3, #0
   87b1a:	461f      	mov	r7, r3
   87b1c:	f340 80d7 	ble.w	87cce <_svfprintf_r+0xdba>
   87b20:	2b10      	cmp	r3, #16
   87b22:	f340 8434 	ble.w	8838e <_svfprintf_r+0x147a>
   87b26:	4dba      	ldr	r5, [pc, #744]	; (87e10 <_svfprintf_r+0xefc>)
   87b28:	4642      	mov	r2, r8
   87b2a:	4621      	mov	r1, r4
   87b2c:	46b0      	mov	r8, r6
   87b2e:	f04f 0b10 	mov.w	fp, #16
   87b32:	462e      	mov	r6, r5
   87b34:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87b36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87b38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87b3a:	e004      	b.n	87b46 <_svfprintf_r+0xc32>
   87b3c:	3208      	adds	r2, #8
   87b3e:	3f10      	subs	r7, #16
   87b40:	2f10      	cmp	r7, #16
   87b42:	f340 80b5 	ble.w	87cb0 <_svfprintf_r+0xd9c>
   87b46:	3301      	adds	r3, #1
   87b48:	3110      	adds	r1, #16
   87b4a:	2b07      	cmp	r3, #7
   87b4c:	9127      	str	r1, [sp, #156]	; 0x9c
   87b4e:	9326      	str	r3, [sp, #152]	; 0x98
   87b50:	e882 0840 	stmia.w	r2, {r6, fp}
   87b54:	ddf2      	ble.n	87b3c <_svfprintf_r+0xc28>
   87b56:	aa25      	add	r2, sp, #148	; 0x94
   87b58:	4629      	mov	r1, r5
   87b5a:	4620      	mov	r0, r4
   87b5c:	f004 f90a 	bl	8bd74 <__ssprint_r>
   87b60:	2800      	cmp	r0, #0
   87b62:	f47f aab4 	bne.w	870ce <_svfprintf_r+0x1ba>
   87b66:	464a      	mov	r2, r9
   87b68:	9927      	ldr	r1, [sp, #156]	; 0x9c
   87b6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87b6c:	e7e7      	b.n	87b3e <_svfprintf_r+0xc2a>
   87b6e:	2d00      	cmp	r5, #0
   87b70:	bf08      	it	eq
   87b72:	2c0a      	cmpeq	r4, #10
   87b74:	f0c0 8090 	bcc.w	87c98 <_svfprintf_r+0xd84>
   87b78:	464e      	mov	r6, r9
   87b7a:	4620      	mov	r0, r4
   87b7c:	4629      	mov	r1, r5
   87b7e:	220a      	movs	r2, #10
   87b80:	2300      	movs	r3, #0
   87b82:	f7fe fde9 	bl	86758 <__aeabi_uldivmod>
   87b86:	3230      	adds	r2, #48	; 0x30
   87b88:	f806 2d01 	strb.w	r2, [r6, #-1]!
   87b8c:	4620      	mov	r0, r4
   87b8e:	4629      	mov	r1, r5
   87b90:	2300      	movs	r3, #0
   87b92:	220a      	movs	r2, #10
   87b94:	f7fe fde0 	bl	86758 <__aeabi_uldivmod>
   87b98:	4604      	mov	r4, r0
   87b9a:	460d      	mov	r5, r1
   87b9c:	ea54 0305 	orrs.w	r3, r4, r5
   87ba0:	d1eb      	bne.n	87b7a <_svfprintf_r+0xc66>
   87ba2:	eba9 0306 	sub.w	r3, r9, r6
   87ba6:	930e      	str	r3, [sp, #56]	; 0x38
   87ba8:	f7ff bad0 	b.w	8714c <_svfprintf_r+0x238>
   87bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87bae:	464e      	mov	r6, r9
   87bb0:	930e      	str	r3, [sp, #56]	; 0x38
   87bb2:	f7ff bacb 	b.w	8714c <_svfprintf_r+0x238>
   87bb6:	1e5e      	subs	r6, r3, #1
   87bb8:	2e00      	cmp	r6, #0
   87bba:	f77f aeca 	ble.w	87952 <_svfprintf_r+0xa3e>
   87bbe:	2e10      	cmp	r6, #16
   87bc0:	f340 83e3 	ble.w	8838a <_svfprintf_r+0x1476>
   87bc4:	4622      	mov	r2, r4
   87bc6:	f04f 0b10 	mov.w	fp, #16
   87bca:	4d91      	ldr	r5, [pc, #580]	; (87e10 <_svfprintf_r+0xefc>)
   87bcc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87bce:	e004      	b.n	87bda <_svfprintf_r+0xcc6>
   87bd0:	3e10      	subs	r6, #16
   87bd2:	2e10      	cmp	r6, #16
   87bd4:	f108 0808 	add.w	r8, r8, #8
   87bd8:	dd15      	ble.n	87c06 <_svfprintf_r+0xcf2>
   87bda:	3701      	adds	r7, #1
   87bdc:	3210      	adds	r2, #16
   87bde:	2f07      	cmp	r7, #7
   87be0:	9227      	str	r2, [sp, #156]	; 0x9c
   87be2:	9726      	str	r7, [sp, #152]	; 0x98
   87be4:	e888 0820 	stmia.w	r8, {r5, fp}
   87be8:	ddf2      	ble.n	87bd0 <_svfprintf_r+0xcbc>
   87bea:	aa25      	add	r2, sp, #148	; 0x94
   87bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87bee:	4620      	mov	r0, r4
   87bf0:	f004 f8c0 	bl	8bd74 <__ssprint_r>
   87bf4:	2800      	cmp	r0, #0
   87bf6:	f47f aa6a 	bne.w	870ce <_svfprintf_r+0x1ba>
   87bfa:	3e10      	subs	r6, #16
   87bfc:	2e10      	cmp	r6, #16
   87bfe:	46c8      	mov	r8, r9
   87c00:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87c02:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87c04:	dce9      	bgt.n	87bda <_svfprintf_r+0xcc6>
   87c06:	4614      	mov	r4, r2
   87c08:	3701      	adds	r7, #1
   87c0a:	4434      	add	r4, r6
   87c0c:	2f07      	cmp	r7, #7
   87c0e:	9427      	str	r4, [sp, #156]	; 0x9c
   87c10:	9726      	str	r7, [sp, #152]	; 0x98
   87c12:	e888 0060 	stmia.w	r8, {r5, r6}
   87c16:	f77f ae9a 	ble.w	8794e <_svfprintf_r+0xa3a>
   87c1a:	aa25      	add	r2, sp, #148	; 0x94
   87c1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87c1e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87c20:	f004 f8a8 	bl	8bd74 <__ssprint_r>
   87c24:	2800      	cmp	r0, #0
   87c26:	f47f aa52 	bne.w	870ce <_svfprintf_r+0x1ba>
   87c2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87c2c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87c2e:	46c8      	mov	r8, r9
   87c30:	e68f      	b.n	87952 <_svfprintf_r+0xa3e>
   87c32:	3204      	adds	r2, #4
   87c34:	681c      	ldr	r4, [r3, #0]
   87c36:	2500      	movs	r5, #0
   87c38:	2301      	movs	r3, #1
   87c3a:	920f      	str	r2, [sp, #60]	; 0x3c
   87c3c:	f7ff ba68 	b.w	87110 <_svfprintf_r+0x1fc>
   87c40:	681c      	ldr	r4, [r3, #0]
   87c42:	3304      	adds	r3, #4
   87c44:	930f      	str	r3, [sp, #60]	; 0x3c
   87c46:	2500      	movs	r5, #0
   87c48:	e42a      	b.n	874a0 <_svfprintf_r+0x58c>
   87c4a:	681c      	ldr	r4, [r3, #0]
   87c4c:	3304      	adds	r3, #4
   87c4e:	17e5      	asrs	r5, r4, #31
   87c50:	4622      	mov	r2, r4
   87c52:	930f      	str	r3, [sp, #60]	; 0x3c
   87c54:	462b      	mov	r3, r5
   87c56:	2a00      	cmp	r2, #0
   87c58:	f173 0300 	sbcs.w	r3, r3, #0
   87c5c:	f6bf ac68 	bge.w	87530 <_svfprintf_r+0x61c>
   87c60:	272d      	movs	r7, #45	; 0x2d
   87c62:	4264      	negs	r4, r4
   87c64:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   87c68:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   87c6c:	2301      	movs	r3, #1
   87c6e:	f7ff ba53 	b.w	87118 <_svfprintf_r+0x204>
   87c72:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87c74:	2500      	movs	r5, #0
   87c76:	460a      	mov	r2, r1
   87c78:	3204      	adds	r2, #4
   87c7a:	680c      	ldr	r4, [r1, #0]
   87c7c:	920f      	str	r2, [sp, #60]	; 0x3c
   87c7e:	f7ff ba47 	b.w	87110 <_svfprintf_r+0x1fc>
   87c82:	4614      	mov	r4, r2
   87c84:	3301      	adds	r3, #1
   87c86:	4434      	add	r4, r6
   87c88:	2b07      	cmp	r3, #7
   87c8a:	9427      	str	r4, [sp, #156]	; 0x9c
   87c8c:	9326      	str	r3, [sp, #152]	; 0x98
   87c8e:	e888 0060 	stmia.w	r8, {r5, r6}
   87c92:	f77f ab2f 	ble.w	872f4 <_svfprintf_r+0x3e0>
   87c96:	e6e0      	b.n	87a5a <_svfprintf_r+0xb46>
   87c98:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87c9c:	2301      	movs	r3, #1
   87c9e:	ae42      	add	r6, sp, #264	; 0x108
   87ca0:	3430      	adds	r4, #48	; 0x30
   87ca2:	f8cd b01c 	str.w	fp, [sp, #28]
   87ca6:	f806 4d41 	strb.w	r4, [r6, #-65]!
   87caa:	930e      	str	r3, [sp, #56]	; 0x38
   87cac:	f7ff ba4e 	b.w	8714c <_svfprintf_r+0x238>
   87cb0:	4635      	mov	r5, r6
   87cb2:	460c      	mov	r4, r1
   87cb4:	4646      	mov	r6, r8
   87cb6:	4690      	mov	r8, r2
   87cb8:	3301      	adds	r3, #1
   87cba:	443c      	add	r4, r7
   87cbc:	2b07      	cmp	r3, #7
   87cbe:	9427      	str	r4, [sp, #156]	; 0x9c
   87cc0:	9326      	str	r3, [sp, #152]	; 0x98
   87cc2:	e888 00a0 	stmia.w	r8, {r5, r7}
   87cc6:	f300 8246 	bgt.w	88156 <_svfprintf_r+0x1242>
   87cca:	f108 0808 	add.w	r8, r8, #8
   87cce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   87cd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87cd2:	429a      	cmp	r2, r3
   87cd4:	db45      	blt.n	87d62 <_svfprintf_r+0xe4e>
   87cd6:	9b07      	ldr	r3, [sp, #28]
   87cd8:	07d9      	lsls	r1, r3, #31
   87cda:	d442      	bmi.n	87d62 <_svfprintf_r+0xe4e>
   87cdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87cde:	9812      	ldr	r0, [sp, #72]	; 0x48
   87ce0:	1a9a      	subs	r2, r3, r2
   87ce2:	1a1d      	subs	r5, r3, r0
   87ce4:	4295      	cmp	r5, r2
   87ce6:	bfa8      	it	ge
   87ce8:	4615      	movge	r5, r2
   87cea:	2d00      	cmp	r5, #0
   87cec:	dd0e      	ble.n	87d0c <_svfprintf_r+0xdf8>
   87cee:	9926      	ldr	r1, [sp, #152]	; 0x98
   87cf0:	4406      	add	r6, r0
   87cf2:	3101      	adds	r1, #1
   87cf4:	442c      	add	r4, r5
   87cf6:	2907      	cmp	r1, #7
   87cf8:	f8c8 6000 	str.w	r6, [r8]
   87cfc:	9427      	str	r4, [sp, #156]	; 0x9c
   87cfe:	f8c8 5004 	str.w	r5, [r8, #4]
   87d02:	9126      	str	r1, [sp, #152]	; 0x98
   87d04:	f300 8216 	bgt.w	88134 <_svfprintf_r+0x1220>
   87d08:	f108 0808 	add.w	r8, r8, #8
   87d0c:	2d00      	cmp	r5, #0
   87d0e:	bfb4      	ite	lt
   87d10:	4616      	movlt	r6, r2
   87d12:	1b56      	subge	r6, r2, r5
   87d14:	2e00      	cmp	r6, #0
   87d16:	f77f aaef 	ble.w	872f8 <_svfprintf_r+0x3e4>
   87d1a:	2e10      	cmp	r6, #16
   87d1c:	f340 82f3 	ble.w	88306 <_svfprintf_r+0x13f2>
   87d20:	4622      	mov	r2, r4
   87d22:	2710      	movs	r7, #16
   87d24:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87d26:	4d3a      	ldr	r5, [pc, #232]	; (87e10 <_svfprintf_r+0xefc>)
   87d28:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87d2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   87d2e:	e004      	b.n	87d3a <_svfprintf_r+0xe26>
   87d30:	f108 0808 	add.w	r8, r8, #8
   87d34:	3e10      	subs	r6, #16
   87d36:	2e10      	cmp	r6, #16
   87d38:	dda3      	ble.n	87c82 <_svfprintf_r+0xd6e>
   87d3a:	3301      	adds	r3, #1
   87d3c:	3210      	adds	r2, #16
   87d3e:	2b07      	cmp	r3, #7
   87d40:	9227      	str	r2, [sp, #156]	; 0x9c
   87d42:	9326      	str	r3, [sp, #152]	; 0x98
   87d44:	e888 00a0 	stmia.w	r8, {r5, r7}
   87d48:	ddf2      	ble.n	87d30 <_svfprintf_r+0xe1c>
   87d4a:	aa25      	add	r2, sp, #148	; 0x94
   87d4c:	4621      	mov	r1, r4
   87d4e:	4658      	mov	r0, fp
   87d50:	f004 f810 	bl	8bd74 <__ssprint_r>
   87d54:	2800      	cmp	r0, #0
   87d56:	f47f a9ba 	bne.w	870ce <_svfprintf_r+0x1ba>
   87d5a:	46c8      	mov	r8, r9
   87d5c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87d5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87d60:	e7e8      	b.n	87d34 <_svfprintf_r+0xe20>
   87d62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87d64:	9819      	ldr	r0, [sp, #100]	; 0x64
   87d66:	3301      	adds	r3, #1
   87d68:	991a      	ldr	r1, [sp, #104]	; 0x68
   87d6a:	4404      	add	r4, r0
   87d6c:	2b07      	cmp	r3, #7
   87d6e:	9427      	str	r4, [sp, #156]	; 0x9c
   87d70:	f8c8 1000 	str.w	r1, [r8]
   87d74:	f8c8 0004 	str.w	r0, [r8, #4]
   87d78:	9326      	str	r3, [sp, #152]	; 0x98
   87d7a:	f300 81cf 	bgt.w	8811c <_svfprintf_r+0x1208>
   87d7e:	f108 0808 	add.w	r8, r8, #8
   87d82:	e7ab      	b.n	87cdc <_svfprintf_r+0xdc8>
   87d84:	9b07      	ldr	r3, [sp, #28]
   87d86:	07da      	lsls	r2, r3, #31
   87d88:	f53f adad 	bmi.w	878e6 <_svfprintf_r+0x9d2>
   87d8c:	2301      	movs	r3, #1
   87d8e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87d90:	441c      	add	r4, r3
   87d92:	441f      	add	r7, r3
   87d94:	2f07      	cmp	r7, #7
   87d96:	9427      	str	r4, [sp, #156]	; 0x9c
   87d98:	f8c8 6000 	str.w	r6, [r8]
   87d9c:	9726      	str	r7, [sp, #152]	; 0x98
   87d9e:	f8c8 3004 	str.w	r3, [r8, #4]
   87da2:	f77f add4 	ble.w	8794e <_svfprintf_r+0xa3a>
   87da6:	aa25      	add	r2, sp, #148	; 0x94
   87da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87daa:	980c      	ldr	r0, [sp, #48]	; 0x30
   87dac:	f003 ffe2 	bl	8bd74 <__ssprint_r>
   87db0:	2800      	cmp	r0, #0
   87db2:	f47f a98c 	bne.w	870ce <_svfprintf_r+0x1ba>
   87db6:	46c8      	mov	r8, r9
   87db8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87dba:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87dbc:	e5c9      	b.n	87952 <_svfprintf_r+0xa3e>
   87dbe:	aa25      	add	r2, sp, #148	; 0x94
   87dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87dc2:	980c      	ldr	r0, [sp, #48]	; 0x30
   87dc4:	f003 ffd6 	bl	8bd74 <__ssprint_r>
   87dc8:	2800      	cmp	r0, #0
   87dca:	f47f a980 	bne.w	870ce <_svfprintf_r+0x1ba>
   87dce:	46c8      	mov	r8, r9
   87dd0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87dd2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87dd4:	e596      	b.n	87904 <_svfprintf_r+0x9f0>
   87dd6:	aa25      	add	r2, sp, #148	; 0x94
   87dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87dda:	980c      	ldr	r0, [sp, #48]	; 0x30
   87ddc:	f003 ffca 	bl	8bd74 <__ssprint_r>
   87de0:	2800      	cmp	r0, #0
   87de2:	f47f a974 	bne.w	870ce <_svfprintf_r+0x1ba>
   87de6:	46c8      	mov	r8, r9
   87de8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87dea:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87dec:	e599      	b.n	87922 <_svfprintf_r+0xa0e>
   87dee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   87df0:	3407      	adds	r4, #7
   87df2:	f024 0407 	bic.w	r4, r4, #7
   87df6:	f104 0108 	add.w	r1, r4, #8
   87dfa:	e9d4 2300 	ldrd	r2, r3, [r4]
   87dfe:	910f      	str	r1, [sp, #60]	; 0x3c
   87e00:	4614      	mov	r4, r2
   87e02:	461d      	mov	r5, r3
   87e04:	f7ff bb8f 	b.w	87526 <_svfprintf_r+0x612>
   87e08:	464e      	mov	r6, r9
   87e0a:	f7ff b99f 	b.w	8714c <_svfprintf_r+0x238>
   87e0e:	bf00      	nop
   87e10:	0008cce8 	.word	0x0008cce8
   87e14:	aa25      	add	r2, sp, #148	; 0x94
   87e16:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87e18:	980c      	ldr	r0, [sp, #48]	; 0x30
   87e1a:	f003 ffab 	bl	8bd74 <__ssprint_r>
   87e1e:	2800      	cmp	r0, #0
   87e20:	f47f a955 	bne.w	870ce <_svfprintf_r+0x1ba>
   87e24:	46c8      	mov	r8, r9
   87e26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87e28:	f7ff ba16 	b.w	87258 <_svfprintf_r+0x344>
   87e2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   87e2e:	4622      	mov	r2, r4
   87e30:	4620      	mov	r0, r4
   87e32:	9c14      	ldr	r4, [sp, #80]	; 0x50
   87e34:	4623      	mov	r3, r4
   87e36:	4621      	mov	r1, r4
   87e38:	f004 fe68 	bl	8cb0c <__aeabi_dcmpun>
   87e3c:	2800      	cmp	r0, #0
   87e3e:	f040 8273 	bne.w	88328 <_svfprintf_r+0x1414>
   87e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87e44:	3301      	adds	r3, #1
   87e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87e48:	f023 0320 	bic.w	r3, r3, #32
   87e4c:	930e      	str	r3, [sp, #56]	; 0x38
   87e4e:	f000 819c 	beq.w	8818a <_svfprintf_r+0x1276>
   87e52:	2b47      	cmp	r3, #71	; 0x47
   87e54:	f000 80d6 	beq.w	88004 <_svfprintf_r+0x10f0>
   87e58:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   87e5c:	9307      	str	r3, [sp, #28]
   87e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   87e60:	1e1f      	subs	r7, r3, #0
   87e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87e64:	9308      	str	r3, [sp, #32]
   87e66:	bfb7      	itett	lt
   87e68:	463b      	movlt	r3, r7
   87e6a:	2300      	movge	r3, #0
   87e6c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   87e70:	232d      	movlt	r3, #45	; 0x2d
   87e72:	9310      	str	r3, [sp, #64]	; 0x40
   87e74:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87e76:	2b66      	cmp	r3, #102	; 0x66
   87e78:	f000 8190 	beq.w	8819c <_svfprintf_r+0x1288>
   87e7c:	2b46      	cmp	r3, #70	; 0x46
   87e7e:	f000 80a4 	beq.w	87fca <_svfprintf_r+0x10b6>
   87e82:	2002      	movs	r0, #2
   87e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e86:	a923      	add	r1, sp, #140	; 0x8c
   87e88:	2b45      	cmp	r3, #69	; 0x45
   87e8a:	bf0a      	itet	eq
   87e8c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   87e8e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   87e90:	1c5d      	addeq	r5, r3, #1
   87e92:	e88d 0021 	stmia.w	sp, {r0, r5}
   87e96:	9104      	str	r1, [sp, #16]
   87e98:	a820      	add	r0, sp, #128	; 0x80
   87e9a:	a91f      	add	r1, sp, #124	; 0x7c
   87e9c:	463b      	mov	r3, r7
   87e9e:	9003      	str	r0, [sp, #12]
   87ea0:	9a08      	ldr	r2, [sp, #32]
   87ea2:	9102      	str	r1, [sp, #8]
   87ea4:	980c      	ldr	r0, [sp, #48]	; 0x30
   87ea6:	f001 fa87 	bl	893b8 <_dtoa_r>
   87eaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87eac:	4606      	mov	r6, r0
   87eae:	2b67      	cmp	r3, #103	; 0x67
   87eb0:	f040 81ba 	bne.w	88228 <_svfprintf_r+0x1314>
   87eb4:	f01b 0f01 	tst.w	fp, #1
   87eb8:	f000 8223 	beq.w	88302 <_svfprintf_r+0x13ee>
   87ebc:	1974      	adds	r4, r6, r5
   87ebe:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87ec0:	9808      	ldr	r0, [sp, #32]
   87ec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87ec4:	4639      	mov	r1, r7
   87ec6:	f004 fdef 	bl	8caa8 <__aeabi_dcmpeq>
   87eca:	2800      	cmp	r0, #0
   87ecc:	f040 8124 	bne.w	88118 <_svfprintf_r+0x1204>
   87ed0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87ed2:	42a3      	cmp	r3, r4
   87ed4:	d206      	bcs.n	87ee4 <_svfprintf_r+0xfd0>
   87ed6:	2130      	movs	r1, #48	; 0x30
   87ed8:	1c5a      	adds	r2, r3, #1
   87eda:	9223      	str	r2, [sp, #140]	; 0x8c
   87edc:	7019      	strb	r1, [r3, #0]
   87ede:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87ee0:	429c      	cmp	r4, r3
   87ee2:	d8f9      	bhi.n	87ed8 <_svfprintf_r+0xfc4>
   87ee4:	1b9b      	subs	r3, r3, r6
   87ee6:	9313      	str	r3, [sp, #76]	; 0x4c
   87ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87eea:	2b47      	cmp	r3, #71	; 0x47
   87eec:	f000 80a2 	beq.w	88034 <_svfprintf_r+0x1120>
   87ef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87ef2:	2b65      	cmp	r3, #101	; 0x65
   87ef4:	f340 81a7 	ble.w	88246 <_svfprintf_r+0x1332>
   87ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87efa:	2b66      	cmp	r3, #102	; 0x66
   87efc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   87efe:	9312      	str	r3, [sp, #72]	; 0x48
   87f00:	f000 8171 	beq.w	881e6 <_svfprintf_r+0x12d2>
   87f04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87f06:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87f08:	4619      	mov	r1, r3
   87f0a:	4291      	cmp	r1, r2
   87f0c:	f300 815d 	bgt.w	881ca <_svfprintf_r+0x12b6>
   87f10:	f01b 0f01 	tst.w	fp, #1
   87f14:	f040 81f0 	bne.w	882f8 <_svfprintf_r+0x13e4>
   87f18:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87f1c:	9308      	str	r3, [sp, #32]
   87f1e:	2367      	movs	r3, #103	; 0x67
   87f20:	920e      	str	r2, [sp, #56]	; 0x38
   87f22:	9311      	str	r3, [sp, #68]	; 0x44
   87f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87f26:	2b00      	cmp	r3, #0
   87f28:	d17d      	bne.n	88026 <_svfprintf_r+0x1112>
   87f2a:	930a      	str	r3, [sp, #40]	; 0x28
   87f2c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87f30:	f7ff b914 	b.w	8715c <_svfprintf_r+0x248>
   87f34:	f024 0407 	bic.w	r4, r4, #7
   87f38:	6823      	ldr	r3, [r4, #0]
   87f3a:	9315      	str	r3, [sp, #84]	; 0x54
   87f3c:	6863      	ldr	r3, [r4, #4]
   87f3e:	9314      	str	r3, [sp, #80]	; 0x50
   87f40:	f104 0308 	add.w	r3, r4, #8
   87f44:	930f      	str	r3, [sp, #60]	; 0x3c
   87f46:	f7ff bb2f 	b.w	875a8 <_svfprintf_r+0x694>
   87f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87f4c:	6813      	ldr	r3, [r2, #0]
   87f4e:	3204      	adds	r2, #4
   87f50:	920f      	str	r2, [sp, #60]	; 0x3c
   87f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87f54:	601a      	str	r2, [r3, #0]
   87f56:	f7ff b804 	b.w	86f62 <_svfprintf_r+0x4e>
   87f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87f5c:	4daf      	ldr	r5, [pc, #700]	; (8821c <_svfprintf_r+0x1308>)
   87f5e:	f7ff b9ad 	b.w	872bc <_svfprintf_r+0x3a8>
   87f62:	aa25      	add	r2, sp, #148	; 0x94
   87f64:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87f66:	980c      	ldr	r0, [sp, #48]	; 0x30
   87f68:	f003 ff04 	bl	8bd74 <__ssprint_r>
   87f6c:	2800      	cmp	r0, #0
   87f6e:	f47f a8ae 	bne.w	870ce <_svfprintf_r+0x1ba>
   87f72:	46c8      	mov	r8, r9
   87f74:	e431      	b.n	877da <_svfprintf_r+0x8c6>
   87f76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87f78:	4613      	mov	r3, r2
   87f7a:	3304      	adds	r3, #4
   87f7c:	930f      	str	r3, [sp, #60]	; 0x3c
   87f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87f80:	6811      	ldr	r1, [r2, #0]
   87f82:	17dd      	asrs	r5, r3, #31
   87f84:	461a      	mov	r2, r3
   87f86:	462b      	mov	r3, r5
   87f88:	e9c1 2300 	strd	r2, r3, [r1]
   87f8c:	f7fe bfe9 	b.w	86f62 <_svfprintf_r+0x4e>
   87f90:	aa25      	add	r2, sp, #148	; 0x94
   87f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87f94:	980c      	ldr	r0, [sp, #48]	; 0x30
   87f96:	f003 feed 	bl	8bd74 <__ssprint_r>
   87f9a:	2800      	cmp	r0, #0
   87f9c:	f47f a897 	bne.w	870ce <_svfprintf_r+0x1ba>
   87fa0:	46c8      	mov	r8, r9
   87fa2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87fa4:	e432      	b.n	8780c <_svfprintf_r+0x8f8>
   87fa6:	f108 0808 	add.w	r8, r8, #8
   87faa:	e52f      	b.n	87a0c <_svfprintf_r+0xaf8>
   87fac:	2140      	movs	r1, #64	; 0x40
   87fae:	980c      	ldr	r0, [sp, #48]	; 0x30
   87fb0:	f002 fe6a 	bl	8ac88 <_malloc_r>
   87fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87fb6:	6010      	str	r0, [r2, #0]
   87fb8:	6110      	str	r0, [r2, #16]
   87fba:	2800      	cmp	r0, #0
   87fbc:	f000 8214 	beq.w	883e8 <_svfprintf_r+0x14d4>
   87fc0:	2340      	movs	r3, #64	; 0x40
   87fc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87fc4:	6153      	str	r3, [r2, #20]
   87fc6:	f7fe bfbc 	b.w	86f42 <_svfprintf_r+0x2e>
   87fca:	2003      	movs	r0, #3
   87fcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   87fce:	a923      	add	r1, sp, #140	; 0x8c
   87fd0:	e88d 0011 	stmia.w	sp, {r0, r4}
   87fd4:	9104      	str	r1, [sp, #16]
   87fd6:	a820      	add	r0, sp, #128	; 0x80
   87fd8:	a91f      	add	r1, sp, #124	; 0x7c
   87fda:	9003      	str	r0, [sp, #12]
   87fdc:	9a08      	ldr	r2, [sp, #32]
   87fde:	463b      	mov	r3, r7
   87fe0:	9102      	str	r1, [sp, #8]
   87fe2:	980c      	ldr	r0, [sp, #48]	; 0x30
   87fe4:	f001 f9e8 	bl	893b8 <_dtoa_r>
   87fe8:	4625      	mov	r5, r4
   87fea:	4606      	mov	r6, r0
   87fec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87fee:	1974      	adds	r4, r6, r5
   87ff0:	2b46      	cmp	r3, #70	; 0x46
   87ff2:	f47f af64 	bne.w	87ebe <_svfprintf_r+0xfaa>
   87ff6:	7833      	ldrb	r3, [r6, #0]
   87ff8:	2b30      	cmp	r3, #48	; 0x30
   87ffa:	f000 8187 	beq.w	8830c <_svfprintf_r+0x13f8>
   87ffe:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   88000:	442c      	add	r4, r5
   88002:	e75c      	b.n	87ebe <_svfprintf_r+0xfaa>
   88004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88006:	2b00      	cmp	r3, #0
   88008:	bf08      	it	eq
   8800a:	2301      	moveq	r3, #1
   8800c:	930a      	str	r3, [sp, #40]	; 0x28
   8800e:	e723      	b.n	87e58 <_svfprintf_r+0xf44>
   88010:	4630      	mov	r0, r6
   88012:	950a      	str	r5, [sp, #40]	; 0x28
   88014:	f7fe ff1e 	bl	86e54 <strlen>
   88018:	940f      	str	r4, [sp, #60]	; 0x3c
   8801a:	900e      	str	r0, [sp, #56]	; 0x38
   8801c:	f8cd b01c 	str.w	fp, [sp, #28]
   88020:	4603      	mov	r3, r0
   88022:	f7ff b9e7 	b.w	873f4 <_svfprintf_r+0x4e0>
   88026:	272d      	movs	r7, #45	; 0x2d
   88028:	2300      	movs	r3, #0
   8802a:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8802e:	930a      	str	r3, [sp, #40]	; 0x28
   88030:	f7ff b895 	b.w	8715e <_svfprintf_r+0x24a>
   88034:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   88036:	461a      	mov	r2, r3
   88038:	9312      	str	r3, [sp, #72]	; 0x48
   8803a:	3303      	adds	r3, #3
   8803c:	db04      	blt.n	88048 <_svfprintf_r+0x1134>
   8803e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88040:	4619      	mov	r1, r3
   88042:	4291      	cmp	r1, r2
   88044:	f6bf af5e 	bge.w	87f04 <_svfprintf_r+0xff0>
   88048:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8804a:	3b02      	subs	r3, #2
   8804c:	9311      	str	r3, [sp, #68]	; 0x44
   8804e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88050:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   88054:	3b01      	subs	r3, #1
   88056:	2b00      	cmp	r3, #0
   88058:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   8805c:	bfb4      	ite	lt
   8805e:	222d      	movlt	r2, #45	; 0x2d
   88060:	222b      	movge	r2, #43	; 0x2b
   88062:	931f      	str	r3, [sp, #124]	; 0x7c
   88064:	bfb8      	it	lt
   88066:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   88068:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   8806c:	bfb8      	it	lt
   8806e:	f1c3 0301 	rsblt	r3, r3, #1
   88072:	2b09      	cmp	r3, #9
   88074:	f340 811f 	ble.w	882b6 <_svfprintf_r+0x13a2>
   88078:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   8807c:	4601      	mov	r1, r0
   8807e:	4c68      	ldr	r4, [pc, #416]	; (88220 <_svfprintf_r+0x130c>)
   88080:	e000      	b.n	88084 <_svfprintf_r+0x1170>
   88082:	4611      	mov	r1, r2
   88084:	fb84 5203 	smull	r5, r2, r4, r3
   88088:	17dd      	asrs	r5, r3, #31
   8808a:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   8808e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   88092:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   88096:	3230      	adds	r2, #48	; 0x30
   88098:	2d09      	cmp	r5, #9
   8809a:	f801 2c01 	strb.w	r2, [r1, #-1]
   8809e:	462b      	mov	r3, r5
   880a0:	f101 32ff 	add.w	r2, r1, #4294967295
   880a4:	dced      	bgt.n	88082 <_svfprintf_r+0x116e>
   880a6:	3330      	adds	r3, #48	; 0x30
   880a8:	3902      	subs	r1, #2
   880aa:	b2dc      	uxtb	r4, r3
   880ac:	4288      	cmp	r0, r1
   880ae:	f802 4c01 	strb.w	r4, [r2, #-1]
   880b2:	f240 8192 	bls.w	883da <_svfprintf_r+0x14c6>
   880b6:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   880ba:	4613      	mov	r3, r2
   880bc:	e001      	b.n	880c2 <_svfprintf_r+0x11ae>
   880be:	f813 4b01 	ldrb.w	r4, [r3], #1
   880c2:	4283      	cmp	r3, r0
   880c4:	f801 4b01 	strb.w	r4, [r1], #1
   880c8:	d1f9      	bne.n	880be <_svfprintf_r+0x11aa>
   880ca:	3301      	adds	r3, #1
   880cc:	1a9b      	subs	r3, r3, r2
   880ce:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   880d2:	4413      	add	r3, r2
   880d4:	aa21      	add	r2, sp, #132	; 0x84
   880d6:	1a9b      	subs	r3, r3, r2
   880d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   880da:	931b      	str	r3, [sp, #108]	; 0x6c
   880dc:	2a01      	cmp	r2, #1
   880de:	4413      	add	r3, r2
   880e0:	930e      	str	r3, [sp, #56]	; 0x38
   880e2:	f340 8148 	ble.w	88376 <_svfprintf_r+0x1462>
   880e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   880ea:	4413      	add	r3, r2
   880ec:	930e      	str	r3, [sp, #56]	; 0x38
   880ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   880f2:	9308      	str	r3, [sp, #32]
   880f4:	2300      	movs	r3, #0
   880f6:	9312      	str	r3, [sp, #72]	; 0x48
   880f8:	e714      	b.n	87f24 <_svfprintf_r+0x1010>
   880fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   880fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   880fe:	f7ff b876 	b.w	871ee <_svfprintf_r+0x2da>
   88102:	aa25      	add	r2, sp, #148	; 0x94
   88104:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88106:	980c      	ldr	r0, [sp, #48]	; 0x30
   88108:	f003 fe34 	bl	8bd74 <__ssprint_r>
   8810c:	2800      	cmp	r0, #0
   8810e:	f47e afde 	bne.w	870ce <_svfprintf_r+0x1ba>
   88112:	46c8      	mov	r8, r9
   88114:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88116:	e4fb      	b.n	87b10 <_svfprintf_r+0xbfc>
   88118:	4623      	mov	r3, r4
   8811a:	e6e3      	b.n	87ee4 <_svfprintf_r+0xfd0>
   8811c:	aa25      	add	r2, sp, #148	; 0x94
   8811e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88120:	980c      	ldr	r0, [sp, #48]	; 0x30
   88122:	f003 fe27 	bl	8bd74 <__ssprint_r>
   88126:	2800      	cmp	r0, #0
   88128:	f47e afd1 	bne.w	870ce <_svfprintf_r+0x1ba>
   8812c:	46c8      	mov	r8, r9
   8812e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   88130:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88132:	e5d3      	b.n	87cdc <_svfprintf_r+0xdc8>
   88134:	aa25      	add	r2, sp, #148	; 0x94
   88136:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88138:	980c      	ldr	r0, [sp, #48]	; 0x30
   8813a:	f003 fe1b 	bl	8bd74 <__ssprint_r>
   8813e:	2800      	cmp	r0, #0
   88140:	f47e afc5 	bne.w	870ce <_svfprintf_r+0x1ba>
   88144:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   88146:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88148:	46c8      	mov	r8, r9
   8814a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8814c:	1a9a      	subs	r2, r3, r2
   8814e:	e5dd      	b.n	87d0c <_svfprintf_r+0xdf8>
   88150:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88152:	f7ff b8fe 	b.w	87352 <_svfprintf_r+0x43e>
   88156:	aa25      	add	r2, sp, #148	; 0x94
   88158:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8815a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8815c:	f003 fe0a 	bl	8bd74 <__ssprint_r>
   88160:	2800      	cmp	r0, #0
   88162:	f47e afb4 	bne.w	870ce <_svfprintf_r+0x1ba>
   88166:	46c8      	mov	r8, r9
   88168:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8816a:	e5b0      	b.n	87cce <_svfprintf_r+0xdba>
   8816c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8816e:	4637      	mov	r7, r6
   88170:	2b06      	cmp	r3, #6
   88172:	bf28      	it	cs
   88174:	2306      	movcs	r3, #6
   88176:	960a      	str	r6, [sp, #40]	; 0x28
   88178:	9612      	str	r6, [sp, #72]	; 0x48
   8817a:	9308      	str	r3, [sp, #32]
   8817c:	940f      	str	r4, [sp, #60]	; 0x3c
   8817e:	f8cd b01c 	str.w	fp, [sp, #28]
   88182:	930e      	str	r3, [sp, #56]	; 0x38
   88184:	4e27      	ldr	r6, [pc, #156]	; (88224 <_svfprintf_r+0x1310>)
   88186:	f7fe bfe9 	b.w	8715c <_svfprintf_r+0x248>
   8818a:	2306      	movs	r3, #6
   8818c:	930a      	str	r3, [sp, #40]	; 0x28
   8818e:	e663      	b.n	87e58 <_svfprintf_r+0xf44>
   88190:	232d      	movs	r3, #45	; 0x2d
   88192:	461f      	mov	r7, r3
   88194:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   88198:	f7ff ba28 	b.w	875ec <_svfprintf_r+0x6d8>
   8819c:	2003      	movs	r0, #3
   8819e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   881a0:	a923      	add	r1, sp, #140	; 0x8c
   881a2:	e88d 0011 	stmia.w	sp, {r0, r4}
   881a6:	9104      	str	r1, [sp, #16]
   881a8:	a820      	add	r0, sp, #128	; 0x80
   881aa:	a91f      	add	r1, sp, #124	; 0x7c
   881ac:	9003      	str	r0, [sp, #12]
   881ae:	9a08      	ldr	r2, [sp, #32]
   881b0:	463b      	mov	r3, r7
   881b2:	9102      	str	r1, [sp, #8]
   881b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   881b6:	f001 f8ff 	bl	893b8 <_dtoa_r>
   881ba:	4625      	mov	r5, r4
   881bc:	4606      	mov	r6, r0
   881be:	1904      	adds	r4, r0, r4
   881c0:	e719      	b.n	87ff6 <_svfprintf_r+0x10e2>
   881c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   881c4:	4d15      	ldr	r5, [pc, #84]	; (8821c <_svfprintf_r+0x1308>)
   881c6:	f7ff bb7e 	b.w	878c6 <_svfprintf_r+0x9b2>
   881ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
   881cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   881ce:	4413      	add	r3, r2
   881d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   881d2:	930e      	str	r3, [sp, #56]	; 0x38
   881d4:	2a00      	cmp	r2, #0
   881d6:	f340 80c7 	ble.w	88368 <_svfprintf_r+0x1454>
   881da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   881de:	9308      	str	r3, [sp, #32]
   881e0:	2367      	movs	r3, #103	; 0x67
   881e2:	9311      	str	r3, [sp, #68]	; 0x44
   881e4:	e69e      	b.n	87f24 <_svfprintf_r+0x1010>
   881e6:	2b00      	cmp	r3, #0
   881e8:	f340 80e1 	ble.w	883ae <_svfprintf_r+0x149a>
   881ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   881ee:	2a00      	cmp	r2, #0
   881f0:	f040 80b0 	bne.w	88354 <_svfprintf_r+0x1440>
   881f4:	f01b 0f01 	tst.w	fp, #1
   881f8:	f040 80ac 	bne.w	88354 <_svfprintf_r+0x1440>
   881fc:	9308      	str	r3, [sp, #32]
   881fe:	930e      	str	r3, [sp, #56]	; 0x38
   88200:	e690      	b.n	87f24 <_svfprintf_r+0x1010>
   88202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88204:	940f      	str	r4, [sp, #60]	; 0x3c
   88206:	9308      	str	r3, [sp, #32]
   88208:	930e      	str	r3, [sp, #56]	; 0x38
   8820a:	900a      	str	r0, [sp, #40]	; 0x28
   8820c:	f8cd b01c 	str.w	fp, [sp, #28]
   88210:	9012      	str	r0, [sp, #72]	; 0x48
   88212:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   88216:	f7fe bfa1 	b.w	8715c <_svfprintf_r+0x248>
   8821a:	bf00      	nop
   8821c:	0008cce8 	.word	0x0008cce8
   88220:	66666667 	.word	0x66666667
   88224:	0008cccc 	.word	0x0008cccc
   88228:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8822a:	2b47      	cmp	r3, #71	; 0x47
   8822c:	f47f ae46 	bne.w	87ebc <_svfprintf_r+0xfa8>
   88230:	f01b 0f01 	tst.w	fp, #1
   88234:	f47f aeda 	bne.w	87fec <_svfprintf_r+0x10d8>
   88238:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8823a:	1b9b      	subs	r3, r3, r6
   8823c:	9313      	str	r3, [sp, #76]	; 0x4c
   8823e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88240:	2b47      	cmp	r3, #71	; 0x47
   88242:	f43f aef7 	beq.w	88034 <_svfprintf_r+0x1120>
   88246:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   88248:	9312      	str	r3, [sp, #72]	; 0x48
   8824a:	e700      	b.n	8804e <_svfprintf_r+0x113a>
   8824c:	2000      	movs	r0, #0
   8824e:	900a      	str	r0, [sp, #40]	; 0x28
   88250:	f7fe bebc 	b.w	86fcc <_svfprintf_r+0xb8>
   88254:	424f      	negs	r7, r1
   88256:	3110      	adds	r1, #16
   88258:	da35      	bge.n	882c6 <_svfprintf_r+0x13b2>
   8825a:	2410      	movs	r4, #16
   8825c:	4d6a      	ldr	r5, [pc, #424]	; (88408 <_svfprintf_r+0x14f4>)
   8825e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   88262:	e004      	b.n	8826e <_svfprintf_r+0x135a>
   88264:	f108 0808 	add.w	r8, r8, #8
   88268:	3f10      	subs	r7, #16
   8826a:	2f10      	cmp	r7, #16
   8826c:	dd2c      	ble.n	882c8 <_svfprintf_r+0x13b4>
   8826e:	3301      	adds	r3, #1
   88270:	3210      	adds	r2, #16
   88272:	2b07      	cmp	r3, #7
   88274:	9227      	str	r2, [sp, #156]	; 0x9c
   88276:	9326      	str	r3, [sp, #152]	; 0x98
   88278:	f8c8 5000 	str.w	r5, [r8]
   8827c:	f8c8 4004 	str.w	r4, [r8, #4]
   88280:	ddf0      	ble.n	88264 <_svfprintf_r+0x1350>
   88282:	aa25      	add	r2, sp, #148	; 0x94
   88284:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88286:	4658      	mov	r0, fp
   88288:	f003 fd74 	bl	8bd74 <__ssprint_r>
   8828c:	2800      	cmp	r0, #0
   8828e:	f47e af1e 	bne.w	870ce <_svfprintf_r+0x1ba>
   88292:	46c8      	mov	r8, r9
   88294:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88296:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88298:	e7e6      	b.n	88268 <_svfprintf_r+0x1354>
   8829a:	aa25      	add	r2, sp, #148	; 0x94
   8829c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8829e:	980c      	ldr	r0, [sp, #48]	; 0x30
   882a0:	f003 fd68 	bl	8bd74 <__ssprint_r>
   882a4:	2800      	cmp	r0, #0
   882a6:	f47e af12 	bne.w	870ce <_svfprintf_r+0x1ba>
   882aa:	46c8      	mov	r8, r9
   882ac:	991f      	ldr	r1, [sp, #124]	; 0x7c
   882ae:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   882b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   882b2:	f7ff bbc3 	b.w	87a3c <_svfprintf_r+0xb28>
   882b6:	2230      	movs	r2, #48	; 0x30
   882b8:	4413      	add	r3, r2
   882ba:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   882be:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   882c2:	ab22      	add	r3, sp, #136	; 0x88
   882c4:	e706      	b.n	880d4 <_svfprintf_r+0x11c0>
   882c6:	4d50      	ldr	r5, [pc, #320]	; (88408 <_svfprintf_r+0x14f4>)
   882c8:	3301      	adds	r3, #1
   882ca:	443a      	add	r2, r7
   882cc:	2b07      	cmp	r3, #7
   882ce:	e888 00a0 	stmia.w	r8, {r5, r7}
   882d2:	9227      	str	r2, [sp, #156]	; 0x9c
   882d4:	9326      	str	r3, [sp, #152]	; 0x98
   882d6:	f108 0808 	add.w	r8, r8, #8
   882da:	f77f abb2 	ble.w	87a42 <_svfprintf_r+0xb2e>
   882de:	aa25      	add	r2, sp, #148	; 0x94
   882e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   882e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   882e4:	f003 fd46 	bl	8bd74 <__ssprint_r>
   882e8:	2800      	cmp	r0, #0
   882ea:	f47e aef0 	bne.w	870ce <_svfprintf_r+0x1ba>
   882ee:	46c8      	mov	r8, r9
   882f0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   882f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   882f4:	f7ff bba5 	b.w	87a42 <_svfprintf_r+0xb2e>
   882f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   882fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
   882fc:	4413      	add	r3, r2
   882fe:	930e      	str	r3, [sp, #56]	; 0x38
   88300:	e76b      	b.n	881da <_svfprintf_r+0x12c6>
   88302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88304:	e5ee      	b.n	87ee4 <_svfprintf_r+0xfd0>
   88306:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88308:	4d3f      	ldr	r5, [pc, #252]	; (88408 <_svfprintf_r+0x14f4>)
   8830a:	e4bb      	b.n	87c84 <_svfprintf_r+0xd70>
   8830c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8830e:	9808      	ldr	r0, [sp, #32]
   88310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88312:	4639      	mov	r1, r7
   88314:	f004 fbc8 	bl	8caa8 <__aeabi_dcmpeq>
   88318:	2800      	cmp	r0, #0
   8831a:	f47f ae70 	bne.w	87ffe <_svfprintf_r+0x10ea>
   8831e:	f1c5 0501 	rsb	r5, r5, #1
   88322:	951f      	str	r5, [sp, #124]	; 0x7c
   88324:	442c      	add	r4, r5
   88326:	e5ca      	b.n	87ebe <_svfprintf_r+0xfaa>
   88328:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8832a:	4e38      	ldr	r6, [pc, #224]	; (8840c <_svfprintf_r+0x14f8>)
   8832c:	2b00      	cmp	r3, #0
   8832e:	bfbe      	ittt	lt
   88330:	232d      	movlt	r3, #45	; 0x2d
   88332:	461f      	movlt	r7, r3
   88334:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   88338:	f04f 0303 	mov.w	r3, #3
   8833c:	461a      	mov	r2, r3
   8833e:	9308      	str	r3, [sp, #32]
   88340:	f04f 0300 	mov.w	r3, #0
   88344:	bfa8      	it	ge
   88346:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   8834a:	4619      	mov	r1, r3
   8834c:	930a      	str	r3, [sp, #40]	; 0x28
   8834e:	4b30      	ldr	r3, [pc, #192]	; (88410 <_svfprintf_r+0x14fc>)
   88350:	f7ff b954 	b.w	875fc <_svfprintf_r+0x6e8>
   88354:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88356:	9a19      	ldr	r2, [sp, #100]	; 0x64
   88358:	4413      	add	r3, r2
   8835a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8835c:	441a      	add	r2, r3
   8835e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88362:	920e      	str	r2, [sp, #56]	; 0x38
   88364:	9308      	str	r3, [sp, #32]
   88366:	e5dd      	b.n	87f24 <_svfprintf_r+0x1010>
   88368:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8836a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8836c:	f1c3 0301 	rsb	r3, r3, #1
   88370:	441a      	add	r2, r3
   88372:	4613      	mov	r3, r2
   88374:	e7c3      	b.n	882fe <_svfprintf_r+0x13ea>
   88376:	f01b 0301 	ands.w	r3, fp, #1
   8837a:	9312      	str	r3, [sp, #72]	; 0x48
   8837c:	f47f aeb3 	bne.w	880e6 <_svfprintf_r+0x11d2>
   88380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88382:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88386:	9308      	str	r3, [sp, #32]
   88388:	e5cc      	b.n	87f24 <_svfprintf_r+0x1010>
   8838a:	4d1f      	ldr	r5, [pc, #124]	; (88408 <_svfprintf_r+0x14f4>)
   8838c:	e43c      	b.n	87c08 <_svfprintf_r+0xcf4>
   8838e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88390:	4d1d      	ldr	r5, [pc, #116]	; (88408 <_svfprintf_r+0x14f4>)
   88392:	e491      	b.n	87cb8 <_svfprintf_r+0xda4>
   88394:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   88396:	f89a 3001 	ldrb.w	r3, [sl, #1]
   8839a:	6828      	ldr	r0, [r5, #0]
   8839c:	46a2      	mov	sl, r4
   8839e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   883a2:	900a      	str	r0, [sp, #40]	; 0x28
   883a4:	4628      	mov	r0, r5
   883a6:	3004      	adds	r0, #4
   883a8:	900f      	str	r0, [sp, #60]	; 0x3c
   883aa:	f7fe be0d 	b.w	86fc8 <_svfprintf_r+0xb4>
   883ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   883b0:	b913      	cbnz	r3, 883b8 <_svfprintf_r+0x14a4>
   883b2:	f01b 0f01 	tst.w	fp, #1
   883b6:	d002      	beq.n	883be <_svfprintf_r+0x14aa>
   883b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   883ba:	3301      	adds	r3, #1
   883bc:	e7cd      	b.n	8835a <_svfprintf_r+0x1446>
   883be:	2301      	movs	r3, #1
   883c0:	e71c      	b.n	881fc <_svfprintf_r+0x12e8>
   883c2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   883c6:	f7ff b980 	b.w	876ca <_svfprintf_r+0x7b6>
   883ca:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   883ce:	f7ff b93a 	b.w	87646 <_svfprintf_r+0x732>
   883d2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   883d6:	f7ff b84f 	b.w	87478 <_svfprintf_r+0x564>
   883da:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   883de:	e679      	b.n	880d4 <_svfprintf_r+0x11c0>
   883e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   883e4:	f7ff b9b2 	b.w	8774c <_svfprintf_r+0x838>
   883e8:	f04f 32ff 	mov.w	r2, #4294967295
   883ec:	230c      	movs	r3, #12
   883ee:	9209      	str	r2, [sp, #36]	; 0x24
   883f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   883f2:	6013      	str	r3, [r2, #0]
   883f4:	f7fe be74 	b.w	870e0 <_svfprintf_r+0x1cc>
   883f8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   883fc:	f7ff b8c4 	b.w	87588 <_svfprintf_r+0x674>
   88400:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   88404:	f7ff b878 	b.w	874f8 <_svfprintf_r+0x5e4>
   88408:	0008cce8 	.word	0x0008cce8
   8840c:	0008cca0 	.word	0x0008cca0
   88410:	0008cc9c 	.word	0x0008cc9c

00088414 <__sprint_r.part.0>:
   88414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88418:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8841a:	4693      	mov	fp, r2
   8841c:	049c      	lsls	r4, r3, #18
   8841e:	d52f      	bpl.n	88480 <__sprint_r.part.0+0x6c>
   88420:	6893      	ldr	r3, [r2, #8]
   88422:	6812      	ldr	r2, [r2, #0]
   88424:	b353      	cbz	r3, 8847c <__sprint_r.part.0+0x68>
   88426:	460e      	mov	r6, r1
   88428:	4607      	mov	r7, r0
   8842a:	f102 0908 	add.w	r9, r2, #8
   8842e:	e919 0420 	ldmdb	r9, {r5, sl}
   88432:	ea5f 089a 	movs.w	r8, sl, lsr #2
   88436:	d017      	beq.n	88468 <__sprint_r.part.0+0x54>
   88438:	2400      	movs	r4, #0
   8843a:	3d04      	subs	r5, #4
   8843c:	e001      	b.n	88442 <__sprint_r.part.0+0x2e>
   8843e:	45a0      	cmp	r8, r4
   88440:	d010      	beq.n	88464 <__sprint_r.part.0+0x50>
   88442:	4632      	mov	r2, r6
   88444:	f855 1f04 	ldr.w	r1, [r5, #4]!
   88448:	4638      	mov	r0, r7
   8844a:	f002 f86d 	bl	8a528 <_fputwc_r>
   8844e:	1c43      	adds	r3, r0, #1
   88450:	f104 0401 	add.w	r4, r4, #1
   88454:	d1f3      	bne.n	8843e <__sprint_r.part.0+0x2a>
   88456:	2300      	movs	r3, #0
   88458:	f8cb 3008 	str.w	r3, [fp, #8]
   8845c:	f8cb 3004 	str.w	r3, [fp, #4]
   88460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88464:	f8db 3008 	ldr.w	r3, [fp, #8]
   88468:	f02a 0a03 	bic.w	sl, sl, #3
   8846c:	eba3 030a 	sub.w	r3, r3, sl
   88470:	f8cb 3008 	str.w	r3, [fp, #8]
   88474:	f109 0908 	add.w	r9, r9, #8
   88478:	2b00      	cmp	r3, #0
   8847a:	d1d8      	bne.n	8842e <__sprint_r.part.0+0x1a>
   8847c:	2000      	movs	r0, #0
   8847e:	e7ea      	b.n	88456 <__sprint_r.part.0+0x42>
   88480:	f002 f9bc 	bl	8a7fc <__sfvwrite_r>
   88484:	2300      	movs	r3, #0
   88486:	f8cb 3008 	str.w	r3, [fp, #8]
   8848a:	f8cb 3004 	str.w	r3, [fp, #4]
   8848e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88492:	bf00      	nop

00088494 <_vfiprintf_r>:
   88494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88498:	b0ad      	sub	sp, #180	; 0xb4
   8849a:	461d      	mov	r5, r3
   8849c:	468b      	mov	fp, r1
   8849e:	4690      	mov	r8, r2
   884a0:	9307      	str	r3, [sp, #28]
   884a2:	9006      	str	r0, [sp, #24]
   884a4:	b118      	cbz	r0, 884ae <_vfiprintf_r+0x1a>
   884a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   884a8:	2b00      	cmp	r3, #0
   884aa:	f000 80f3 	beq.w	88694 <_vfiprintf_r+0x200>
   884ae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   884b2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   884b6:	07df      	lsls	r7, r3, #31
   884b8:	b281      	uxth	r1, r0
   884ba:	d402      	bmi.n	884c2 <_vfiprintf_r+0x2e>
   884bc:	058e      	lsls	r6, r1, #22
   884be:	f140 80fc 	bpl.w	886ba <_vfiprintf_r+0x226>
   884c2:	048c      	lsls	r4, r1, #18
   884c4:	d40a      	bmi.n	884dc <_vfiprintf_r+0x48>
   884c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   884ca:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   884ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   884d2:	f8ab 100c 	strh.w	r1, [fp, #12]
   884d6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   884da:	b289      	uxth	r1, r1
   884dc:	0708      	lsls	r0, r1, #28
   884de:	f140 80b3 	bpl.w	88648 <_vfiprintf_r+0x1b4>
   884e2:	f8db 3010 	ldr.w	r3, [fp, #16]
   884e6:	2b00      	cmp	r3, #0
   884e8:	f000 80ae 	beq.w	88648 <_vfiprintf_r+0x1b4>
   884ec:	f001 031a 	and.w	r3, r1, #26
   884f0:	2b0a      	cmp	r3, #10
   884f2:	f000 80b5 	beq.w	88660 <_vfiprintf_r+0x1cc>
   884f6:	2300      	movs	r3, #0
   884f8:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   884fc:	46d1      	mov	r9, sl
   884fe:	930b      	str	r3, [sp, #44]	; 0x2c
   88500:	9303      	str	r3, [sp, #12]
   88502:	9311      	str	r3, [sp, #68]	; 0x44
   88504:	9310      	str	r3, [sp, #64]	; 0x40
   88506:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8850a:	f8cd b010 	str.w	fp, [sp, #16]
   8850e:	f898 3000 	ldrb.w	r3, [r8]
   88512:	4644      	mov	r4, r8
   88514:	b1fb      	cbz	r3, 88556 <_vfiprintf_r+0xc2>
   88516:	2b25      	cmp	r3, #37	; 0x25
   88518:	d102      	bne.n	88520 <_vfiprintf_r+0x8c>
   8851a:	e01c      	b.n	88556 <_vfiprintf_r+0xc2>
   8851c:	2b25      	cmp	r3, #37	; 0x25
   8851e:	d003      	beq.n	88528 <_vfiprintf_r+0x94>
   88520:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   88524:	2b00      	cmp	r3, #0
   88526:	d1f9      	bne.n	8851c <_vfiprintf_r+0x88>
   88528:	eba4 0508 	sub.w	r5, r4, r8
   8852c:	b19d      	cbz	r5, 88556 <_vfiprintf_r+0xc2>
   8852e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88530:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88532:	3301      	adds	r3, #1
   88534:	442a      	add	r2, r5
   88536:	2b07      	cmp	r3, #7
   88538:	f8c9 8000 	str.w	r8, [r9]
   8853c:	f8c9 5004 	str.w	r5, [r9, #4]
   88540:	9211      	str	r2, [sp, #68]	; 0x44
   88542:	9310      	str	r3, [sp, #64]	; 0x40
   88544:	dd7a      	ble.n	8863c <_vfiprintf_r+0x1a8>
   88546:	2a00      	cmp	r2, #0
   88548:	f040 84b5 	bne.w	88eb6 <_vfiprintf_r+0xa22>
   8854c:	46d1      	mov	r9, sl
   8854e:	9b03      	ldr	r3, [sp, #12]
   88550:	9210      	str	r2, [sp, #64]	; 0x40
   88552:	442b      	add	r3, r5
   88554:	9303      	str	r3, [sp, #12]
   88556:	7823      	ldrb	r3, [r4, #0]
   88558:	2b00      	cmp	r3, #0
   8855a:	f000 83e5 	beq.w	88d28 <_vfiprintf_r+0x894>
   8855e:	2000      	movs	r0, #0
   88560:	f04f 0300 	mov.w	r3, #0
   88564:	f104 0801 	add.w	r8, r4, #1
   88568:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8856c:	7862      	ldrb	r2, [r4, #1]
   8856e:	4606      	mov	r6, r0
   88570:	4605      	mov	r5, r0
   88572:	4603      	mov	r3, r0
   88574:	f04f 34ff 	mov.w	r4, #4294967295
   88578:	f108 0801 	add.w	r8, r8, #1
   8857c:	f1a2 0120 	sub.w	r1, r2, #32
   88580:	2958      	cmp	r1, #88	; 0x58
   88582:	f200 82d9 	bhi.w	88b38 <_vfiprintf_r+0x6a4>
   88586:	e8df f011 	tbh	[pc, r1, lsl #1]
   8858a:	0228      	.short	0x0228
   8858c:	02d702d7 	.word	0x02d702d7
   88590:	02d70230 	.word	0x02d70230
   88594:	02d702d7 	.word	0x02d702d7
   88598:	02d702d7 	.word	0x02d702d7
   8859c:	00a002d7 	.word	0x00a002d7
   885a0:	02d70288 	.word	0x02d70288
   885a4:	02b800a8 	.word	0x02b800a8
   885a8:	01a602d7 	.word	0x01a602d7
   885ac:	01ab01ab 	.word	0x01ab01ab
   885b0:	01ab01ab 	.word	0x01ab01ab
   885b4:	01ab01ab 	.word	0x01ab01ab
   885b8:	01ab01ab 	.word	0x01ab01ab
   885bc:	02d701ab 	.word	0x02d701ab
   885c0:	02d702d7 	.word	0x02d702d7
   885c4:	02d702d7 	.word	0x02d702d7
   885c8:	02d702d7 	.word	0x02d702d7
   885cc:	02d702d7 	.word	0x02d702d7
   885d0:	01b902d7 	.word	0x01b902d7
   885d4:	02d702d7 	.word	0x02d702d7
   885d8:	02d702d7 	.word	0x02d702d7
   885dc:	02d702d7 	.word	0x02d702d7
   885e0:	02d702d7 	.word	0x02d702d7
   885e4:	02d702d7 	.word	0x02d702d7
   885e8:	02d7019e 	.word	0x02d7019e
   885ec:	02d702d7 	.word	0x02d702d7
   885f0:	02d702d7 	.word	0x02d702d7
   885f4:	02d701a2 	.word	0x02d701a2
   885f8:	025a02d7 	.word	0x025a02d7
   885fc:	02d702d7 	.word	0x02d702d7
   88600:	02d702d7 	.word	0x02d702d7
   88604:	02d702d7 	.word	0x02d702d7
   88608:	02d702d7 	.word	0x02d702d7
   8860c:	02d702d7 	.word	0x02d702d7
   88610:	02220261 	.word	0x02220261
   88614:	02d702d7 	.word	0x02d702d7
   88618:	027602d7 	.word	0x027602d7
   8861c:	02d70222 	.word	0x02d70222
   88620:	027b02d7 	.word	0x027b02d7
   88624:	01fc02d7 	.word	0x01fc02d7
   88628:	02100189 	.word	0x02100189
   8862c:	02d702d2 	.word	0x02d702d2
   88630:	02d70295 	.word	0x02d70295
   88634:	02d700ad 	.word	0x02d700ad
   88638:	023502d7 	.word	0x023502d7
   8863c:	f109 0908 	add.w	r9, r9, #8
   88640:	9b03      	ldr	r3, [sp, #12]
   88642:	442b      	add	r3, r5
   88644:	9303      	str	r3, [sp, #12]
   88646:	e786      	b.n	88556 <_vfiprintf_r+0xc2>
   88648:	4659      	mov	r1, fp
   8864a:	9806      	ldr	r0, [sp, #24]
   8864c:	f000 fdaa 	bl	891a4 <__swsetup_r>
   88650:	bb18      	cbnz	r0, 8869a <_vfiprintf_r+0x206>
   88652:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   88656:	f001 031a 	and.w	r3, r1, #26
   8865a:	2b0a      	cmp	r3, #10
   8865c:	f47f af4b 	bne.w	884f6 <_vfiprintf_r+0x62>
   88660:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   88664:	2b00      	cmp	r3, #0
   88666:	f6ff af46 	blt.w	884f6 <_vfiprintf_r+0x62>
   8866a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8866e:	07db      	lsls	r3, r3, #31
   88670:	d405      	bmi.n	8867e <_vfiprintf_r+0x1ea>
   88672:	058f      	lsls	r7, r1, #22
   88674:	d403      	bmi.n	8867e <_vfiprintf_r+0x1ea>
   88676:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8867a:	f002 fa83 	bl	8ab84 <__retarget_lock_release_recursive>
   8867e:	462b      	mov	r3, r5
   88680:	4642      	mov	r2, r8
   88682:	4659      	mov	r1, fp
   88684:	9806      	ldr	r0, [sp, #24]
   88686:	f000 fd49 	bl	8911c <__sbprintf>
   8868a:	9003      	str	r0, [sp, #12]
   8868c:	9803      	ldr	r0, [sp, #12]
   8868e:	b02d      	add	sp, #180	; 0xb4
   88690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88694:	f001 fea6 	bl	8a3e4 <__sinit>
   88698:	e709      	b.n	884ae <_vfiprintf_r+0x1a>
   8869a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8869e:	07d9      	lsls	r1, r3, #31
   886a0:	d404      	bmi.n	886ac <_vfiprintf_r+0x218>
   886a2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   886a6:	059a      	lsls	r2, r3, #22
   886a8:	f140 84ae 	bpl.w	89008 <_vfiprintf_r+0xb74>
   886ac:	f04f 33ff 	mov.w	r3, #4294967295
   886b0:	9303      	str	r3, [sp, #12]
   886b2:	9803      	ldr	r0, [sp, #12]
   886b4:	b02d      	add	sp, #180	; 0xb4
   886b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   886ba:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   886be:	f002 fa5f 	bl	8ab80 <__retarget_lock_acquire_recursive>
   886c2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   886c6:	b281      	uxth	r1, r0
   886c8:	e6fb      	b.n	884c2 <_vfiprintf_r+0x2e>
   886ca:	9907      	ldr	r1, [sp, #28]
   886cc:	460a      	mov	r2, r1
   886ce:	680d      	ldr	r5, [r1, #0]
   886d0:	3204      	adds	r2, #4
   886d2:	2d00      	cmp	r5, #0
   886d4:	9207      	str	r2, [sp, #28]
   886d6:	da02      	bge.n	886de <_vfiprintf_r+0x24a>
   886d8:	426d      	negs	r5, r5
   886da:	f043 0304 	orr.w	r3, r3, #4
   886de:	f898 2000 	ldrb.w	r2, [r8]
   886e2:	e749      	b.n	88578 <_vfiprintf_r+0xe4>
   886e4:	9508      	str	r5, [sp, #32]
   886e6:	069e      	lsls	r6, r3, #26
   886e8:	f100 845a 	bmi.w	88fa0 <_vfiprintf_r+0xb0c>
   886ec:	9907      	ldr	r1, [sp, #28]
   886ee:	06dd      	lsls	r5, r3, #27
   886f0:	460a      	mov	r2, r1
   886f2:	f100 83ef 	bmi.w	88ed4 <_vfiprintf_r+0xa40>
   886f6:	0658      	lsls	r0, r3, #25
   886f8:	f140 83ec 	bpl.w	88ed4 <_vfiprintf_r+0xa40>
   886fc:	2700      	movs	r7, #0
   886fe:	2201      	movs	r2, #1
   88700:	880e      	ldrh	r6, [r1, #0]
   88702:	3104      	adds	r1, #4
   88704:	9107      	str	r1, [sp, #28]
   88706:	f04f 0100 	mov.w	r1, #0
   8870a:	2500      	movs	r5, #0
   8870c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   88710:	1c61      	adds	r1, r4, #1
   88712:	f000 8117 	beq.w	88944 <_vfiprintf_r+0x4b0>
   88716:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   8871a:	9102      	str	r1, [sp, #8]
   8871c:	ea56 0107 	orrs.w	r1, r6, r7
   88720:	f040 8115 	bne.w	8894e <_vfiprintf_r+0x4ba>
   88724:	2c00      	cmp	r4, #0
   88726:	f040 835b 	bne.w	88de0 <_vfiprintf_r+0x94c>
   8872a:	2a00      	cmp	r2, #0
   8872c:	f040 83b6 	bne.w	88e9c <_vfiprintf_r+0xa08>
   88730:	f013 0301 	ands.w	r3, r3, #1
   88734:	9305      	str	r3, [sp, #20]
   88736:	f000 8455 	beq.w	88fe4 <_vfiprintf_r+0xb50>
   8873a:	2330      	movs	r3, #48	; 0x30
   8873c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   88740:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   88744:	9b05      	ldr	r3, [sp, #20]
   88746:	42a3      	cmp	r3, r4
   88748:	bfb8      	it	lt
   8874a:	4623      	movlt	r3, r4
   8874c:	9301      	str	r3, [sp, #4]
   8874e:	b10d      	cbz	r5, 88754 <_vfiprintf_r+0x2c0>
   88750:	3301      	adds	r3, #1
   88752:	9301      	str	r3, [sp, #4]
   88754:	9b02      	ldr	r3, [sp, #8]
   88756:	f013 0302 	ands.w	r3, r3, #2
   8875a:	9309      	str	r3, [sp, #36]	; 0x24
   8875c:	d002      	beq.n	88764 <_vfiprintf_r+0x2d0>
   8875e:	9b01      	ldr	r3, [sp, #4]
   88760:	3302      	adds	r3, #2
   88762:	9301      	str	r3, [sp, #4]
   88764:	9b02      	ldr	r3, [sp, #8]
   88766:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8876a:	930a      	str	r3, [sp, #40]	; 0x28
   8876c:	f040 8215 	bne.w	88b9a <_vfiprintf_r+0x706>
   88770:	9b08      	ldr	r3, [sp, #32]
   88772:	9a01      	ldr	r2, [sp, #4]
   88774:	1a9d      	subs	r5, r3, r2
   88776:	2d00      	cmp	r5, #0
   88778:	f340 820f 	ble.w	88b9a <_vfiprintf_r+0x706>
   8877c:	2d10      	cmp	r5, #16
   8877e:	f340 8484 	ble.w	8908a <_vfiprintf_r+0xbf6>
   88782:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88784:	46ce      	mov	lr, r9
   88786:	2710      	movs	r7, #16
   88788:	46a1      	mov	r9, r4
   8878a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8878c:	4ec5      	ldr	r6, [pc, #788]	; (88aa4 <_vfiprintf_r+0x610>)
   8878e:	4619      	mov	r1, r3
   88790:	9c06      	ldr	r4, [sp, #24]
   88792:	e007      	b.n	887a4 <_vfiprintf_r+0x310>
   88794:	f101 0c02 	add.w	ip, r1, #2
   88798:	4601      	mov	r1, r0
   8879a:	f10e 0e08 	add.w	lr, lr, #8
   8879e:	3d10      	subs	r5, #16
   887a0:	2d10      	cmp	r5, #16
   887a2:	dd11      	ble.n	887c8 <_vfiprintf_r+0x334>
   887a4:	1c48      	adds	r0, r1, #1
   887a6:	3210      	adds	r2, #16
   887a8:	2807      	cmp	r0, #7
   887aa:	9211      	str	r2, [sp, #68]	; 0x44
   887ac:	e88e 00c0 	stmia.w	lr, {r6, r7}
   887b0:	9010      	str	r0, [sp, #64]	; 0x40
   887b2:	ddef      	ble.n	88794 <_vfiprintf_r+0x300>
   887b4:	2a00      	cmp	r2, #0
   887b6:	f040 81d9 	bne.w	88b6c <_vfiprintf_r+0x6d8>
   887ba:	3d10      	subs	r5, #16
   887bc:	2d10      	cmp	r5, #16
   887be:	4611      	mov	r1, r2
   887c0:	f04f 0c01 	mov.w	ip, #1
   887c4:	46d6      	mov	lr, sl
   887c6:	dced      	bgt.n	887a4 <_vfiprintf_r+0x310>
   887c8:	464c      	mov	r4, r9
   887ca:	4661      	mov	r1, ip
   887cc:	46f1      	mov	r9, lr
   887ce:	442a      	add	r2, r5
   887d0:	2907      	cmp	r1, #7
   887d2:	9211      	str	r2, [sp, #68]	; 0x44
   887d4:	f8c9 6000 	str.w	r6, [r9]
   887d8:	f8c9 5004 	str.w	r5, [r9, #4]
   887dc:	9110      	str	r1, [sp, #64]	; 0x40
   887de:	f300 82eb 	bgt.w	88db8 <_vfiprintf_r+0x924>
   887e2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   887e6:	f109 0908 	add.w	r9, r9, #8
   887ea:	1c48      	adds	r0, r1, #1
   887ec:	2d00      	cmp	r5, #0
   887ee:	f040 81dc 	bne.w	88baa <_vfiprintf_r+0x716>
   887f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   887f4:	2b00      	cmp	r3, #0
   887f6:	f000 81f6 	beq.w	88be6 <_vfiprintf_r+0x752>
   887fa:	2102      	movs	r1, #2
   887fc:	ab0e      	add	r3, sp, #56	; 0x38
   887fe:	440a      	add	r2, r1
   88800:	2807      	cmp	r0, #7
   88802:	9211      	str	r2, [sp, #68]	; 0x44
   88804:	9010      	str	r0, [sp, #64]	; 0x40
   88806:	f8c9 1004 	str.w	r1, [r9, #4]
   8880a:	f8c9 3000 	str.w	r3, [r9]
   8880e:	f340 81e6 	ble.w	88bde <_vfiprintf_r+0x74a>
   88812:	2a00      	cmp	r2, #0
   88814:	f040 8395 	bne.w	88f42 <_vfiprintf_r+0xaae>
   88818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8881a:	2001      	movs	r0, #1
   8881c:	2b80      	cmp	r3, #128	; 0x80
   8881e:	4611      	mov	r1, r2
   88820:	46d1      	mov	r9, sl
   88822:	f040 81e4 	bne.w	88bee <_vfiprintf_r+0x75a>
   88826:	9b08      	ldr	r3, [sp, #32]
   88828:	9d01      	ldr	r5, [sp, #4]
   8882a:	1b5e      	subs	r6, r3, r5
   8882c:	2e00      	cmp	r6, #0
   8882e:	f340 81de 	ble.w	88bee <_vfiprintf_r+0x75a>
   88832:	2e10      	cmp	r6, #16
   88834:	f340 843c 	ble.w	890b0 <_vfiprintf_r+0xc1c>
   88838:	46cc      	mov	ip, r9
   8883a:	2710      	movs	r7, #16
   8883c:	46a1      	mov	r9, r4
   8883e:	4d9a      	ldr	r5, [pc, #616]	; (88aa8 <_vfiprintf_r+0x614>)
   88840:	9c06      	ldr	r4, [sp, #24]
   88842:	e007      	b.n	88854 <_vfiprintf_r+0x3c0>
   88844:	f101 0e02 	add.w	lr, r1, #2
   88848:	4601      	mov	r1, r0
   8884a:	f10c 0c08 	add.w	ip, ip, #8
   8884e:	3e10      	subs	r6, #16
   88850:	2e10      	cmp	r6, #16
   88852:	dd11      	ble.n	88878 <_vfiprintf_r+0x3e4>
   88854:	1c48      	adds	r0, r1, #1
   88856:	3210      	adds	r2, #16
   88858:	2807      	cmp	r0, #7
   8885a:	9211      	str	r2, [sp, #68]	; 0x44
   8885c:	e88c 00a0 	stmia.w	ip, {r5, r7}
   88860:	9010      	str	r0, [sp, #64]	; 0x40
   88862:	ddef      	ble.n	88844 <_vfiprintf_r+0x3b0>
   88864:	2a00      	cmp	r2, #0
   88866:	f040 829b 	bne.w	88da0 <_vfiprintf_r+0x90c>
   8886a:	3e10      	subs	r6, #16
   8886c:	2e10      	cmp	r6, #16
   8886e:	f04f 0e01 	mov.w	lr, #1
   88872:	4611      	mov	r1, r2
   88874:	46d4      	mov	ip, sl
   88876:	dced      	bgt.n	88854 <_vfiprintf_r+0x3c0>
   88878:	464c      	mov	r4, r9
   8887a:	46e1      	mov	r9, ip
   8887c:	4432      	add	r2, r6
   8887e:	f1be 0f07 	cmp.w	lr, #7
   88882:	9211      	str	r2, [sp, #68]	; 0x44
   88884:	e889 0060 	stmia.w	r9, {r5, r6}
   88888:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   8888c:	f300 8366 	bgt.w	88f5c <_vfiprintf_r+0xac8>
   88890:	f109 0908 	add.w	r9, r9, #8
   88894:	f10e 0001 	add.w	r0, lr, #1
   88898:	4671      	mov	r1, lr
   8889a:	e1a8      	b.n	88bee <_vfiprintf_r+0x75a>
   8889c:	9508      	str	r5, [sp, #32]
   8889e:	f013 0220 	ands.w	r2, r3, #32
   888a2:	f040 8389 	bne.w	88fb8 <_vfiprintf_r+0xb24>
   888a6:	f013 0110 	ands.w	r1, r3, #16
   888aa:	f040 8319 	bne.w	88ee0 <_vfiprintf_r+0xa4c>
   888ae:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   888b2:	f000 8315 	beq.w	88ee0 <_vfiprintf_r+0xa4c>
   888b6:	9807      	ldr	r0, [sp, #28]
   888b8:	460a      	mov	r2, r1
   888ba:	4601      	mov	r1, r0
   888bc:	3104      	adds	r1, #4
   888be:	8806      	ldrh	r6, [r0, #0]
   888c0:	2700      	movs	r7, #0
   888c2:	9107      	str	r1, [sp, #28]
   888c4:	e71f      	b.n	88706 <_vfiprintf_r+0x272>
   888c6:	9508      	str	r5, [sp, #32]
   888c8:	f043 0310 	orr.w	r3, r3, #16
   888cc:	e7e7      	b.n	8889e <_vfiprintf_r+0x40a>
   888ce:	9508      	str	r5, [sp, #32]
   888d0:	f043 0310 	orr.w	r3, r3, #16
   888d4:	e707      	b.n	886e6 <_vfiprintf_r+0x252>
   888d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   888da:	f898 2000 	ldrb.w	r2, [r8]
   888de:	e64b      	b.n	88578 <_vfiprintf_r+0xe4>
   888e0:	2500      	movs	r5, #0
   888e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   888e6:	f818 2b01 	ldrb.w	r2, [r8], #1
   888ea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   888ee:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   888f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   888f6:	2909      	cmp	r1, #9
   888f8:	d9f5      	bls.n	888e6 <_vfiprintf_r+0x452>
   888fa:	e63f      	b.n	8857c <_vfiprintf_r+0xe8>
   888fc:	9508      	str	r5, [sp, #32]
   888fe:	2800      	cmp	r0, #0
   88900:	f040 8402 	bne.w	89108 <_vfiprintf_r+0xc74>
   88904:	f043 0310 	orr.w	r3, r3, #16
   88908:	069e      	lsls	r6, r3, #26
   8890a:	f100 833d 	bmi.w	88f88 <_vfiprintf_r+0xaf4>
   8890e:	9907      	ldr	r1, [sp, #28]
   88910:	06dd      	lsls	r5, r3, #27
   88912:	460a      	mov	r2, r1
   88914:	f100 82f0 	bmi.w	88ef8 <_vfiprintf_r+0xa64>
   88918:	0658      	lsls	r0, r3, #25
   8891a:	f140 82ed 	bpl.w	88ef8 <_vfiprintf_r+0xa64>
   8891e:	f9b1 6000 	ldrsh.w	r6, [r1]
   88922:	3204      	adds	r2, #4
   88924:	17f7      	asrs	r7, r6, #31
   88926:	4630      	mov	r0, r6
   88928:	4639      	mov	r1, r7
   8892a:	9207      	str	r2, [sp, #28]
   8892c:	2800      	cmp	r0, #0
   8892e:	f171 0200 	sbcs.w	r2, r1, #0
   88932:	f2c0 835a 	blt.w	88fea <_vfiprintf_r+0xb56>
   88936:	1c61      	adds	r1, r4, #1
   88938:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8893c:	f04f 0201 	mov.w	r2, #1
   88940:	f47f aee9 	bne.w	88716 <_vfiprintf_r+0x282>
   88944:	ea56 0107 	orrs.w	r1, r6, r7
   88948:	f000 824b 	beq.w	88de2 <_vfiprintf_r+0x94e>
   8894c:	9302      	str	r3, [sp, #8]
   8894e:	2a01      	cmp	r2, #1
   88950:	f000 828a 	beq.w	88e68 <_vfiprintf_r+0x9d4>
   88954:	2a02      	cmp	r2, #2
   88956:	f040 825a 	bne.w	88e0e <_vfiprintf_r+0x97a>
   8895a:	46d3      	mov	fp, sl
   8895c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8895e:	0933      	lsrs	r3, r6, #4
   88960:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   88964:	0939      	lsrs	r1, r7, #4
   88966:	f006 020f 	and.w	r2, r6, #15
   8896a:	460f      	mov	r7, r1
   8896c:	461e      	mov	r6, r3
   8896e:	5c83      	ldrb	r3, [r0, r2]
   88970:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   88974:	ea56 0307 	orrs.w	r3, r6, r7
   88978:	d1f1      	bne.n	8895e <_vfiprintf_r+0x4ca>
   8897a:	ebaa 030b 	sub.w	r3, sl, fp
   8897e:	9305      	str	r3, [sp, #20]
   88980:	e6e0      	b.n	88744 <_vfiprintf_r+0x2b0>
   88982:	2800      	cmp	r0, #0
   88984:	f040 83bd 	bne.w	89102 <_vfiprintf_r+0xc6e>
   88988:	0699      	lsls	r1, r3, #26
   8898a:	f100 8359 	bmi.w	89040 <_vfiprintf_r+0xbac>
   8898e:	06da      	lsls	r2, r3, #27
   88990:	f100 80e5 	bmi.w	88b5e <_vfiprintf_r+0x6ca>
   88994:	065b      	lsls	r3, r3, #25
   88996:	f140 80e2 	bpl.w	88b5e <_vfiprintf_r+0x6ca>
   8899a:	9a07      	ldr	r2, [sp, #28]
   8899c:	6813      	ldr	r3, [r2, #0]
   8899e:	3204      	adds	r2, #4
   889a0:	9207      	str	r2, [sp, #28]
   889a2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   889a6:	801a      	strh	r2, [r3, #0]
   889a8:	e5b1      	b.n	8850e <_vfiprintf_r+0x7a>
   889aa:	2278      	movs	r2, #120	; 0x78
   889ac:	2130      	movs	r1, #48	; 0x30
   889ae:	9508      	str	r5, [sp, #32]
   889b0:	9d07      	ldr	r5, [sp, #28]
   889b2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   889b6:	1d2a      	adds	r2, r5, #4
   889b8:	9207      	str	r2, [sp, #28]
   889ba:	4a3c      	ldr	r2, [pc, #240]	; (88aac <_vfiprintf_r+0x618>)
   889bc:	682e      	ldr	r6, [r5, #0]
   889be:	920b      	str	r2, [sp, #44]	; 0x2c
   889c0:	f043 0302 	orr.w	r3, r3, #2
   889c4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   889c8:	2700      	movs	r7, #0
   889ca:	2202      	movs	r2, #2
   889cc:	e69b      	b.n	88706 <_vfiprintf_r+0x272>
   889ce:	9508      	str	r5, [sp, #32]
   889d0:	2800      	cmp	r0, #0
   889d2:	d099      	beq.n	88908 <_vfiprintf_r+0x474>
   889d4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   889d8:	e796      	b.n	88908 <_vfiprintf_r+0x474>
   889da:	f898 2000 	ldrb.w	r2, [r8]
   889de:	2e00      	cmp	r6, #0
   889e0:	f47f adca 	bne.w	88578 <_vfiprintf_r+0xe4>
   889e4:	2001      	movs	r0, #1
   889e6:	2620      	movs	r6, #32
   889e8:	e5c6      	b.n	88578 <_vfiprintf_r+0xe4>
   889ea:	f043 0301 	orr.w	r3, r3, #1
   889ee:	f898 2000 	ldrb.w	r2, [r8]
   889f2:	e5c1      	b.n	88578 <_vfiprintf_r+0xe4>
   889f4:	9508      	str	r5, [sp, #32]
   889f6:	2800      	cmp	r0, #0
   889f8:	f040 8380 	bne.w	890fc <_vfiprintf_r+0xc68>
   889fc:	492b      	ldr	r1, [pc, #172]	; (88aac <_vfiprintf_r+0x618>)
   889fe:	910b      	str	r1, [sp, #44]	; 0x2c
   88a00:	069f      	lsls	r7, r3, #26
   88a02:	f100 82e5 	bmi.w	88fd0 <_vfiprintf_r+0xb3c>
   88a06:	9807      	ldr	r0, [sp, #28]
   88a08:	06de      	lsls	r6, r3, #27
   88a0a:	4601      	mov	r1, r0
   88a0c:	f100 826f 	bmi.w	88eee <_vfiprintf_r+0xa5a>
   88a10:	065d      	lsls	r5, r3, #25
   88a12:	f140 826c 	bpl.w	88eee <_vfiprintf_r+0xa5a>
   88a16:	2700      	movs	r7, #0
   88a18:	3104      	adds	r1, #4
   88a1a:	8806      	ldrh	r6, [r0, #0]
   88a1c:	9107      	str	r1, [sp, #28]
   88a1e:	07d8      	lsls	r0, r3, #31
   88a20:	f140 8220 	bpl.w	88e64 <_vfiprintf_r+0x9d0>
   88a24:	ea56 0107 	orrs.w	r1, r6, r7
   88a28:	f000 821c 	beq.w	88e64 <_vfiprintf_r+0x9d0>
   88a2c:	2130      	movs	r1, #48	; 0x30
   88a2e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   88a32:	f043 0302 	orr.w	r3, r3, #2
   88a36:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   88a3a:	2202      	movs	r2, #2
   88a3c:	e663      	b.n	88706 <_vfiprintf_r+0x272>
   88a3e:	9508      	str	r5, [sp, #32]
   88a40:	2800      	cmp	r0, #0
   88a42:	f040 8355 	bne.w	890f0 <_vfiprintf_r+0xc5c>
   88a46:	491a      	ldr	r1, [pc, #104]	; (88ab0 <_vfiprintf_r+0x61c>)
   88a48:	910b      	str	r1, [sp, #44]	; 0x2c
   88a4a:	e7d9      	b.n	88a00 <_vfiprintf_r+0x56c>
   88a4c:	2201      	movs	r2, #1
   88a4e:	9807      	ldr	r0, [sp, #28]
   88a50:	4611      	mov	r1, r2
   88a52:	9201      	str	r2, [sp, #4]
   88a54:	6802      	ldr	r2, [r0, #0]
   88a56:	f04f 0400 	mov.w	r4, #0
   88a5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   88a5e:	4602      	mov	r2, r0
   88a60:	3204      	adds	r2, #4
   88a62:	9508      	str	r5, [sp, #32]
   88a64:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   88a68:	9105      	str	r1, [sp, #20]
   88a6a:	9207      	str	r2, [sp, #28]
   88a6c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   88a70:	9302      	str	r3, [sp, #8]
   88a72:	2400      	movs	r4, #0
   88a74:	e66e      	b.n	88754 <_vfiprintf_r+0x2c0>
   88a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88a7a:	f898 2000 	ldrb.w	r2, [r8]
   88a7e:	e57b      	b.n	88578 <_vfiprintf_r+0xe4>
   88a80:	f898 2000 	ldrb.w	r2, [r8]
   88a84:	2a6c      	cmp	r2, #108	; 0x6c
   88a86:	bf03      	ittte	eq
   88a88:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   88a8c:	f043 0320 	orreq.w	r3, r3, #32
   88a90:	f108 0801 	addeq.w	r8, r8, #1
   88a94:	f043 0310 	orrne.w	r3, r3, #16
   88a98:	e56e      	b.n	88578 <_vfiprintf_r+0xe4>
   88a9a:	f898 2000 	ldrb.w	r2, [r8]
   88a9e:	2001      	movs	r0, #1
   88aa0:	262b      	movs	r6, #43	; 0x2b
   88aa2:	e569      	b.n	88578 <_vfiprintf_r+0xe4>
   88aa4:	0008ccf8 	.word	0x0008ccf8
   88aa8:	0008cd08 	.word	0x0008cd08
   88aac:	0008ccb8 	.word	0x0008ccb8
   88ab0:	0008cca4 	.word	0x0008cca4
   88ab4:	f04f 0200 	mov.w	r2, #0
   88ab8:	9907      	ldr	r1, [sp, #28]
   88aba:	9508      	str	r5, [sp, #32]
   88abc:	f8d1 b000 	ldr.w	fp, [r1]
   88ac0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   88ac4:	1d0d      	adds	r5, r1, #4
   88ac6:	f1bb 0f00 	cmp.w	fp, #0
   88aca:	f000 82e4 	beq.w	89096 <_vfiprintf_r+0xc02>
   88ace:	1c67      	adds	r7, r4, #1
   88ad0:	f000 82c3 	beq.w	8905a <_vfiprintf_r+0xbc6>
   88ad4:	4622      	mov	r2, r4
   88ad6:	2100      	movs	r1, #0
   88ad8:	4658      	mov	r0, fp
   88ada:	9301      	str	r3, [sp, #4]
   88adc:	f002 fb8c 	bl	8b1f8 <memchr>
   88ae0:	9b01      	ldr	r3, [sp, #4]
   88ae2:	2800      	cmp	r0, #0
   88ae4:	f000 82e8 	beq.w	890b8 <_vfiprintf_r+0xc24>
   88ae8:	eba0 020b 	sub.w	r2, r0, fp
   88aec:	9507      	str	r5, [sp, #28]
   88aee:	9205      	str	r2, [sp, #20]
   88af0:	9302      	str	r3, [sp, #8]
   88af2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88af6:	2400      	movs	r4, #0
   88af8:	e624      	b.n	88744 <_vfiprintf_r+0x2b0>
   88afa:	f898 2000 	ldrb.w	r2, [r8]
   88afe:	f108 0701 	add.w	r7, r8, #1
   88b02:	2a2a      	cmp	r2, #42	; 0x2a
   88b04:	f000 82e9 	beq.w	890da <_vfiprintf_r+0xc46>
   88b08:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88b0c:	2909      	cmp	r1, #9
   88b0e:	46b8      	mov	r8, r7
   88b10:	f04f 0400 	mov.w	r4, #0
   88b14:	f63f ad32 	bhi.w	8857c <_vfiprintf_r+0xe8>
   88b18:	f818 2b01 	ldrb.w	r2, [r8], #1
   88b1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   88b20:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   88b24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88b28:	2909      	cmp	r1, #9
   88b2a:	d9f5      	bls.n	88b18 <_vfiprintf_r+0x684>
   88b2c:	e526      	b.n	8857c <_vfiprintf_r+0xe8>
   88b2e:	f043 0320 	orr.w	r3, r3, #32
   88b32:	f898 2000 	ldrb.w	r2, [r8]
   88b36:	e51f      	b.n	88578 <_vfiprintf_r+0xe4>
   88b38:	9508      	str	r5, [sp, #32]
   88b3a:	2800      	cmp	r0, #0
   88b3c:	f040 82db 	bne.w	890f6 <_vfiprintf_r+0xc62>
   88b40:	2a00      	cmp	r2, #0
   88b42:	f000 80f1 	beq.w	88d28 <_vfiprintf_r+0x894>
   88b46:	2101      	movs	r1, #1
   88b48:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   88b4c:	f04f 0200 	mov.w	r2, #0
   88b50:	9101      	str	r1, [sp, #4]
   88b52:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   88b56:	9105      	str	r1, [sp, #20]
   88b58:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   88b5c:	e788      	b.n	88a70 <_vfiprintf_r+0x5dc>
   88b5e:	9a07      	ldr	r2, [sp, #28]
   88b60:	6813      	ldr	r3, [r2, #0]
   88b62:	3204      	adds	r2, #4
   88b64:	9207      	str	r2, [sp, #28]
   88b66:	9a03      	ldr	r2, [sp, #12]
   88b68:	601a      	str	r2, [r3, #0]
   88b6a:	e4d0      	b.n	8850e <_vfiprintf_r+0x7a>
   88b6c:	aa0f      	add	r2, sp, #60	; 0x3c
   88b6e:	9904      	ldr	r1, [sp, #16]
   88b70:	4620      	mov	r0, r4
   88b72:	f7ff fc4f 	bl	88414 <__sprint_r.part.0>
   88b76:	2800      	cmp	r0, #0
   88b78:	f040 8143 	bne.w	88e02 <_vfiprintf_r+0x96e>
   88b7c:	9910      	ldr	r1, [sp, #64]	; 0x40
   88b7e:	46d6      	mov	lr, sl
   88b80:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88b82:	f101 0c01 	add.w	ip, r1, #1
   88b86:	e60a      	b.n	8879e <_vfiprintf_r+0x30a>
   88b88:	aa0f      	add	r2, sp, #60	; 0x3c
   88b8a:	9904      	ldr	r1, [sp, #16]
   88b8c:	9806      	ldr	r0, [sp, #24]
   88b8e:	f7ff fc41 	bl	88414 <__sprint_r.part.0>
   88b92:	2800      	cmp	r0, #0
   88b94:	f040 8135 	bne.w	88e02 <_vfiprintf_r+0x96e>
   88b98:	46d1      	mov	r9, sl
   88b9a:	9910      	ldr	r1, [sp, #64]	; 0x40
   88b9c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88ba0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88ba2:	1c48      	adds	r0, r1, #1
   88ba4:	2d00      	cmp	r5, #0
   88ba6:	f43f ae24 	beq.w	887f2 <_vfiprintf_r+0x35e>
   88baa:	2101      	movs	r1, #1
   88bac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   88bb0:	440a      	add	r2, r1
   88bb2:	2807      	cmp	r0, #7
   88bb4:	9211      	str	r2, [sp, #68]	; 0x44
   88bb6:	9010      	str	r0, [sp, #64]	; 0x40
   88bb8:	f8c9 1004 	str.w	r1, [r9, #4]
   88bbc:	f8c9 5000 	str.w	r5, [r9]
   88bc0:	f340 8109 	ble.w	88dd6 <_vfiprintf_r+0x942>
   88bc4:	2a00      	cmp	r2, #0
   88bc6:	f040 81af 	bne.w	88f28 <_vfiprintf_r+0xa94>
   88bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88bcc:	2b00      	cmp	r3, #0
   88bce:	f43f ae23 	beq.w	88818 <_vfiprintf_r+0x384>
   88bd2:	2202      	movs	r2, #2
   88bd4:	4608      	mov	r0, r1
   88bd6:	46d1      	mov	r9, sl
   88bd8:	ab0e      	add	r3, sp, #56	; 0x38
   88bda:	921d      	str	r2, [sp, #116]	; 0x74
   88bdc:	931c      	str	r3, [sp, #112]	; 0x70
   88bde:	4601      	mov	r1, r0
   88be0:	f109 0908 	add.w	r9, r9, #8
   88be4:	3001      	adds	r0, #1
   88be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88be8:	2b80      	cmp	r3, #128	; 0x80
   88bea:	f43f ae1c 	beq.w	88826 <_vfiprintf_r+0x392>
   88bee:	9b05      	ldr	r3, [sp, #20]
   88bf0:	1ae4      	subs	r4, r4, r3
   88bf2:	2c00      	cmp	r4, #0
   88bf4:	dd2f      	ble.n	88c56 <_vfiprintf_r+0x7c2>
   88bf6:	2c10      	cmp	r4, #16
   88bf8:	f340 8220 	ble.w	8903c <_vfiprintf_r+0xba8>
   88bfc:	46ce      	mov	lr, r9
   88bfe:	2610      	movs	r6, #16
   88c00:	4db2      	ldr	r5, [pc, #712]	; (88ecc <_vfiprintf_r+0xa38>)
   88c02:	9f06      	ldr	r7, [sp, #24]
   88c04:	f8dd 9010 	ldr.w	r9, [sp, #16]
   88c08:	e006      	b.n	88c18 <_vfiprintf_r+0x784>
   88c0a:	1c88      	adds	r0, r1, #2
   88c0c:	4619      	mov	r1, r3
   88c0e:	f10e 0e08 	add.w	lr, lr, #8
   88c12:	3c10      	subs	r4, #16
   88c14:	2c10      	cmp	r4, #16
   88c16:	dd10      	ble.n	88c3a <_vfiprintf_r+0x7a6>
   88c18:	1c4b      	adds	r3, r1, #1
   88c1a:	3210      	adds	r2, #16
   88c1c:	2b07      	cmp	r3, #7
   88c1e:	9211      	str	r2, [sp, #68]	; 0x44
   88c20:	e88e 0060 	stmia.w	lr, {r5, r6}
   88c24:	9310      	str	r3, [sp, #64]	; 0x40
   88c26:	ddf0      	ble.n	88c0a <_vfiprintf_r+0x776>
   88c28:	2a00      	cmp	r2, #0
   88c2a:	d165      	bne.n	88cf8 <_vfiprintf_r+0x864>
   88c2c:	3c10      	subs	r4, #16
   88c2e:	2c10      	cmp	r4, #16
   88c30:	f04f 0001 	mov.w	r0, #1
   88c34:	4611      	mov	r1, r2
   88c36:	46d6      	mov	lr, sl
   88c38:	dcee      	bgt.n	88c18 <_vfiprintf_r+0x784>
   88c3a:	46f1      	mov	r9, lr
   88c3c:	4422      	add	r2, r4
   88c3e:	2807      	cmp	r0, #7
   88c40:	9211      	str	r2, [sp, #68]	; 0x44
   88c42:	f8c9 5000 	str.w	r5, [r9]
   88c46:	f8c9 4004 	str.w	r4, [r9, #4]
   88c4a:	9010      	str	r0, [sp, #64]	; 0x40
   88c4c:	f300 8085 	bgt.w	88d5a <_vfiprintf_r+0x8c6>
   88c50:	f109 0908 	add.w	r9, r9, #8
   88c54:	3001      	adds	r0, #1
   88c56:	9905      	ldr	r1, [sp, #20]
   88c58:	2807      	cmp	r0, #7
   88c5a:	440a      	add	r2, r1
   88c5c:	9211      	str	r2, [sp, #68]	; 0x44
   88c5e:	f8c9 b000 	str.w	fp, [r9]
   88c62:	f8c9 1004 	str.w	r1, [r9, #4]
   88c66:	9010      	str	r0, [sp, #64]	; 0x40
   88c68:	f340 8082 	ble.w	88d70 <_vfiprintf_r+0x8dc>
   88c6c:	2a00      	cmp	r2, #0
   88c6e:	f040 8118 	bne.w	88ea2 <_vfiprintf_r+0xa0e>
   88c72:	9b02      	ldr	r3, [sp, #8]
   88c74:	9210      	str	r2, [sp, #64]	; 0x40
   88c76:	0758      	lsls	r0, r3, #29
   88c78:	d535      	bpl.n	88ce6 <_vfiprintf_r+0x852>
   88c7a:	9b08      	ldr	r3, [sp, #32]
   88c7c:	9901      	ldr	r1, [sp, #4]
   88c7e:	1a5c      	subs	r4, r3, r1
   88c80:	2c00      	cmp	r4, #0
   88c82:	f340 80e7 	ble.w	88e54 <_vfiprintf_r+0x9c0>
   88c86:	46d1      	mov	r9, sl
   88c88:	2c10      	cmp	r4, #16
   88c8a:	f340 820d 	ble.w	890a8 <_vfiprintf_r+0xc14>
   88c8e:	2510      	movs	r5, #16
   88c90:	9910      	ldr	r1, [sp, #64]	; 0x40
   88c92:	4e8f      	ldr	r6, [pc, #572]	; (88ed0 <_vfiprintf_r+0xa3c>)
   88c94:	9f06      	ldr	r7, [sp, #24]
   88c96:	f8dd b010 	ldr.w	fp, [sp, #16]
   88c9a:	e006      	b.n	88caa <_vfiprintf_r+0x816>
   88c9c:	1c88      	adds	r0, r1, #2
   88c9e:	4619      	mov	r1, r3
   88ca0:	f109 0908 	add.w	r9, r9, #8
   88ca4:	3c10      	subs	r4, #16
   88ca6:	2c10      	cmp	r4, #16
   88ca8:	dd11      	ble.n	88cce <_vfiprintf_r+0x83a>
   88caa:	1c4b      	adds	r3, r1, #1
   88cac:	3210      	adds	r2, #16
   88cae:	2b07      	cmp	r3, #7
   88cb0:	9211      	str	r2, [sp, #68]	; 0x44
   88cb2:	f8c9 6000 	str.w	r6, [r9]
   88cb6:	f8c9 5004 	str.w	r5, [r9, #4]
   88cba:	9310      	str	r3, [sp, #64]	; 0x40
   88cbc:	ddee      	ble.n	88c9c <_vfiprintf_r+0x808>
   88cbe:	bb42      	cbnz	r2, 88d12 <_vfiprintf_r+0x87e>
   88cc0:	3c10      	subs	r4, #16
   88cc2:	2c10      	cmp	r4, #16
   88cc4:	f04f 0001 	mov.w	r0, #1
   88cc8:	4611      	mov	r1, r2
   88cca:	46d1      	mov	r9, sl
   88ccc:	dced      	bgt.n	88caa <_vfiprintf_r+0x816>
   88cce:	4422      	add	r2, r4
   88cd0:	2807      	cmp	r0, #7
   88cd2:	9211      	str	r2, [sp, #68]	; 0x44
   88cd4:	f8c9 6000 	str.w	r6, [r9]
   88cd8:	f8c9 4004 	str.w	r4, [r9, #4]
   88cdc:	9010      	str	r0, [sp, #64]	; 0x40
   88cde:	dd51      	ble.n	88d84 <_vfiprintf_r+0x8f0>
   88ce0:	2a00      	cmp	r2, #0
   88ce2:	f040 819a 	bne.w	8901a <_vfiprintf_r+0xb86>
   88ce6:	9b03      	ldr	r3, [sp, #12]
   88ce8:	9a08      	ldr	r2, [sp, #32]
   88cea:	9901      	ldr	r1, [sp, #4]
   88cec:	428a      	cmp	r2, r1
   88cee:	bfac      	ite	ge
   88cf0:	189b      	addge	r3, r3, r2
   88cf2:	185b      	addlt	r3, r3, r1
   88cf4:	9303      	str	r3, [sp, #12]
   88cf6:	e04e      	b.n	88d96 <_vfiprintf_r+0x902>
   88cf8:	aa0f      	add	r2, sp, #60	; 0x3c
   88cfa:	4649      	mov	r1, r9
   88cfc:	4638      	mov	r0, r7
   88cfe:	f7ff fb89 	bl	88414 <__sprint_r.part.0>
   88d02:	2800      	cmp	r0, #0
   88d04:	f040 813e 	bne.w	88f84 <_vfiprintf_r+0xaf0>
   88d08:	9910      	ldr	r1, [sp, #64]	; 0x40
   88d0a:	46d6      	mov	lr, sl
   88d0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88d0e:	1c48      	adds	r0, r1, #1
   88d10:	e77f      	b.n	88c12 <_vfiprintf_r+0x77e>
   88d12:	aa0f      	add	r2, sp, #60	; 0x3c
   88d14:	4659      	mov	r1, fp
   88d16:	4638      	mov	r0, r7
   88d18:	f7ff fb7c 	bl	88414 <__sprint_r.part.0>
   88d1c:	b960      	cbnz	r0, 88d38 <_vfiprintf_r+0x8a4>
   88d1e:	9910      	ldr	r1, [sp, #64]	; 0x40
   88d20:	46d1      	mov	r9, sl
   88d22:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88d24:	1c48      	adds	r0, r1, #1
   88d26:	e7bd      	b.n	88ca4 <_vfiprintf_r+0x810>
   88d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88d2a:	f8dd b010 	ldr.w	fp, [sp, #16]
   88d2e:	2b00      	cmp	r3, #0
   88d30:	f040 81ca 	bne.w	890c8 <_vfiprintf_r+0xc34>
   88d34:	2300      	movs	r3, #0
   88d36:	9310      	str	r3, [sp, #64]	; 0x40
   88d38:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   88d3c:	f013 0f01 	tst.w	r3, #1
   88d40:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   88d44:	d102      	bne.n	88d4c <_vfiprintf_r+0x8b8>
   88d46:	059a      	lsls	r2, r3, #22
   88d48:	f140 80dd 	bpl.w	88f06 <_vfiprintf_r+0xa72>
   88d4c:	065b      	lsls	r3, r3, #25
   88d4e:	f53f acad 	bmi.w	886ac <_vfiprintf_r+0x218>
   88d52:	9803      	ldr	r0, [sp, #12]
   88d54:	b02d      	add	sp, #180	; 0xb4
   88d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88d5a:	2a00      	cmp	r2, #0
   88d5c:	f040 8105 	bne.w	88f6a <_vfiprintf_r+0xad6>
   88d60:	2301      	movs	r3, #1
   88d62:	46d1      	mov	r9, sl
   88d64:	9a05      	ldr	r2, [sp, #20]
   88d66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   88d6a:	921d      	str	r2, [sp, #116]	; 0x74
   88d6c:	9211      	str	r2, [sp, #68]	; 0x44
   88d6e:	9310      	str	r3, [sp, #64]	; 0x40
   88d70:	f109 0908 	add.w	r9, r9, #8
   88d74:	9b02      	ldr	r3, [sp, #8]
   88d76:	0759      	lsls	r1, r3, #29
   88d78:	d504      	bpl.n	88d84 <_vfiprintf_r+0x8f0>
   88d7a:	9b08      	ldr	r3, [sp, #32]
   88d7c:	9901      	ldr	r1, [sp, #4]
   88d7e:	1a5c      	subs	r4, r3, r1
   88d80:	2c00      	cmp	r4, #0
   88d82:	dc81      	bgt.n	88c88 <_vfiprintf_r+0x7f4>
   88d84:	9b03      	ldr	r3, [sp, #12]
   88d86:	9908      	ldr	r1, [sp, #32]
   88d88:	9801      	ldr	r0, [sp, #4]
   88d8a:	4281      	cmp	r1, r0
   88d8c:	bfac      	ite	ge
   88d8e:	185b      	addge	r3, r3, r1
   88d90:	181b      	addlt	r3, r3, r0
   88d92:	9303      	str	r3, [sp, #12]
   88d94:	bb72      	cbnz	r2, 88df4 <_vfiprintf_r+0x960>
   88d96:	2300      	movs	r3, #0
   88d98:	46d1      	mov	r9, sl
   88d9a:	9310      	str	r3, [sp, #64]	; 0x40
   88d9c:	f7ff bbb7 	b.w	8850e <_vfiprintf_r+0x7a>
   88da0:	aa0f      	add	r2, sp, #60	; 0x3c
   88da2:	9904      	ldr	r1, [sp, #16]
   88da4:	4620      	mov	r0, r4
   88da6:	f7ff fb35 	bl	88414 <__sprint_r.part.0>
   88daa:	bb50      	cbnz	r0, 88e02 <_vfiprintf_r+0x96e>
   88dac:	9910      	ldr	r1, [sp, #64]	; 0x40
   88dae:	46d4      	mov	ip, sl
   88db0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88db2:	f101 0e01 	add.w	lr, r1, #1
   88db6:	e54a      	b.n	8884e <_vfiprintf_r+0x3ba>
   88db8:	2a00      	cmp	r2, #0
   88dba:	f47f aee5 	bne.w	88b88 <_vfiprintf_r+0x6f4>
   88dbe:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   88dc2:	2900      	cmp	r1, #0
   88dc4:	f000 811a 	beq.w	88ffc <_vfiprintf_r+0xb68>
   88dc8:	2201      	movs	r2, #1
   88dca:	46d1      	mov	r9, sl
   88dcc:	4610      	mov	r0, r2
   88dce:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   88dd2:	921d      	str	r2, [sp, #116]	; 0x74
   88dd4:	911c      	str	r1, [sp, #112]	; 0x70
   88dd6:	4601      	mov	r1, r0
   88dd8:	f109 0908 	add.w	r9, r9, #8
   88ddc:	3001      	adds	r0, #1
   88dde:	e508      	b.n	887f2 <_vfiprintf_r+0x35e>
   88de0:	9b02      	ldr	r3, [sp, #8]
   88de2:	2a01      	cmp	r2, #1
   88de4:	f000 8097 	beq.w	88f16 <_vfiprintf_r+0xa82>
   88de8:	2a02      	cmp	r2, #2
   88dea:	d10d      	bne.n	88e08 <_vfiprintf_r+0x974>
   88dec:	9302      	str	r3, [sp, #8]
   88dee:	2600      	movs	r6, #0
   88df0:	2700      	movs	r7, #0
   88df2:	e5b2      	b.n	8895a <_vfiprintf_r+0x4c6>
   88df4:	aa0f      	add	r2, sp, #60	; 0x3c
   88df6:	9904      	ldr	r1, [sp, #16]
   88df8:	9806      	ldr	r0, [sp, #24]
   88dfa:	f7ff fb0b 	bl	88414 <__sprint_r.part.0>
   88dfe:	2800      	cmp	r0, #0
   88e00:	d0c9      	beq.n	88d96 <_vfiprintf_r+0x902>
   88e02:	f8dd b010 	ldr.w	fp, [sp, #16]
   88e06:	e797      	b.n	88d38 <_vfiprintf_r+0x8a4>
   88e08:	2600      	movs	r6, #0
   88e0a:	2700      	movs	r7, #0
   88e0c:	9302      	str	r3, [sp, #8]
   88e0e:	4651      	mov	r1, sl
   88e10:	e000      	b.n	88e14 <_vfiprintf_r+0x980>
   88e12:	4659      	mov	r1, fp
   88e14:	08f2      	lsrs	r2, r6, #3
   88e16:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   88e1a:	08f8      	lsrs	r0, r7, #3
   88e1c:	f006 0307 	and.w	r3, r6, #7
   88e20:	4607      	mov	r7, r0
   88e22:	4616      	mov	r6, r2
   88e24:	3330      	adds	r3, #48	; 0x30
   88e26:	ea56 0207 	orrs.w	r2, r6, r7
   88e2a:	f801 3c01 	strb.w	r3, [r1, #-1]
   88e2e:	f101 3bff 	add.w	fp, r1, #4294967295
   88e32:	d1ee      	bne.n	88e12 <_vfiprintf_r+0x97e>
   88e34:	9a02      	ldr	r2, [sp, #8]
   88e36:	07d6      	lsls	r6, r2, #31
   88e38:	f57f ad9f 	bpl.w	8897a <_vfiprintf_r+0x4e6>
   88e3c:	2b30      	cmp	r3, #48	; 0x30
   88e3e:	f43f ad9c 	beq.w	8897a <_vfiprintf_r+0x4e6>
   88e42:	2330      	movs	r3, #48	; 0x30
   88e44:	3902      	subs	r1, #2
   88e46:	f80b 3c01 	strb.w	r3, [fp, #-1]
   88e4a:	ebaa 0301 	sub.w	r3, sl, r1
   88e4e:	9305      	str	r3, [sp, #20]
   88e50:	468b      	mov	fp, r1
   88e52:	e477      	b.n	88744 <_vfiprintf_r+0x2b0>
   88e54:	9b03      	ldr	r3, [sp, #12]
   88e56:	9a08      	ldr	r2, [sp, #32]
   88e58:	428a      	cmp	r2, r1
   88e5a:	bfac      	ite	ge
   88e5c:	189b      	addge	r3, r3, r2
   88e5e:	185b      	addlt	r3, r3, r1
   88e60:	9303      	str	r3, [sp, #12]
   88e62:	e798      	b.n	88d96 <_vfiprintf_r+0x902>
   88e64:	2202      	movs	r2, #2
   88e66:	e44e      	b.n	88706 <_vfiprintf_r+0x272>
   88e68:	2f00      	cmp	r7, #0
   88e6a:	bf08      	it	eq
   88e6c:	2e0a      	cmpeq	r6, #10
   88e6e:	d351      	bcc.n	88f14 <_vfiprintf_r+0xa80>
   88e70:	46d3      	mov	fp, sl
   88e72:	4630      	mov	r0, r6
   88e74:	4639      	mov	r1, r7
   88e76:	220a      	movs	r2, #10
   88e78:	2300      	movs	r3, #0
   88e7a:	f7fd fc6d 	bl	86758 <__aeabi_uldivmod>
   88e7e:	3230      	adds	r2, #48	; 0x30
   88e80:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   88e84:	4630      	mov	r0, r6
   88e86:	4639      	mov	r1, r7
   88e88:	2300      	movs	r3, #0
   88e8a:	220a      	movs	r2, #10
   88e8c:	f7fd fc64 	bl	86758 <__aeabi_uldivmod>
   88e90:	4606      	mov	r6, r0
   88e92:	460f      	mov	r7, r1
   88e94:	ea56 0307 	orrs.w	r3, r6, r7
   88e98:	d1eb      	bne.n	88e72 <_vfiprintf_r+0x9de>
   88e9a:	e56e      	b.n	8897a <_vfiprintf_r+0x4e6>
   88e9c:	9405      	str	r4, [sp, #20]
   88e9e:	46d3      	mov	fp, sl
   88ea0:	e450      	b.n	88744 <_vfiprintf_r+0x2b0>
   88ea2:	aa0f      	add	r2, sp, #60	; 0x3c
   88ea4:	9904      	ldr	r1, [sp, #16]
   88ea6:	9806      	ldr	r0, [sp, #24]
   88ea8:	f7ff fab4 	bl	88414 <__sprint_r.part.0>
   88eac:	2800      	cmp	r0, #0
   88eae:	d1a8      	bne.n	88e02 <_vfiprintf_r+0x96e>
   88eb0:	46d1      	mov	r9, sl
   88eb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88eb4:	e75e      	b.n	88d74 <_vfiprintf_r+0x8e0>
   88eb6:	aa0f      	add	r2, sp, #60	; 0x3c
   88eb8:	9904      	ldr	r1, [sp, #16]
   88eba:	9806      	ldr	r0, [sp, #24]
   88ebc:	f7ff faaa 	bl	88414 <__sprint_r.part.0>
   88ec0:	2800      	cmp	r0, #0
   88ec2:	d19e      	bne.n	88e02 <_vfiprintf_r+0x96e>
   88ec4:	46d1      	mov	r9, sl
   88ec6:	f7ff bbbb 	b.w	88640 <_vfiprintf_r+0x1ac>
   88eca:	bf00      	nop
   88ecc:	0008cd08 	.word	0x0008cd08
   88ed0:	0008ccf8 	.word	0x0008ccf8
   88ed4:	3104      	adds	r1, #4
   88ed6:	6816      	ldr	r6, [r2, #0]
   88ed8:	2700      	movs	r7, #0
   88eda:	2201      	movs	r2, #1
   88edc:	9107      	str	r1, [sp, #28]
   88ede:	e412      	b.n	88706 <_vfiprintf_r+0x272>
   88ee0:	9807      	ldr	r0, [sp, #28]
   88ee2:	2700      	movs	r7, #0
   88ee4:	4601      	mov	r1, r0
   88ee6:	3104      	adds	r1, #4
   88ee8:	6806      	ldr	r6, [r0, #0]
   88eea:	9107      	str	r1, [sp, #28]
   88eec:	e40b      	b.n	88706 <_vfiprintf_r+0x272>
   88eee:	680e      	ldr	r6, [r1, #0]
   88ef0:	3104      	adds	r1, #4
   88ef2:	9107      	str	r1, [sp, #28]
   88ef4:	2700      	movs	r7, #0
   88ef6:	e592      	b.n	88a1e <_vfiprintf_r+0x58a>
   88ef8:	6816      	ldr	r6, [r2, #0]
   88efa:	3204      	adds	r2, #4
   88efc:	17f7      	asrs	r7, r6, #31
   88efe:	9207      	str	r2, [sp, #28]
   88f00:	4630      	mov	r0, r6
   88f02:	4639      	mov	r1, r7
   88f04:	e512      	b.n	8892c <_vfiprintf_r+0x498>
   88f06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   88f0a:	f001 fe3b 	bl	8ab84 <__retarget_lock_release_recursive>
   88f0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   88f12:	e71b      	b.n	88d4c <_vfiprintf_r+0x8b8>
   88f14:	9b02      	ldr	r3, [sp, #8]
   88f16:	9302      	str	r3, [sp, #8]
   88f18:	2301      	movs	r3, #1
   88f1a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   88f1e:	3630      	adds	r6, #48	; 0x30
   88f20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   88f24:	9305      	str	r3, [sp, #20]
   88f26:	e40d      	b.n	88744 <_vfiprintf_r+0x2b0>
   88f28:	aa0f      	add	r2, sp, #60	; 0x3c
   88f2a:	9904      	ldr	r1, [sp, #16]
   88f2c:	9806      	ldr	r0, [sp, #24]
   88f2e:	f7ff fa71 	bl	88414 <__sprint_r.part.0>
   88f32:	2800      	cmp	r0, #0
   88f34:	f47f af65 	bne.w	88e02 <_vfiprintf_r+0x96e>
   88f38:	9910      	ldr	r1, [sp, #64]	; 0x40
   88f3a:	46d1      	mov	r9, sl
   88f3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88f3e:	1c48      	adds	r0, r1, #1
   88f40:	e457      	b.n	887f2 <_vfiprintf_r+0x35e>
   88f42:	aa0f      	add	r2, sp, #60	; 0x3c
   88f44:	9904      	ldr	r1, [sp, #16]
   88f46:	9806      	ldr	r0, [sp, #24]
   88f48:	f7ff fa64 	bl	88414 <__sprint_r.part.0>
   88f4c:	2800      	cmp	r0, #0
   88f4e:	f47f af58 	bne.w	88e02 <_vfiprintf_r+0x96e>
   88f52:	9910      	ldr	r1, [sp, #64]	; 0x40
   88f54:	46d1      	mov	r9, sl
   88f56:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88f58:	1c48      	adds	r0, r1, #1
   88f5a:	e644      	b.n	88be6 <_vfiprintf_r+0x752>
   88f5c:	2a00      	cmp	r2, #0
   88f5e:	f040 8087 	bne.w	89070 <_vfiprintf_r+0xbdc>
   88f62:	2001      	movs	r0, #1
   88f64:	4611      	mov	r1, r2
   88f66:	46d1      	mov	r9, sl
   88f68:	e641      	b.n	88bee <_vfiprintf_r+0x75a>
   88f6a:	aa0f      	add	r2, sp, #60	; 0x3c
   88f6c:	9904      	ldr	r1, [sp, #16]
   88f6e:	9806      	ldr	r0, [sp, #24]
   88f70:	f7ff fa50 	bl	88414 <__sprint_r.part.0>
   88f74:	2800      	cmp	r0, #0
   88f76:	f47f af44 	bne.w	88e02 <_vfiprintf_r+0x96e>
   88f7a:	9810      	ldr	r0, [sp, #64]	; 0x40
   88f7c:	46d1      	mov	r9, sl
   88f7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88f80:	3001      	adds	r0, #1
   88f82:	e668      	b.n	88c56 <_vfiprintf_r+0x7c2>
   88f84:	46cb      	mov	fp, r9
   88f86:	e6d7      	b.n	88d38 <_vfiprintf_r+0x8a4>
   88f88:	9d07      	ldr	r5, [sp, #28]
   88f8a:	3507      	adds	r5, #7
   88f8c:	f025 0507 	bic.w	r5, r5, #7
   88f90:	f105 0208 	add.w	r2, r5, #8
   88f94:	e9d5 0100 	ldrd	r0, r1, [r5]
   88f98:	9207      	str	r2, [sp, #28]
   88f9a:	4606      	mov	r6, r0
   88f9c:	460f      	mov	r7, r1
   88f9e:	e4c5      	b.n	8892c <_vfiprintf_r+0x498>
   88fa0:	9d07      	ldr	r5, [sp, #28]
   88fa2:	3507      	adds	r5, #7
   88fa4:	f025 0207 	bic.w	r2, r5, #7
   88fa8:	f102 0108 	add.w	r1, r2, #8
   88fac:	e9d2 6700 	ldrd	r6, r7, [r2]
   88fb0:	9107      	str	r1, [sp, #28]
   88fb2:	2201      	movs	r2, #1
   88fb4:	f7ff bba7 	b.w	88706 <_vfiprintf_r+0x272>
   88fb8:	9d07      	ldr	r5, [sp, #28]
   88fba:	3507      	adds	r5, #7
   88fbc:	f025 0207 	bic.w	r2, r5, #7
   88fc0:	f102 0108 	add.w	r1, r2, #8
   88fc4:	e9d2 6700 	ldrd	r6, r7, [r2]
   88fc8:	9107      	str	r1, [sp, #28]
   88fca:	2200      	movs	r2, #0
   88fcc:	f7ff bb9b 	b.w	88706 <_vfiprintf_r+0x272>
   88fd0:	9d07      	ldr	r5, [sp, #28]
   88fd2:	3507      	adds	r5, #7
   88fd4:	f025 0107 	bic.w	r1, r5, #7
   88fd8:	f101 0008 	add.w	r0, r1, #8
   88fdc:	9007      	str	r0, [sp, #28]
   88fde:	e9d1 6700 	ldrd	r6, r7, [r1]
   88fe2:	e51c      	b.n	88a1e <_vfiprintf_r+0x58a>
   88fe4:	46d3      	mov	fp, sl
   88fe6:	f7ff bbad 	b.w	88744 <_vfiprintf_r+0x2b0>
   88fea:	252d      	movs	r5, #45	; 0x2d
   88fec:	4276      	negs	r6, r6
   88fee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   88ff2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   88ff6:	2201      	movs	r2, #1
   88ff8:	f7ff bb8a 	b.w	88710 <_vfiprintf_r+0x27c>
   88ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88ffe:	b9b3      	cbnz	r3, 8902e <_vfiprintf_r+0xb9a>
   89000:	4611      	mov	r1, r2
   89002:	2001      	movs	r0, #1
   89004:	46d1      	mov	r9, sl
   89006:	e5f2      	b.n	88bee <_vfiprintf_r+0x75a>
   89008:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8900c:	f001 fdba 	bl	8ab84 <__retarget_lock_release_recursive>
   89010:	f04f 33ff 	mov.w	r3, #4294967295
   89014:	9303      	str	r3, [sp, #12]
   89016:	f7ff bb4c 	b.w	886b2 <_vfiprintf_r+0x21e>
   8901a:	aa0f      	add	r2, sp, #60	; 0x3c
   8901c:	9904      	ldr	r1, [sp, #16]
   8901e:	9806      	ldr	r0, [sp, #24]
   89020:	f7ff f9f8 	bl	88414 <__sprint_r.part.0>
   89024:	2800      	cmp	r0, #0
   89026:	f47f aeec 	bne.w	88e02 <_vfiprintf_r+0x96e>
   8902a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8902c:	e6aa      	b.n	88d84 <_vfiprintf_r+0x8f0>
   8902e:	2202      	movs	r2, #2
   89030:	ab0e      	add	r3, sp, #56	; 0x38
   89032:	921d      	str	r2, [sp, #116]	; 0x74
   89034:	931c      	str	r3, [sp, #112]	; 0x70
   89036:	2001      	movs	r0, #1
   89038:	46d1      	mov	r9, sl
   8903a:	e5d0      	b.n	88bde <_vfiprintf_r+0x74a>
   8903c:	4d34      	ldr	r5, [pc, #208]	; (89110 <_vfiprintf_r+0xc7c>)
   8903e:	e5fd      	b.n	88c3c <_vfiprintf_r+0x7a8>
   89040:	9a07      	ldr	r2, [sp, #28]
   89042:	4613      	mov	r3, r2
   89044:	3304      	adds	r3, #4
   89046:	9307      	str	r3, [sp, #28]
   89048:	9b03      	ldr	r3, [sp, #12]
   8904a:	6811      	ldr	r1, [r2, #0]
   8904c:	17dd      	asrs	r5, r3, #31
   8904e:	461a      	mov	r2, r3
   89050:	462b      	mov	r3, r5
   89052:	e9c1 2300 	strd	r2, r3, [r1]
   89056:	f7ff ba5a 	b.w	8850e <_vfiprintf_r+0x7a>
   8905a:	4658      	mov	r0, fp
   8905c:	9507      	str	r5, [sp, #28]
   8905e:	9302      	str	r3, [sp, #8]
   89060:	f7fd fef8 	bl	86e54 <strlen>
   89064:	2400      	movs	r4, #0
   89066:	9005      	str	r0, [sp, #20]
   89068:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8906c:	f7ff bb6a 	b.w	88744 <_vfiprintf_r+0x2b0>
   89070:	aa0f      	add	r2, sp, #60	; 0x3c
   89072:	9904      	ldr	r1, [sp, #16]
   89074:	9806      	ldr	r0, [sp, #24]
   89076:	f7ff f9cd 	bl	88414 <__sprint_r.part.0>
   8907a:	2800      	cmp	r0, #0
   8907c:	f47f aec1 	bne.w	88e02 <_vfiprintf_r+0x96e>
   89080:	9910      	ldr	r1, [sp, #64]	; 0x40
   89082:	46d1      	mov	r9, sl
   89084:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89086:	1c48      	adds	r0, r1, #1
   89088:	e5b1      	b.n	88bee <_vfiprintf_r+0x75a>
   8908a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8908c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8908e:	3101      	adds	r1, #1
   89090:	4e20      	ldr	r6, [pc, #128]	; (89114 <_vfiprintf_r+0xc80>)
   89092:	f7ff bb9c 	b.w	887ce <_vfiprintf_r+0x33a>
   89096:	2c06      	cmp	r4, #6
   89098:	bf28      	it	cs
   8909a:	2406      	movcs	r4, #6
   8909c:	9507      	str	r5, [sp, #28]
   8909e:	9405      	str	r4, [sp, #20]
   890a0:	9401      	str	r4, [sp, #4]
   890a2:	f8df b074 	ldr.w	fp, [pc, #116]	; 89118 <_vfiprintf_r+0xc84>
   890a6:	e4e3      	b.n	88a70 <_vfiprintf_r+0x5dc>
   890a8:	9810      	ldr	r0, [sp, #64]	; 0x40
   890aa:	4e1a      	ldr	r6, [pc, #104]	; (89114 <_vfiprintf_r+0xc80>)
   890ac:	3001      	adds	r0, #1
   890ae:	e60e      	b.n	88cce <_vfiprintf_r+0x83a>
   890b0:	4686      	mov	lr, r0
   890b2:	4d17      	ldr	r5, [pc, #92]	; (89110 <_vfiprintf_r+0xc7c>)
   890b4:	f7ff bbe2 	b.w	8887c <_vfiprintf_r+0x3e8>
   890b8:	9405      	str	r4, [sp, #20]
   890ba:	9507      	str	r5, [sp, #28]
   890bc:	9302      	str	r3, [sp, #8]
   890be:	4604      	mov	r4, r0
   890c0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   890c4:	f7ff bb3e 	b.w	88744 <_vfiprintf_r+0x2b0>
   890c8:	9806      	ldr	r0, [sp, #24]
   890ca:	aa0f      	add	r2, sp, #60	; 0x3c
   890cc:	4659      	mov	r1, fp
   890ce:	f7ff f9a1 	bl	88414 <__sprint_r.part.0>
   890d2:	2800      	cmp	r0, #0
   890d4:	f43f ae2e 	beq.w	88d34 <_vfiprintf_r+0x8a0>
   890d8:	e62e      	b.n	88d38 <_vfiprintf_r+0x8a4>
   890da:	9907      	ldr	r1, [sp, #28]
   890dc:	f898 2001 	ldrb.w	r2, [r8, #1]
   890e0:	680c      	ldr	r4, [r1, #0]
   890e2:	3104      	adds	r1, #4
   890e4:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   890e8:	46b8      	mov	r8, r7
   890ea:	9107      	str	r1, [sp, #28]
   890ec:	f7ff ba44 	b.w	88578 <_vfiprintf_r+0xe4>
   890f0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   890f4:	e4a7      	b.n	88a46 <_vfiprintf_r+0x5b2>
   890f6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   890fa:	e521      	b.n	88b40 <_vfiprintf_r+0x6ac>
   890fc:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89100:	e47c      	b.n	889fc <_vfiprintf_r+0x568>
   89102:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89106:	e43f      	b.n	88988 <_vfiprintf_r+0x4f4>
   89108:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8910c:	f7ff bbfa 	b.w	88904 <_vfiprintf_r+0x470>
   89110:	0008cd08 	.word	0x0008cd08
   89114:	0008ccf8 	.word	0x0008ccf8
   89118:	0008cccc 	.word	0x0008cccc

0008911c <__sbprintf>:
   8911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89120:	460c      	mov	r4, r1
   89122:	f04f 0e00 	mov.w	lr, #0
   89126:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8912a:	4606      	mov	r6, r0
   8912c:	4617      	mov	r7, r2
   8912e:	4698      	mov	r8, r3
   89130:	6e62      	ldr	r2, [r4, #100]	; 0x64
   89132:	89e3      	ldrh	r3, [r4, #14]
   89134:	8989      	ldrh	r1, [r1, #12]
   89136:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8913a:	f021 0102 	bic.w	r1, r1, #2
   8913e:	9219      	str	r2, [sp, #100]	; 0x64
   89140:	f8ad 300e 	strh.w	r3, [sp, #14]
   89144:	69e2      	ldr	r2, [r4, #28]
   89146:	6a63      	ldr	r3, [r4, #36]	; 0x24
   89148:	f8ad 100c 	strh.w	r1, [sp, #12]
   8914c:	a816      	add	r0, sp, #88	; 0x58
   8914e:	a91a      	add	r1, sp, #104	; 0x68
   89150:	f8cd e018 	str.w	lr, [sp, #24]
   89154:	9207      	str	r2, [sp, #28]
   89156:	9309      	str	r3, [sp, #36]	; 0x24
   89158:	9100      	str	r1, [sp, #0]
   8915a:	9104      	str	r1, [sp, #16]
   8915c:	9502      	str	r5, [sp, #8]
   8915e:	9505      	str	r5, [sp, #20]
   89160:	f001 fd0a 	bl	8ab78 <__retarget_lock_init_recursive>
   89164:	4643      	mov	r3, r8
   89166:	463a      	mov	r2, r7
   89168:	4669      	mov	r1, sp
   8916a:	4630      	mov	r0, r6
   8916c:	f7ff f992 	bl	88494 <_vfiprintf_r>
   89170:	1e05      	subs	r5, r0, #0
   89172:	db07      	blt.n	89184 <__sbprintf+0x68>
   89174:	4630      	mov	r0, r6
   89176:	4669      	mov	r1, sp
   89178:	f001 f8dc 	bl	8a334 <_fflush_r>
   8917c:	2800      	cmp	r0, #0
   8917e:	bf18      	it	ne
   89180:	f04f 35ff 	movne.w	r5, #4294967295
   89184:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   89188:	065b      	lsls	r3, r3, #25
   8918a:	d503      	bpl.n	89194 <__sbprintf+0x78>
   8918c:	89a3      	ldrh	r3, [r4, #12]
   8918e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89192:	81a3      	strh	r3, [r4, #12]
   89194:	9816      	ldr	r0, [sp, #88]	; 0x58
   89196:	f001 fcf1 	bl	8ab7c <__retarget_lock_close_recursive>
   8919a:	4628      	mov	r0, r5
   8919c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   891a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000891a4 <__swsetup_r>:
   891a4:	b538      	push	{r3, r4, r5, lr}
   891a6:	4b30      	ldr	r3, [pc, #192]	; (89268 <__swsetup_r+0xc4>)
   891a8:	4605      	mov	r5, r0
   891aa:	6818      	ldr	r0, [r3, #0]
   891ac:	460c      	mov	r4, r1
   891ae:	b110      	cbz	r0, 891b6 <__swsetup_r+0x12>
   891b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   891b2:	2b00      	cmp	r3, #0
   891b4:	d038      	beq.n	89228 <__swsetup_r+0x84>
   891b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   891ba:	b293      	uxth	r3, r2
   891bc:	0718      	lsls	r0, r3, #28
   891be:	d50c      	bpl.n	891da <__swsetup_r+0x36>
   891c0:	6920      	ldr	r0, [r4, #16]
   891c2:	b1a8      	cbz	r0, 891f0 <__swsetup_r+0x4c>
   891c4:	f013 0201 	ands.w	r2, r3, #1
   891c8:	d01e      	beq.n	89208 <__swsetup_r+0x64>
   891ca:	2200      	movs	r2, #0
   891cc:	6963      	ldr	r3, [r4, #20]
   891ce:	60a2      	str	r2, [r4, #8]
   891d0:	425b      	negs	r3, r3
   891d2:	61a3      	str	r3, [r4, #24]
   891d4:	b1f0      	cbz	r0, 89214 <__swsetup_r+0x70>
   891d6:	2000      	movs	r0, #0
   891d8:	bd38      	pop	{r3, r4, r5, pc}
   891da:	06d9      	lsls	r1, r3, #27
   891dc:	d53b      	bpl.n	89256 <__swsetup_r+0xb2>
   891de:	0758      	lsls	r0, r3, #29
   891e0:	d425      	bmi.n	8922e <__swsetup_r+0x8a>
   891e2:	6920      	ldr	r0, [r4, #16]
   891e4:	f042 0308 	orr.w	r3, r2, #8
   891e8:	81a3      	strh	r3, [r4, #12]
   891ea:	b29b      	uxth	r3, r3
   891ec:	2800      	cmp	r0, #0
   891ee:	d1e9      	bne.n	891c4 <__swsetup_r+0x20>
   891f0:	f403 7220 	and.w	r2, r3, #640	; 0x280
   891f4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   891f8:	d0e4      	beq.n	891c4 <__swsetup_r+0x20>
   891fa:	4628      	mov	r0, r5
   891fc:	4621      	mov	r1, r4
   891fe:	f001 fcf1 	bl	8abe4 <__smakebuf_r>
   89202:	89a3      	ldrh	r3, [r4, #12]
   89204:	6920      	ldr	r0, [r4, #16]
   89206:	e7dd      	b.n	891c4 <__swsetup_r+0x20>
   89208:	0799      	lsls	r1, r3, #30
   8920a:	bf58      	it	pl
   8920c:	6962      	ldrpl	r2, [r4, #20]
   8920e:	60a2      	str	r2, [r4, #8]
   89210:	2800      	cmp	r0, #0
   89212:	d1e0      	bne.n	891d6 <__swsetup_r+0x32>
   89214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89218:	061a      	lsls	r2, r3, #24
   8921a:	d5dd      	bpl.n	891d8 <__swsetup_r+0x34>
   8921c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89220:	81a3      	strh	r3, [r4, #12]
   89222:	f04f 30ff 	mov.w	r0, #4294967295
   89226:	bd38      	pop	{r3, r4, r5, pc}
   89228:	f001 f8dc 	bl	8a3e4 <__sinit>
   8922c:	e7c3      	b.n	891b6 <__swsetup_r+0x12>
   8922e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89230:	b151      	cbz	r1, 89248 <__swsetup_r+0xa4>
   89232:	f104 0340 	add.w	r3, r4, #64	; 0x40
   89236:	4299      	cmp	r1, r3
   89238:	d004      	beq.n	89244 <__swsetup_r+0xa0>
   8923a:	4628      	mov	r0, r5
   8923c:	f001 f9f8 	bl	8a630 <_free_r>
   89240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   89244:	2300      	movs	r3, #0
   89246:	6323      	str	r3, [r4, #48]	; 0x30
   89248:	2300      	movs	r3, #0
   8924a:	6920      	ldr	r0, [r4, #16]
   8924c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   89250:	e884 0009 	stmia.w	r4, {r0, r3}
   89254:	e7c6      	b.n	891e4 <__swsetup_r+0x40>
   89256:	2309      	movs	r3, #9
   89258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8925c:	602b      	str	r3, [r5, #0]
   8925e:	f04f 30ff 	mov.w	r0, #4294967295
   89262:	81a2      	strh	r2, [r4, #12]
   89264:	bd38      	pop	{r3, r4, r5, pc}
   89266:	bf00      	nop
   89268:	20000b8c 	.word	0x20000b8c

0008926c <register_fini>:
   8926c:	4b02      	ldr	r3, [pc, #8]	; (89278 <register_fini+0xc>)
   8926e:	b113      	cbz	r3, 89276 <register_fini+0xa>
   89270:	4802      	ldr	r0, [pc, #8]	; (8927c <register_fini+0x10>)
   89272:	f000 b805 	b.w	89280 <atexit>
   89276:	4770      	bx	lr
   89278:	00000000 	.word	0x00000000
   8927c:	0008a45d 	.word	0x0008a45d

00089280 <atexit>:
   89280:	2300      	movs	r3, #0
   89282:	4601      	mov	r1, r0
   89284:	461a      	mov	r2, r3
   89286:	4618      	mov	r0, r3
   89288:	f002 be96 	b.w	8bfb8 <__register_exitproc>

0008928c <quorem>:
   8928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89290:	6903      	ldr	r3, [r0, #16]
   89292:	690f      	ldr	r7, [r1, #16]
   89294:	b083      	sub	sp, #12
   89296:	429f      	cmp	r7, r3
   89298:	f300 8088 	bgt.w	893ac <quorem+0x120>
   8929c:	3f01      	subs	r7, #1
   8929e:	f101 0614 	add.w	r6, r1, #20
   892a2:	f100 0a14 	add.w	sl, r0, #20
   892a6:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   892aa:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   892ae:	3301      	adds	r3, #1
   892b0:	fbb2 f8f3 	udiv	r8, r2, r3
   892b4:	00bb      	lsls	r3, r7, #2
   892b6:	9300      	str	r3, [sp, #0]
   892b8:	eb06 0903 	add.w	r9, r6, r3
   892bc:	4453      	add	r3, sl
   892be:	9301      	str	r3, [sp, #4]
   892c0:	f1b8 0f00 	cmp.w	r8, #0
   892c4:	d03b      	beq.n	8933e <quorem+0xb2>
   892c6:	2300      	movs	r3, #0
   892c8:	46b4      	mov	ip, r6
   892ca:	461c      	mov	r4, r3
   892cc:	46d6      	mov	lr, sl
   892ce:	f85c 2b04 	ldr.w	r2, [ip], #4
   892d2:	f8de 5000 	ldr.w	r5, [lr]
   892d6:	fa1f fb82 	uxth.w	fp, r2
   892da:	fb08 330b 	mla	r3, r8, fp, r3
   892de:	0c12      	lsrs	r2, r2, #16
   892e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   892e4:	fb08 bb02 	mla	fp, r8, r2, fp
   892e8:	b29a      	uxth	r2, r3
   892ea:	1aa2      	subs	r2, r4, r2
   892ec:	b2ab      	uxth	r3, r5
   892ee:	fa1f f48b 	uxth.w	r4, fp
   892f2:	441a      	add	r2, r3
   892f4:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   892f8:	eb04 4422 	add.w	r4, r4, r2, asr #16
   892fc:	b292      	uxth	r2, r2
   892fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   89302:	45e1      	cmp	r9, ip
   89304:	f84e 2b04 	str.w	r2, [lr], #4
   89308:	ea4f 4424 	mov.w	r4, r4, asr #16
   8930c:	ea4f 431b 	mov.w	r3, fp, lsr #16
   89310:	d2dd      	bcs.n	892ce <quorem+0x42>
   89312:	9b00      	ldr	r3, [sp, #0]
   89314:	f85a 3003 	ldr.w	r3, [sl, r3]
   89318:	b98b      	cbnz	r3, 8933e <quorem+0xb2>
   8931a:	9c01      	ldr	r4, [sp, #4]
   8931c:	1f23      	subs	r3, r4, #4
   8931e:	459a      	cmp	sl, r3
   89320:	d20c      	bcs.n	8933c <quorem+0xb0>
   89322:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89326:	b94b      	cbnz	r3, 8933c <quorem+0xb0>
   89328:	f1a4 0308 	sub.w	r3, r4, #8
   8932c:	e002      	b.n	89334 <quorem+0xa8>
   8932e:	681a      	ldr	r2, [r3, #0]
   89330:	3b04      	subs	r3, #4
   89332:	b91a      	cbnz	r2, 8933c <quorem+0xb0>
   89334:	459a      	cmp	sl, r3
   89336:	f107 37ff 	add.w	r7, r7, #4294967295
   8933a:	d3f8      	bcc.n	8932e <quorem+0xa2>
   8933c:	6107      	str	r7, [r0, #16]
   8933e:	4604      	mov	r4, r0
   89340:	f002 fa0e 	bl	8b760 <__mcmp>
   89344:	2800      	cmp	r0, #0
   89346:	db2d      	blt.n	893a4 <quorem+0x118>
   89348:	4655      	mov	r5, sl
   8934a:	2300      	movs	r3, #0
   8934c:	f108 0801 	add.w	r8, r8, #1
   89350:	f856 1b04 	ldr.w	r1, [r6], #4
   89354:	6828      	ldr	r0, [r5, #0]
   89356:	b28a      	uxth	r2, r1
   89358:	1a9a      	subs	r2, r3, r2
   8935a:	0c0b      	lsrs	r3, r1, #16
   8935c:	b281      	uxth	r1, r0
   8935e:	440a      	add	r2, r1
   89360:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   89364:	eb03 4322 	add.w	r3, r3, r2, asr #16
   89368:	b292      	uxth	r2, r2
   8936a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8936e:	45b1      	cmp	r9, r6
   89370:	f845 2b04 	str.w	r2, [r5], #4
   89374:	ea4f 4323 	mov.w	r3, r3, asr #16
   89378:	d2ea      	bcs.n	89350 <quorem+0xc4>
   8937a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8937e:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   89382:	b97a      	cbnz	r2, 893a4 <quorem+0x118>
   89384:	1f1a      	subs	r2, r3, #4
   89386:	4592      	cmp	sl, r2
   89388:	d20b      	bcs.n	893a2 <quorem+0x116>
   8938a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   8938e:	b942      	cbnz	r2, 893a2 <quorem+0x116>
   89390:	3b08      	subs	r3, #8
   89392:	e002      	b.n	8939a <quorem+0x10e>
   89394:	681a      	ldr	r2, [r3, #0]
   89396:	3b04      	subs	r3, #4
   89398:	b91a      	cbnz	r2, 893a2 <quorem+0x116>
   8939a:	459a      	cmp	sl, r3
   8939c:	f107 37ff 	add.w	r7, r7, #4294967295
   893a0:	d3f8      	bcc.n	89394 <quorem+0x108>
   893a2:	6127      	str	r7, [r4, #16]
   893a4:	4640      	mov	r0, r8
   893a6:	b003      	add	sp, #12
   893a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   893ac:	2000      	movs	r0, #0
   893ae:	b003      	add	sp, #12
   893b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   893b4:	0000      	movs	r0, r0
	...

000893b8 <_dtoa_r>:
   893b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   893bc:	6c05      	ldr	r5, [r0, #64]	; 0x40
   893be:	b09b      	sub	sp, #108	; 0x6c
   893c0:	4604      	mov	r4, r0
   893c2:	4692      	mov	sl, r2
   893c4:	469b      	mov	fp, r3
   893c6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   893c8:	b14d      	cbz	r5, 893de <_dtoa_r+0x26>
   893ca:	2301      	movs	r3, #1
   893cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   893ce:	4629      	mov	r1, r5
   893d0:	4093      	lsls	r3, r2
   893d2:	60ab      	str	r3, [r5, #8]
   893d4:	606a      	str	r2, [r5, #4]
   893d6:	f001 ffeb 	bl	8b3b0 <_Bfree>
   893da:	2300      	movs	r3, #0
   893dc:	6423      	str	r3, [r4, #64]	; 0x40
   893de:	f1bb 0f00 	cmp.w	fp, #0
   893e2:	465d      	mov	r5, fp
   893e4:	db35      	blt.n	89452 <_dtoa_r+0x9a>
   893e6:	2300      	movs	r3, #0
   893e8:	6033      	str	r3, [r6, #0]
   893ea:	4b9d      	ldr	r3, [pc, #628]	; (89660 <_dtoa_r+0x2a8>)
   893ec:	43ab      	bics	r3, r5
   893ee:	d015      	beq.n	8941c <_dtoa_r+0x64>
   893f0:	2200      	movs	r2, #0
   893f2:	2300      	movs	r3, #0
   893f4:	4650      	mov	r0, sl
   893f6:	4659      	mov	r1, fp
   893f8:	f003 fb56 	bl	8caa8 <__aeabi_dcmpeq>
   893fc:	4680      	mov	r8, r0
   893fe:	2800      	cmp	r0, #0
   89400:	d02d      	beq.n	8945e <_dtoa_r+0xa6>
   89402:	2301      	movs	r3, #1
   89404:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89406:	6013      	str	r3, [r2, #0]
   89408:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8940a:	2b00      	cmp	r3, #0
   8940c:	f000 80bd 	beq.w	8958a <_dtoa_r+0x1d2>
   89410:	4894      	ldr	r0, [pc, #592]	; (89664 <_dtoa_r+0x2ac>)
   89412:	6018      	str	r0, [r3, #0]
   89414:	3801      	subs	r0, #1
   89416:	b01b      	add	sp, #108	; 0x6c
   89418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8941c:	f242 730f 	movw	r3, #9999	; 0x270f
   89420:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89422:	6013      	str	r3, [r2, #0]
   89424:	f1ba 0f00 	cmp.w	sl, #0
   89428:	d10d      	bne.n	89446 <_dtoa_r+0x8e>
   8942a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   8942e:	b955      	cbnz	r5, 89446 <_dtoa_r+0x8e>
   89430:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89432:	488d      	ldr	r0, [pc, #564]	; (89668 <_dtoa_r+0x2b0>)
   89434:	2b00      	cmp	r3, #0
   89436:	d0ee      	beq.n	89416 <_dtoa_r+0x5e>
   89438:	f100 0308 	add.w	r3, r0, #8
   8943c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8943e:	6013      	str	r3, [r2, #0]
   89440:	b01b      	add	sp, #108	; 0x6c
   89442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89446:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89448:	4888      	ldr	r0, [pc, #544]	; (8966c <_dtoa_r+0x2b4>)
   8944a:	2b00      	cmp	r3, #0
   8944c:	d0e3      	beq.n	89416 <_dtoa_r+0x5e>
   8944e:	1cc3      	adds	r3, r0, #3
   89450:	e7f4      	b.n	8943c <_dtoa_r+0x84>
   89452:	2301      	movs	r3, #1
   89454:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   89458:	6033      	str	r3, [r6, #0]
   8945a:	46ab      	mov	fp, r5
   8945c:	e7c5      	b.n	893ea <_dtoa_r+0x32>
   8945e:	aa18      	add	r2, sp, #96	; 0x60
   89460:	ab19      	add	r3, sp, #100	; 0x64
   89462:	9201      	str	r2, [sp, #4]
   89464:	9300      	str	r3, [sp, #0]
   89466:	4652      	mov	r2, sl
   89468:	465b      	mov	r3, fp
   8946a:	4620      	mov	r0, r4
   8946c:	f002 fa22 	bl	8b8b4 <__d2b>
   89470:	0d2b      	lsrs	r3, r5, #20
   89472:	4681      	mov	r9, r0
   89474:	d071      	beq.n	8955a <_dtoa_r+0x1a2>
   89476:	4650      	mov	r0, sl
   89478:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8947c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   89480:	9f18      	ldr	r7, [sp, #96]	; 0x60
   89482:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   89486:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8948a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8948e:	2200      	movs	r2, #0
   89490:	4b77      	ldr	r3, [pc, #476]	; (89670 <_dtoa_r+0x2b8>)
   89492:	f002 feed 	bl	8c270 <__aeabi_dsub>
   89496:	a36c      	add	r3, pc, #432	; (adr r3, 89648 <_dtoa_r+0x290>)
   89498:	e9d3 2300 	ldrd	r2, r3, [r3]
   8949c:	f003 f89c 	bl	8c5d8 <__aeabi_dmul>
   894a0:	a36b      	add	r3, pc, #428	; (adr r3, 89650 <_dtoa_r+0x298>)
   894a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   894a6:	f002 fee5 	bl	8c274 <__adddf3>
   894aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   894ae:	4630      	mov	r0, r6
   894b0:	f003 f82c 	bl	8c50c <__aeabi_i2d>
   894b4:	a368      	add	r3, pc, #416	; (adr r3, 89658 <_dtoa_r+0x2a0>)
   894b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   894ba:	f003 f88d 	bl	8c5d8 <__aeabi_dmul>
   894be:	4602      	mov	r2, r0
   894c0:	460b      	mov	r3, r1
   894c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   894c6:	f002 fed5 	bl	8c274 <__adddf3>
   894ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   894ce:	f003 fb33 	bl	8cb38 <__aeabi_d2iz>
   894d2:	2200      	movs	r2, #0
   894d4:	9002      	str	r0, [sp, #8]
   894d6:	2300      	movs	r3, #0
   894d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   894dc:	f003 faee 	bl	8cabc <__aeabi_dcmplt>
   894e0:	2800      	cmp	r0, #0
   894e2:	f040 816d 	bne.w	897c0 <_dtoa_r+0x408>
   894e6:	9d02      	ldr	r5, [sp, #8]
   894e8:	2d16      	cmp	r5, #22
   894ea:	f200 8157 	bhi.w	8979c <_dtoa_r+0x3e4>
   894ee:	4961      	ldr	r1, [pc, #388]	; (89674 <_dtoa_r+0x2bc>)
   894f0:	4652      	mov	r2, sl
   894f2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   894f6:	465b      	mov	r3, fp
   894f8:	e9d1 0100 	ldrd	r0, r1, [r1]
   894fc:	f003 fafc 	bl	8caf8 <__aeabi_dcmpgt>
   89500:	2800      	cmp	r0, #0
   89502:	f000 81be 	beq.w	89882 <_dtoa_r+0x4ca>
   89506:	1e6b      	subs	r3, r5, #1
   89508:	9302      	str	r3, [sp, #8]
   8950a:	2300      	movs	r3, #0
   8950c:	930e      	str	r3, [sp, #56]	; 0x38
   8950e:	1bbf      	subs	r7, r7, r6
   89510:	1e7b      	subs	r3, r7, #1
   89512:	9308      	str	r3, [sp, #32]
   89514:	f100 814e 	bmi.w	897b4 <_dtoa_r+0x3fc>
   89518:	2300      	movs	r3, #0
   8951a:	930a      	str	r3, [sp, #40]	; 0x28
   8951c:	9b02      	ldr	r3, [sp, #8]
   8951e:	2b00      	cmp	r3, #0
   89520:	f2c0 813f 	blt.w	897a2 <_dtoa_r+0x3ea>
   89524:	9a08      	ldr	r2, [sp, #32]
   89526:	930d      	str	r3, [sp, #52]	; 0x34
   89528:	4611      	mov	r1, r2
   8952a:	4419      	add	r1, r3
   8952c:	2300      	movs	r3, #0
   8952e:	9108      	str	r1, [sp, #32]
   89530:	930c      	str	r3, [sp, #48]	; 0x30
   89532:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89534:	2b09      	cmp	r3, #9
   89536:	d82a      	bhi.n	8958e <_dtoa_r+0x1d6>
   89538:	2b05      	cmp	r3, #5
   8953a:	f340 8658 	ble.w	8a1ee <_dtoa_r+0xe36>
   8953e:	2500      	movs	r5, #0
   89540:	3b04      	subs	r3, #4
   89542:	9324      	str	r3, [sp, #144]	; 0x90
   89544:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89546:	3b02      	subs	r3, #2
   89548:	2b03      	cmp	r3, #3
   8954a:	f200 863f 	bhi.w	8a1cc <_dtoa_r+0xe14>
   8954e:	e8df f013 	tbh	[pc, r3, lsl #1]
   89552:	03ce      	.short	0x03ce
   89554:	03d902c3 	.word	0x03d902c3
   89558:	045b      	.short	0x045b
   8955a:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8955c:	9e19      	ldr	r6, [sp, #100]	; 0x64
   8955e:	443e      	add	r6, r7
   89560:	f206 4332 	addw	r3, r6, #1074	; 0x432
   89564:	2b20      	cmp	r3, #32
   89566:	f340 8187 	ble.w	89878 <_dtoa_r+0x4c0>
   8956a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   8956e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   89572:	409d      	lsls	r5, r3
   89574:	fa2a f000 	lsr.w	r0, sl, r0
   89578:	4328      	orrs	r0, r5
   8957a:	f002 ffb7 	bl	8c4ec <__aeabi_ui2d>
   8957e:	2301      	movs	r3, #1
   89580:	3e01      	subs	r6, #1
   89582:	9314      	str	r3, [sp, #80]	; 0x50
   89584:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   89588:	e781      	b.n	8948e <_dtoa_r+0xd6>
   8958a:	483b      	ldr	r0, [pc, #236]	; (89678 <_dtoa_r+0x2c0>)
   8958c:	e743      	b.n	89416 <_dtoa_r+0x5e>
   8958e:	2100      	movs	r1, #0
   89590:	4620      	mov	r0, r4
   89592:	6461      	str	r1, [r4, #68]	; 0x44
   89594:	9125      	str	r1, [sp, #148]	; 0x94
   89596:	f001 fee5 	bl	8b364 <_Balloc>
   8959a:	f04f 33ff 	mov.w	r3, #4294967295
   8959e:	9307      	str	r3, [sp, #28]
   895a0:	930f      	str	r3, [sp, #60]	; 0x3c
   895a2:	2301      	movs	r3, #1
   895a4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   895a6:	9004      	str	r0, [sp, #16]
   895a8:	6420      	str	r0, [r4, #64]	; 0x40
   895aa:	9224      	str	r2, [sp, #144]	; 0x90
   895ac:	930b      	str	r3, [sp, #44]	; 0x2c
   895ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
   895b0:	2b00      	cmp	r3, #0
   895b2:	f2c0 80d3 	blt.w	8975c <_dtoa_r+0x3a4>
   895b6:	9a02      	ldr	r2, [sp, #8]
   895b8:	2a0e      	cmp	r2, #14
   895ba:	f300 80cf 	bgt.w	8975c <_dtoa_r+0x3a4>
   895be:	4b2d      	ldr	r3, [pc, #180]	; (89674 <_dtoa_r+0x2bc>)
   895c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   895c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   895c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   895cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   895ce:	2b00      	cmp	r3, #0
   895d0:	f2c0 83b4 	blt.w	89d3c <_dtoa_r+0x984>
   895d4:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   895d8:	4650      	mov	r0, sl
   895da:	462a      	mov	r2, r5
   895dc:	4633      	mov	r3, r6
   895de:	4659      	mov	r1, fp
   895e0:	f003 f924 	bl	8c82c <__aeabi_ddiv>
   895e4:	f003 faa8 	bl	8cb38 <__aeabi_d2iz>
   895e8:	4680      	mov	r8, r0
   895ea:	f002 ff8f 	bl	8c50c <__aeabi_i2d>
   895ee:	462a      	mov	r2, r5
   895f0:	4633      	mov	r3, r6
   895f2:	f002 fff1 	bl	8c5d8 <__aeabi_dmul>
   895f6:	4602      	mov	r2, r0
   895f8:	460b      	mov	r3, r1
   895fa:	4650      	mov	r0, sl
   895fc:	4659      	mov	r1, fp
   895fe:	f002 fe37 	bl	8c270 <__aeabi_dsub>
   89602:	9e07      	ldr	r6, [sp, #28]
   89604:	9f04      	ldr	r7, [sp, #16]
   89606:	f108 0530 	add.w	r5, r8, #48	; 0x30
   8960a:	2e01      	cmp	r6, #1
   8960c:	703d      	strb	r5, [r7, #0]
   8960e:	4602      	mov	r2, r0
   89610:	460b      	mov	r3, r1
   89612:	f107 0501 	add.w	r5, r7, #1
   89616:	d064      	beq.n	896e2 <_dtoa_r+0x32a>
   89618:	2200      	movs	r2, #0
   8961a:	4b18      	ldr	r3, [pc, #96]	; (8967c <_dtoa_r+0x2c4>)
   8961c:	f002 ffdc 	bl	8c5d8 <__aeabi_dmul>
   89620:	2200      	movs	r2, #0
   89622:	2300      	movs	r3, #0
   89624:	4606      	mov	r6, r0
   89626:	460f      	mov	r7, r1
   89628:	f003 fa3e 	bl	8caa8 <__aeabi_dcmpeq>
   8962c:	2800      	cmp	r0, #0
   8962e:	f040 8082 	bne.w	89736 <_dtoa_r+0x37e>
   89632:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   89636:	f04f 0a00 	mov.w	sl, #0
   8963a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   8963e:	f04f 0b00 	mov.w	fp, #0
   89642:	940b      	str	r4, [sp, #44]	; 0x2c
   89644:	e029      	b.n	8969a <_dtoa_r+0x2e2>
   89646:	bf00      	nop
   89648:	636f4361 	.word	0x636f4361
   8964c:	3fd287a7 	.word	0x3fd287a7
   89650:	8b60c8b3 	.word	0x8b60c8b3
   89654:	3fc68a28 	.word	0x3fc68a28
   89658:	509f79fb 	.word	0x509f79fb
   8965c:	3fd34413 	.word	0x3fd34413
   89660:	7ff00000 	.word	0x7ff00000
   89664:	0008ccd5 	.word	0x0008ccd5
   89668:	0008cd18 	.word	0x0008cd18
   8966c:	0008cd24 	.word	0x0008cd24
   89670:	3ff80000 	.word	0x3ff80000
   89674:	0008cd60 	.word	0x0008cd60
   89678:	0008ccd4 	.word	0x0008ccd4
   8967c:	40240000 	.word	0x40240000
   89680:	2200      	movs	r2, #0
   89682:	4b81      	ldr	r3, [pc, #516]	; (89888 <_dtoa_r+0x4d0>)
   89684:	f002 ffa8 	bl	8c5d8 <__aeabi_dmul>
   89688:	4652      	mov	r2, sl
   8968a:	465b      	mov	r3, fp
   8968c:	4606      	mov	r6, r0
   8968e:	460f      	mov	r7, r1
   89690:	f003 fa0a 	bl	8caa8 <__aeabi_dcmpeq>
   89694:	2800      	cmp	r0, #0
   89696:	f040 83ba 	bne.w	89e0e <_dtoa_r+0xa56>
   8969a:	4642      	mov	r2, r8
   8969c:	464b      	mov	r3, r9
   8969e:	4630      	mov	r0, r6
   896a0:	4639      	mov	r1, r7
   896a2:	f003 f8c3 	bl	8c82c <__aeabi_ddiv>
   896a6:	f003 fa47 	bl	8cb38 <__aeabi_d2iz>
   896aa:	4604      	mov	r4, r0
   896ac:	f002 ff2e 	bl	8c50c <__aeabi_i2d>
   896b0:	4642      	mov	r2, r8
   896b2:	464b      	mov	r3, r9
   896b4:	f002 ff90 	bl	8c5d8 <__aeabi_dmul>
   896b8:	4602      	mov	r2, r0
   896ba:	460b      	mov	r3, r1
   896bc:	4630      	mov	r0, r6
   896be:	4639      	mov	r1, r7
   896c0:	f002 fdd6 	bl	8c270 <__aeabi_dsub>
   896c4:	f104 0630 	add.w	r6, r4, #48	; 0x30
   896c8:	f805 6b01 	strb.w	r6, [r5], #1
   896cc:	9e04      	ldr	r6, [sp, #16]
   896ce:	9f07      	ldr	r7, [sp, #28]
   896d0:	1bae      	subs	r6, r5, r6
   896d2:	42be      	cmp	r6, r7
   896d4:	4602      	mov	r2, r0
   896d6:	460b      	mov	r3, r1
   896d8:	d1d2      	bne.n	89680 <_dtoa_r+0x2c8>
   896da:	46a0      	mov	r8, r4
   896dc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   896e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   896e2:	4610      	mov	r0, r2
   896e4:	4619      	mov	r1, r3
   896e6:	f002 fdc5 	bl	8c274 <__adddf3>
   896ea:	4606      	mov	r6, r0
   896ec:	460f      	mov	r7, r1
   896ee:	4602      	mov	r2, r0
   896f0:	460b      	mov	r3, r1
   896f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   896f6:	f003 f9e1 	bl	8cabc <__aeabi_dcmplt>
   896fa:	b948      	cbnz	r0, 89710 <_dtoa_r+0x358>
   896fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89700:	4632      	mov	r2, r6
   89702:	463b      	mov	r3, r7
   89704:	f003 f9d0 	bl	8caa8 <__aeabi_dcmpeq>
   89708:	b1a8      	cbz	r0, 89736 <_dtoa_r+0x37e>
   8970a:	f018 0f01 	tst.w	r8, #1
   8970e:	d012      	beq.n	89736 <_dtoa_r+0x37e>
   89710:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   89714:	1e6b      	subs	r3, r5, #1
   89716:	9a04      	ldr	r2, [sp, #16]
   89718:	e004      	b.n	89724 <_dtoa_r+0x36c>
   8971a:	429a      	cmp	r2, r3
   8971c:	f000 8402 	beq.w	89f24 <_dtoa_r+0xb6c>
   89720:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   89724:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   89728:	f103 0501 	add.w	r5, r3, #1
   8972c:	d0f5      	beq.n	8971a <_dtoa_r+0x362>
   8972e:	f108 0801 	add.w	r8, r8, #1
   89732:	f883 8000 	strb.w	r8, [r3]
   89736:	4649      	mov	r1, r9
   89738:	4620      	mov	r0, r4
   8973a:	f001 fe39 	bl	8b3b0 <_Bfree>
   8973e:	2200      	movs	r2, #0
   89740:	9b02      	ldr	r3, [sp, #8]
   89742:	702a      	strb	r2, [r5, #0]
   89744:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89746:	3301      	adds	r3, #1
   89748:	6013      	str	r3, [r2, #0]
   8974a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8974c:	2b00      	cmp	r3, #0
   8974e:	f000 839f 	beq.w	89e90 <_dtoa_r+0xad8>
   89752:	9804      	ldr	r0, [sp, #16]
   89754:	601d      	str	r5, [r3, #0]
   89756:	b01b      	add	sp, #108	; 0x6c
   89758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8975c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8975e:	2a00      	cmp	r2, #0
   89760:	d03e      	beq.n	897e0 <_dtoa_r+0x428>
   89762:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89764:	2a01      	cmp	r2, #1
   89766:	f340 8311 	ble.w	89d8c <_dtoa_r+0x9d4>
   8976a:	9b07      	ldr	r3, [sp, #28]
   8976c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8976e:	1e5f      	subs	r7, r3, #1
   89770:	42ba      	cmp	r2, r7
   89772:	f2c0 8390 	blt.w	89e96 <_dtoa_r+0xade>
   89776:	1bd7      	subs	r7, r2, r7
   89778:	9b07      	ldr	r3, [sp, #28]
   8977a:	2b00      	cmp	r3, #0
   8977c:	f2c0 848c 	blt.w	8a098 <_dtoa_r+0xce0>
   89780:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   89782:	9b07      	ldr	r3, [sp, #28]
   89784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89786:	2101      	movs	r1, #1
   89788:	441a      	add	r2, r3
   8978a:	920a      	str	r2, [sp, #40]	; 0x28
   8978c:	9a08      	ldr	r2, [sp, #32]
   8978e:	4620      	mov	r0, r4
   89790:	441a      	add	r2, r3
   89792:	9208      	str	r2, [sp, #32]
   89794:	f001 fea8 	bl	8b4e8 <__i2b>
   89798:	4606      	mov	r6, r0
   8979a:	e023      	b.n	897e4 <_dtoa_r+0x42c>
   8979c:	2301      	movs	r3, #1
   8979e:	930e      	str	r3, [sp, #56]	; 0x38
   897a0:	e6b5      	b.n	8950e <_dtoa_r+0x156>
   897a2:	2300      	movs	r3, #0
   897a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   897a6:	930d      	str	r3, [sp, #52]	; 0x34
   897a8:	9b02      	ldr	r3, [sp, #8]
   897aa:	1ad2      	subs	r2, r2, r3
   897ac:	425b      	negs	r3, r3
   897ae:	920a      	str	r2, [sp, #40]	; 0x28
   897b0:	930c      	str	r3, [sp, #48]	; 0x30
   897b2:	e6be      	b.n	89532 <_dtoa_r+0x17a>
   897b4:	f1c7 0301 	rsb	r3, r7, #1
   897b8:	930a      	str	r3, [sp, #40]	; 0x28
   897ba:	2300      	movs	r3, #0
   897bc:	9308      	str	r3, [sp, #32]
   897be:	e6ad      	b.n	8951c <_dtoa_r+0x164>
   897c0:	9d02      	ldr	r5, [sp, #8]
   897c2:	4628      	mov	r0, r5
   897c4:	f002 fea2 	bl	8c50c <__aeabi_i2d>
   897c8:	4602      	mov	r2, r0
   897ca:	460b      	mov	r3, r1
   897cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   897d0:	f003 f96a 	bl	8caa8 <__aeabi_dcmpeq>
   897d4:	2800      	cmp	r0, #0
   897d6:	f47f ae86 	bne.w	894e6 <_dtoa_r+0x12e>
   897da:	1e6b      	subs	r3, r5, #1
   897dc:	9302      	str	r3, [sp, #8]
   897de:	e682      	b.n	894e6 <_dtoa_r+0x12e>
   897e0:	ad0a      	add	r5, sp, #40	; 0x28
   897e2:	cde0      	ldmia	r5, {r5, r6, r7}
   897e4:	2d00      	cmp	r5, #0
   897e6:	dd0c      	ble.n	89802 <_dtoa_r+0x44a>
   897e8:	9908      	ldr	r1, [sp, #32]
   897ea:	2900      	cmp	r1, #0
   897ec:	460b      	mov	r3, r1
   897ee:	dd08      	ble.n	89802 <_dtoa_r+0x44a>
   897f0:	42a9      	cmp	r1, r5
   897f2:	bfa8      	it	ge
   897f4:	462b      	movge	r3, r5
   897f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   897f8:	1aed      	subs	r5, r5, r3
   897fa:	1ad2      	subs	r2, r2, r3
   897fc:	1acb      	subs	r3, r1, r3
   897fe:	920a      	str	r2, [sp, #40]	; 0x28
   89800:	9308      	str	r3, [sp, #32]
   89802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89804:	b1d3      	cbz	r3, 8983c <_dtoa_r+0x484>
   89806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89808:	2b00      	cmp	r3, #0
   8980a:	f000 82b8 	beq.w	89d7e <_dtoa_r+0x9c6>
   8980e:	2f00      	cmp	r7, #0
   89810:	dd10      	ble.n	89834 <_dtoa_r+0x47c>
   89812:	4631      	mov	r1, r6
   89814:	463a      	mov	r2, r7
   89816:	4620      	mov	r0, r4
   89818:	f001 ff02 	bl	8b620 <__pow5mult>
   8981c:	464a      	mov	r2, r9
   8981e:	4601      	mov	r1, r0
   89820:	4606      	mov	r6, r0
   89822:	4620      	mov	r0, r4
   89824:	f001 fe6a 	bl	8b4fc <__multiply>
   89828:	4603      	mov	r3, r0
   8982a:	4649      	mov	r1, r9
   8982c:	4620      	mov	r0, r4
   8982e:	4699      	mov	r9, r3
   89830:	f001 fdbe 	bl	8b3b0 <_Bfree>
   89834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89836:	1bda      	subs	r2, r3, r7
   89838:	f040 82a2 	bne.w	89d80 <_dtoa_r+0x9c8>
   8983c:	2101      	movs	r1, #1
   8983e:	4620      	mov	r0, r4
   89840:	f001 fe52 	bl	8b4e8 <__i2b>
   89844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89846:	4680      	mov	r8, r0
   89848:	2b00      	cmp	r3, #0
   8984a:	dd1f      	ble.n	8988c <_dtoa_r+0x4d4>
   8984c:	4601      	mov	r1, r0
   8984e:	461a      	mov	r2, r3
   89850:	4620      	mov	r0, r4
   89852:	f001 fee5 	bl	8b620 <__pow5mult>
   89856:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89858:	4680      	mov	r8, r0
   8985a:	2b01      	cmp	r3, #1
   8985c:	f340 8255 	ble.w	89d0a <_dtoa_r+0x952>
   89860:	2300      	movs	r3, #0
   89862:	930c      	str	r3, [sp, #48]	; 0x30
   89864:	f8d8 3010 	ldr.w	r3, [r8, #16]
   89868:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8986c:	6918      	ldr	r0, [r3, #16]
   8986e:	f001 fdeb 	bl	8b448 <__hi0bits>
   89872:	f1c0 0020 	rsb	r0, r0, #32
   89876:	e013      	b.n	898a0 <_dtoa_r+0x4e8>
   89878:	f1c3 0520 	rsb	r5, r3, #32
   8987c:	fa0a f005 	lsl.w	r0, sl, r5
   89880:	e67b      	b.n	8957a <_dtoa_r+0x1c2>
   89882:	900e      	str	r0, [sp, #56]	; 0x38
   89884:	e643      	b.n	8950e <_dtoa_r+0x156>
   89886:	bf00      	nop
   89888:	40240000 	.word	0x40240000
   8988c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8988e:	2b01      	cmp	r3, #1
   89890:	f340 8285 	ble.w	89d9e <_dtoa_r+0x9e6>
   89894:	2300      	movs	r3, #0
   89896:	930c      	str	r3, [sp, #48]	; 0x30
   89898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8989a:	2001      	movs	r0, #1
   8989c:	2b00      	cmp	r3, #0
   8989e:	d1e1      	bne.n	89864 <_dtoa_r+0x4ac>
   898a0:	9a08      	ldr	r2, [sp, #32]
   898a2:	4410      	add	r0, r2
   898a4:	f010 001f 	ands.w	r0, r0, #31
   898a8:	f000 80a1 	beq.w	899ee <_dtoa_r+0x636>
   898ac:	f1c0 0320 	rsb	r3, r0, #32
   898b0:	2b04      	cmp	r3, #4
   898b2:	f340 8486 	ble.w	8a1c2 <_dtoa_r+0xe0a>
   898b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   898b8:	f1c0 001c 	rsb	r0, r0, #28
   898bc:	4403      	add	r3, r0
   898be:	930a      	str	r3, [sp, #40]	; 0x28
   898c0:	4613      	mov	r3, r2
   898c2:	4403      	add	r3, r0
   898c4:	4405      	add	r5, r0
   898c6:	9308      	str	r3, [sp, #32]
   898c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   898ca:	2b00      	cmp	r3, #0
   898cc:	dd05      	ble.n	898da <_dtoa_r+0x522>
   898ce:	4649      	mov	r1, r9
   898d0:	461a      	mov	r2, r3
   898d2:	4620      	mov	r0, r4
   898d4:	f001 fef4 	bl	8b6c0 <__lshift>
   898d8:	4681      	mov	r9, r0
   898da:	9b08      	ldr	r3, [sp, #32]
   898dc:	2b00      	cmp	r3, #0
   898de:	dd05      	ble.n	898ec <_dtoa_r+0x534>
   898e0:	4641      	mov	r1, r8
   898e2:	461a      	mov	r2, r3
   898e4:	4620      	mov	r0, r4
   898e6:	f001 feeb 	bl	8b6c0 <__lshift>
   898ea:	4680      	mov	r8, r0
   898ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   898ee:	2b00      	cmp	r3, #0
   898f0:	f040 8086 	bne.w	89a00 <_dtoa_r+0x648>
   898f4:	9b07      	ldr	r3, [sp, #28]
   898f6:	2b00      	cmp	r3, #0
   898f8:	f340 8264 	ble.w	89dc4 <_dtoa_r+0xa0c>
   898fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   898fe:	2b00      	cmp	r3, #0
   89900:	f000 8098 	beq.w	89a34 <_dtoa_r+0x67c>
   89904:	2d00      	cmp	r5, #0
   89906:	dd05      	ble.n	89914 <_dtoa_r+0x55c>
   89908:	4631      	mov	r1, r6
   8990a:	462a      	mov	r2, r5
   8990c:	4620      	mov	r0, r4
   8990e:	f001 fed7 	bl	8b6c0 <__lshift>
   89912:	4606      	mov	r6, r0
   89914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89916:	2b00      	cmp	r3, #0
   89918:	f040 8336 	bne.w	89f88 <_dtoa_r+0xbd0>
   8991c:	9608      	str	r6, [sp, #32]
   8991e:	9b07      	ldr	r3, [sp, #28]
   89920:	9a04      	ldr	r2, [sp, #16]
   89922:	3b01      	subs	r3, #1
   89924:	18d3      	adds	r3, r2, r3
   89926:	930b      	str	r3, [sp, #44]	; 0x2c
   89928:	4617      	mov	r7, r2
   8992a:	f00a 0301 	and.w	r3, sl, #1
   8992e:	46c2      	mov	sl, r8
   89930:	f8dd b020 	ldr.w	fp, [sp, #32]
   89934:	930c      	str	r3, [sp, #48]	; 0x30
   89936:	4651      	mov	r1, sl
   89938:	4648      	mov	r0, r9
   8993a:	f7ff fca7 	bl	8928c <quorem>
   8993e:	4631      	mov	r1, r6
   89940:	4605      	mov	r5, r0
   89942:	4648      	mov	r0, r9
   89944:	f001 ff0c 	bl	8b760 <__mcmp>
   89948:	465a      	mov	r2, fp
   8994a:	9007      	str	r0, [sp, #28]
   8994c:	4651      	mov	r1, sl
   8994e:	4620      	mov	r0, r4
   89950:	f001 ff22 	bl	8b798 <__mdiff>
   89954:	68c2      	ldr	r2, [r0, #12]
   89956:	4680      	mov	r8, r0
   89958:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8995c:	2a00      	cmp	r2, #0
   8995e:	f040 8229 	bne.w	89db4 <_dtoa_r+0x9fc>
   89962:	4601      	mov	r1, r0
   89964:	4648      	mov	r0, r9
   89966:	930a      	str	r3, [sp, #40]	; 0x28
   89968:	f001 fefa 	bl	8b760 <__mcmp>
   8996c:	4641      	mov	r1, r8
   8996e:	9008      	str	r0, [sp, #32]
   89970:	4620      	mov	r0, r4
   89972:	f001 fd1d 	bl	8b3b0 <_Bfree>
   89976:	9a08      	ldr	r2, [sp, #32]
   89978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8997a:	b932      	cbnz	r2, 8998a <_dtoa_r+0x5d2>
   8997c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8997e:	b921      	cbnz	r1, 8998a <_dtoa_r+0x5d2>
   89980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89982:	2a00      	cmp	r2, #0
   89984:	f000 83ee 	beq.w	8a164 <_dtoa_r+0xdac>
   89988:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8998a:	9907      	ldr	r1, [sp, #28]
   8998c:	2900      	cmp	r1, #0
   8998e:	f2c0 829f 	blt.w	89ed0 <_dtoa_r+0xb18>
   89992:	d105      	bne.n	899a0 <_dtoa_r+0x5e8>
   89994:	9924      	ldr	r1, [sp, #144]	; 0x90
   89996:	b919      	cbnz	r1, 899a0 <_dtoa_r+0x5e8>
   89998:	990c      	ldr	r1, [sp, #48]	; 0x30
   8999a:	2900      	cmp	r1, #0
   8999c:	f000 8298 	beq.w	89ed0 <_dtoa_r+0xb18>
   899a0:	2a00      	cmp	r2, #0
   899a2:	f300 8305 	bgt.w	89fb0 <_dtoa_r+0xbf8>
   899a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   899a8:	f107 0801 	add.w	r8, r7, #1
   899ac:	4297      	cmp	r7, r2
   899ae:	703b      	strb	r3, [r7, #0]
   899b0:	4645      	mov	r5, r8
   899b2:	f000 830b 	beq.w	89fcc <_dtoa_r+0xc14>
   899b6:	4649      	mov	r1, r9
   899b8:	2300      	movs	r3, #0
   899ba:	220a      	movs	r2, #10
   899bc:	4620      	mov	r0, r4
   899be:	f001 fd01 	bl	8b3c4 <__multadd>
   899c2:	455e      	cmp	r6, fp
   899c4:	4681      	mov	r9, r0
   899c6:	4631      	mov	r1, r6
   899c8:	f04f 0300 	mov.w	r3, #0
   899cc:	f04f 020a 	mov.w	r2, #10
   899d0:	4620      	mov	r0, r4
   899d2:	f000 81e9 	beq.w	89da8 <_dtoa_r+0x9f0>
   899d6:	f001 fcf5 	bl	8b3c4 <__multadd>
   899da:	4659      	mov	r1, fp
   899dc:	4606      	mov	r6, r0
   899de:	2300      	movs	r3, #0
   899e0:	220a      	movs	r2, #10
   899e2:	4620      	mov	r0, r4
   899e4:	f001 fcee 	bl	8b3c4 <__multadd>
   899e8:	4647      	mov	r7, r8
   899ea:	4683      	mov	fp, r0
   899ec:	e7a3      	b.n	89936 <_dtoa_r+0x57e>
   899ee:	201c      	movs	r0, #28
   899f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   899f2:	4405      	add	r5, r0
   899f4:	4403      	add	r3, r0
   899f6:	930a      	str	r3, [sp, #40]	; 0x28
   899f8:	9b08      	ldr	r3, [sp, #32]
   899fa:	4403      	add	r3, r0
   899fc:	9308      	str	r3, [sp, #32]
   899fe:	e763      	b.n	898c8 <_dtoa_r+0x510>
   89a00:	4641      	mov	r1, r8
   89a02:	4648      	mov	r0, r9
   89a04:	f001 feac 	bl	8b760 <__mcmp>
   89a08:	2800      	cmp	r0, #0
   89a0a:	f6bf af73 	bge.w	898f4 <_dtoa_r+0x53c>
   89a0e:	9f02      	ldr	r7, [sp, #8]
   89a10:	4649      	mov	r1, r9
   89a12:	2300      	movs	r3, #0
   89a14:	220a      	movs	r2, #10
   89a16:	4620      	mov	r0, r4
   89a18:	3f01      	subs	r7, #1
   89a1a:	9702      	str	r7, [sp, #8]
   89a1c:	f001 fcd2 	bl	8b3c4 <__multadd>
   89a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89a22:	4681      	mov	r9, r0
   89a24:	2b00      	cmp	r3, #0
   89a26:	f040 83b5 	bne.w	8a194 <_dtoa_r+0xddc>
   89a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89a2c:	2b00      	cmp	r3, #0
   89a2e:	f340 83be 	ble.w	8a1ae <_dtoa_r+0xdf6>
   89a32:	9307      	str	r3, [sp, #28]
   89a34:	f8dd a010 	ldr.w	sl, [sp, #16]
   89a38:	9f07      	ldr	r7, [sp, #28]
   89a3a:	4655      	mov	r5, sl
   89a3c:	e006      	b.n	89a4c <_dtoa_r+0x694>
   89a3e:	4649      	mov	r1, r9
   89a40:	2300      	movs	r3, #0
   89a42:	220a      	movs	r2, #10
   89a44:	4620      	mov	r0, r4
   89a46:	f001 fcbd 	bl	8b3c4 <__multadd>
   89a4a:	4681      	mov	r9, r0
   89a4c:	4641      	mov	r1, r8
   89a4e:	4648      	mov	r0, r9
   89a50:	f7ff fc1c 	bl	8928c <quorem>
   89a54:	3030      	adds	r0, #48	; 0x30
   89a56:	f805 0b01 	strb.w	r0, [r5], #1
   89a5a:	eba5 030a 	sub.w	r3, r5, sl
   89a5e:	42bb      	cmp	r3, r7
   89a60:	dbed      	blt.n	89a3e <_dtoa_r+0x686>
   89a62:	9b04      	ldr	r3, [sp, #16]
   89a64:	9a07      	ldr	r2, [sp, #28]
   89a66:	4682      	mov	sl, r0
   89a68:	2a01      	cmp	r2, #1
   89a6a:	bfac      	ite	ge
   89a6c:	189b      	addge	r3, r3, r2
   89a6e:	3301      	addlt	r3, #1
   89a70:	f04f 0b00 	mov.w	fp, #0
   89a74:	461d      	mov	r5, r3
   89a76:	4649      	mov	r1, r9
   89a78:	2201      	movs	r2, #1
   89a7a:	4620      	mov	r0, r4
   89a7c:	f001 fe20 	bl	8b6c0 <__lshift>
   89a80:	4641      	mov	r1, r8
   89a82:	4681      	mov	r9, r0
   89a84:	f001 fe6c 	bl	8b760 <__mcmp>
   89a88:	2800      	cmp	r0, #0
   89a8a:	f340 823f 	ble.w	89f0c <_dtoa_r+0xb54>
   89a8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   89a92:	1e6b      	subs	r3, r5, #1
   89a94:	9904      	ldr	r1, [sp, #16]
   89a96:	e004      	b.n	89aa2 <_dtoa_r+0x6ea>
   89a98:	428b      	cmp	r3, r1
   89a9a:	f000 81ae 	beq.w	89dfa <_dtoa_r+0xa42>
   89a9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   89aa2:	2a39      	cmp	r2, #57	; 0x39
   89aa4:	f103 0501 	add.w	r5, r3, #1
   89aa8:	d0f6      	beq.n	89a98 <_dtoa_r+0x6e0>
   89aaa:	3201      	adds	r2, #1
   89aac:	701a      	strb	r2, [r3, #0]
   89aae:	4641      	mov	r1, r8
   89ab0:	4620      	mov	r0, r4
   89ab2:	f001 fc7d 	bl	8b3b0 <_Bfree>
   89ab6:	2e00      	cmp	r6, #0
   89ab8:	f43f ae3d 	beq.w	89736 <_dtoa_r+0x37e>
   89abc:	f1bb 0f00 	cmp.w	fp, #0
   89ac0:	d005      	beq.n	89ace <_dtoa_r+0x716>
   89ac2:	45b3      	cmp	fp, r6
   89ac4:	d003      	beq.n	89ace <_dtoa_r+0x716>
   89ac6:	4659      	mov	r1, fp
   89ac8:	4620      	mov	r0, r4
   89aca:	f001 fc71 	bl	8b3b0 <_Bfree>
   89ace:	4631      	mov	r1, r6
   89ad0:	4620      	mov	r0, r4
   89ad2:	f001 fc6d 	bl	8b3b0 <_Bfree>
   89ad6:	e62e      	b.n	89736 <_dtoa_r+0x37e>
   89ad8:	2300      	movs	r3, #0
   89ada:	930b      	str	r3, [sp, #44]	; 0x2c
   89adc:	9b02      	ldr	r3, [sp, #8]
   89ade:	9a25      	ldr	r2, [sp, #148]	; 0x94
   89ae0:	4413      	add	r3, r2
   89ae2:	930f      	str	r3, [sp, #60]	; 0x3c
   89ae4:	3301      	adds	r3, #1
   89ae6:	2b01      	cmp	r3, #1
   89ae8:	461f      	mov	r7, r3
   89aea:	461e      	mov	r6, r3
   89aec:	bfb8      	it	lt
   89aee:	2701      	movlt	r7, #1
   89af0:	9307      	str	r3, [sp, #28]
   89af2:	2100      	movs	r1, #0
   89af4:	2f17      	cmp	r7, #23
   89af6:	6461      	str	r1, [r4, #68]	; 0x44
   89af8:	d90a      	bls.n	89b10 <_dtoa_r+0x758>
   89afa:	2201      	movs	r2, #1
   89afc:	2304      	movs	r3, #4
   89afe:	005b      	lsls	r3, r3, #1
   89b00:	f103 0014 	add.w	r0, r3, #20
   89b04:	4287      	cmp	r7, r0
   89b06:	4611      	mov	r1, r2
   89b08:	f102 0201 	add.w	r2, r2, #1
   89b0c:	d2f7      	bcs.n	89afe <_dtoa_r+0x746>
   89b0e:	6461      	str	r1, [r4, #68]	; 0x44
   89b10:	4620      	mov	r0, r4
   89b12:	f001 fc27 	bl	8b364 <_Balloc>
   89b16:	2e0e      	cmp	r6, #14
   89b18:	9004      	str	r0, [sp, #16]
   89b1a:	6420      	str	r0, [r4, #64]	; 0x40
   89b1c:	f63f ad47 	bhi.w	895ae <_dtoa_r+0x1f6>
   89b20:	2d00      	cmp	r5, #0
   89b22:	f43f ad44 	beq.w	895ae <_dtoa_r+0x1f6>
   89b26:	9902      	ldr	r1, [sp, #8]
   89b28:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   89b2c:	2900      	cmp	r1, #0
   89b2e:	f340 8203 	ble.w	89f38 <_dtoa_r+0xb80>
   89b32:	4bb9      	ldr	r3, [pc, #740]	; (89e18 <_dtoa_r+0xa60>)
   89b34:	f001 020f 	and.w	r2, r1, #15
   89b38:	110d      	asrs	r5, r1, #4
   89b3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89b3e:	06e9      	lsls	r1, r5, #27
   89b40:	e9d3 6700 	ldrd	r6, r7, [r3]
   89b44:	f140 81af 	bpl.w	89ea6 <_dtoa_r+0xaee>
   89b48:	4bb4      	ldr	r3, [pc, #720]	; (89e1c <_dtoa_r+0xa64>)
   89b4a:	4650      	mov	r0, sl
   89b4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89b50:	4659      	mov	r1, fp
   89b52:	f002 fe6b 	bl	8c82c <__aeabi_ddiv>
   89b56:	f04f 0a03 	mov.w	sl, #3
   89b5a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   89b5e:	f005 050f 	and.w	r5, r5, #15
   89b62:	b18d      	cbz	r5, 89b88 <_dtoa_r+0x7d0>
   89b64:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 89e1c <_dtoa_r+0xa64>
   89b68:	07ea      	lsls	r2, r5, #31
   89b6a:	d509      	bpl.n	89b80 <_dtoa_r+0x7c8>
   89b6c:	e9d8 2300 	ldrd	r2, r3, [r8]
   89b70:	4630      	mov	r0, r6
   89b72:	4639      	mov	r1, r7
   89b74:	f002 fd30 	bl	8c5d8 <__aeabi_dmul>
   89b78:	4606      	mov	r6, r0
   89b7a:	460f      	mov	r7, r1
   89b7c:	f10a 0a01 	add.w	sl, sl, #1
   89b80:	106d      	asrs	r5, r5, #1
   89b82:	f108 0808 	add.w	r8, r8, #8
   89b86:	d1ef      	bne.n	89b68 <_dtoa_r+0x7b0>
   89b88:	463b      	mov	r3, r7
   89b8a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   89b8e:	4632      	mov	r2, r6
   89b90:	f002 fe4c 	bl	8c82c <__aeabi_ddiv>
   89b94:	4607      	mov	r7, r0
   89b96:	4688      	mov	r8, r1
   89b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89b9a:	b143      	cbz	r3, 89bae <_dtoa_r+0x7f6>
   89b9c:	2200      	movs	r2, #0
   89b9e:	4ba0      	ldr	r3, [pc, #640]	; (89e20 <_dtoa_r+0xa68>)
   89ba0:	4638      	mov	r0, r7
   89ba2:	4641      	mov	r1, r8
   89ba4:	f002 ff8a 	bl	8cabc <__aeabi_dcmplt>
   89ba8:	2800      	cmp	r0, #0
   89baa:	f040 8287 	bne.w	8a0bc <_dtoa_r+0xd04>
   89bae:	4650      	mov	r0, sl
   89bb0:	f002 fcac 	bl	8c50c <__aeabi_i2d>
   89bb4:	463a      	mov	r2, r7
   89bb6:	4643      	mov	r3, r8
   89bb8:	f002 fd0e 	bl	8c5d8 <__aeabi_dmul>
   89bbc:	4b99      	ldr	r3, [pc, #612]	; (89e24 <_dtoa_r+0xa6c>)
   89bbe:	2200      	movs	r2, #0
   89bc0:	f002 fb58 	bl	8c274 <__adddf3>
   89bc4:	9b07      	ldr	r3, [sp, #28]
   89bc6:	4605      	mov	r5, r0
   89bc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   89bcc:	2b00      	cmp	r3, #0
   89bce:	f000 813f 	beq.w	89e50 <_dtoa_r+0xa98>
   89bd2:	9b02      	ldr	r3, [sp, #8]
   89bd4:	9315      	str	r3, [sp, #84]	; 0x54
   89bd6:	9b07      	ldr	r3, [sp, #28]
   89bd8:	9312      	str	r3, [sp, #72]	; 0x48
   89bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89bdc:	2b00      	cmp	r3, #0
   89bde:	f000 81fb 	beq.w	89fd8 <_dtoa_r+0xc20>
   89be2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89be4:	4b8c      	ldr	r3, [pc, #560]	; (89e18 <_dtoa_r+0xa60>)
   89be6:	2000      	movs	r0, #0
   89be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89bec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89bf0:	498d      	ldr	r1, [pc, #564]	; (89e28 <_dtoa_r+0xa70>)
   89bf2:	f002 fe1b 	bl	8c82c <__aeabi_ddiv>
   89bf6:	462a      	mov	r2, r5
   89bf8:	4633      	mov	r3, r6
   89bfa:	f002 fb39 	bl	8c270 <__aeabi_dsub>
   89bfe:	4682      	mov	sl, r0
   89c00:	468b      	mov	fp, r1
   89c02:	4638      	mov	r0, r7
   89c04:	4641      	mov	r1, r8
   89c06:	f002 ff97 	bl	8cb38 <__aeabi_d2iz>
   89c0a:	4605      	mov	r5, r0
   89c0c:	f002 fc7e 	bl	8c50c <__aeabi_i2d>
   89c10:	4602      	mov	r2, r0
   89c12:	460b      	mov	r3, r1
   89c14:	4638      	mov	r0, r7
   89c16:	4641      	mov	r1, r8
   89c18:	f002 fb2a 	bl	8c270 <__aeabi_dsub>
   89c1c:	3530      	adds	r5, #48	; 0x30
   89c1e:	fa5f f885 	uxtb.w	r8, r5
   89c22:	9d04      	ldr	r5, [sp, #16]
   89c24:	4606      	mov	r6, r0
   89c26:	460f      	mov	r7, r1
   89c28:	f885 8000 	strb.w	r8, [r5]
   89c2c:	4602      	mov	r2, r0
   89c2e:	460b      	mov	r3, r1
   89c30:	4650      	mov	r0, sl
   89c32:	4659      	mov	r1, fp
   89c34:	3501      	adds	r5, #1
   89c36:	f002 ff5f 	bl	8caf8 <__aeabi_dcmpgt>
   89c3a:	2800      	cmp	r0, #0
   89c3c:	d154      	bne.n	89ce8 <_dtoa_r+0x930>
   89c3e:	4632      	mov	r2, r6
   89c40:	463b      	mov	r3, r7
   89c42:	2000      	movs	r0, #0
   89c44:	4976      	ldr	r1, [pc, #472]	; (89e20 <_dtoa_r+0xa68>)
   89c46:	f002 fb13 	bl	8c270 <__aeabi_dsub>
   89c4a:	4602      	mov	r2, r0
   89c4c:	460b      	mov	r3, r1
   89c4e:	4650      	mov	r0, sl
   89c50:	4659      	mov	r1, fp
   89c52:	f002 ff51 	bl	8caf8 <__aeabi_dcmpgt>
   89c56:	2800      	cmp	r0, #0
   89c58:	f040 8270 	bne.w	8a13c <_dtoa_r+0xd84>
   89c5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89c5e:	2a01      	cmp	r2, #1
   89c60:	f000 8112 	beq.w	89e88 <_dtoa_r+0xad0>
   89c64:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89c66:	9a04      	ldr	r2, [sp, #16]
   89c68:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   89c6c:	4413      	add	r3, r2
   89c6e:	4699      	mov	r9, r3
   89c70:	e00f      	b.n	89c92 <_dtoa_r+0x8da>
   89c72:	4632      	mov	r2, r6
   89c74:	463b      	mov	r3, r7
   89c76:	2000      	movs	r0, #0
   89c78:	4969      	ldr	r1, [pc, #420]	; (89e20 <_dtoa_r+0xa68>)
   89c7a:	f002 faf9 	bl	8c270 <__aeabi_dsub>
   89c7e:	4652      	mov	r2, sl
   89c80:	465b      	mov	r3, fp
   89c82:	f002 ff1b 	bl	8cabc <__aeabi_dcmplt>
   89c86:	2800      	cmp	r0, #0
   89c88:	f040 8256 	bne.w	8a138 <_dtoa_r+0xd80>
   89c8c:	454d      	cmp	r5, r9
   89c8e:	f000 80f9 	beq.w	89e84 <_dtoa_r+0xacc>
   89c92:	4650      	mov	r0, sl
   89c94:	4659      	mov	r1, fp
   89c96:	2200      	movs	r2, #0
   89c98:	4b64      	ldr	r3, [pc, #400]	; (89e2c <_dtoa_r+0xa74>)
   89c9a:	f002 fc9d 	bl	8c5d8 <__aeabi_dmul>
   89c9e:	2200      	movs	r2, #0
   89ca0:	4b62      	ldr	r3, [pc, #392]	; (89e2c <_dtoa_r+0xa74>)
   89ca2:	4682      	mov	sl, r0
   89ca4:	468b      	mov	fp, r1
   89ca6:	4630      	mov	r0, r6
   89ca8:	4639      	mov	r1, r7
   89caa:	f002 fc95 	bl	8c5d8 <__aeabi_dmul>
   89cae:	460f      	mov	r7, r1
   89cb0:	4606      	mov	r6, r0
   89cb2:	f002 ff41 	bl	8cb38 <__aeabi_d2iz>
   89cb6:	4680      	mov	r8, r0
   89cb8:	f002 fc28 	bl	8c50c <__aeabi_i2d>
   89cbc:	4602      	mov	r2, r0
   89cbe:	460b      	mov	r3, r1
   89cc0:	4630      	mov	r0, r6
   89cc2:	4639      	mov	r1, r7
   89cc4:	f002 fad4 	bl	8c270 <__aeabi_dsub>
   89cc8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   89ccc:	fa5f f888 	uxtb.w	r8, r8
   89cd0:	f805 8b01 	strb.w	r8, [r5], #1
   89cd4:	4652      	mov	r2, sl
   89cd6:	465b      	mov	r3, fp
   89cd8:	4606      	mov	r6, r0
   89cda:	460f      	mov	r7, r1
   89cdc:	f002 feee 	bl	8cabc <__aeabi_dcmplt>
   89ce0:	2800      	cmp	r0, #0
   89ce2:	d0c6      	beq.n	89c72 <_dtoa_r+0x8ba>
   89ce4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   89ce8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89cea:	9302      	str	r3, [sp, #8]
   89cec:	e523      	b.n	89736 <_dtoa_r+0x37e>
   89cee:	2300      	movs	r3, #0
   89cf0:	930b      	str	r3, [sp, #44]	; 0x2c
   89cf2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89cf4:	2b00      	cmp	r3, #0
   89cf6:	f340 80dd 	ble.w	89eb4 <_dtoa_r+0xafc>
   89cfa:	461f      	mov	r7, r3
   89cfc:	461e      	mov	r6, r3
   89cfe:	930f      	str	r3, [sp, #60]	; 0x3c
   89d00:	9307      	str	r3, [sp, #28]
   89d02:	e6f6      	b.n	89af2 <_dtoa_r+0x73a>
   89d04:	2301      	movs	r3, #1
   89d06:	930b      	str	r3, [sp, #44]	; 0x2c
   89d08:	e7f3      	b.n	89cf2 <_dtoa_r+0x93a>
   89d0a:	f1ba 0f00 	cmp.w	sl, #0
   89d0e:	f47f ada7 	bne.w	89860 <_dtoa_r+0x4a8>
   89d12:	f3cb 0313 	ubfx	r3, fp, #0, #20
   89d16:	2b00      	cmp	r3, #0
   89d18:	f47f adbc 	bne.w	89894 <_dtoa_r+0x4dc>
   89d1c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   89d20:	0d3f      	lsrs	r7, r7, #20
   89d22:	053f      	lsls	r7, r7, #20
   89d24:	2f00      	cmp	r7, #0
   89d26:	f000 820d 	beq.w	8a144 <_dtoa_r+0xd8c>
   89d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89d2c:	3301      	adds	r3, #1
   89d2e:	930a      	str	r3, [sp, #40]	; 0x28
   89d30:	9b08      	ldr	r3, [sp, #32]
   89d32:	3301      	adds	r3, #1
   89d34:	9308      	str	r3, [sp, #32]
   89d36:	2301      	movs	r3, #1
   89d38:	930c      	str	r3, [sp, #48]	; 0x30
   89d3a:	e5ad      	b.n	89898 <_dtoa_r+0x4e0>
   89d3c:	9b07      	ldr	r3, [sp, #28]
   89d3e:	2b00      	cmp	r3, #0
   89d40:	f73f ac48 	bgt.w	895d4 <_dtoa_r+0x21c>
   89d44:	f040 8222 	bne.w	8a18c <_dtoa_r+0xdd4>
   89d48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89d4c:	2200      	movs	r2, #0
   89d4e:	4b38      	ldr	r3, [pc, #224]	; (89e30 <_dtoa_r+0xa78>)
   89d50:	f002 fc42 	bl	8c5d8 <__aeabi_dmul>
   89d54:	4652      	mov	r2, sl
   89d56:	465b      	mov	r3, fp
   89d58:	f002 fec4 	bl	8cae4 <__aeabi_dcmpge>
   89d5c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   89d60:	4646      	mov	r6, r8
   89d62:	2800      	cmp	r0, #0
   89d64:	d041      	beq.n	89dea <_dtoa_r+0xa32>
   89d66:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89d68:	9d04      	ldr	r5, [sp, #16]
   89d6a:	43db      	mvns	r3, r3
   89d6c:	9302      	str	r3, [sp, #8]
   89d6e:	4641      	mov	r1, r8
   89d70:	4620      	mov	r0, r4
   89d72:	f001 fb1d 	bl	8b3b0 <_Bfree>
   89d76:	2e00      	cmp	r6, #0
   89d78:	f43f acdd 	beq.w	89736 <_dtoa_r+0x37e>
   89d7c:	e6a7      	b.n	89ace <_dtoa_r+0x716>
   89d7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89d80:	4649      	mov	r1, r9
   89d82:	4620      	mov	r0, r4
   89d84:	f001 fc4c 	bl	8b620 <__pow5mult>
   89d88:	4681      	mov	r9, r0
   89d8a:	e557      	b.n	8983c <_dtoa_r+0x484>
   89d8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   89d8e:	2a00      	cmp	r2, #0
   89d90:	f000 8188 	beq.w	8a0a4 <_dtoa_r+0xcec>
   89d94:	f203 4333 	addw	r3, r3, #1075	; 0x433
   89d98:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   89d9a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   89d9c:	e4f2      	b.n	89784 <_dtoa_r+0x3cc>
   89d9e:	f1ba 0f00 	cmp.w	sl, #0
   89da2:	f47f ad77 	bne.w	89894 <_dtoa_r+0x4dc>
   89da6:	e7b4      	b.n	89d12 <_dtoa_r+0x95a>
   89da8:	f001 fb0c 	bl	8b3c4 <__multadd>
   89dac:	4647      	mov	r7, r8
   89dae:	4606      	mov	r6, r0
   89db0:	4683      	mov	fp, r0
   89db2:	e5c0      	b.n	89936 <_dtoa_r+0x57e>
   89db4:	4601      	mov	r1, r0
   89db6:	4620      	mov	r0, r4
   89db8:	9308      	str	r3, [sp, #32]
   89dba:	f001 faf9 	bl	8b3b0 <_Bfree>
   89dbe:	2201      	movs	r2, #1
   89dc0:	9b08      	ldr	r3, [sp, #32]
   89dc2:	e5e2      	b.n	8998a <_dtoa_r+0x5d2>
   89dc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89dc6:	2b02      	cmp	r3, #2
   89dc8:	f77f ad98 	ble.w	898fc <_dtoa_r+0x544>
   89dcc:	9b07      	ldr	r3, [sp, #28]
   89dce:	2b00      	cmp	r3, #0
   89dd0:	d1c9      	bne.n	89d66 <_dtoa_r+0x9ae>
   89dd2:	4641      	mov	r1, r8
   89dd4:	2205      	movs	r2, #5
   89dd6:	4620      	mov	r0, r4
   89dd8:	f001 faf4 	bl	8b3c4 <__multadd>
   89ddc:	4601      	mov	r1, r0
   89dde:	4680      	mov	r8, r0
   89de0:	4648      	mov	r0, r9
   89de2:	f001 fcbd 	bl	8b760 <__mcmp>
   89de6:	2800      	cmp	r0, #0
   89de8:	ddbd      	ble.n	89d66 <_dtoa_r+0x9ae>
   89dea:	2331      	movs	r3, #49	; 0x31
   89dec:	9a02      	ldr	r2, [sp, #8]
   89dee:	9904      	ldr	r1, [sp, #16]
   89df0:	3201      	adds	r2, #1
   89df2:	9202      	str	r2, [sp, #8]
   89df4:	700b      	strb	r3, [r1, #0]
   89df6:	1c4d      	adds	r5, r1, #1
   89df8:	e7b9      	b.n	89d6e <_dtoa_r+0x9b6>
   89dfa:	2331      	movs	r3, #49	; 0x31
   89dfc:	9a02      	ldr	r2, [sp, #8]
   89dfe:	3201      	adds	r2, #1
   89e00:	9202      	str	r2, [sp, #8]
   89e02:	9a04      	ldr	r2, [sp, #16]
   89e04:	7013      	strb	r3, [r2, #0]
   89e06:	e652      	b.n	89aae <_dtoa_r+0x6f6>
   89e08:	2301      	movs	r3, #1
   89e0a:	930b      	str	r3, [sp, #44]	; 0x2c
   89e0c:	e666      	b.n	89adc <_dtoa_r+0x724>
   89e0e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   89e12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   89e14:	e48f      	b.n	89736 <_dtoa_r+0x37e>
   89e16:	bf00      	nop
   89e18:	0008cd60 	.word	0x0008cd60
   89e1c:	0008cd38 	.word	0x0008cd38
   89e20:	3ff00000 	.word	0x3ff00000
   89e24:	401c0000 	.word	0x401c0000
   89e28:	3fe00000 	.word	0x3fe00000
   89e2c:	40240000 	.word	0x40240000
   89e30:	40140000 	.word	0x40140000
   89e34:	4650      	mov	r0, sl
   89e36:	f002 fb69 	bl	8c50c <__aeabi_i2d>
   89e3a:	463a      	mov	r2, r7
   89e3c:	4643      	mov	r3, r8
   89e3e:	f002 fbcb 	bl	8c5d8 <__aeabi_dmul>
   89e42:	2200      	movs	r2, #0
   89e44:	4bc1      	ldr	r3, [pc, #772]	; (8a14c <_dtoa_r+0xd94>)
   89e46:	f002 fa15 	bl	8c274 <__adddf3>
   89e4a:	4605      	mov	r5, r0
   89e4c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   89e50:	4641      	mov	r1, r8
   89e52:	2200      	movs	r2, #0
   89e54:	4bbe      	ldr	r3, [pc, #760]	; (8a150 <_dtoa_r+0xd98>)
   89e56:	4638      	mov	r0, r7
   89e58:	f002 fa0a 	bl	8c270 <__aeabi_dsub>
   89e5c:	462a      	mov	r2, r5
   89e5e:	4633      	mov	r3, r6
   89e60:	4682      	mov	sl, r0
   89e62:	468b      	mov	fp, r1
   89e64:	f002 fe48 	bl	8caf8 <__aeabi_dcmpgt>
   89e68:	4680      	mov	r8, r0
   89e6a:	2800      	cmp	r0, #0
   89e6c:	f040 8110 	bne.w	8a090 <_dtoa_r+0xcd8>
   89e70:	462a      	mov	r2, r5
   89e72:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   89e76:	4650      	mov	r0, sl
   89e78:	4659      	mov	r1, fp
   89e7a:	f002 fe1f 	bl	8cabc <__aeabi_dcmplt>
   89e7e:	b118      	cbz	r0, 89e88 <_dtoa_r+0xad0>
   89e80:	4646      	mov	r6, r8
   89e82:	e770      	b.n	89d66 <_dtoa_r+0x9ae>
   89e84:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   89e88:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   89e8c:	f7ff bb8f 	b.w	895ae <_dtoa_r+0x1f6>
   89e90:	9804      	ldr	r0, [sp, #16]
   89e92:	f7ff bac0 	b.w	89416 <_dtoa_r+0x5e>
   89e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89e98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89e9a:	1afb      	subs	r3, r7, r3
   89e9c:	441a      	add	r2, r3
   89e9e:	970c      	str	r7, [sp, #48]	; 0x30
   89ea0:	920d      	str	r2, [sp, #52]	; 0x34
   89ea2:	2700      	movs	r7, #0
   89ea4:	e468      	b.n	89778 <_dtoa_r+0x3c0>
   89ea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   89eaa:	f04f 0a02 	mov.w	sl, #2
   89eae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   89eb2:	e656      	b.n	89b62 <_dtoa_r+0x7aa>
   89eb4:	2100      	movs	r1, #0
   89eb6:	2301      	movs	r3, #1
   89eb8:	4620      	mov	r0, r4
   89eba:	6461      	str	r1, [r4, #68]	; 0x44
   89ebc:	9325      	str	r3, [sp, #148]	; 0x94
   89ebe:	f001 fa51 	bl	8b364 <_Balloc>
   89ec2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89ec4:	9004      	str	r0, [sp, #16]
   89ec6:	9307      	str	r3, [sp, #28]
   89ec8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89eca:	6420      	str	r0, [r4, #64]	; 0x40
   89ecc:	930f      	str	r3, [sp, #60]	; 0x3c
   89ece:	e627      	b.n	89b20 <_dtoa_r+0x768>
   89ed0:	2a00      	cmp	r2, #0
   89ed2:	46d0      	mov	r8, sl
   89ed4:	f8cd b020 	str.w	fp, [sp, #32]
   89ed8:	469a      	mov	sl, r3
   89eda:	dd11      	ble.n	89f00 <_dtoa_r+0xb48>
   89edc:	4649      	mov	r1, r9
   89ede:	2201      	movs	r2, #1
   89ee0:	4620      	mov	r0, r4
   89ee2:	f001 fbed 	bl	8b6c0 <__lshift>
   89ee6:	4641      	mov	r1, r8
   89ee8:	4681      	mov	r9, r0
   89eea:	f001 fc39 	bl	8b760 <__mcmp>
   89eee:	2800      	cmp	r0, #0
   89ef0:	f340 8145 	ble.w	8a17e <_dtoa_r+0xdc6>
   89ef4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   89ef8:	f000 8105 	beq.w	8a106 <_dtoa_r+0xd4e>
   89efc:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   89f00:	46b3      	mov	fp, r6
   89f02:	f887 a000 	strb.w	sl, [r7]
   89f06:	1c7d      	adds	r5, r7, #1
   89f08:	9e08      	ldr	r6, [sp, #32]
   89f0a:	e5d0      	b.n	89aae <_dtoa_r+0x6f6>
   89f0c:	d104      	bne.n	89f18 <_dtoa_r+0xb60>
   89f0e:	f01a 0f01 	tst.w	sl, #1
   89f12:	d001      	beq.n	89f18 <_dtoa_r+0xb60>
   89f14:	e5bb      	b.n	89a8e <_dtoa_r+0x6d6>
   89f16:	4615      	mov	r5, r2
   89f18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89f1c:	1e6a      	subs	r2, r5, #1
   89f1e:	2b30      	cmp	r3, #48	; 0x30
   89f20:	d0f9      	beq.n	89f16 <_dtoa_r+0xb5e>
   89f22:	e5c4      	b.n	89aae <_dtoa_r+0x6f6>
   89f24:	2230      	movs	r2, #48	; 0x30
   89f26:	9904      	ldr	r1, [sp, #16]
   89f28:	700a      	strb	r2, [r1, #0]
   89f2a:	9a02      	ldr	r2, [sp, #8]
   89f2c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   89f30:	3201      	adds	r2, #1
   89f32:	9202      	str	r2, [sp, #8]
   89f34:	f7ff bbfb 	b.w	8972e <_dtoa_r+0x376>
   89f38:	f000 80bb 	beq.w	8a0b2 <_dtoa_r+0xcfa>
   89f3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89f40:	9b02      	ldr	r3, [sp, #8]
   89f42:	f04f 0a02 	mov.w	sl, #2
   89f46:	425d      	negs	r5, r3
   89f48:	4b82      	ldr	r3, [pc, #520]	; (8a154 <_dtoa_r+0xd9c>)
   89f4a:	f005 020f 	and.w	r2, r5, #15
   89f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89f52:	e9d3 2300 	ldrd	r2, r3, [r3]
   89f56:	f002 fb3f 	bl	8c5d8 <__aeabi_dmul>
   89f5a:	112d      	asrs	r5, r5, #4
   89f5c:	4607      	mov	r7, r0
   89f5e:	4688      	mov	r8, r1
   89f60:	f43f ae1a 	beq.w	89b98 <_dtoa_r+0x7e0>
   89f64:	4e7c      	ldr	r6, [pc, #496]	; (8a158 <_dtoa_r+0xda0>)
   89f66:	07eb      	lsls	r3, r5, #31
   89f68:	d509      	bpl.n	89f7e <_dtoa_r+0xbc6>
   89f6a:	e9d6 2300 	ldrd	r2, r3, [r6]
   89f6e:	4638      	mov	r0, r7
   89f70:	4641      	mov	r1, r8
   89f72:	f002 fb31 	bl	8c5d8 <__aeabi_dmul>
   89f76:	4607      	mov	r7, r0
   89f78:	4688      	mov	r8, r1
   89f7a:	f10a 0a01 	add.w	sl, sl, #1
   89f7e:	106d      	asrs	r5, r5, #1
   89f80:	f106 0608 	add.w	r6, r6, #8
   89f84:	d1ef      	bne.n	89f66 <_dtoa_r+0xbae>
   89f86:	e607      	b.n	89b98 <_dtoa_r+0x7e0>
   89f88:	6871      	ldr	r1, [r6, #4]
   89f8a:	4620      	mov	r0, r4
   89f8c:	f001 f9ea 	bl	8b364 <_Balloc>
   89f90:	4605      	mov	r5, r0
   89f92:	6933      	ldr	r3, [r6, #16]
   89f94:	f106 010c 	add.w	r1, r6, #12
   89f98:	3302      	adds	r3, #2
   89f9a:	009a      	lsls	r2, r3, #2
   89f9c:	300c      	adds	r0, #12
   89f9e:	f7fc fd9f 	bl	86ae0 <memcpy>
   89fa2:	4629      	mov	r1, r5
   89fa4:	2201      	movs	r2, #1
   89fa6:	4620      	mov	r0, r4
   89fa8:	f001 fb8a 	bl	8b6c0 <__lshift>
   89fac:	9008      	str	r0, [sp, #32]
   89fae:	e4b6      	b.n	8991e <_dtoa_r+0x566>
   89fb0:	2b39      	cmp	r3, #57	; 0x39
   89fb2:	f8cd b020 	str.w	fp, [sp, #32]
   89fb6:	46d0      	mov	r8, sl
   89fb8:	f000 80a5 	beq.w	8a106 <_dtoa_r+0xd4e>
   89fbc:	f103 0a01 	add.w	sl, r3, #1
   89fc0:	46b3      	mov	fp, r6
   89fc2:	f887 a000 	strb.w	sl, [r7]
   89fc6:	1c7d      	adds	r5, r7, #1
   89fc8:	9e08      	ldr	r6, [sp, #32]
   89fca:	e570      	b.n	89aae <_dtoa_r+0x6f6>
   89fcc:	465a      	mov	r2, fp
   89fce:	46d0      	mov	r8, sl
   89fd0:	46b3      	mov	fp, r6
   89fd2:	469a      	mov	sl, r3
   89fd4:	4616      	mov	r6, r2
   89fd6:	e54e      	b.n	89a76 <_dtoa_r+0x6be>
   89fd8:	9812      	ldr	r0, [sp, #72]	; 0x48
   89fda:	495e      	ldr	r1, [pc, #376]	; (8a154 <_dtoa_r+0xd9c>)
   89fdc:	462a      	mov	r2, r5
   89fde:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   89fe2:	4633      	mov	r3, r6
   89fe4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   89fe8:	f002 faf6 	bl	8c5d8 <__aeabi_dmul>
   89fec:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   89ff0:	4638      	mov	r0, r7
   89ff2:	4641      	mov	r1, r8
   89ff4:	f002 fda0 	bl	8cb38 <__aeabi_d2iz>
   89ff8:	4605      	mov	r5, r0
   89ffa:	f002 fa87 	bl	8c50c <__aeabi_i2d>
   89ffe:	4602      	mov	r2, r0
   8a000:	460b      	mov	r3, r1
   8a002:	4638      	mov	r0, r7
   8a004:	4641      	mov	r1, r8
   8a006:	f002 f933 	bl	8c270 <__aeabi_dsub>
   8a00a:	4606      	mov	r6, r0
   8a00c:	9812      	ldr	r0, [sp, #72]	; 0x48
   8a00e:	9a04      	ldr	r2, [sp, #16]
   8a010:	3530      	adds	r5, #48	; 0x30
   8a012:	2801      	cmp	r0, #1
   8a014:	7015      	strb	r5, [r2, #0]
   8a016:	460f      	mov	r7, r1
   8a018:	f102 0501 	add.w	r5, r2, #1
   8a01c:	d026      	beq.n	8a06c <_dtoa_r+0xcb4>
   8a01e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a020:	9a04      	ldr	r2, [sp, #16]
   8a022:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8a026:	4413      	add	r3, r2
   8a028:	f04f 0a00 	mov.w	sl, #0
   8a02c:	4699      	mov	r9, r3
   8a02e:	f8df b130 	ldr.w	fp, [pc, #304]	; 8a160 <_dtoa_r+0xda8>
   8a032:	4652      	mov	r2, sl
   8a034:	465b      	mov	r3, fp
   8a036:	4630      	mov	r0, r6
   8a038:	4639      	mov	r1, r7
   8a03a:	f002 facd 	bl	8c5d8 <__aeabi_dmul>
   8a03e:	460f      	mov	r7, r1
   8a040:	4606      	mov	r6, r0
   8a042:	f002 fd79 	bl	8cb38 <__aeabi_d2iz>
   8a046:	4680      	mov	r8, r0
   8a048:	f002 fa60 	bl	8c50c <__aeabi_i2d>
   8a04c:	4602      	mov	r2, r0
   8a04e:	460b      	mov	r3, r1
   8a050:	4630      	mov	r0, r6
   8a052:	4639      	mov	r1, r7
   8a054:	f002 f90c 	bl	8c270 <__aeabi_dsub>
   8a058:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8a05c:	f805 8b01 	strb.w	r8, [r5], #1
   8a060:	454d      	cmp	r5, r9
   8a062:	4606      	mov	r6, r0
   8a064:	460f      	mov	r7, r1
   8a066:	d1e4      	bne.n	8a032 <_dtoa_r+0xc7a>
   8a068:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8a06c:	2200      	movs	r2, #0
   8a06e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8a072:	4b3a      	ldr	r3, [pc, #232]	; (8a15c <_dtoa_r+0xda4>)
   8a074:	f002 f8fe 	bl	8c274 <__adddf3>
   8a078:	4632      	mov	r2, r6
   8a07a:	463b      	mov	r3, r7
   8a07c:	f002 fd1e 	bl	8cabc <__aeabi_dcmplt>
   8a080:	2800      	cmp	r0, #0
   8a082:	d046      	beq.n	8a112 <_dtoa_r+0xd5a>
   8a084:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8a086:	9302      	str	r3, [sp, #8]
   8a088:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8a08c:	f7ff bb42 	b.w	89714 <_dtoa_r+0x35c>
   8a090:	f04f 0800 	mov.w	r8, #0
   8a094:	4646      	mov	r6, r8
   8a096:	e6a8      	b.n	89dea <_dtoa_r+0xa32>
   8a098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a09a:	9a07      	ldr	r2, [sp, #28]
   8a09c:	1a9d      	subs	r5, r3, r2
   8a09e:	2300      	movs	r3, #0
   8a0a0:	f7ff bb70 	b.w	89784 <_dtoa_r+0x3cc>
   8a0a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8a0a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8a0a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8a0ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8a0ae:	f7ff bb69 	b.w	89784 <_dtoa_r+0x3cc>
   8a0b2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8a0b6:	f04f 0a02 	mov.w	sl, #2
   8a0ba:	e56d      	b.n	89b98 <_dtoa_r+0x7e0>
   8a0bc:	9b07      	ldr	r3, [sp, #28]
   8a0be:	2b00      	cmp	r3, #0
   8a0c0:	f43f aeb8 	beq.w	89e34 <_dtoa_r+0xa7c>
   8a0c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a0c6:	2b00      	cmp	r3, #0
   8a0c8:	f77f aede 	ble.w	89e88 <_dtoa_r+0xad0>
   8a0cc:	2200      	movs	r2, #0
   8a0ce:	4b24      	ldr	r3, [pc, #144]	; (8a160 <_dtoa_r+0xda8>)
   8a0d0:	4638      	mov	r0, r7
   8a0d2:	4641      	mov	r1, r8
   8a0d4:	f002 fa80 	bl	8c5d8 <__aeabi_dmul>
   8a0d8:	4607      	mov	r7, r0
   8a0da:	4688      	mov	r8, r1
   8a0dc:	f10a 0001 	add.w	r0, sl, #1
   8a0e0:	f002 fa14 	bl	8c50c <__aeabi_i2d>
   8a0e4:	463a      	mov	r2, r7
   8a0e6:	4643      	mov	r3, r8
   8a0e8:	f002 fa76 	bl	8c5d8 <__aeabi_dmul>
   8a0ec:	2200      	movs	r2, #0
   8a0ee:	4b17      	ldr	r3, [pc, #92]	; (8a14c <_dtoa_r+0xd94>)
   8a0f0:	f002 f8c0 	bl	8c274 <__adddf3>
   8a0f4:	9a02      	ldr	r2, [sp, #8]
   8a0f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a0f8:	3a01      	subs	r2, #1
   8a0fa:	4605      	mov	r5, r0
   8a0fc:	9215      	str	r2, [sp, #84]	; 0x54
   8a0fe:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8a102:	9312      	str	r3, [sp, #72]	; 0x48
   8a104:	e569      	b.n	89bda <_dtoa_r+0x822>
   8a106:	2239      	movs	r2, #57	; 0x39
   8a108:	46b3      	mov	fp, r6
   8a10a:	703a      	strb	r2, [r7, #0]
   8a10c:	9e08      	ldr	r6, [sp, #32]
   8a10e:	1c7d      	adds	r5, r7, #1
   8a110:	e4bf      	b.n	89a92 <_dtoa_r+0x6da>
   8a112:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8a116:	2000      	movs	r0, #0
   8a118:	4910      	ldr	r1, [pc, #64]	; (8a15c <_dtoa_r+0xda4>)
   8a11a:	f002 f8a9 	bl	8c270 <__aeabi_dsub>
   8a11e:	4632      	mov	r2, r6
   8a120:	463b      	mov	r3, r7
   8a122:	f002 fce9 	bl	8caf8 <__aeabi_dcmpgt>
   8a126:	b908      	cbnz	r0, 8a12c <_dtoa_r+0xd74>
   8a128:	e6ae      	b.n	89e88 <_dtoa_r+0xad0>
   8a12a:	4615      	mov	r5, r2
   8a12c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8a130:	1e6a      	subs	r2, r5, #1
   8a132:	2b30      	cmp	r3, #48	; 0x30
   8a134:	d0f9      	beq.n	8a12a <_dtoa_r+0xd72>
   8a136:	e5d7      	b.n	89ce8 <_dtoa_r+0x930>
   8a138:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8a13c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8a13e:	9302      	str	r3, [sp, #8]
   8a140:	f7ff bae8 	b.w	89714 <_dtoa_r+0x35c>
   8a144:	970c      	str	r7, [sp, #48]	; 0x30
   8a146:	f7ff bba7 	b.w	89898 <_dtoa_r+0x4e0>
   8a14a:	bf00      	nop
   8a14c:	401c0000 	.word	0x401c0000
   8a150:	40140000 	.word	0x40140000
   8a154:	0008cd60 	.word	0x0008cd60
   8a158:	0008cd38 	.word	0x0008cd38
   8a15c:	3fe00000 	.word	0x3fe00000
   8a160:	40240000 	.word	0x40240000
   8a164:	2b39      	cmp	r3, #57	; 0x39
   8a166:	f8cd b020 	str.w	fp, [sp, #32]
   8a16a:	46d0      	mov	r8, sl
   8a16c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8a170:	469a      	mov	sl, r3
   8a172:	d0c8      	beq.n	8a106 <_dtoa_r+0xd4e>
   8a174:	f1bb 0f00 	cmp.w	fp, #0
   8a178:	f73f aec0 	bgt.w	89efc <_dtoa_r+0xb44>
   8a17c:	e6c0      	b.n	89f00 <_dtoa_r+0xb48>
   8a17e:	f47f aebf 	bne.w	89f00 <_dtoa_r+0xb48>
   8a182:	f01a 0f01 	tst.w	sl, #1
   8a186:	f43f aebb 	beq.w	89f00 <_dtoa_r+0xb48>
   8a18a:	e6b3      	b.n	89ef4 <_dtoa_r+0xb3c>
   8a18c:	f04f 0800 	mov.w	r8, #0
   8a190:	4646      	mov	r6, r8
   8a192:	e5e8      	b.n	89d66 <_dtoa_r+0x9ae>
   8a194:	4631      	mov	r1, r6
   8a196:	2300      	movs	r3, #0
   8a198:	220a      	movs	r2, #10
   8a19a:	4620      	mov	r0, r4
   8a19c:	f001 f912 	bl	8b3c4 <__multadd>
   8a1a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a1a2:	4606      	mov	r6, r0
   8a1a4:	2b00      	cmp	r3, #0
   8a1a6:	dd07      	ble.n	8a1b8 <_dtoa_r+0xe00>
   8a1a8:	9307      	str	r3, [sp, #28]
   8a1aa:	f7ff bbab 	b.w	89904 <_dtoa_r+0x54c>
   8a1ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a1b0:	2b02      	cmp	r3, #2
   8a1b2:	dc1f      	bgt.n	8a1f4 <_dtoa_r+0xe3c>
   8a1b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a1b6:	e43c      	b.n	89a32 <_dtoa_r+0x67a>
   8a1b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a1ba:	2b02      	cmp	r3, #2
   8a1bc:	dc1a      	bgt.n	8a1f4 <_dtoa_r+0xe3c>
   8a1be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a1c0:	e7f2      	b.n	8a1a8 <_dtoa_r+0xdf0>
   8a1c2:	f43f ab81 	beq.w	898c8 <_dtoa_r+0x510>
   8a1c6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8a1ca:	e411      	b.n	899f0 <_dtoa_r+0x638>
   8a1cc:	2500      	movs	r5, #0
   8a1ce:	4620      	mov	r0, r4
   8a1d0:	6465      	str	r5, [r4, #68]	; 0x44
   8a1d2:	4629      	mov	r1, r5
   8a1d4:	f001 f8c6 	bl	8b364 <_Balloc>
   8a1d8:	f04f 33ff 	mov.w	r3, #4294967295
   8a1dc:	9307      	str	r3, [sp, #28]
   8a1de:	930f      	str	r3, [sp, #60]	; 0x3c
   8a1e0:	2301      	movs	r3, #1
   8a1e2:	9004      	str	r0, [sp, #16]
   8a1e4:	9525      	str	r5, [sp, #148]	; 0x94
   8a1e6:	6420      	str	r0, [r4, #64]	; 0x40
   8a1e8:	930b      	str	r3, [sp, #44]	; 0x2c
   8a1ea:	f7ff b9e0 	b.w	895ae <_dtoa_r+0x1f6>
   8a1ee:	2501      	movs	r5, #1
   8a1f0:	f7ff b9a8 	b.w	89544 <_dtoa_r+0x18c>
   8a1f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a1f6:	9307      	str	r3, [sp, #28]
   8a1f8:	e5e8      	b.n	89dcc <_dtoa_r+0xa14>
   8a1fa:	bf00      	nop

0008a1fc <__sflush_r>:
   8a1fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a204:	b29a      	uxth	r2, r3
   8a206:	460d      	mov	r5, r1
   8a208:	0711      	lsls	r1, r2, #28
   8a20a:	4680      	mov	r8, r0
   8a20c:	d43a      	bmi.n	8a284 <__sflush_r+0x88>
   8a20e:	686a      	ldr	r2, [r5, #4]
   8a210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8a214:	2a00      	cmp	r2, #0
   8a216:	81ab      	strh	r3, [r5, #12]
   8a218:	dd70      	ble.n	8a2fc <__sflush_r+0x100>
   8a21a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a21c:	2c00      	cmp	r4, #0
   8a21e:	d04a      	beq.n	8a2b6 <__sflush_r+0xba>
   8a220:	2200      	movs	r2, #0
   8a222:	b29b      	uxth	r3, r3
   8a224:	f8d8 6000 	ldr.w	r6, [r8]
   8a228:	f8c8 2000 	str.w	r2, [r8]
   8a22c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   8a230:	d068      	beq.n	8a304 <__sflush_r+0x108>
   8a232:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8a234:	075f      	lsls	r7, r3, #29
   8a236:	d505      	bpl.n	8a244 <__sflush_r+0x48>
   8a238:	6869      	ldr	r1, [r5, #4]
   8a23a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8a23c:	1a52      	subs	r2, r2, r1
   8a23e:	b10b      	cbz	r3, 8a244 <__sflush_r+0x48>
   8a240:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a242:	1ad2      	subs	r2, r2, r3
   8a244:	2300      	movs	r3, #0
   8a246:	69e9      	ldr	r1, [r5, #28]
   8a248:	4640      	mov	r0, r8
   8a24a:	47a0      	blx	r4
   8a24c:	1c44      	adds	r4, r0, #1
   8a24e:	d03d      	beq.n	8a2cc <__sflush_r+0xd0>
   8a250:	2100      	movs	r1, #0
   8a252:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8a256:	692a      	ldr	r2, [r5, #16]
   8a258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a25c:	81ab      	strh	r3, [r5, #12]
   8a25e:	04db      	lsls	r3, r3, #19
   8a260:	6069      	str	r1, [r5, #4]
   8a262:	602a      	str	r2, [r5, #0]
   8a264:	d448      	bmi.n	8a2f8 <__sflush_r+0xfc>
   8a266:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8a268:	f8c8 6000 	str.w	r6, [r8]
   8a26c:	b319      	cbz	r1, 8a2b6 <__sflush_r+0xba>
   8a26e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8a272:	4299      	cmp	r1, r3
   8a274:	d002      	beq.n	8a27c <__sflush_r+0x80>
   8a276:	4640      	mov	r0, r8
   8a278:	f000 f9da 	bl	8a630 <_free_r>
   8a27c:	2000      	movs	r0, #0
   8a27e:	6328      	str	r0, [r5, #48]	; 0x30
   8a280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a284:	692e      	ldr	r6, [r5, #16]
   8a286:	b1b6      	cbz	r6, 8a2b6 <__sflush_r+0xba>
   8a288:	0791      	lsls	r1, r2, #30
   8a28a:	bf18      	it	ne
   8a28c:	2300      	movne	r3, #0
   8a28e:	682c      	ldr	r4, [r5, #0]
   8a290:	bf08      	it	eq
   8a292:	696b      	ldreq	r3, [r5, #20]
   8a294:	602e      	str	r6, [r5, #0]
   8a296:	1ba4      	subs	r4, r4, r6
   8a298:	60ab      	str	r3, [r5, #8]
   8a29a:	e00a      	b.n	8a2b2 <__sflush_r+0xb6>
   8a29c:	4623      	mov	r3, r4
   8a29e:	4632      	mov	r2, r6
   8a2a0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8a2a2:	69e9      	ldr	r1, [r5, #28]
   8a2a4:	4640      	mov	r0, r8
   8a2a6:	47b8      	blx	r7
   8a2a8:	2800      	cmp	r0, #0
   8a2aa:	eba4 0400 	sub.w	r4, r4, r0
   8a2ae:	4406      	add	r6, r0
   8a2b0:	dd04      	ble.n	8a2bc <__sflush_r+0xc0>
   8a2b2:	2c00      	cmp	r4, #0
   8a2b4:	dcf2      	bgt.n	8a29c <__sflush_r+0xa0>
   8a2b6:	2000      	movs	r0, #0
   8a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a2bc:	89ab      	ldrh	r3, [r5, #12]
   8a2be:	f04f 30ff 	mov.w	r0, #4294967295
   8a2c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a2c6:	81ab      	strh	r3, [r5, #12]
   8a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a2cc:	f8d8 4000 	ldr.w	r4, [r8]
   8a2d0:	2c1d      	cmp	r4, #29
   8a2d2:	d8f3      	bhi.n	8a2bc <__sflush_r+0xc0>
   8a2d4:	4b16      	ldr	r3, [pc, #88]	; (8a330 <__sflush_r+0x134>)
   8a2d6:	40e3      	lsrs	r3, r4
   8a2d8:	43db      	mvns	r3, r3
   8a2da:	f013 0301 	ands.w	r3, r3, #1
   8a2de:	d1ed      	bne.n	8a2bc <__sflush_r+0xc0>
   8a2e0:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   8a2e4:	6929      	ldr	r1, [r5, #16]
   8a2e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8a2ea:	81aa      	strh	r2, [r5, #12]
   8a2ec:	04d2      	lsls	r2, r2, #19
   8a2ee:	606b      	str	r3, [r5, #4]
   8a2f0:	6029      	str	r1, [r5, #0]
   8a2f2:	d5b8      	bpl.n	8a266 <__sflush_r+0x6a>
   8a2f4:	2c00      	cmp	r4, #0
   8a2f6:	d1b6      	bne.n	8a266 <__sflush_r+0x6a>
   8a2f8:	6528      	str	r0, [r5, #80]	; 0x50
   8a2fa:	e7b4      	b.n	8a266 <__sflush_r+0x6a>
   8a2fc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8a2fe:	2a00      	cmp	r2, #0
   8a300:	dc8b      	bgt.n	8a21a <__sflush_r+0x1e>
   8a302:	e7d8      	b.n	8a2b6 <__sflush_r+0xba>
   8a304:	2301      	movs	r3, #1
   8a306:	69e9      	ldr	r1, [r5, #28]
   8a308:	4640      	mov	r0, r8
   8a30a:	47a0      	blx	r4
   8a30c:	1c43      	adds	r3, r0, #1
   8a30e:	4602      	mov	r2, r0
   8a310:	d002      	beq.n	8a318 <__sflush_r+0x11c>
   8a312:	89ab      	ldrh	r3, [r5, #12]
   8a314:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a316:	e78d      	b.n	8a234 <__sflush_r+0x38>
   8a318:	f8d8 3000 	ldr.w	r3, [r8]
   8a31c:	2b00      	cmp	r3, #0
   8a31e:	d0f8      	beq.n	8a312 <__sflush_r+0x116>
   8a320:	2b1d      	cmp	r3, #29
   8a322:	d001      	beq.n	8a328 <__sflush_r+0x12c>
   8a324:	2b16      	cmp	r3, #22
   8a326:	d1c9      	bne.n	8a2bc <__sflush_r+0xc0>
   8a328:	f8c8 6000 	str.w	r6, [r8]
   8a32c:	e7c3      	b.n	8a2b6 <__sflush_r+0xba>
   8a32e:	bf00      	nop
   8a330:	20400001 	.word	0x20400001

0008a334 <_fflush_r>:
   8a334:	b538      	push	{r3, r4, r5, lr}
   8a336:	460d      	mov	r5, r1
   8a338:	4604      	mov	r4, r0
   8a33a:	b108      	cbz	r0, 8a340 <_fflush_r+0xc>
   8a33c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a33e:	b1bb      	cbz	r3, 8a370 <_fflush_r+0x3c>
   8a340:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   8a344:	b188      	cbz	r0, 8a36a <_fflush_r+0x36>
   8a346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8a348:	07db      	lsls	r3, r3, #31
   8a34a:	d401      	bmi.n	8a350 <_fflush_r+0x1c>
   8a34c:	0581      	lsls	r1, r0, #22
   8a34e:	d517      	bpl.n	8a380 <_fflush_r+0x4c>
   8a350:	4620      	mov	r0, r4
   8a352:	4629      	mov	r1, r5
   8a354:	f7ff ff52 	bl	8a1fc <__sflush_r>
   8a358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8a35a:	4604      	mov	r4, r0
   8a35c:	07da      	lsls	r2, r3, #31
   8a35e:	d402      	bmi.n	8a366 <_fflush_r+0x32>
   8a360:	89ab      	ldrh	r3, [r5, #12]
   8a362:	059b      	lsls	r3, r3, #22
   8a364:	d507      	bpl.n	8a376 <_fflush_r+0x42>
   8a366:	4620      	mov	r0, r4
   8a368:	bd38      	pop	{r3, r4, r5, pc}
   8a36a:	4604      	mov	r4, r0
   8a36c:	4620      	mov	r0, r4
   8a36e:	bd38      	pop	{r3, r4, r5, pc}
   8a370:	f000 f838 	bl	8a3e4 <__sinit>
   8a374:	e7e4      	b.n	8a340 <_fflush_r+0xc>
   8a376:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8a378:	f000 fc04 	bl	8ab84 <__retarget_lock_release_recursive>
   8a37c:	4620      	mov	r0, r4
   8a37e:	bd38      	pop	{r3, r4, r5, pc}
   8a380:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8a382:	f000 fbfd 	bl	8ab80 <__retarget_lock_acquire_recursive>
   8a386:	e7e3      	b.n	8a350 <_fflush_r+0x1c>

0008a388 <_cleanup_r>:
   8a388:	4901      	ldr	r1, [pc, #4]	; (8a390 <_cleanup_r+0x8>)
   8a38a:	f000 bbb1 	b.w	8aaf0 <_fwalk_reent>
   8a38e:	bf00      	nop
   8a390:	0008c101 	.word	0x0008c101

0008a394 <std.isra.0>:
   8a394:	2300      	movs	r3, #0
   8a396:	b510      	push	{r4, lr}
   8a398:	4604      	mov	r4, r0
   8a39a:	8181      	strh	r1, [r0, #12]
   8a39c:	81c2      	strh	r2, [r0, #14]
   8a39e:	6003      	str	r3, [r0, #0]
   8a3a0:	6043      	str	r3, [r0, #4]
   8a3a2:	6083      	str	r3, [r0, #8]
   8a3a4:	6643      	str	r3, [r0, #100]	; 0x64
   8a3a6:	6103      	str	r3, [r0, #16]
   8a3a8:	6143      	str	r3, [r0, #20]
   8a3aa:	6183      	str	r3, [r0, #24]
   8a3ac:	4619      	mov	r1, r3
   8a3ae:	2208      	movs	r2, #8
   8a3b0:	305c      	adds	r0, #92	; 0x5c
   8a3b2:	f7fc fc0b 	bl	86bcc <memset>
   8a3b6:	4807      	ldr	r0, [pc, #28]	; (8a3d4 <std.isra.0+0x40>)
   8a3b8:	4907      	ldr	r1, [pc, #28]	; (8a3d8 <std.isra.0+0x44>)
   8a3ba:	4a08      	ldr	r2, [pc, #32]	; (8a3dc <std.isra.0+0x48>)
   8a3bc:	4b08      	ldr	r3, [pc, #32]	; (8a3e0 <std.isra.0+0x4c>)
   8a3be:	6220      	str	r0, [r4, #32]
   8a3c0:	61e4      	str	r4, [r4, #28]
   8a3c2:	6261      	str	r1, [r4, #36]	; 0x24
   8a3c4:	62a2      	str	r2, [r4, #40]	; 0x28
   8a3c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   8a3c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8a3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a3d0:	f000 bbd2 	b.w	8ab78 <__retarget_lock_init_recursive>
   8a3d4:	0008bced 	.word	0x0008bced
   8a3d8:	0008bd11 	.word	0x0008bd11
   8a3dc:	0008bd4d 	.word	0x0008bd4d
   8a3e0:	0008bd6d 	.word	0x0008bd6d

0008a3e4 <__sinit>:
   8a3e4:	b510      	push	{r4, lr}
   8a3e6:	4604      	mov	r4, r0
   8a3e8:	4814      	ldr	r0, [pc, #80]	; (8a43c <__sinit+0x58>)
   8a3ea:	f000 fbc9 	bl	8ab80 <__retarget_lock_acquire_recursive>
   8a3ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8a3f0:	b9fa      	cbnz	r2, 8a432 <__sinit+0x4e>
   8a3f2:	2003      	movs	r0, #3
   8a3f4:	4912      	ldr	r1, [pc, #72]	; (8a440 <__sinit+0x5c>)
   8a3f6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8a3fa:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8a3fe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8a402:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8a406:	63e1      	str	r1, [r4, #60]	; 0x3c
   8a408:	6860      	ldr	r0, [r4, #4]
   8a40a:	2104      	movs	r1, #4
   8a40c:	f7ff ffc2 	bl	8a394 <std.isra.0>
   8a410:	68a0      	ldr	r0, [r4, #8]
   8a412:	2201      	movs	r2, #1
   8a414:	2109      	movs	r1, #9
   8a416:	f7ff ffbd 	bl	8a394 <std.isra.0>
   8a41a:	68e0      	ldr	r0, [r4, #12]
   8a41c:	2202      	movs	r2, #2
   8a41e:	2112      	movs	r1, #18
   8a420:	f7ff ffb8 	bl	8a394 <std.isra.0>
   8a424:	2301      	movs	r3, #1
   8a426:	4805      	ldr	r0, [pc, #20]	; (8a43c <__sinit+0x58>)
   8a428:	63a3      	str	r3, [r4, #56]	; 0x38
   8a42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a42e:	f000 bba9 	b.w	8ab84 <__retarget_lock_release_recursive>
   8a432:	4802      	ldr	r0, [pc, #8]	; (8a43c <__sinit+0x58>)
   8a434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a438:	f000 bba4 	b.w	8ab84 <__retarget_lock_release_recursive>
   8a43c:	200028a0 	.word	0x200028a0
   8a440:	0008a389 	.word	0x0008a389

0008a444 <__sfp_lock_acquire>:
   8a444:	4801      	ldr	r0, [pc, #4]	; (8a44c <__sfp_lock_acquire+0x8>)
   8a446:	f000 bb9b 	b.w	8ab80 <__retarget_lock_acquire_recursive>
   8a44a:	bf00      	nop
   8a44c:	200028b4 	.word	0x200028b4

0008a450 <__sfp_lock_release>:
   8a450:	4801      	ldr	r0, [pc, #4]	; (8a458 <__sfp_lock_release+0x8>)
   8a452:	f000 bb97 	b.w	8ab84 <__retarget_lock_release_recursive>
   8a456:	bf00      	nop
   8a458:	200028b4 	.word	0x200028b4

0008a45c <__libc_fini_array>:
   8a45c:	b538      	push	{r3, r4, r5, lr}
   8a45e:	4c0a      	ldr	r4, [pc, #40]	; (8a488 <__libc_fini_array+0x2c>)
   8a460:	4d0a      	ldr	r5, [pc, #40]	; (8a48c <__libc_fini_array+0x30>)
   8a462:	1b64      	subs	r4, r4, r5
   8a464:	10a4      	asrs	r4, r4, #2
   8a466:	d00a      	beq.n	8a47e <__libc_fini_array+0x22>
   8a468:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8a46c:	3b01      	subs	r3, #1
   8a46e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8a472:	3c01      	subs	r4, #1
   8a474:	f855 3904 	ldr.w	r3, [r5], #-4
   8a478:	4798      	blx	r3
   8a47a:	2c00      	cmp	r4, #0
   8a47c:	d1f9      	bne.n	8a472 <__libc_fini_array+0x16>
   8a47e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a482:	f002 bd63 	b.w	8cf4c <_fini>
   8a486:	bf00      	nop
   8a488:	0008cf5c 	.word	0x0008cf5c
   8a48c:	0008cf58 	.word	0x0008cf58

0008a490 <__fputwc>:
   8a490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a494:	b083      	sub	sp, #12
   8a496:	4607      	mov	r7, r0
   8a498:	4688      	mov	r8, r1
   8a49a:	4614      	mov	r4, r2
   8a49c:	f000 fb50 	bl	8ab40 <__locale_mb_cur_max>
   8a4a0:	2801      	cmp	r0, #1
   8a4a2:	d033      	beq.n	8a50c <__fputwc+0x7c>
   8a4a4:	4642      	mov	r2, r8
   8a4a6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a4aa:	a901      	add	r1, sp, #4
   8a4ac:	4638      	mov	r0, r7
   8a4ae:	f001 fd37 	bl	8bf20 <_wcrtomb_r>
   8a4b2:	1c42      	adds	r2, r0, #1
   8a4b4:	4606      	mov	r6, r0
   8a4b6:	d022      	beq.n	8a4fe <__fputwc+0x6e>
   8a4b8:	b390      	cbz	r0, 8a520 <__fputwc+0x90>
   8a4ba:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a4be:	2500      	movs	r5, #0
   8a4c0:	f10d 0904 	add.w	r9, sp, #4
   8a4c4:	e008      	b.n	8a4d8 <__fputwc+0x48>
   8a4c6:	6823      	ldr	r3, [r4, #0]
   8a4c8:	1c5a      	adds	r2, r3, #1
   8a4ca:	6022      	str	r2, [r4, #0]
   8a4cc:	7019      	strb	r1, [r3, #0]
   8a4ce:	3501      	adds	r5, #1
   8a4d0:	42b5      	cmp	r5, r6
   8a4d2:	d225      	bcs.n	8a520 <__fputwc+0x90>
   8a4d4:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a4d8:	68a3      	ldr	r3, [r4, #8]
   8a4da:	3b01      	subs	r3, #1
   8a4dc:	2b00      	cmp	r3, #0
   8a4de:	60a3      	str	r3, [r4, #8]
   8a4e0:	daf1      	bge.n	8a4c6 <__fputwc+0x36>
   8a4e2:	69a2      	ldr	r2, [r4, #24]
   8a4e4:	4293      	cmp	r3, r2
   8a4e6:	db01      	blt.n	8a4ec <__fputwc+0x5c>
   8a4e8:	290a      	cmp	r1, #10
   8a4ea:	d1ec      	bne.n	8a4c6 <__fputwc+0x36>
   8a4ec:	4622      	mov	r2, r4
   8a4ee:	4638      	mov	r0, r7
   8a4f0:	f001 fcbe 	bl	8be70 <__swbuf_r>
   8a4f4:	1c43      	adds	r3, r0, #1
   8a4f6:	d1ea      	bne.n	8a4ce <__fputwc+0x3e>
   8a4f8:	b003      	add	sp, #12
   8a4fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a4fe:	89a3      	ldrh	r3, [r4, #12]
   8a500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a504:	81a3      	strh	r3, [r4, #12]
   8a506:	b003      	add	sp, #12
   8a508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a50c:	f108 33ff 	add.w	r3, r8, #4294967295
   8a510:	2bfe      	cmp	r3, #254	; 0xfe
   8a512:	d8c7      	bhi.n	8a4a4 <__fputwc+0x14>
   8a514:	fa5f f188 	uxtb.w	r1, r8
   8a518:	4606      	mov	r6, r0
   8a51a:	f88d 1004 	strb.w	r1, [sp, #4]
   8a51e:	e7ce      	b.n	8a4be <__fputwc+0x2e>
   8a520:	4640      	mov	r0, r8
   8a522:	b003      	add	sp, #12
   8a524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a528 <_fputwc_r>:
   8a528:	b530      	push	{r4, r5, lr}
   8a52a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a52c:	4614      	mov	r4, r2
   8a52e:	f013 0f01 	tst.w	r3, #1
   8a532:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a536:	b083      	sub	sp, #12
   8a538:	4605      	mov	r5, r0
   8a53a:	b29a      	uxth	r2, r3
   8a53c:	d101      	bne.n	8a542 <_fputwc_r+0x1a>
   8a53e:	0590      	lsls	r0, r2, #22
   8a540:	d51c      	bpl.n	8a57c <_fputwc_r+0x54>
   8a542:	0490      	lsls	r0, r2, #18
   8a544:	d406      	bmi.n	8a554 <_fputwc_r+0x2c>
   8a546:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a54c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a550:	81a3      	strh	r3, [r4, #12]
   8a552:	6662      	str	r2, [r4, #100]	; 0x64
   8a554:	4628      	mov	r0, r5
   8a556:	4622      	mov	r2, r4
   8a558:	f7ff ff9a 	bl	8a490 <__fputwc>
   8a55c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a55e:	4605      	mov	r5, r0
   8a560:	07da      	lsls	r2, r3, #31
   8a562:	d402      	bmi.n	8a56a <_fputwc_r+0x42>
   8a564:	89a3      	ldrh	r3, [r4, #12]
   8a566:	059b      	lsls	r3, r3, #22
   8a568:	d502      	bpl.n	8a570 <_fputwc_r+0x48>
   8a56a:	4628      	mov	r0, r5
   8a56c:	b003      	add	sp, #12
   8a56e:	bd30      	pop	{r4, r5, pc}
   8a570:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a572:	f000 fb07 	bl	8ab84 <__retarget_lock_release_recursive>
   8a576:	4628      	mov	r0, r5
   8a578:	b003      	add	sp, #12
   8a57a:	bd30      	pop	{r4, r5, pc}
   8a57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a57e:	9101      	str	r1, [sp, #4]
   8a580:	f000 fafe 	bl	8ab80 <__retarget_lock_acquire_recursive>
   8a584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a588:	9901      	ldr	r1, [sp, #4]
   8a58a:	b29a      	uxth	r2, r3
   8a58c:	e7d9      	b.n	8a542 <_fputwc_r+0x1a>
   8a58e:	bf00      	nop

0008a590 <_malloc_trim_r>:
   8a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a592:	460c      	mov	r4, r1
   8a594:	4f23      	ldr	r7, [pc, #140]	; (8a624 <_malloc_trim_r+0x94>)
   8a596:	4606      	mov	r6, r0
   8a598:	f000 fed8 	bl	8b34c <__malloc_lock>
   8a59c:	68bb      	ldr	r3, [r7, #8]
   8a59e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a5a2:	685d      	ldr	r5, [r3, #4]
   8a5a4:	310f      	adds	r1, #15
   8a5a6:	f025 0503 	bic.w	r5, r5, #3
   8a5aa:	4429      	add	r1, r5
   8a5ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8a5b0:	f021 010f 	bic.w	r1, r1, #15
   8a5b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8a5b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a5bc:	db07      	blt.n	8a5ce <_malloc_trim_r+0x3e>
   8a5be:	2100      	movs	r1, #0
   8a5c0:	4630      	mov	r0, r6
   8a5c2:	f001 fb81 	bl	8bcc8 <_sbrk_r>
   8a5c6:	68bb      	ldr	r3, [r7, #8]
   8a5c8:	442b      	add	r3, r5
   8a5ca:	4298      	cmp	r0, r3
   8a5cc:	d004      	beq.n	8a5d8 <_malloc_trim_r+0x48>
   8a5ce:	4630      	mov	r0, r6
   8a5d0:	f000 fec2 	bl	8b358 <__malloc_unlock>
   8a5d4:	2000      	movs	r0, #0
   8a5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a5d8:	4261      	negs	r1, r4
   8a5da:	4630      	mov	r0, r6
   8a5dc:	f001 fb74 	bl	8bcc8 <_sbrk_r>
   8a5e0:	3001      	adds	r0, #1
   8a5e2:	d00d      	beq.n	8a600 <_malloc_trim_r+0x70>
   8a5e4:	4b10      	ldr	r3, [pc, #64]	; (8a628 <_malloc_trim_r+0x98>)
   8a5e6:	68ba      	ldr	r2, [r7, #8]
   8a5e8:	6819      	ldr	r1, [r3, #0]
   8a5ea:	1b2d      	subs	r5, r5, r4
   8a5ec:	f045 0501 	orr.w	r5, r5, #1
   8a5f0:	4630      	mov	r0, r6
   8a5f2:	1b09      	subs	r1, r1, r4
   8a5f4:	6055      	str	r5, [r2, #4]
   8a5f6:	6019      	str	r1, [r3, #0]
   8a5f8:	f000 feae 	bl	8b358 <__malloc_unlock>
   8a5fc:	2001      	movs	r0, #1
   8a5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a600:	2100      	movs	r1, #0
   8a602:	4630      	mov	r0, r6
   8a604:	f001 fb60 	bl	8bcc8 <_sbrk_r>
   8a608:	68ba      	ldr	r2, [r7, #8]
   8a60a:	1a83      	subs	r3, r0, r2
   8a60c:	2b0f      	cmp	r3, #15
   8a60e:	ddde      	ble.n	8a5ce <_malloc_trim_r+0x3e>
   8a610:	4c06      	ldr	r4, [pc, #24]	; (8a62c <_malloc_trim_r+0x9c>)
   8a612:	4905      	ldr	r1, [pc, #20]	; (8a628 <_malloc_trim_r+0x98>)
   8a614:	6824      	ldr	r4, [r4, #0]
   8a616:	f043 0301 	orr.w	r3, r3, #1
   8a61a:	1b00      	subs	r0, r0, r4
   8a61c:	6053      	str	r3, [r2, #4]
   8a61e:	6008      	str	r0, [r1, #0]
   8a620:	e7d5      	b.n	8a5ce <_malloc_trim_r+0x3e>
   8a622:	bf00      	nop
   8a624:	20001128 	.word	0x20001128
   8a628:	20002384 	.word	0x20002384
   8a62c:	20001530 	.word	0x20001530

0008a630 <_free_r>:
   8a630:	2900      	cmp	r1, #0
   8a632:	d044      	beq.n	8a6be <_free_r+0x8e>
   8a634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a638:	460d      	mov	r5, r1
   8a63a:	4680      	mov	r8, r0
   8a63c:	f000 fe86 	bl	8b34c <__malloc_lock>
   8a640:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8a644:	4969      	ldr	r1, [pc, #420]	; (8a7ec <_free_r+0x1bc>)
   8a646:	f1a5 0408 	sub.w	r4, r5, #8
   8a64a:	f027 0301 	bic.w	r3, r7, #1
   8a64e:	18e2      	adds	r2, r4, r3
   8a650:	688e      	ldr	r6, [r1, #8]
   8a652:	6850      	ldr	r0, [r2, #4]
   8a654:	42b2      	cmp	r2, r6
   8a656:	f020 0003 	bic.w	r0, r0, #3
   8a65a:	d05e      	beq.n	8a71a <_free_r+0xea>
   8a65c:	07fe      	lsls	r6, r7, #31
   8a65e:	6050      	str	r0, [r2, #4]
   8a660:	d40b      	bmi.n	8a67a <_free_r+0x4a>
   8a662:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8a666:	f101 0e08 	add.w	lr, r1, #8
   8a66a:	1be4      	subs	r4, r4, r7
   8a66c:	68a5      	ldr	r5, [r4, #8]
   8a66e:	443b      	add	r3, r7
   8a670:	4575      	cmp	r5, lr
   8a672:	d06d      	beq.n	8a750 <_free_r+0x120>
   8a674:	68e7      	ldr	r7, [r4, #12]
   8a676:	60ef      	str	r7, [r5, #12]
   8a678:	60bd      	str	r5, [r7, #8]
   8a67a:	1815      	adds	r5, r2, r0
   8a67c:	686d      	ldr	r5, [r5, #4]
   8a67e:	07ed      	lsls	r5, r5, #31
   8a680:	d53e      	bpl.n	8a700 <_free_r+0xd0>
   8a682:	f043 0201 	orr.w	r2, r3, #1
   8a686:	6062      	str	r2, [r4, #4]
   8a688:	50e3      	str	r3, [r4, r3]
   8a68a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8a68e:	d217      	bcs.n	8a6c0 <_free_r+0x90>
   8a690:	2201      	movs	r2, #1
   8a692:	08db      	lsrs	r3, r3, #3
   8a694:	1098      	asrs	r0, r3, #2
   8a696:	684d      	ldr	r5, [r1, #4]
   8a698:	4413      	add	r3, r2
   8a69a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8a69e:	4082      	lsls	r2, r0
   8a6a0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8a6a4:	432a      	orrs	r2, r5
   8a6a6:	3808      	subs	r0, #8
   8a6a8:	60e0      	str	r0, [r4, #12]
   8a6aa:	60a7      	str	r7, [r4, #8]
   8a6ac:	604a      	str	r2, [r1, #4]
   8a6ae:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8a6b2:	60fc      	str	r4, [r7, #12]
   8a6b4:	4640      	mov	r0, r8
   8a6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8a6ba:	f000 be4d 	b.w	8b358 <__malloc_unlock>
   8a6be:	4770      	bx	lr
   8a6c0:	0a5a      	lsrs	r2, r3, #9
   8a6c2:	2a04      	cmp	r2, #4
   8a6c4:	d852      	bhi.n	8a76c <_free_r+0x13c>
   8a6c6:	099a      	lsrs	r2, r3, #6
   8a6c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8a6cc:	00ff      	lsls	r7, r7, #3
   8a6ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8a6d2:	19c8      	adds	r0, r1, r7
   8a6d4:	59ca      	ldr	r2, [r1, r7]
   8a6d6:	3808      	subs	r0, #8
   8a6d8:	4290      	cmp	r0, r2
   8a6da:	d04f      	beq.n	8a77c <_free_r+0x14c>
   8a6dc:	6851      	ldr	r1, [r2, #4]
   8a6de:	f021 0103 	bic.w	r1, r1, #3
   8a6e2:	428b      	cmp	r3, r1
   8a6e4:	d232      	bcs.n	8a74c <_free_r+0x11c>
   8a6e6:	6892      	ldr	r2, [r2, #8]
   8a6e8:	4290      	cmp	r0, r2
   8a6ea:	d1f7      	bne.n	8a6dc <_free_r+0xac>
   8a6ec:	68c3      	ldr	r3, [r0, #12]
   8a6ee:	60a0      	str	r0, [r4, #8]
   8a6f0:	60e3      	str	r3, [r4, #12]
   8a6f2:	609c      	str	r4, [r3, #8]
   8a6f4:	60c4      	str	r4, [r0, #12]
   8a6f6:	4640      	mov	r0, r8
   8a6f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8a6fc:	f000 be2c 	b.w	8b358 <__malloc_unlock>
   8a700:	6895      	ldr	r5, [r2, #8]
   8a702:	4f3b      	ldr	r7, [pc, #236]	; (8a7f0 <_free_r+0x1c0>)
   8a704:	4403      	add	r3, r0
   8a706:	42bd      	cmp	r5, r7
   8a708:	d040      	beq.n	8a78c <_free_r+0x15c>
   8a70a:	68d0      	ldr	r0, [r2, #12]
   8a70c:	f043 0201 	orr.w	r2, r3, #1
   8a710:	60e8      	str	r0, [r5, #12]
   8a712:	6085      	str	r5, [r0, #8]
   8a714:	6062      	str	r2, [r4, #4]
   8a716:	50e3      	str	r3, [r4, r3]
   8a718:	e7b7      	b.n	8a68a <_free_r+0x5a>
   8a71a:	07ff      	lsls	r7, r7, #31
   8a71c:	4403      	add	r3, r0
   8a71e:	d407      	bmi.n	8a730 <_free_r+0x100>
   8a720:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8a724:	1b64      	subs	r4, r4, r5
   8a726:	68e2      	ldr	r2, [r4, #12]
   8a728:	68a0      	ldr	r0, [r4, #8]
   8a72a:	442b      	add	r3, r5
   8a72c:	60c2      	str	r2, [r0, #12]
   8a72e:	6090      	str	r0, [r2, #8]
   8a730:	4a30      	ldr	r2, [pc, #192]	; (8a7f4 <_free_r+0x1c4>)
   8a732:	f043 0001 	orr.w	r0, r3, #1
   8a736:	6812      	ldr	r2, [r2, #0]
   8a738:	6060      	str	r0, [r4, #4]
   8a73a:	4293      	cmp	r3, r2
   8a73c:	608c      	str	r4, [r1, #8]
   8a73e:	d3b9      	bcc.n	8a6b4 <_free_r+0x84>
   8a740:	4b2d      	ldr	r3, [pc, #180]	; (8a7f8 <_free_r+0x1c8>)
   8a742:	4640      	mov	r0, r8
   8a744:	6819      	ldr	r1, [r3, #0]
   8a746:	f7ff ff23 	bl	8a590 <_malloc_trim_r>
   8a74a:	e7b3      	b.n	8a6b4 <_free_r+0x84>
   8a74c:	4610      	mov	r0, r2
   8a74e:	e7cd      	b.n	8a6ec <_free_r+0xbc>
   8a750:	1811      	adds	r1, r2, r0
   8a752:	6849      	ldr	r1, [r1, #4]
   8a754:	07c9      	lsls	r1, r1, #31
   8a756:	d444      	bmi.n	8a7e2 <_free_r+0x1b2>
   8a758:	6891      	ldr	r1, [r2, #8]
   8a75a:	4403      	add	r3, r0
   8a75c:	68d2      	ldr	r2, [r2, #12]
   8a75e:	f043 0001 	orr.w	r0, r3, #1
   8a762:	60ca      	str	r2, [r1, #12]
   8a764:	6091      	str	r1, [r2, #8]
   8a766:	6060      	str	r0, [r4, #4]
   8a768:	50e3      	str	r3, [r4, r3]
   8a76a:	e7a3      	b.n	8a6b4 <_free_r+0x84>
   8a76c:	2a14      	cmp	r2, #20
   8a76e:	d816      	bhi.n	8a79e <_free_r+0x16e>
   8a770:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8a774:	00ff      	lsls	r7, r7, #3
   8a776:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8a77a:	e7aa      	b.n	8a6d2 <_free_r+0xa2>
   8a77c:	2301      	movs	r3, #1
   8a77e:	10aa      	asrs	r2, r5, #2
   8a780:	684d      	ldr	r5, [r1, #4]
   8a782:	4093      	lsls	r3, r2
   8a784:	432b      	orrs	r3, r5
   8a786:	604b      	str	r3, [r1, #4]
   8a788:	4603      	mov	r3, r0
   8a78a:	e7b0      	b.n	8a6ee <_free_r+0xbe>
   8a78c:	f043 0201 	orr.w	r2, r3, #1
   8a790:	614c      	str	r4, [r1, #20]
   8a792:	610c      	str	r4, [r1, #16]
   8a794:	60e5      	str	r5, [r4, #12]
   8a796:	60a5      	str	r5, [r4, #8]
   8a798:	6062      	str	r2, [r4, #4]
   8a79a:	50e3      	str	r3, [r4, r3]
   8a79c:	e78a      	b.n	8a6b4 <_free_r+0x84>
   8a79e:	2a54      	cmp	r2, #84	; 0x54
   8a7a0:	d806      	bhi.n	8a7b0 <_free_r+0x180>
   8a7a2:	0b1a      	lsrs	r2, r3, #12
   8a7a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8a7a8:	00ff      	lsls	r7, r7, #3
   8a7aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8a7ae:	e790      	b.n	8a6d2 <_free_r+0xa2>
   8a7b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8a7b4:	d806      	bhi.n	8a7c4 <_free_r+0x194>
   8a7b6:	0bda      	lsrs	r2, r3, #15
   8a7b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8a7bc:	00ff      	lsls	r7, r7, #3
   8a7be:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8a7c2:	e786      	b.n	8a6d2 <_free_r+0xa2>
   8a7c4:	f240 5054 	movw	r0, #1364	; 0x554
   8a7c8:	4282      	cmp	r2, r0
   8a7ca:	d806      	bhi.n	8a7da <_free_r+0x1aa>
   8a7cc:	0c9a      	lsrs	r2, r3, #18
   8a7ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8a7d2:	00ff      	lsls	r7, r7, #3
   8a7d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8a7d8:	e77b      	b.n	8a6d2 <_free_r+0xa2>
   8a7da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8a7de:	257e      	movs	r5, #126	; 0x7e
   8a7e0:	e777      	b.n	8a6d2 <_free_r+0xa2>
   8a7e2:	f043 0101 	orr.w	r1, r3, #1
   8a7e6:	6061      	str	r1, [r4, #4]
   8a7e8:	6013      	str	r3, [r2, #0]
   8a7ea:	e763      	b.n	8a6b4 <_free_r+0x84>
   8a7ec:	20001128 	.word	0x20001128
   8a7f0:	20001130 	.word	0x20001130
   8a7f4:	20001534 	.word	0x20001534
   8a7f8:	200023b4 	.word	0x200023b4

0008a7fc <__sfvwrite_r>:
   8a7fc:	6893      	ldr	r3, [r2, #8]
   8a7fe:	2b00      	cmp	r3, #0
   8a800:	d071      	beq.n	8a8e6 <__sfvwrite_r+0xea>
   8a802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a806:	898b      	ldrh	r3, [r1, #12]
   8a808:	b083      	sub	sp, #12
   8a80a:	460c      	mov	r4, r1
   8a80c:	0719      	lsls	r1, r3, #28
   8a80e:	9000      	str	r0, [sp, #0]
   8a810:	4616      	mov	r6, r2
   8a812:	d525      	bpl.n	8a860 <__sfvwrite_r+0x64>
   8a814:	6922      	ldr	r2, [r4, #16]
   8a816:	b31a      	cbz	r2, 8a860 <__sfvwrite_r+0x64>
   8a818:	f013 0002 	ands.w	r0, r3, #2
   8a81c:	6835      	ldr	r5, [r6, #0]
   8a81e:	d02b      	beq.n	8a878 <__sfvwrite_r+0x7c>
   8a820:	f04f 0900 	mov.w	r9, #0
   8a824:	46b0      	mov	r8, r6
   8a826:	464f      	mov	r7, r9
   8a828:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8aaec <__sfvwrite_r+0x2f0>
   8a82c:	2f00      	cmp	r7, #0
   8a82e:	d055      	beq.n	8a8dc <__sfvwrite_r+0xe0>
   8a830:	4557      	cmp	r7, sl
   8a832:	463b      	mov	r3, r7
   8a834:	464a      	mov	r2, r9
   8a836:	bf28      	it	cs
   8a838:	4653      	movcs	r3, sl
   8a83a:	69e1      	ldr	r1, [r4, #28]
   8a83c:	9800      	ldr	r0, [sp, #0]
   8a83e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a840:	47b0      	blx	r6
   8a842:	2800      	cmp	r0, #0
   8a844:	dd56      	ble.n	8a8f4 <__sfvwrite_r+0xf8>
   8a846:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a84a:	4481      	add	r9, r0
   8a84c:	1a1b      	subs	r3, r3, r0
   8a84e:	1a3f      	subs	r7, r7, r0
   8a850:	f8c8 3008 	str.w	r3, [r8, #8]
   8a854:	2b00      	cmp	r3, #0
   8a856:	d1e9      	bne.n	8a82c <__sfvwrite_r+0x30>
   8a858:	2000      	movs	r0, #0
   8a85a:	b003      	add	sp, #12
   8a85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a860:	4621      	mov	r1, r4
   8a862:	9800      	ldr	r0, [sp, #0]
   8a864:	f7fe fc9e 	bl	891a4 <__swsetup_r>
   8a868:	2800      	cmp	r0, #0
   8a86a:	f040 8135 	bne.w	8aad8 <__sfvwrite_r+0x2dc>
   8a86e:	89a3      	ldrh	r3, [r4, #12]
   8a870:	6835      	ldr	r5, [r6, #0]
   8a872:	f013 0002 	ands.w	r0, r3, #2
   8a876:	d1d3      	bne.n	8a820 <__sfvwrite_r+0x24>
   8a878:	f013 0901 	ands.w	r9, r3, #1
   8a87c:	d144      	bne.n	8a908 <__sfvwrite_r+0x10c>
   8a87e:	464f      	mov	r7, r9
   8a880:	9601      	str	r6, [sp, #4]
   8a882:	b337      	cbz	r7, 8a8d2 <__sfvwrite_r+0xd6>
   8a884:	059a      	lsls	r2, r3, #22
   8a886:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8a88a:	f140 8085 	bpl.w	8a998 <__sfvwrite_r+0x19c>
   8a88e:	4547      	cmp	r7, r8
   8a890:	46c3      	mov	fp, r8
   8a892:	f0c0 80ad 	bcc.w	8a9f0 <__sfvwrite_r+0x1f4>
   8a896:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8a89a:	f040 80ae 	bne.w	8a9fa <__sfvwrite_r+0x1fe>
   8a89e:	46ba      	mov	sl, r7
   8a8a0:	6820      	ldr	r0, [r4, #0]
   8a8a2:	465a      	mov	r2, fp
   8a8a4:	4649      	mov	r1, r9
   8a8a6:	f000 fced 	bl	8b284 <memmove>
   8a8aa:	68a2      	ldr	r2, [r4, #8]
   8a8ac:	6823      	ldr	r3, [r4, #0]
   8a8ae:	eba2 0208 	sub.w	r2, r2, r8
   8a8b2:	445b      	add	r3, fp
   8a8b4:	60a2      	str	r2, [r4, #8]
   8a8b6:	6023      	str	r3, [r4, #0]
   8a8b8:	9a01      	ldr	r2, [sp, #4]
   8a8ba:	44d1      	add	r9, sl
   8a8bc:	6893      	ldr	r3, [r2, #8]
   8a8be:	eba7 070a 	sub.w	r7, r7, sl
   8a8c2:	eba3 030a 	sub.w	r3, r3, sl
   8a8c6:	6093      	str	r3, [r2, #8]
   8a8c8:	2b00      	cmp	r3, #0
   8a8ca:	d0c5      	beq.n	8a858 <__sfvwrite_r+0x5c>
   8a8cc:	89a3      	ldrh	r3, [r4, #12]
   8a8ce:	2f00      	cmp	r7, #0
   8a8d0:	d1d8      	bne.n	8a884 <__sfvwrite_r+0x88>
   8a8d2:	f8d5 9000 	ldr.w	r9, [r5]
   8a8d6:	686f      	ldr	r7, [r5, #4]
   8a8d8:	3508      	adds	r5, #8
   8a8da:	e7d2      	b.n	8a882 <__sfvwrite_r+0x86>
   8a8dc:	f8d5 9000 	ldr.w	r9, [r5]
   8a8e0:	686f      	ldr	r7, [r5, #4]
   8a8e2:	3508      	adds	r5, #8
   8a8e4:	e7a2      	b.n	8a82c <__sfvwrite_r+0x30>
   8a8e6:	2000      	movs	r0, #0
   8a8e8:	4770      	bx	lr
   8a8ea:	4621      	mov	r1, r4
   8a8ec:	9800      	ldr	r0, [sp, #0]
   8a8ee:	f7ff fd21 	bl	8a334 <_fflush_r>
   8a8f2:	b378      	cbz	r0, 8a954 <__sfvwrite_r+0x158>
   8a8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a8f8:	f04f 30ff 	mov.w	r0, #4294967295
   8a8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a900:	81a3      	strh	r3, [r4, #12]
   8a902:	b003      	add	sp, #12
   8a904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a908:	4681      	mov	r9, r0
   8a90a:	4633      	mov	r3, r6
   8a90c:	464e      	mov	r6, r9
   8a90e:	46a8      	mov	r8, r5
   8a910:	469a      	mov	sl, r3
   8a912:	464d      	mov	r5, r9
   8a914:	b356      	cbz	r6, 8a96c <__sfvwrite_r+0x170>
   8a916:	2800      	cmp	r0, #0
   8a918:	d032      	beq.n	8a980 <__sfvwrite_r+0x184>
   8a91a:	45b1      	cmp	r9, r6
   8a91c:	46cb      	mov	fp, r9
   8a91e:	bf28      	it	cs
   8a920:	46b3      	movcs	fp, r6
   8a922:	6820      	ldr	r0, [r4, #0]
   8a924:	6923      	ldr	r3, [r4, #16]
   8a926:	465f      	mov	r7, fp
   8a928:	4298      	cmp	r0, r3
   8a92a:	6962      	ldr	r2, [r4, #20]
   8a92c:	d904      	bls.n	8a938 <__sfvwrite_r+0x13c>
   8a92e:	68a3      	ldr	r3, [r4, #8]
   8a930:	4413      	add	r3, r2
   8a932:	459b      	cmp	fp, r3
   8a934:	f300 80a8 	bgt.w	8aa88 <__sfvwrite_r+0x28c>
   8a938:	4593      	cmp	fp, r2
   8a93a:	db4d      	blt.n	8a9d8 <__sfvwrite_r+0x1dc>
   8a93c:	4613      	mov	r3, r2
   8a93e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a940:	462a      	mov	r2, r5
   8a942:	69e1      	ldr	r1, [r4, #28]
   8a944:	9800      	ldr	r0, [sp, #0]
   8a946:	47b8      	blx	r7
   8a948:	1e07      	subs	r7, r0, #0
   8a94a:	ddd3      	ble.n	8a8f4 <__sfvwrite_r+0xf8>
   8a94c:	ebb9 0907 	subs.w	r9, r9, r7
   8a950:	d0cb      	beq.n	8a8ea <__sfvwrite_r+0xee>
   8a952:	2001      	movs	r0, #1
   8a954:	f8da 3008 	ldr.w	r3, [sl, #8]
   8a958:	443d      	add	r5, r7
   8a95a:	1bdb      	subs	r3, r3, r7
   8a95c:	1bf6      	subs	r6, r6, r7
   8a95e:	f8ca 3008 	str.w	r3, [sl, #8]
   8a962:	2b00      	cmp	r3, #0
   8a964:	f43f af78 	beq.w	8a858 <__sfvwrite_r+0x5c>
   8a968:	2e00      	cmp	r6, #0
   8a96a:	d1d4      	bne.n	8a916 <__sfvwrite_r+0x11a>
   8a96c:	f108 0308 	add.w	r3, r8, #8
   8a970:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8a974:	4698      	mov	r8, r3
   8a976:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8a97a:	3308      	adds	r3, #8
   8a97c:	2e00      	cmp	r6, #0
   8a97e:	d0f7      	beq.n	8a970 <__sfvwrite_r+0x174>
   8a980:	4632      	mov	r2, r6
   8a982:	210a      	movs	r1, #10
   8a984:	4628      	mov	r0, r5
   8a986:	f000 fc37 	bl	8b1f8 <memchr>
   8a98a:	2800      	cmp	r0, #0
   8a98c:	f000 80a1 	beq.w	8aad2 <__sfvwrite_r+0x2d6>
   8a990:	3001      	adds	r0, #1
   8a992:	eba0 0905 	sub.w	r9, r0, r5
   8a996:	e7c0      	b.n	8a91a <__sfvwrite_r+0x11e>
   8a998:	6820      	ldr	r0, [r4, #0]
   8a99a:	6923      	ldr	r3, [r4, #16]
   8a99c:	4298      	cmp	r0, r3
   8a99e:	d802      	bhi.n	8a9a6 <__sfvwrite_r+0x1aa>
   8a9a0:	6963      	ldr	r3, [r4, #20]
   8a9a2:	429f      	cmp	r7, r3
   8a9a4:	d25d      	bcs.n	8aa62 <__sfvwrite_r+0x266>
   8a9a6:	45b8      	cmp	r8, r7
   8a9a8:	bf28      	it	cs
   8a9aa:	46b8      	movcs	r8, r7
   8a9ac:	4649      	mov	r1, r9
   8a9ae:	4642      	mov	r2, r8
   8a9b0:	f000 fc68 	bl	8b284 <memmove>
   8a9b4:	68a3      	ldr	r3, [r4, #8]
   8a9b6:	6822      	ldr	r2, [r4, #0]
   8a9b8:	eba3 0308 	sub.w	r3, r3, r8
   8a9bc:	4442      	add	r2, r8
   8a9be:	60a3      	str	r3, [r4, #8]
   8a9c0:	6022      	str	r2, [r4, #0]
   8a9c2:	b10b      	cbz	r3, 8a9c8 <__sfvwrite_r+0x1cc>
   8a9c4:	46c2      	mov	sl, r8
   8a9c6:	e777      	b.n	8a8b8 <__sfvwrite_r+0xbc>
   8a9c8:	4621      	mov	r1, r4
   8a9ca:	9800      	ldr	r0, [sp, #0]
   8a9cc:	f7ff fcb2 	bl	8a334 <_fflush_r>
   8a9d0:	2800      	cmp	r0, #0
   8a9d2:	d18f      	bne.n	8a8f4 <__sfvwrite_r+0xf8>
   8a9d4:	46c2      	mov	sl, r8
   8a9d6:	e76f      	b.n	8a8b8 <__sfvwrite_r+0xbc>
   8a9d8:	465a      	mov	r2, fp
   8a9da:	4629      	mov	r1, r5
   8a9dc:	f000 fc52 	bl	8b284 <memmove>
   8a9e0:	68a2      	ldr	r2, [r4, #8]
   8a9e2:	6823      	ldr	r3, [r4, #0]
   8a9e4:	eba2 020b 	sub.w	r2, r2, fp
   8a9e8:	445b      	add	r3, fp
   8a9ea:	60a2      	str	r2, [r4, #8]
   8a9ec:	6023      	str	r3, [r4, #0]
   8a9ee:	e7ad      	b.n	8a94c <__sfvwrite_r+0x150>
   8a9f0:	46b8      	mov	r8, r7
   8a9f2:	46ba      	mov	sl, r7
   8a9f4:	46bb      	mov	fp, r7
   8a9f6:	6820      	ldr	r0, [r4, #0]
   8a9f8:	e753      	b.n	8a8a2 <__sfvwrite_r+0xa6>
   8a9fa:	6962      	ldr	r2, [r4, #20]
   8a9fc:	6820      	ldr	r0, [r4, #0]
   8a9fe:	6921      	ldr	r1, [r4, #16]
   8aa00:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8aa04:	eba0 0a01 	sub.w	sl, r0, r1
   8aa08:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   8aa0c:	f10a 0001 	add.w	r0, sl, #1
   8aa10:	ea4f 0868 	mov.w	r8, r8, asr #1
   8aa14:	4438      	add	r0, r7
   8aa16:	4540      	cmp	r0, r8
   8aa18:	4642      	mov	r2, r8
   8aa1a:	bf84      	itt	hi
   8aa1c:	4680      	movhi	r8, r0
   8aa1e:	4642      	movhi	r2, r8
   8aa20:	055b      	lsls	r3, r3, #21
   8aa22:	d544      	bpl.n	8aaae <__sfvwrite_r+0x2b2>
   8aa24:	4611      	mov	r1, r2
   8aa26:	9800      	ldr	r0, [sp, #0]
   8aa28:	f000 f92e 	bl	8ac88 <_malloc_r>
   8aa2c:	4683      	mov	fp, r0
   8aa2e:	2800      	cmp	r0, #0
   8aa30:	d055      	beq.n	8aade <__sfvwrite_r+0x2e2>
   8aa32:	4652      	mov	r2, sl
   8aa34:	6921      	ldr	r1, [r4, #16]
   8aa36:	f7fc f853 	bl	86ae0 <memcpy>
   8aa3a:	89a3      	ldrh	r3, [r4, #12]
   8aa3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   8aa40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8aa44:	81a3      	strh	r3, [r4, #12]
   8aa46:	eb0b 000a 	add.w	r0, fp, sl
   8aa4a:	eba8 030a 	sub.w	r3, r8, sl
   8aa4e:	f8c4 b010 	str.w	fp, [r4, #16]
   8aa52:	f8c4 8014 	str.w	r8, [r4, #20]
   8aa56:	6020      	str	r0, [r4, #0]
   8aa58:	60a3      	str	r3, [r4, #8]
   8aa5a:	46b8      	mov	r8, r7
   8aa5c:	46ba      	mov	sl, r7
   8aa5e:	46bb      	mov	fp, r7
   8aa60:	e71f      	b.n	8a8a2 <__sfvwrite_r+0xa6>
   8aa62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8aa66:	42ba      	cmp	r2, r7
   8aa68:	bf28      	it	cs
   8aa6a:	463a      	movcs	r2, r7
   8aa6c:	fb92 f2f3 	sdiv	r2, r2, r3
   8aa70:	69e1      	ldr	r1, [r4, #28]
   8aa72:	fb03 f302 	mul.w	r3, r3, r2
   8aa76:	9800      	ldr	r0, [sp, #0]
   8aa78:	464a      	mov	r2, r9
   8aa7a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8aa7c:	47b0      	blx	r6
   8aa7e:	f1b0 0a00 	subs.w	sl, r0, #0
   8aa82:	f73f af19 	bgt.w	8a8b8 <__sfvwrite_r+0xbc>
   8aa86:	e735      	b.n	8a8f4 <__sfvwrite_r+0xf8>
   8aa88:	461a      	mov	r2, r3
   8aa8a:	4629      	mov	r1, r5
   8aa8c:	9301      	str	r3, [sp, #4]
   8aa8e:	f000 fbf9 	bl	8b284 <memmove>
   8aa92:	6822      	ldr	r2, [r4, #0]
   8aa94:	9b01      	ldr	r3, [sp, #4]
   8aa96:	4621      	mov	r1, r4
   8aa98:	441a      	add	r2, r3
   8aa9a:	6022      	str	r2, [r4, #0]
   8aa9c:	9800      	ldr	r0, [sp, #0]
   8aa9e:	f7ff fc49 	bl	8a334 <_fflush_r>
   8aaa2:	9b01      	ldr	r3, [sp, #4]
   8aaa4:	2800      	cmp	r0, #0
   8aaa6:	f47f af25 	bne.w	8a8f4 <__sfvwrite_r+0xf8>
   8aaaa:	461f      	mov	r7, r3
   8aaac:	e74e      	b.n	8a94c <__sfvwrite_r+0x150>
   8aaae:	9800      	ldr	r0, [sp, #0]
   8aab0:	f000 ff54 	bl	8b95c <_realloc_r>
   8aab4:	4683      	mov	fp, r0
   8aab6:	2800      	cmp	r0, #0
   8aab8:	d1c5      	bne.n	8aa46 <__sfvwrite_r+0x24a>
   8aaba:	9d00      	ldr	r5, [sp, #0]
   8aabc:	6921      	ldr	r1, [r4, #16]
   8aabe:	4628      	mov	r0, r5
   8aac0:	f7ff fdb6 	bl	8a630 <_free_r>
   8aac4:	220c      	movs	r2, #12
   8aac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aaca:	602a      	str	r2, [r5, #0]
   8aacc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8aad0:	e712      	b.n	8a8f8 <__sfvwrite_r+0xfc>
   8aad2:	f106 0901 	add.w	r9, r6, #1
   8aad6:	e720      	b.n	8a91a <__sfvwrite_r+0x11e>
   8aad8:	f04f 30ff 	mov.w	r0, #4294967295
   8aadc:	e6bd      	b.n	8a85a <__sfvwrite_r+0x5e>
   8aade:	220c      	movs	r2, #12
   8aae0:	9900      	ldr	r1, [sp, #0]
   8aae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aae6:	600a      	str	r2, [r1, #0]
   8aae8:	e706      	b.n	8a8f8 <__sfvwrite_r+0xfc>
   8aaea:	bf00      	nop
   8aaec:	7ffffc00 	.word	0x7ffffc00

0008aaf0 <_fwalk_reent>:
   8aaf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8aaf4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8aaf8:	d01e      	beq.n	8ab38 <_fwalk_reent+0x48>
   8aafa:	4688      	mov	r8, r1
   8aafc:	4607      	mov	r7, r0
   8aafe:	f04f 0900 	mov.w	r9, #0
   8ab02:	6875      	ldr	r5, [r6, #4]
   8ab04:	68b4      	ldr	r4, [r6, #8]
   8ab06:	3d01      	subs	r5, #1
   8ab08:	d410      	bmi.n	8ab2c <_fwalk_reent+0x3c>
   8ab0a:	89a3      	ldrh	r3, [r4, #12]
   8ab0c:	3d01      	subs	r5, #1
   8ab0e:	2b01      	cmp	r3, #1
   8ab10:	d908      	bls.n	8ab24 <_fwalk_reent+0x34>
   8ab12:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8ab16:	3301      	adds	r3, #1
   8ab18:	d004      	beq.n	8ab24 <_fwalk_reent+0x34>
   8ab1a:	4621      	mov	r1, r4
   8ab1c:	4638      	mov	r0, r7
   8ab1e:	47c0      	blx	r8
   8ab20:	ea49 0900 	orr.w	r9, r9, r0
   8ab24:	1c6b      	adds	r3, r5, #1
   8ab26:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8ab2a:	d1ee      	bne.n	8ab0a <_fwalk_reent+0x1a>
   8ab2c:	6836      	ldr	r6, [r6, #0]
   8ab2e:	2e00      	cmp	r6, #0
   8ab30:	d1e7      	bne.n	8ab02 <_fwalk_reent+0x12>
   8ab32:	4648      	mov	r0, r9
   8ab34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ab38:	46b1      	mov	r9, r6
   8ab3a:	4648      	mov	r0, r9
   8ab3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008ab40 <__locale_mb_cur_max>:
   8ab40:	4b04      	ldr	r3, [pc, #16]	; (8ab54 <__locale_mb_cur_max+0x14>)
   8ab42:	4a05      	ldr	r2, [pc, #20]	; (8ab58 <__locale_mb_cur_max+0x18>)
   8ab44:	681b      	ldr	r3, [r3, #0]
   8ab46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8ab48:	2b00      	cmp	r3, #0
   8ab4a:	bf08      	it	eq
   8ab4c:	4613      	moveq	r3, r2
   8ab4e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8ab52:	4770      	bx	lr
   8ab54:	20000b8c 	.word	0x20000b8c
   8ab58:	20000fbc 	.word	0x20000fbc

0008ab5c <_localeconv_r>:
   8ab5c:	4a04      	ldr	r2, [pc, #16]	; (8ab70 <_localeconv_r+0x14>)
   8ab5e:	4b05      	ldr	r3, [pc, #20]	; (8ab74 <_localeconv_r+0x18>)
   8ab60:	6812      	ldr	r2, [r2, #0]
   8ab62:	6b50      	ldr	r0, [r2, #52]	; 0x34
   8ab64:	2800      	cmp	r0, #0
   8ab66:	bf08      	it	eq
   8ab68:	4618      	moveq	r0, r3
   8ab6a:	30f0      	adds	r0, #240	; 0xf0
   8ab6c:	4770      	bx	lr
   8ab6e:	bf00      	nop
   8ab70:	20000b8c 	.word	0x20000b8c
   8ab74:	20000fbc 	.word	0x20000fbc

0008ab78 <__retarget_lock_init_recursive>:
   8ab78:	4770      	bx	lr
   8ab7a:	bf00      	nop

0008ab7c <__retarget_lock_close_recursive>:
   8ab7c:	4770      	bx	lr
   8ab7e:	bf00      	nop

0008ab80 <__retarget_lock_acquire_recursive>:
   8ab80:	4770      	bx	lr
   8ab82:	bf00      	nop

0008ab84 <__retarget_lock_release_recursive>:
   8ab84:	4770      	bx	lr
   8ab86:	bf00      	nop

0008ab88 <__swhatbuf_r>:
   8ab88:	b570      	push	{r4, r5, r6, lr}
   8ab8a:	460c      	mov	r4, r1
   8ab8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ab90:	b090      	sub	sp, #64	; 0x40
   8ab92:	2900      	cmp	r1, #0
   8ab94:	4615      	mov	r5, r2
   8ab96:	461e      	mov	r6, r3
   8ab98:	db14      	blt.n	8abc4 <__swhatbuf_r+0x3c>
   8ab9a:	aa01      	add	r2, sp, #4
   8ab9c:	f001 fb12 	bl	8c1c4 <_fstat_r>
   8aba0:	2800      	cmp	r0, #0
   8aba2:	db0f      	blt.n	8abc4 <__swhatbuf_r+0x3c>
   8aba4:	9a02      	ldr	r2, [sp, #8]
   8aba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8abaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8abae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8abb2:	fab2 f282 	clz	r2, r2
   8abb6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8abba:	0952      	lsrs	r2, r2, #5
   8abbc:	6032      	str	r2, [r6, #0]
   8abbe:	602b      	str	r3, [r5, #0]
   8abc0:	b010      	add	sp, #64	; 0x40
   8abc2:	bd70      	pop	{r4, r5, r6, pc}
   8abc4:	2300      	movs	r3, #0
   8abc6:	89a2      	ldrh	r2, [r4, #12]
   8abc8:	6033      	str	r3, [r6, #0]
   8abca:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8abce:	d004      	beq.n	8abda <__swhatbuf_r+0x52>
   8abd0:	2240      	movs	r2, #64	; 0x40
   8abd2:	4618      	mov	r0, r3
   8abd4:	602a      	str	r2, [r5, #0]
   8abd6:	b010      	add	sp, #64	; 0x40
   8abd8:	bd70      	pop	{r4, r5, r6, pc}
   8abda:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8abde:	602b      	str	r3, [r5, #0]
   8abe0:	b010      	add	sp, #64	; 0x40
   8abe2:	bd70      	pop	{r4, r5, r6, pc}

0008abe4 <__smakebuf_r>:
   8abe4:	898a      	ldrh	r2, [r1, #12]
   8abe6:	460b      	mov	r3, r1
   8abe8:	0792      	lsls	r2, r2, #30
   8abea:	d506      	bpl.n	8abfa <__smakebuf_r+0x16>
   8abec:	2101      	movs	r1, #1
   8abee:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8abf2:	6159      	str	r1, [r3, #20]
   8abf4:	601a      	str	r2, [r3, #0]
   8abf6:	611a      	str	r2, [r3, #16]
   8abf8:	4770      	bx	lr
   8abfa:	b5f0      	push	{r4, r5, r6, r7, lr}
   8abfc:	b083      	sub	sp, #12
   8abfe:	ab01      	add	r3, sp, #4
   8ac00:	466a      	mov	r2, sp
   8ac02:	460c      	mov	r4, r1
   8ac04:	4606      	mov	r6, r0
   8ac06:	f7ff ffbf 	bl	8ab88 <__swhatbuf_r>
   8ac0a:	9900      	ldr	r1, [sp, #0]
   8ac0c:	4605      	mov	r5, r0
   8ac0e:	4630      	mov	r0, r6
   8ac10:	f000 f83a 	bl	8ac88 <_malloc_r>
   8ac14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ac18:	b1d8      	cbz	r0, 8ac52 <__smakebuf_r+0x6e>
   8ac1a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8ac1e:	4f15      	ldr	r7, [pc, #84]	; (8ac74 <__smakebuf_r+0x90>)
   8ac20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8ac24:	63f7      	str	r7, [r6, #60]	; 0x3c
   8ac26:	81a3      	strh	r3, [r4, #12]
   8ac28:	6020      	str	r0, [r4, #0]
   8ac2a:	6120      	str	r0, [r4, #16]
   8ac2c:	6161      	str	r1, [r4, #20]
   8ac2e:	b91a      	cbnz	r2, 8ac38 <__smakebuf_r+0x54>
   8ac30:	432b      	orrs	r3, r5
   8ac32:	81a3      	strh	r3, [r4, #12]
   8ac34:	b003      	add	sp, #12
   8ac36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8ac38:	4630      	mov	r0, r6
   8ac3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ac3e:	f001 fad5 	bl	8c1ec <_isatty_r>
   8ac42:	b1a0      	cbz	r0, 8ac6e <__smakebuf_r+0x8a>
   8ac44:	89a3      	ldrh	r3, [r4, #12]
   8ac46:	f023 0303 	bic.w	r3, r3, #3
   8ac4a:	f043 0301 	orr.w	r3, r3, #1
   8ac4e:	b21b      	sxth	r3, r3
   8ac50:	e7ee      	b.n	8ac30 <__smakebuf_r+0x4c>
   8ac52:	059a      	lsls	r2, r3, #22
   8ac54:	d4ee      	bmi.n	8ac34 <__smakebuf_r+0x50>
   8ac56:	2101      	movs	r1, #1
   8ac58:	f023 0303 	bic.w	r3, r3, #3
   8ac5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8ac60:	f043 0302 	orr.w	r3, r3, #2
   8ac64:	81a3      	strh	r3, [r4, #12]
   8ac66:	6161      	str	r1, [r4, #20]
   8ac68:	6022      	str	r2, [r4, #0]
   8ac6a:	6122      	str	r2, [r4, #16]
   8ac6c:	e7e2      	b.n	8ac34 <__smakebuf_r+0x50>
   8ac6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ac72:	e7dd      	b.n	8ac30 <__smakebuf_r+0x4c>
   8ac74:	0008a389 	.word	0x0008a389

0008ac78 <malloc>:
   8ac78:	4b02      	ldr	r3, [pc, #8]	; (8ac84 <malloc+0xc>)
   8ac7a:	4601      	mov	r1, r0
   8ac7c:	6818      	ldr	r0, [r3, #0]
   8ac7e:	f000 b803 	b.w	8ac88 <_malloc_r>
   8ac82:	bf00      	nop
   8ac84:	20000b8c 	.word	0x20000b8c

0008ac88 <_malloc_r>:
   8ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ac8c:	f101 060b 	add.w	r6, r1, #11
   8ac90:	2e16      	cmp	r6, #22
   8ac92:	b083      	sub	sp, #12
   8ac94:	4605      	mov	r5, r0
   8ac96:	f240 809e 	bls.w	8add6 <_malloc_r+0x14e>
   8ac9a:	f036 0607 	bics.w	r6, r6, #7
   8ac9e:	f100 80bd 	bmi.w	8ae1c <_malloc_r+0x194>
   8aca2:	42b1      	cmp	r1, r6
   8aca4:	f200 80ba 	bhi.w	8ae1c <_malloc_r+0x194>
   8aca8:	f000 fb50 	bl	8b34c <__malloc_lock>
   8acac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8acb0:	f0c0 8285 	bcc.w	8b1be <_malloc_r+0x536>
   8acb4:	0a73      	lsrs	r3, r6, #9
   8acb6:	f000 80b8 	beq.w	8ae2a <_malloc_r+0x1a2>
   8acba:	2b04      	cmp	r3, #4
   8acbc:	f200 816c 	bhi.w	8af98 <_malloc_r+0x310>
   8acc0:	09b3      	lsrs	r3, r6, #6
   8acc2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8acc6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8acca:	00c1      	lsls	r1, r0, #3
   8accc:	4fb8      	ldr	r7, [pc, #736]	; (8afb0 <_malloc_r+0x328>)
   8acce:	4439      	add	r1, r7
   8acd0:	684c      	ldr	r4, [r1, #4]
   8acd2:	3908      	subs	r1, #8
   8acd4:	42a1      	cmp	r1, r4
   8acd6:	d106      	bne.n	8ace6 <_malloc_r+0x5e>
   8acd8:	e00c      	b.n	8acf4 <_malloc_r+0x6c>
   8acda:	2a00      	cmp	r2, #0
   8acdc:	f280 80ab 	bge.w	8ae36 <_malloc_r+0x1ae>
   8ace0:	68e4      	ldr	r4, [r4, #12]
   8ace2:	42a1      	cmp	r1, r4
   8ace4:	d006      	beq.n	8acf4 <_malloc_r+0x6c>
   8ace6:	6863      	ldr	r3, [r4, #4]
   8ace8:	f023 0303 	bic.w	r3, r3, #3
   8acec:	1b9a      	subs	r2, r3, r6
   8acee:	2a0f      	cmp	r2, #15
   8acf0:	ddf3      	ble.n	8acda <_malloc_r+0x52>
   8acf2:	4670      	mov	r0, lr
   8acf4:	693c      	ldr	r4, [r7, #16]
   8acf6:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8afc4 <_malloc_r+0x33c>
   8acfa:	4574      	cmp	r4, lr
   8acfc:	f000 819e 	beq.w	8b03c <_malloc_r+0x3b4>
   8ad00:	6863      	ldr	r3, [r4, #4]
   8ad02:	f023 0303 	bic.w	r3, r3, #3
   8ad06:	1b9a      	subs	r2, r3, r6
   8ad08:	2a0f      	cmp	r2, #15
   8ad0a:	f300 8183 	bgt.w	8b014 <_malloc_r+0x38c>
   8ad0e:	2a00      	cmp	r2, #0
   8ad10:	f8c7 e014 	str.w	lr, [r7, #20]
   8ad14:	f8c7 e010 	str.w	lr, [r7, #16]
   8ad18:	f280 8091 	bge.w	8ae3e <_malloc_r+0x1b6>
   8ad1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8ad20:	f080 8154 	bcs.w	8afcc <_malloc_r+0x344>
   8ad24:	2201      	movs	r2, #1
   8ad26:	08db      	lsrs	r3, r3, #3
   8ad28:	6879      	ldr	r1, [r7, #4]
   8ad2a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8ad2e:	4413      	add	r3, r2
   8ad30:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8ad34:	fa02 f20c 	lsl.w	r2, r2, ip
   8ad38:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8ad3c:	430a      	orrs	r2, r1
   8ad3e:	f1ac 0108 	sub.w	r1, ip, #8
   8ad42:	60e1      	str	r1, [r4, #12]
   8ad44:	f8c4 8008 	str.w	r8, [r4, #8]
   8ad48:	607a      	str	r2, [r7, #4]
   8ad4a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8ad4e:	f8c8 400c 	str.w	r4, [r8, #12]
   8ad52:	2401      	movs	r4, #1
   8ad54:	1083      	asrs	r3, r0, #2
   8ad56:	409c      	lsls	r4, r3
   8ad58:	4294      	cmp	r4, r2
   8ad5a:	d87d      	bhi.n	8ae58 <_malloc_r+0x1d0>
   8ad5c:	4214      	tst	r4, r2
   8ad5e:	d106      	bne.n	8ad6e <_malloc_r+0xe6>
   8ad60:	f020 0003 	bic.w	r0, r0, #3
   8ad64:	0064      	lsls	r4, r4, #1
   8ad66:	4214      	tst	r4, r2
   8ad68:	f100 0004 	add.w	r0, r0, #4
   8ad6c:	d0fa      	beq.n	8ad64 <_malloc_r+0xdc>
   8ad6e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8ad72:	46cc      	mov	ip, r9
   8ad74:	4680      	mov	r8, r0
   8ad76:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8ad7a:	459c      	cmp	ip, r3
   8ad7c:	d107      	bne.n	8ad8e <_malloc_r+0x106>
   8ad7e:	e15f      	b.n	8b040 <_malloc_r+0x3b8>
   8ad80:	2a00      	cmp	r2, #0
   8ad82:	f280 816d 	bge.w	8b060 <_malloc_r+0x3d8>
   8ad86:	68db      	ldr	r3, [r3, #12]
   8ad88:	459c      	cmp	ip, r3
   8ad8a:	f000 8159 	beq.w	8b040 <_malloc_r+0x3b8>
   8ad8e:	6859      	ldr	r1, [r3, #4]
   8ad90:	f021 0103 	bic.w	r1, r1, #3
   8ad94:	1b8a      	subs	r2, r1, r6
   8ad96:	2a0f      	cmp	r2, #15
   8ad98:	ddf2      	ble.n	8ad80 <_malloc_r+0xf8>
   8ad9a:	68dc      	ldr	r4, [r3, #12]
   8ad9c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8ada0:	f046 0801 	orr.w	r8, r6, #1
   8ada4:	4628      	mov	r0, r5
   8ada6:	441e      	add	r6, r3
   8ada8:	f042 0501 	orr.w	r5, r2, #1
   8adac:	f8c3 8004 	str.w	r8, [r3, #4]
   8adb0:	f8cc 400c 	str.w	r4, [ip, #12]
   8adb4:	f8c4 c008 	str.w	ip, [r4, #8]
   8adb8:	617e      	str	r6, [r7, #20]
   8adba:	613e      	str	r6, [r7, #16]
   8adbc:	f8c6 e00c 	str.w	lr, [r6, #12]
   8adc0:	f8c6 e008 	str.w	lr, [r6, #8]
   8adc4:	6075      	str	r5, [r6, #4]
   8adc6:	505a      	str	r2, [r3, r1]
   8adc8:	9300      	str	r3, [sp, #0]
   8adca:	f000 fac5 	bl	8b358 <__malloc_unlock>
   8adce:	9b00      	ldr	r3, [sp, #0]
   8add0:	f103 0408 	add.w	r4, r3, #8
   8add4:	e01e      	b.n	8ae14 <_malloc_r+0x18c>
   8add6:	2910      	cmp	r1, #16
   8add8:	d820      	bhi.n	8ae1c <_malloc_r+0x194>
   8adda:	f000 fab7 	bl	8b34c <__malloc_lock>
   8adde:	2610      	movs	r6, #16
   8ade0:	2318      	movs	r3, #24
   8ade2:	2002      	movs	r0, #2
   8ade4:	4f72      	ldr	r7, [pc, #456]	; (8afb0 <_malloc_r+0x328>)
   8ade6:	443b      	add	r3, r7
   8ade8:	685c      	ldr	r4, [r3, #4]
   8adea:	f1a3 0208 	sub.w	r2, r3, #8
   8adee:	4294      	cmp	r4, r2
   8adf0:	f000 812f 	beq.w	8b052 <_malloc_r+0x3ca>
   8adf4:	6863      	ldr	r3, [r4, #4]
   8adf6:	68e1      	ldr	r1, [r4, #12]
   8adf8:	f023 0303 	bic.w	r3, r3, #3
   8adfc:	4423      	add	r3, r4
   8adfe:	685a      	ldr	r2, [r3, #4]
   8ae00:	68a6      	ldr	r6, [r4, #8]
   8ae02:	f042 0201 	orr.w	r2, r2, #1
   8ae06:	60f1      	str	r1, [r6, #12]
   8ae08:	4628      	mov	r0, r5
   8ae0a:	608e      	str	r6, [r1, #8]
   8ae0c:	605a      	str	r2, [r3, #4]
   8ae0e:	f000 faa3 	bl	8b358 <__malloc_unlock>
   8ae12:	3408      	adds	r4, #8
   8ae14:	4620      	mov	r0, r4
   8ae16:	b003      	add	sp, #12
   8ae18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ae1c:	2400      	movs	r4, #0
   8ae1e:	230c      	movs	r3, #12
   8ae20:	4620      	mov	r0, r4
   8ae22:	602b      	str	r3, [r5, #0]
   8ae24:	b003      	add	sp, #12
   8ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ae2a:	2040      	movs	r0, #64	; 0x40
   8ae2c:	f44f 7100 	mov.w	r1, #512	; 0x200
   8ae30:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8ae34:	e74a      	b.n	8accc <_malloc_r+0x44>
   8ae36:	4423      	add	r3, r4
   8ae38:	685a      	ldr	r2, [r3, #4]
   8ae3a:	68e1      	ldr	r1, [r4, #12]
   8ae3c:	e7e0      	b.n	8ae00 <_malloc_r+0x178>
   8ae3e:	4423      	add	r3, r4
   8ae40:	685a      	ldr	r2, [r3, #4]
   8ae42:	4628      	mov	r0, r5
   8ae44:	f042 0201 	orr.w	r2, r2, #1
   8ae48:	605a      	str	r2, [r3, #4]
   8ae4a:	3408      	adds	r4, #8
   8ae4c:	f000 fa84 	bl	8b358 <__malloc_unlock>
   8ae50:	4620      	mov	r0, r4
   8ae52:	b003      	add	sp, #12
   8ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ae58:	68bc      	ldr	r4, [r7, #8]
   8ae5a:	6863      	ldr	r3, [r4, #4]
   8ae5c:	f023 0803 	bic.w	r8, r3, #3
   8ae60:	45b0      	cmp	r8, r6
   8ae62:	d304      	bcc.n	8ae6e <_malloc_r+0x1e6>
   8ae64:	eba8 0306 	sub.w	r3, r8, r6
   8ae68:	2b0f      	cmp	r3, #15
   8ae6a:	f300 8085 	bgt.w	8af78 <_malloc_r+0x2f0>
   8ae6e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8afc8 <_malloc_r+0x340>
   8ae72:	4b50      	ldr	r3, [pc, #320]	; (8afb4 <_malloc_r+0x32c>)
   8ae74:	f8d9 2000 	ldr.w	r2, [r9]
   8ae78:	681b      	ldr	r3, [r3, #0]
   8ae7a:	3201      	adds	r2, #1
   8ae7c:	4433      	add	r3, r6
   8ae7e:	eb04 0a08 	add.w	sl, r4, r8
   8ae82:	f000 8154 	beq.w	8b12e <_malloc_r+0x4a6>
   8ae86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8ae8a:	330f      	adds	r3, #15
   8ae8c:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8ae90:	f02b 0b0f 	bic.w	fp, fp, #15
   8ae94:	4659      	mov	r1, fp
   8ae96:	4628      	mov	r0, r5
   8ae98:	f000 ff16 	bl	8bcc8 <_sbrk_r>
   8ae9c:	1c41      	adds	r1, r0, #1
   8ae9e:	4602      	mov	r2, r0
   8aea0:	f000 80fb 	beq.w	8b09a <_malloc_r+0x412>
   8aea4:	4582      	cmp	sl, r0
   8aea6:	f200 80f6 	bhi.w	8b096 <_malloc_r+0x40e>
   8aeaa:	4b43      	ldr	r3, [pc, #268]	; (8afb8 <_malloc_r+0x330>)
   8aeac:	6819      	ldr	r1, [r3, #0]
   8aeae:	4459      	add	r1, fp
   8aeb0:	6019      	str	r1, [r3, #0]
   8aeb2:	f000 814c 	beq.w	8b14e <_malloc_r+0x4c6>
   8aeb6:	f8d9 0000 	ldr.w	r0, [r9]
   8aeba:	3001      	adds	r0, #1
   8aebc:	bf1b      	ittet	ne
   8aebe:	eba2 0a0a 	subne.w	sl, r2, sl
   8aec2:	4451      	addne	r1, sl
   8aec4:	f8c9 2000 	streq.w	r2, [r9]
   8aec8:	6019      	strne	r1, [r3, #0]
   8aeca:	f012 0107 	ands.w	r1, r2, #7
   8aece:	f000 8114 	beq.w	8b0fa <_malloc_r+0x472>
   8aed2:	f1c1 0008 	rsb	r0, r1, #8
   8aed6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8aeda:	4402      	add	r2, r0
   8aedc:	3108      	adds	r1, #8
   8aede:	eb02 090b 	add.w	r9, r2, fp
   8aee2:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8aee6:	eba1 0909 	sub.w	r9, r1, r9
   8aeea:	4649      	mov	r1, r9
   8aeec:	4628      	mov	r0, r5
   8aeee:	9301      	str	r3, [sp, #4]
   8aef0:	9200      	str	r2, [sp, #0]
   8aef2:	f000 fee9 	bl	8bcc8 <_sbrk_r>
   8aef6:	1c43      	adds	r3, r0, #1
   8aef8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8aefc:	f000 8142 	beq.w	8b184 <_malloc_r+0x4fc>
   8af00:	1a80      	subs	r0, r0, r2
   8af02:	4448      	add	r0, r9
   8af04:	f040 0001 	orr.w	r0, r0, #1
   8af08:	6819      	ldr	r1, [r3, #0]
   8af0a:	42bc      	cmp	r4, r7
   8af0c:	4449      	add	r1, r9
   8af0e:	60ba      	str	r2, [r7, #8]
   8af10:	6019      	str	r1, [r3, #0]
   8af12:	6050      	str	r0, [r2, #4]
   8af14:	d017      	beq.n	8af46 <_malloc_r+0x2be>
   8af16:	f1b8 0f0f 	cmp.w	r8, #15
   8af1a:	f240 80fa 	bls.w	8b112 <_malloc_r+0x48a>
   8af1e:	f04f 0c05 	mov.w	ip, #5
   8af22:	6862      	ldr	r2, [r4, #4]
   8af24:	f1a8 000c 	sub.w	r0, r8, #12
   8af28:	f020 0007 	bic.w	r0, r0, #7
   8af2c:	f002 0201 	and.w	r2, r2, #1
   8af30:	eb04 0e00 	add.w	lr, r4, r0
   8af34:	4302      	orrs	r2, r0
   8af36:	280f      	cmp	r0, #15
   8af38:	6062      	str	r2, [r4, #4]
   8af3a:	f8ce c004 	str.w	ip, [lr, #4]
   8af3e:	f8ce c008 	str.w	ip, [lr, #8]
   8af42:	f200 8116 	bhi.w	8b172 <_malloc_r+0x4ea>
   8af46:	4b1d      	ldr	r3, [pc, #116]	; (8afbc <_malloc_r+0x334>)
   8af48:	68bc      	ldr	r4, [r7, #8]
   8af4a:	681a      	ldr	r2, [r3, #0]
   8af4c:	4291      	cmp	r1, r2
   8af4e:	bf88      	it	hi
   8af50:	6019      	strhi	r1, [r3, #0]
   8af52:	4b1b      	ldr	r3, [pc, #108]	; (8afc0 <_malloc_r+0x338>)
   8af54:	681a      	ldr	r2, [r3, #0]
   8af56:	4291      	cmp	r1, r2
   8af58:	6862      	ldr	r2, [r4, #4]
   8af5a:	bf88      	it	hi
   8af5c:	6019      	strhi	r1, [r3, #0]
   8af5e:	f022 0203 	bic.w	r2, r2, #3
   8af62:	4296      	cmp	r6, r2
   8af64:	eba2 0306 	sub.w	r3, r2, r6
   8af68:	d801      	bhi.n	8af6e <_malloc_r+0x2e6>
   8af6a:	2b0f      	cmp	r3, #15
   8af6c:	dc04      	bgt.n	8af78 <_malloc_r+0x2f0>
   8af6e:	4628      	mov	r0, r5
   8af70:	f000 f9f2 	bl	8b358 <__malloc_unlock>
   8af74:	2400      	movs	r4, #0
   8af76:	e74d      	b.n	8ae14 <_malloc_r+0x18c>
   8af78:	f046 0201 	orr.w	r2, r6, #1
   8af7c:	f043 0301 	orr.w	r3, r3, #1
   8af80:	4426      	add	r6, r4
   8af82:	6062      	str	r2, [r4, #4]
   8af84:	4628      	mov	r0, r5
   8af86:	60be      	str	r6, [r7, #8]
   8af88:	3408      	adds	r4, #8
   8af8a:	6073      	str	r3, [r6, #4]
   8af8c:	f000 f9e4 	bl	8b358 <__malloc_unlock>
   8af90:	4620      	mov	r0, r4
   8af92:	b003      	add	sp, #12
   8af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8af98:	2b14      	cmp	r3, #20
   8af9a:	d970      	bls.n	8b07e <_malloc_r+0x3f6>
   8af9c:	2b54      	cmp	r3, #84	; 0x54
   8af9e:	f200 80a2 	bhi.w	8b0e6 <_malloc_r+0x45e>
   8afa2:	0b33      	lsrs	r3, r6, #12
   8afa4:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8afa8:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8afac:	00c1      	lsls	r1, r0, #3
   8afae:	e68d      	b.n	8accc <_malloc_r+0x44>
   8afb0:	20001128 	.word	0x20001128
   8afb4:	200023b4 	.word	0x200023b4
   8afb8:	20002384 	.word	0x20002384
   8afbc:	200023ac 	.word	0x200023ac
   8afc0:	200023b0 	.word	0x200023b0
   8afc4:	20001130 	.word	0x20001130
   8afc8:	20001530 	.word	0x20001530
   8afcc:	0a5a      	lsrs	r2, r3, #9
   8afce:	2a04      	cmp	r2, #4
   8afd0:	d95b      	bls.n	8b08a <_malloc_r+0x402>
   8afd2:	2a14      	cmp	r2, #20
   8afd4:	f200 80ae 	bhi.w	8b134 <_malloc_r+0x4ac>
   8afd8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8afdc:	00c9      	lsls	r1, r1, #3
   8afde:	325b      	adds	r2, #91	; 0x5b
   8afe0:	eb07 0c01 	add.w	ip, r7, r1
   8afe4:	5879      	ldr	r1, [r7, r1]
   8afe6:	f1ac 0c08 	sub.w	ip, ip, #8
   8afea:	458c      	cmp	ip, r1
   8afec:	f000 8088 	beq.w	8b100 <_malloc_r+0x478>
   8aff0:	684a      	ldr	r2, [r1, #4]
   8aff2:	f022 0203 	bic.w	r2, r2, #3
   8aff6:	4293      	cmp	r3, r2
   8aff8:	d273      	bcs.n	8b0e2 <_malloc_r+0x45a>
   8affa:	6889      	ldr	r1, [r1, #8]
   8affc:	458c      	cmp	ip, r1
   8affe:	d1f7      	bne.n	8aff0 <_malloc_r+0x368>
   8b000:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8b004:	687a      	ldr	r2, [r7, #4]
   8b006:	60e3      	str	r3, [r4, #12]
   8b008:	f8c4 c008 	str.w	ip, [r4, #8]
   8b00c:	609c      	str	r4, [r3, #8]
   8b00e:	f8cc 400c 	str.w	r4, [ip, #12]
   8b012:	e69e      	b.n	8ad52 <_malloc_r+0xca>
   8b014:	f046 0c01 	orr.w	ip, r6, #1
   8b018:	f042 0101 	orr.w	r1, r2, #1
   8b01c:	4426      	add	r6, r4
   8b01e:	f8c4 c004 	str.w	ip, [r4, #4]
   8b022:	4628      	mov	r0, r5
   8b024:	617e      	str	r6, [r7, #20]
   8b026:	613e      	str	r6, [r7, #16]
   8b028:	f8c6 e00c 	str.w	lr, [r6, #12]
   8b02c:	f8c6 e008 	str.w	lr, [r6, #8]
   8b030:	6071      	str	r1, [r6, #4]
   8b032:	50e2      	str	r2, [r4, r3]
   8b034:	f000 f990 	bl	8b358 <__malloc_unlock>
   8b038:	3408      	adds	r4, #8
   8b03a:	e6eb      	b.n	8ae14 <_malloc_r+0x18c>
   8b03c:	687a      	ldr	r2, [r7, #4]
   8b03e:	e688      	b.n	8ad52 <_malloc_r+0xca>
   8b040:	f108 0801 	add.w	r8, r8, #1
   8b044:	f018 0f03 	tst.w	r8, #3
   8b048:	f10c 0c08 	add.w	ip, ip, #8
   8b04c:	f47f ae93 	bne.w	8ad76 <_malloc_r+0xee>
   8b050:	e02d      	b.n	8b0ae <_malloc_r+0x426>
   8b052:	68dc      	ldr	r4, [r3, #12]
   8b054:	42a3      	cmp	r3, r4
   8b056:	bf08      	it	eq
   8b058:	3002      	addeq	r0, #2
   8b05a:	f43f ae4b 	beq.w	8acf4 <_malloc_r+0x6c>
   8b05e:	e6c9      	b.n	8adf4 <_malloc_r+0x16c>
   8b060:	461c      	mov	r4, r3
   8b062:	4419      	add	r1, r3
   8b064:	684a      	ldr	r2, [r1, #4]
   8b066:	68db      	ldr	r3, [r3, #12]
   8b068:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8b06c:	f042 0201 	orr.w	r2, r2, #1
   8b070:	604a      	str	r2, [r1, #4]
   8b072:	4628      	mov	r0, r5
   8b074:	60f3      	str	r3, [r6, #12]
   8b076:	609e      	str	r6, [r3, #8]
   8b078:	f000 f96e 	bl	8b358 <__malloc_unlock>
   8b07c:	e6ca      	b.n	8ae14 <_malloc_r+0x18c>
   8b07e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8b082:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8b086:	00c1      	lsls	r1, r0, #3
   8b088:	e620      	b.n	8accc <_malloc_r+0x44>
   8b08a:	099a      	lsrs	r2, r3, #6
   8b08c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8b090:	00c9      	lsls	r1, r1, #3
   8b092:	3238      	adds	r2, #56	; 0x38
   8b094:	e7a4      	b.n	8afe0 <_malloc_r+0x358>
   8b096:	42bc      	cmp	r4, r7
   8b098:	d054      	beq.n	8b144 <_malloc_r+0x4bc>
   8b09a:	68bc      	ldr	r4, [r7, #8]
   8b09c:	6862      	ldr	r2, [r4, #4]
   8b09e:	f022 0203 	bic.w	r2, r2, #3
   8b0a2:	e75e      	b.n	8af62 <_malloc_r+0x2da>
   8b0a4:	f859 3908 	ldr.w	r3, [r9], #-8
   8b0a8:	4599      	cmp	r9, r3
   8b0aa:	f040 8086 	bne.w	8b1ba <_malloc_r+0x532>
   8b0ae:	f010 0f03 	tst.w	r0, #3
   8b0b2:	f100 30ff 	add.w	r0, r0, #4294967295
   8b0b6:	d1f5      	bne.n	8b0a4 <_malloc_r+0x41c>
   8b0b8:	687b      	ldr	r3, [r7, #4]
   8b0ba:	ea23 0304 	bic.w	r3, r3, r4
   8b0be:	607b      	str	r3, [r7, #4]
   8b0c0:	0064      	lsls	r4, r4, #1
   8b0c2:	429c      	cmp	r4, r3
   8b0c4:	f63f aec8 	bhi.w	8ae58 <_malloc_r+0x1d0>
   8b0c8:	2c00      	cmp	r4, #0
   8b0ca:	f43f aec5 	beq.w	8ae58 <_malloc_r+0x1d0>
   8b0ce:	421c      	tst	r4, r3
   8b0d0:	4640      	mov	r0, r8
   8b0d2:	f47f ae4c 	bne.w	8ad6e <_malloc_r+0xe6>
   8b0d6:	0064      	lsls	r4, r4, #1
   8b0d8:	421c      	tst	r4, r3
   8b0da:	f100 0004 	add.w	r0, r0, #4
   8b0de:	d0fa      	beq.n	8b0d6 <_malloc_r+0x44e>
   8b0e0:	e645      	b.n	8ad6e <_malloc_r+0xe6>
   8b0e2:	468c      	mov	ip, r1
   8b0e4:	e78c      	b.n	8b000 <_malloc_r+0x378>
   8b0e6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b0ea:	d815      	bhi.n	8b118 <_malloc_r+0x490>
   8b0ec:	0bf3      	lsrs	r3, r6, #15
   8b0ee:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8b0f2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8b0f6:	00c1      	lsls	r1, r0, #3
   8b0f8:	e5e8      	b.n	8accc <_malloc_r+0x44>
   8b0fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8b0fe:	e6ee      	b.n	8aede <_malloc_r+0x256>
   8b100:	2101      	movs	r1, #1
   8b102:	687b      	ldr	r3, [r7, #4]
   8b104:	1092      	asrs	r2, r2, #2
   8b106:	fa01 f202 	lsl.w	r2, r1, r2
   8b10a:	431a      	orrs	r2, r3
   8b10c:	607a      	str	r2, [r7, #4]
   8b10e:	4663      	mov	r3, ip
   8b110:	e779      	b.n	8b006 <_malloc_r+0x37e>
   8b112:	2301      	movs	r3, #1
   8b114:	6053      	str	r3, [r2, #4]
   8b116:	e72a      	b.n	8af6e <_malloc_r+0x2e6>
   8b118:	f240 5254 	movw	r2, #1364	; 0x554
   8b11c:	4293      	cmp	r3, r2
   8b11e:	d822      	bhi.n	8b166 <_malloc_r+0x4de>
   8b120:	0cb3      	lsrs	r3, r6, #18
   8b122:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8b126:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8b12a:	00c1      	lsls	r1, r0, #3
   8b12c:	e5ce      	b.n	8accc <_malloc_r+0x44>
   8b12e:	f103 0b10 	add.w	fp, r3, #16
   8b132:	e6af      	b.n	8ae94 <_malloc_r+0x20c>
   8b134:	2a54      	cmp	r2, #84	; 0x54
   8b136:	d829      	bhi.n	8b18c <_malloc_r+0x504>
   8b138:	0b1a      	lsrs	r2, r3, #12
   8b13a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8b13e:	00c9      	lsls	r1, r1, #3
   8b140:	326e      	adds	r2, #110	; 0x6e
   8b142:	e74d      	b.n	8afe0 <_malloc_r+0x358>
   8b144:	4b20      	ldr	r3, [pc, #128]	; (8b1c8 <_malloc_r+0x540>)
   8b146:	6819      	ldr	r1, [r3, #0]
   8b148:	4459      	add	r1, fp
   8b14a:	6019      	str	r1, [r3, #0]
   8b14c:	e6b3      	b.n	8aeb6 <_malloc_r+0x22e>
   8b14e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8b152:	2800      	cmp	r0, #0
   8b154:	f47f aeaf 	bne.w	8aeb6 <_malloc_r+0x22e>
   8b158:	eb08 030b 	add.w	r3, r8, fp
   8b15c:	68ba      	ldr	r2, [r7, #8]
   8b15e:	f043 0301 	orr.w	r3, r3, #1
   8b162:	6053      	str	r3, [r2, #4]
   8b164:	e6ef      	b.n	8af46 <_malloc_r+0x2be>
   8b166:	207f      	movs	r0, #127	; 0x7f
   8b168:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b16c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8b170:	e5ac      	b.n	8accc <_malloc_r+0x44>
   8b172:	f104 0108 	add.w	r1, r4, #8
   8b176:	4628      	mov	r0, r5
   8b178:	9300      	str	r3, [sp, #0]
   8b17a:	f7ff fa59 	bl	8a630 <_free_r>
   8b17e:	9b00      	ldr	r3, [sp, #0]
   8b180:	6819      	ldr	r1, [r3, #0]
   8b182:	e6e0      	b.n	8af46 <_malloc_r+0x2be>
   8b184:	2001      	movs	r0, #1
   8b186:	f04f 0900 	mov.w	r9, #0
   8b18a:	e6bd      	b.n	8af08 <_malloc_r+0x280>
   8b18c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8b190:	d805      	bhi.n	8b19e <_malloc_r+0x516>
   8b192:	0bda      	lsrs	r2, r3, #15
   8b194:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8b198:	00c9      	lsls	r1, r1, #3
   8b19a:	3277      	adds	r2, #119	; 0x77
   8b19c:	e720      	b.n	8afe0 <_malloc_r+0x358>
   8b19e:	f240 5154 	movw	r1, #1364	; 0x554
   8b1a2:	428a      	cmp	r2, r1
   8b1a4:	d805      	bhi.n	8b1b2 <_malloc_r+0x52a>
   8b1a6:	0c9a      	lsrs	r2, r3, #18
   8b1a8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8b1ac:	00c9      	lsls	r1, r1, #3
   8b1ae:	327c      	adds	r2, #124	; 0x7c
   8b1b0:	e716      	b.n	8afe0 <_malloc_r+0x358>
   8b1b2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b1b6:	227e      	movs	r2, #126	; 0x7e
   8b1b8:	e712      	b.n	8afe0 <_malloc_r+0x358>
   8b1ba:	687b      	ldr	r3, [r7, #4]
   8b1bc:	e780      	b.n	8b0c0 <_malloc_r+0x438>
   8b1be:	08f0      	lsrs	r0, r6, #3
   8b1c0:	f106 0308 	add.w	r3, r6, #8
   8b1c4:	e60e      	b.n	8ade4 <_malloc_r+0x15c>
   8b1c6:	bf00      	nop
   8b1c8:	20002384 	.word	0x20002384

0008b1cc <__ascii_mbtowc>:
   8b1cc:	b082      	sub	sp, #8
   8b1ce:	b149      	cbz	r1, 8b1e4 <__ascii_mbtowc+0x18>
   8b1d0:	b15a      	cbz	r2, 8b1ea <__ascii_mbtowc+0x1e>
   8b1d2:	b16b      	cbz	r3, 8b1f0 <__ascii_mbtowc+0x24>
   8b1d4:	7813      	ldrb	r3, [r2, #0]
   8b1d6:	600b      	str	r3, [r1, #0]
   8b1d8:	7812      	ldrb	r2, [r2, #0]
   8b1da:	1c10      	adds	r0, r2, #0
   8b1dc:	bf18      	it	ne
   8b1de:	2001      	movne	r0, #1
   8b1e0:	b002      	add	sp, #8
   8b1e2:	4770      	bx	lr
   8b1e4:	a901      	add	r1, sp, #4
   8b1e6:	2a00      	cmp	r2, #0
   8b1e8:	d1f3      	bne.n	8b1d2 <__ascii_mbtowc+0x6>
   8b1ea:	4610      	mov	r0, r2
   8b1ec:	b002      	add	sp, #8
   8b1ee:	4770      	bx	lr
   8b1f0:	f06f 0001 	mvn.w	r0, #1
   8b1f4:	e7f4      	b.n	8b1e0 <__ascii_mbtowc+0x14>
   8b1f6:	bf00      	nop

0008b1f8 <memchr>:
   8b1f8:	0783      	lsls	r3, r0, #30
   8b1fa:	b470      	push	{r4, r5, r6}
   8b1fc:	b2cd      	uxtb	r5, r1
   8b1fe:	d03d      	beq.n	8b27c <memchr+0x84>
   8b200:	1e54      	subs	r4, r2, #1
   8b202:	b30a      	cbz	r2, 8b248 <memchr+0x50>
   8b204:	7803      	ldrb	r3, [r0, #0]
   8b206:	42ab      	cmp	r3, r5
   8b208:	d01f      	beq.n	8b24a <memchr+0x52>
   8b20a:	1c43      	adds	r3, r0, #1
   8b20c:	e005      	b.n	8b21a <memchr+0x22>
   8b20e:	f114 34ff 	adds.w	r4, r4, #4294967295
   8b212:	d319      	bcc.n	8b248 <memchr+0x50>
   8b214:	7802      	ldrb	r2, [r0, #0]
   8b216:	42aa      	cmp	r2, r5
   8b218:	d017      	beq.n	8b24a <memchr+0x52>
   8b21a:	f013 0f03 	tst.w	r3, #3
   8b21e:	4618      	mov	r0, r3
   8b220:	f103 0301 	add.w	r3, r3, #1
   8b224:	d1f3      	bne.n	8b20e <memchr+0x16>
   8b226:	2c03      	cmp	r4, #3
   8b228:	d811      	bhi.n	8b24e <memchr+0x56>
   8b22a:	b34c      	cbz	r4, 8b280 <memchr+0x88>
   8b22c:	7803      	ldrb	r3, [r0, #0]
   8b22e:	42ab      	cmp	r3, r5
   8b230:	d00b      	beq.n	8b24a <memchr+0x52>
   8b232:	4404      	add	r4, r0
   8b234:	1c43      	adds	r3, r0, #1
   8b236:	e002      	b.n	8b23e <memchr+0x46>
   8b238:	7802      	ldrb	r2, [r0, #0]
   8b23a:	42aa      	cmp	r2, r5
   8b23c:	d005      	beq.n	8b24a <memchr+0x52>
   8b23e:	429c      	cmp	r4, r3
   8b240:	4618      	mov	r0, r3
   8b242:	f103 0301 	add.w	r3, r3, #1
   8b246:	d1f7      	bne.n	8b238 <memchr+0x40>
   8b248:	2000      	movs	r0, #0
   8b24a:	bc70      	pop	{r4, r5, r6}
   8b24c:	4770      	bx	lr
   8b24e:	0209      	lsls	r1, r1, #8
   8b250:	b289      	uxth	r1, r1
   8b252:	4329      	orrs	r1, r5
   8b254:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   8b258:	6803      	ldr	r3, [r0, #0]
   8b25a:	4606      	mov	r6, r0
   8b25c:	404b      	eors	r3, r1
   8b25e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8b262:	ea22 0303 	bic.w	r3, r2, r3
   8b266:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8b26a:	f100 0004 	add.w	r0, r0, #4
   8b26e:	d103      	bne.n	8b278 <memchr+0x80>
   8b270:	3c04      	subs	r4, #4
   8b272:	2c03      	cmp	r4, #3
   8b274:	d8f0      	bhi.n	8b258 <memchr+0x60>
   8b276:	e7d8      	b.n	8b22a <memchr+0x32>
   8b278:	4630      	mov	r0, r6
   8b27a:	e7d7      	b.n	8b22c <memchr+0x34>
   8b27c:	4614      	mov	r4, r2
   8b27e:	e7d2      	b.n	8b226 <memchr+0x2e>
   8b280:	4620      	mov	r0, r4
   8b282:	e7e2      	b.n	8b24a <memchr+0x52>

0008b284 <memmove>:
   8b284:	4288      	cmp	r0, r1
   8b286:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b288:	d90d      	bls.n	8b2a6 <memmove+0x22>
   8b28a:	188b      	adds	r3, r1, r2
   8b28c:	4298      	cmp	r0, r3
   8b28e:	d20a      	bcs.n	8b2a6 <memmove+0x22>
   8b290:	1884      	adds	r4, r0, r2
   8b292:	2a00      	cmp	r2, #0
   8b294:	d051      	beq.n	8b33a <memmove+0xb6>
   8b296:	4622      	mov	r2, r4
   8b298:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8b29c:	4299      	cmp	r1, r3
   8b29e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8b2a2:	d1f9      	bne.n	8b298 <memmove+0x14>
   8b2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b2a6:	2a0f      	cmp	r2, #15
   8b2a8:	d948      	bls.n	8b33c <memmove+0xb8>
   8b2aa:	ea41 0300 	orr.w	r3, r1, r0
   8b2ae:	079b      	lsls	r3, r3, #30
   8b2b0:	d146      	bne.n	8b340 <memmove+0xbc>
   8b2b2:	4615      	mov	r5, r2
   8b2b4:	f100 0410 	add.w	r4, r0, #16
   8b2b8:	f101 0310 	add.w	r3, r1, #16
   8b2bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8b2c0:	3d10      	subs	r5, #16
   8b2c2:	f844 6c10 	str.w	r6, [r4, #-16]
   8b2c6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8b2ca:	2d0f      	cmp	r5, #15
   8b2cc:	f844 6c0c 	str.w	r6, [r4, #-12]
   8b2d0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8b2d4:	f104 0410 	add.w	r4, r4, #16
   8b2d8:	f844 6c18 	str.w	r6, [r4, #-24]
   8b2dc:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b2e0:	f103 0310 	add.w	r3, r3, #16
   8b2e4:	f844 6c14 	str.w	r6, [r4, #-20]
   8b2e8:	d8e8      	bhi.n	8b2bc <memmove+0x38>
   8b2ea:	f1a2 0310 	sub.w	r3, r2, #16
   8b2ee:	f023 030f 	bic.w	r3, r3, #15
   8b2f2:	f002 0e0f 	and.w	lr, r2, #15
   8b2f6:	3310      	adds	r3, #16
   8b2f8:	f1be 0f03 	cmp.w	lr, #3
   8b2fc:	4419      	add	r1, r3
   8b2fe:	4403      	add	r3, r0
   8b300:	d921      	bls.n	8b346 <memmove+0xc2>
   8b302:	460e      	mov	r6, r1
   8b304:	4674      	mov	r4, lr
   8b306:	1f1d      	subs	r5, r3, #4
   8b308:	f856 7b04 	ldr.w	r7, [r6], #4
   8b30c:	3c04      	subs	r4, #4
   8b30e:	2c03      	cmp	r4, #3
   8b310:	f845 7f04 	str.w	r7, [r5, #4]!
   8b314:	d8f8      	bhi.n	8b308 <memmove+0x84>
   8b316:	f1ae 0404 	sub.w	r4, lr, #4
   8b31a:	f024 0403 	bic.w	r4, r4, #3
   8b31e:	3404      	adds	r4, #4
   8b320:	4421      	add	r1, r4
   8b322:	4423      	add	r3, r4
   8b324:	f002 0203 	and.w	r2, r2, #3
   8b328:	b162      	cbz	r2, 8b344 <memmove+0xc0>
   8b32a:	3b01      	subs	r3, #1
   8b32c:	440a      	add	r2, r1
   8b32e:	f811 4b01 	ldrb.w	r4, [r1], #1
   8b332:	428a      	cmp	r2, r1
   8b334:	f803 4f01 	strb.w	r4, [r3, #1]!
   8b338:	d1f9      	bne.n	8b32e <memmove+0xaa>
   8b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b33c:	4603      	mov	r3, r0
   8b33e:	e7f3      	b.n	8b328 <memmove+0xa4>
   8b340:	4603      	mov	r3, r0
   8b342:	e7f2      	b.n	8b32a <memmove+0xa6>
   8b344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b346:	4672      	mov	r2, lr
   8b348:	e7ee      	b.n	8b328 <memmove+0xa4>
   8b34a:	bf00      	nop

0008b34c <__malloc_lock>:
   8b34c:	4801      	ldr	r0, [pc, #4]	; (8b354 <__malloc_lock+0x8>)
   8b34e:	f7ff bc17 	b.w	8ab80 <__retarget_lock_acquire_recursive>
   8b352:	bf00      	nop
   8b354:	200028a4 	.word	0x200028a4

0008b358 <__malloc_unlock>:
   8b358:	4801      	ldr	r0, [pc, #4]	; (8b360 <__malloc_unlock+0x8>)
   8b35a:	f7ff bc13 	b.w	8ab84 <__retarget_lock_release_recursive>
   8b35e:	bf00      	nop
   8b360:	200028a4 	.word	0x200028a4

0008b364 <_Balloc>:
   8b364:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b366:	b570      	push	{r4, r5, r6, lr}
   8b368:	4605      	mov	r5, r0
   8b36a:	460c      	mov	r4, r1
   8b36c:	b14b      	cbz	r3, 8b382 <_Balloc+0x1e>
   8b36e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8b372:	b180      	cbz	r0, 8b396 <_Balloc+0x32>
   8b374:	6802      	ldr	r2, [r0, #0]
   8b376:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8b37a:	2300      	movs	r3, #0
   8b37c:	6103      	str	r3, [r0, #16]
   8b37e:	60c3      	str	r3, [r0, #12]
   8b380:	bd70      	pop	{r4, r5, r6, pc}
   8b382:	2221      	movs	r2, #33	; 0x21
   8b384:	2104      	movs	r1, #4
   8b386:	f000 fe79 	bl	8c07c <_calloc_r>
   8b38a:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b38c:	4603      	mov	r3, r0
   8b38e:	2800      	cmp	r0, #0
   8b390:	d1ed      	bne.n	8b36e <_Balloc+0xa>
   8b392:	2000      	movs	r0, #0
   8b394:	bd70      	pop	{r4, r5, r6, pc}
   8b396:	2101      	movs	r1, #1
   8b398:	fa01 f604 	lsl.w	r6, r1, r4
   8b39c:	1d72      	adds	r2, r6, #5
   8b39e:	4628      	mov	r0, r5
   8b3a0:	0092      	lsls	r2, r2, #2
   8b3a2:	f000 fe6b 	bl	8c07c <_calloc_r>
   8b3a6:	2800      	cmp	r0, #0
   8b3a8:	d0f3      	beq.n	8b392 <_Balloc+0x2e>
   8b3aa:	6044      	str	r4, [r0, #4]
   8b3ac:	6086      	str	r6, [r0, #8]
   8b3ae:	e7e4      	b.n	8b37a <_Balloc+0x16>

0008b3b0 <_Bfree>:
   8b3b0:	b131      	cbz	r1, 8b3c0 <_Bfree+0x10>
   8b3b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b3b4:	684a      	ldr	r2, [r1, #4]
   8b3b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b3ba:	6008      	str	r0, [r1, #0]
   8b3bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b3c0:	4770      	bx	lr
   8b3c2:	bf00      	nop

0008b3c4 <__multadd>:
   8b3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b3c6:	460c      	mov	r4, r1
   8b3c8:	4605      	mov	r5, r0
   8b3ca:	f04f 0e00 	mov.w	lr, #0
   8b3ce:	690e      	ldr	r6, [r1, #16]
   8b3d0:	b083      	sub	sp, #12
   8b3d2:	f101 0714 	add.w	r7, r1, #20
   8b3d6:	6838      	ldr	r0, [r7, #0]
   8b3d8:	f10e 0e01 	add.w	lr, lr, #1
   8b3dc:	b281      	uxth	r1, r0
   8b3de:	fb02 3301 	mla	r3, r2, r1, r3
   8b3e2:	0c01      	lsrs	r1, r0, #16
   8b3e4:	0c18      	lsrs	r0, r3, #16
   8b3e6:	fb02 0101 	mla	r1, r2, r1, r0
   8b3ea:	b29b      	uxth	r3, r3
   8b3ec:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8b3f0:	4576      	cmp	r6, lr
   8b3f2:	f847 3b04 	str.w	r3, [r7], #4
   8b3f6:	ea4f 4311 	mov.w	r3, r1, lsr #16
   8b3fa:	dcec      	bgt.n	8b3d6 <__multadd+0x12>
   8b3fc:	b13b      	cbz	r3, 8b40e <__multadd+0x4a>
   8b3fe:	68a2      	ldr	r2, [r4, #8]
   8b400:	4296      	cmp	r6, r2
   8b402:	da07      	bge.n	8b414 <__multadd+0x50>
   8b404:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   8b408:	3601      	adds	r6, #1
   8b40a:	6153      	str	r3, [r2, #20]
   8b40c:	6126      	str	r6, [r4, #16]
   8b40e:	4620      	mov	r0, r4
   8b410:	b003      	add	sp, #12
   8b412:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b414:	6861      	ldr	r1, [r4, #4]
   8b416:	4628      	mov	r0, r5
   8b418:	3101      	adds	r1, #1
   8b41a:	9301      	str	r3, [sp, #4]
   8b41c:	f7ff ffa2 	bl	8b364 <_Balloc>
   8b420:	4607      	mov	r7, r0
   8b422:	6922      	ldr	r2, [r4, #16]
   8b424:	f104 010c 	add.w	r1, r4, #12
   8b428:	3202      	adds	r2, #2
   8b42a:	0092      	lsls	r2, r2, #2
   8b42c:	300c      	adds	r0, #12
   8b42e:	f7fb fb57 	bl	86ae0 <memcpy>
   8b432:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   8b434:	6861      	ldr	r1, [r4, #4]
   8b436:	9b01      	ldr	r3, [sp, #4]
   8b438:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   8b43c:	6020      	str	r0, [r4, #0]
   8b43e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8b442:	463c      	mov	r4, r7
   8b444:	e7de      	b.n	8b404 <__multadd+0x40>
   8b446:	bf00      	nop

0008b448 <__hi0bits>:
   8b448:	0c02      	lsrs	r2, r0, #16
   8b44a:	0412      	lsls	r2, r2, #16
   8b44c:	4603      	mov	r3, r0
   8b44e:	b9b2      	cbnz	r2, 8b47e <__hi0bits+0x36>
   8b450:	0403      	lsls	r3, r0, #16
   8b452:	2010      	movs	r0, #16
   8b454:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b458:	bf04      	itt	eq
   8b45a:	021b      	lsleq	r3, r3, #8
   8b45c:	3008      	addeq	r0, #8
   8b45e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b462:	bf04      	itt	eq
   8b464:	011b      	lsleq	r3, r3, #4
   8b466:	3004      	addeq	r0, #4
   8b468:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b46c:	bf04      	itt	eq
   8b46e:	009b      	lsleq	r3, r3, #2
   8b470:	3002      	addeq	r0, #2
   8b472:	2b00      	cmp	r3, #0
   8b474:	db02      	blt.n	8b47c <__hi0bits+0x34>
   8b476:	005b      	lsls	r3, r3, #1
   8b478:	d403      	bmi.n	8b482 <__hi0bits+0x3a>
   8b47a:	2020      	movs	r0, #32
   8b47c:	4770      	bx	lr
   8b47e:	2000      	movs	r0, #0
   8b480:	e7e8      	b.n	8b454 <__hi0bits+0xc>
   8b482:	3001      	adds	r0, #1
   8b484:	4770      	bx	lr
   8b486:	bf00      	nop

0008b488 <__lo0bits>:
   8b488:	6803      	ldr	r3, [r0, #0]
   8b48a:	4601      	mov	r1, r0
   8b48c:	f013 0207 	ands.w	r2, r3, #7
   8b490:	d007      	beq.n	8b4a2 <__lo0bits+0x1a>
   8b492:	07da      	lsls	r2, r3, #31
   8b494:	d421      	bmi.n	8b4da <__lo0bits+0x52>
   8b496:	0798      	lsls	r0, r3, #30
   8b498:	d421      	bmi.n	8b4de <__lo0bits+0x56>
   8b49a:	089b      	lsrs	r3, r3, #2
   8b49c:	600b      	str	r3, [r1, #0]
   8b49e:	2002      	movs	r0, #2
   8b4a0:	4770      	bx	lr
   8b4a2:	b298      	uxth	r0, r3
   8b4a4:	b198      	cbz	r0, 8b4ce <__lo0bits+0x46>
   8b4a6:	4610      	mov	r0, r2
   8b4a8:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b4ac:	bf04      	itt	eq
   8b4ae:	0a1b      	lsreq	r3, r3, #8
   8b4b0:	3008      	addeq	r0, #8
   8b4b2:	071a      	lsls	r2, r3, #28
   8b4b4:	bf04      	itt	eq
   8b4b6:	091b      	lsreq	r3, r3, #4
   8b4b8:	3004      	addeq	r0, #4
   8b4ba:	079a      	lsls	r2, r3, #30
   8b4bc:	bf04      	itt	eq
   8b4be:	089b      	lsreq	r3, r3, #2
   8b4c0:	3002      	addeq	r0, #2
   8b4c2:	07da      	lsls	r2, r3, #31
   8b4c4:	d407      	bmi.n	8b4d6 <__lo0bits+0x4e>
   8b4c6:	085b      	lsrs	r3, r3, #1
   8b4c8:	d104      	bne.n	8b4d4 <__lo0bits+0x4c>
   8b4ca:	2020      	movs	r0, #32
   8b4cc:	4770      	bx	lr
   8b4ce:	0c1b      	lsrs	r3, r3, #16
   8b4d0:	2010      	movs	r0, #16
   8b4d2:	e7e9      	b.n	8b4a8 <__lo0bits+0x20>
   8b4d4:	3001      	adds	r0, #1
   8b4d6:	600b      	str	r3, [r1, #0]
   8b4d8:	4770      	bx	lr
   8b4da:	2000      	movs	r0, #0
   8b4dc:	4770      	bx	lr
   8b4de:	085b      	lsrs	r3, r3, #1
   8b4e0:	600b      	str	r3, [r1, #0]
   8b4e2:	2001      	movs	r0, #1
   8b4e4:	4770      	bx	lr
   8b4e6:	bf00      	nop

0008b4e8 <__i2b>:
   8b4e8:	b510      	push	{r4, lr}
   8b4ea:	460c      	mov	r4, r1
   8b4ec:	2101      	movs	r1, #1
   8b4ee:	f7ff ff39 	bl	8b364 <_Balloc>
   8b4f2:	2201      	movs	r2, #1
   8b4f4:	6144      	str	r4, [r0, #20]
   8b4f6:	6102      	str	r2, [r0, #16]
   8b4f8:	bd10      	pop	{r4, pc}
   8b4fa:	bf00      	nop

0008b4fc <__multiply>:
   8b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b500:	690c      	ldr	r4, [r1, #16]
   8b502:	6915      	ldr	r5, [r2, #16]
   8b504:	b083      	sub	sp, #12
   8b506:	42ac      	cmp	r4, r5
   8b508:	468b      	mov	fp, r1
   8b50a:	4616      	mov	r6, r2
   8b50c:	da04      	bge.n	8b518 <__multiply+0x1c>
   8b50e:	4622      	mov	r2, r4
   8b510:	46b3      	mov	fp, r6
   8b512:	462c      	mov	r4, r5
   8b514:	460e      	mov	r6, r1
   8b516:	4615      	mov	r5, r2
   8b518:	f8db 3008 	ldr.w	r3, [fp, #8]
   8b51c:	eb04 0805 	add.w	r8, r4, r5
   8b520:	f8db 1004 	ldr.w	r1, [fp, #4]
   8b524:	4598      	cmp	r8, r3
   8b526:	bfc8      	it	gt
   8b528:	3101      	addgt	r1, #1
   8b52a:	f7ff ff1b 	bl	8b364 <_Balloc>
   8b52e:	f100 0914 	add.w	r9, r0, #20
   8b532:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b536:	45d1      	cmp	r9, sl
   8b538:	9000      	str	r0, [sp, #0]
   8b53a:	d205      	bcs.n	8b548 <__multiply+0x4c>
   8b53c:	464b      	mov	r3, r9
   8b53e:	2100      	movs	r1, #0
   8b540:	f843 1b04 	str.w	r1, [r3], #4
   8b544:	459a      	cmp	sl, r3
   8b546:	d8fb      	bhi.n	8b540 <__multiply+0x44>
   8b548:	f106 0c14 	add.w	ip, r6, #20
   8b54c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8b550:	f10b 0b14 	add.w	fp, fp, #20
   8b554:	459c      	cmp	ip, r3
   8b556:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8b55a:	d24b      	bcs.n	8b5f4 <__multiply+0xf8>
   8b55c:	f8cd a004 	str.w	sl, [sp, #4]
   8b560:	469a      	mov	sl, r3
   8b562:	f8dc 5000 	ldr.w	r5, [ip]
   8b566:	b2af      	uxth	r7, r5
   8b568:	b1e7      	cbz	r7, 8b5a4 <__multiply+0xa8>
   8b56a:	464d      	mov	r5, r9
   8b56c:	465e      	mov	r6, fp
   8b56e:	2100      	movs	r1, #0
   8b570:	f856 2b04 	ldr.w	r2, [r6], #4
   8b574:	6828      	ldr	r0, [r5, #0]
   8b576:	b293      	uxth	r3, r2
   8b578:	b284      	uxth	r4, r0
   8b57a:	0c12      	lsrs	r2, r2, #16
   8b57c:	fb07 4303 	mla	r3, r7, r3, r4
   8b580:	0c00      	lsrs	r0, r0, #16
   8b582:	fb07 0202 	mla	r2, r7, r2, r0
   8b586:	440b      	add	r3, r1
   8b588:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8b58c:	b29b      	uxth	r3, r3
   8b58e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8b592:	45b6      	cmp	lr, r6
   8b594:	f845 3b04 	str.w	r3, [r5], #4
   8b598:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8b59c:	d8e8      	bhi.n	8b570 <__multiply+0x74>
   8b59e:	6029      	str	r1, [r5, #0]
   8b5a0:	f8dc 5000 	ldr.w	r5, [ip]
   8b5a4:	0c2d      	lsrs	r5, r5, #16
   8b5a6:	d01d      	beq.n	8b5e4 <__multiply+0xe8>
   8b5a8:	f8d9 3000 	ldr.w	r3, [r9]
   8b5ac:	4648      	mov	r0, r9
   8b5ae:	461c      	mov	r4, r3
   8b5b0:	4659      	mov	r1, fp
   8b5b2:	2200      	movs	r2, #0
   8b5b4:	880e      	ldrh	r6, [r1, #0]
   8b5b6:	0c24      	lsrs	r4, r4, #16
   8b5b8:	fb05 4406 	mla	r4, r5, r6, r4
   8b5bc:	b29b      	uxth	r3, r3
   8b5be:	4422      	add	r2, r4
   8b5c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b5c4:	f840 3b04 	str.w	r3, [r0], #4
   8b5c8:	f851 3b04 	ldr.w	r3, [r1], #4
   8b5cc:	6804      	ldr	r4, [r0, #0]
   8b5ce:	0c1b      	lsrs	r3, r3, #16
   8b5d0:	b2a6      	uxth	r6, r4
   8b5d2:	fb05 6303 	mla	r3, r5, r3, r6
   8b5d6:	458e      	cmp	lr, r1
   8b5d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8b5dc:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8b5e0:	d8e8      	bhi.n	8b5b4 <__multiply+0xb8>
   8b5e2:	6003      	str	r3, [r0, #0]
   8b5e4:	f10c 0c04 	add.w	ip, ip, #4
   8b5e8:	45e2      	cmp	sl, ip
   8b5ea:	f109 0904 	add.w	r9, r9, #4
   8b5ee:	d8b8      	bhi.n	8b562 <__multiply+0x66>
   8b5f0:	f8dd a004 	ldr.w	sl, [sp, #4]
   8b5f4:	f1b8 0f00 	cmp.w	r8, #0
   8b5f8:	dd0b      	ble.n	8b612 <__multiply+0x116>
   8b5fa:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8b5fe:	f1aa 0a04 	sub.w	sl, sl, #4
   8b602:	b11b      	cbz	r3, 8b60c <__multiply+0x110>
   8b604:	e005      	b.n	8b612 <__multiply+0x116>
   8b606:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b60a:	b913      	cbnz	r3, 8b612 <__multiply+0x116>
   8b60c:	f1b8 0801 	subs.w	r8, r8, #1
   8b610:	d1f9      	bne.n	8b606 <__multiply+0x10a>
   8b612:	9800      	ldr	r0, [sp, #0]
   8b614:	f8c0 8010 	str.w	r8, [r0, #16]
   8b618:	b003      	add	sp, #12
   8b61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b61e:	bf00      	nop

0008b620 <__pow5mult>:
   8b620:	f012 0303 	ands.w	r3, r2, #3
   8b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b628:	4614      	mov	r4, r2
   8b62a:	4607      	mov	r7, r0
   8b62c:	d12e      	bne.n	8b68c <__pow5mult+0x6c>
   8b62e:	460d      	mov	r5, r1
   8b630:	10a4      	asrs	r4, r4, #2
   8b632:	d01c      	beq.n	8b66e <__pow5mult+0x4e>
   8b634:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8b636:	b396      	cbz	r6, 8b69e <__pow5mult+0x7e>
   8b638:	07e3      	lsls	r3, r4, #31
   8b63a:	f04f 0800 	mov.w	r8, #0
   8b63e:	d406      	bmi.n	8b64e <__pow5mult+0x2e>
   8b640:	1064      	asrs	r4, r4, #1
   8b642:	d014      	beq.n	8b66e <__pow5mult+0x4e>
   8b644:	6830      	ldr	r0, [r6, #0]
   8b646:	b1a8      	cbz	r0, 8b674 <__pow5mult+0x54>
   8b648:	4606      	mov	r6, r0
   8b64a:	07e3      	lsls	r3, r4, #31
   8b64c:	d5f8      	bpl.n	8b640 <__pow5mult+0x20>
   8b64e:	4632      	mov	r2, r6
   8b650:	4629      	mov	r1, r5
   8b652:	4638      	mov	r0, r7
   8b654:	f7ff ff52 	bl	8b4fc <__multiply>
   8b658:	b1b5      	cbz	r5, 8b688 <__pow5mult+0x68>
   8b65a:	686a      	ldr	r2, [r5, #4]
   8b65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b65e:	1064      	asrs	r4, r4, #1
   8b660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b664:	6029      	str	r1, [r5, #0]
   8b666:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8b66a:	4605      	mov	r5, r0
   8b66c:	d1ea      	bne.n	8b644 <__pow5mult+0x24>
   8b66e:	4628      	mov	r0, r5
   8b670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b674:	4632      	mov	r2, r6
   8b676:	4631      	mov	r1, r6
   8b678:	4638      	mov	r0, r7
   8b67a:	f7ff ff3f 	bl	8b4fc <__multiply>
   8b67e:	6030      	str	r0, [r6, #0]
   8b680:	f8c0 8000 	str.w	r8, [r0]
   8b684:	4606      	mov	r6, r0
   8b686:	e7e0      	b.n	8b64a <__pow5mult+0x2a>
   8b688:	4605      	mov	r5, r0
   8b68a:	e7d9      	b.n	8b640 <__pow5mult+0x20>
   8b68c:	4a0b      	ldr	r2, [pc, #44]	; (8b6bc <__pow5mult+0x9c>)
   8b68e:	3b01      	subs	r3, #1
   8b690:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b694:	2300      	movs	r3, #0
   8b696:	f7ff fe95 	bl	8b3c4 <__multadd>
   8b69a:	4605      	mov	r5, r0
   8b69c:	e7c8      	b.n	8b630 <__pow5mult+0x10>
   8b69e:	2101      	movs	r1, #1
   8b6a0:	4638      	mov	r0, r7
   8b6a2:	f7ff fe5f 	bl	8b364 <_Balloc>
   8b6a6:	f240 2171 	movw	r1, #625	; 0x271
   8b6aa:	2201      	movs	r2, #1
   8b6ac:	2300      	movs	r3, #0
   8b6ae:	6141      	str	r1, [r0, #20]
   8b6b0:	6102      	str	r2, [r0, #16]
   8b6b2:	4606      	mov	r6, r0
   8b6b4:	64b8      	str	r0, [r7, #72]	; 0x48
   8b6b6:	6003      	str	r3, [r0, #0]
   8b6b8:	e7be      	b.n	8b638 <__pow5mult+0x18>
   8b6ba:	bf00      	nop
   8b6bc:	0008ce28 	.word	0x0008ce28

0008b6c0 <__lshift>:
   8b6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b6c4:	690b      	ldr	r3, [r1, #16]
   8b6c6:	1154      	asrs	r4, r2, #5
   8b6c8:	eb04 0803 	add.w	r8, r4, r3
   8b6cc:	688b      	ldr	r3, [r1, #8]
   8b6ce:	f108 0501 	add.w	r5, r8, #1
   8b6d2:	429d      	cmp	r5, r3
   8b6d4:	460e      	mov	r6, r1
   8b6d6:	4691      	mov	r9, r2
   8b6d8:	4607      	mov	r7, r0
   8b6da:	6849      	ldr	r1, [r1, #4]
   8b6dc:	dd04      	ble.n	8b6e8 <__lshift+0x28>
   8b6de:	005b      	lsls	r3, r3, #1
   8b6e0:	429d      	cmp	r5, r3
   8b6e2:	f101 0101 	add.w	r1, r1, #1
   8b6e6:	dcfa      	bgt.n	8b6de <__lshift+0x1e>
   8b6e8:	4638      	mov	r0, r7
   8b6ea:	f7ff fe3b 	bl	8b364 <_Balloc>
   8b6ee:	2c00      	cmp	r4, #0
   8b6f0:	f100 0314 	add.w	r3, r0, #20
   8b6f4:	dd06      	ble.n	8b704 <__lshift+0x44>
   8b6f6:	2100      	movs	r1, #0
   8b6f8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   8b6fc:	f843 1b04 	str.w	r1, [r3], #4
   8b700:	429a      	cmp	r2, r3
   8b702:	d1fb      	bne.n	8b6fc <__lshift+0x3c>
   8b704:	6934      	ldr	r4, [r6, #16]
   8b706:	f106 0114 	add.w	r1, r6, #20
   8b70a:	f019 091f 	ands.w	r9, r9, #31
   8b70e:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8b712:	d01d      	beq.n	8b750 <__lshift+0x90>
   8b714:	2200      	movs	r2, #0
   8b716:	f1c9 0c20 	rsb	ip, r9, #32
   8b71a:	680c      	ldr	r4, [r1, #0]
   8b71c:	fa04 f409 	lsl.w	r4, r4, r9
   8b720:	4314      	orrs	r4, r2
   8b722:	f843 4b04 	str.w	r4, [r3], #4
   8b726:	f851 2b04 	ldr.w	r2, [r1], #4
   8b72a:	458e      	cmp	lr, r1
   8b72c:	fa22 f20c 	lsr.w	r2, r2, ip
   8b730:	d8f3      	bhi.n	8b71a <__lshift+0x5a>
   8b732:	601a      	str	r2, [r3, #0]
   8b734:	b10a      	cbz	r2, 8b73a <__lshift+0x7a>
   8b736:	f108 0502 	add.w	r5, r8, #2
   8b73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b73c:	6872      	ldr	r2, [r6, #4]
   8b73e:	3d01      	subs	r5, #1
   8b740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b744:	6105      	str	r5, [r0, #16]
   8b746:	6031      	str	r1, [r6, #0]
   8b748:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8b74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b750:	3b04      	subs	r3, #4
   8b752:	f851 2b04 	ldr.w	r2, [r1], #4
   8b756:	458e      	cmp	lr, r1
   8b758:	f843 2f04 	str.w	r2, [r3, #4]!
   8b75c:	d8f9      	bhi.n	8b752 <__lshift+0x92>
   8b75e:	e7ec      	b.n	8b73a <__lshift+0x7a>

0008b760 <__mcmp>:
   8b760:	b430      	push	{r4, r5}
   8b762:	690b      	ldr	r3, [r1, #16]
   8b764:	4605      	mov	r5, r0
   8b766:	6900      	ldr	r0, [r0, #16]
   8b768:	1ac0      	subs	r0, r0, r3
   8b76a:	d10f      	bne.n	8b78c <__mcmp+0x2c>
   8b76c:	009b      	lsls	r3, r3, #2
   8b76e:	3514      	adds	r5, #20
   8b770:	3114      	adds	r1, #20
   8b772:	4419      	add	r1, r3
   8b774:	442b      	add	r3, r5
   8b776:	e001      	b.n	8b77c <__mcmp+0x1c>
   8b778:	429d      	cmp	r5, r3
   8b77a:	d207      	bcs.n	8b78c <__mcmp+0x2c>
   8b77c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8b780:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8b784:	4294      	cmp	r4, r2
   8b786:	d0f7      	beq.n	8b778 <__mcmp+0x18>
   8b788:	d302      	bcc.n	8b790 <__mcmp+0x30>
   8b78a:	2001      	movs	r0, #1
   8b78c:	bc30      	pop	{r4, r5}
   8b78e:	4770      	bx	lr
   8b790:	f04f 30ff 	mov.w	r0, #4294967295
   8b794:	e7fa      	b.n	8b78c <__mcmp+0x2c>
   8b796:	bf00      	nop

0008b798 <__mdiff>:
   8b798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b79c:	690c      	ldr	r4, [r1, #16]
   8b79e:	4689      	mov	r9, r1
   8b7a0:	6911      	ldr	r1, [r2, #16]
   8b7a2:	4692      	mov	sl, r2
   8b7a4:	1a64      	subs	r4, r4, r1
   8b7a6:	2c00      	cmp	r4, #0
   8b7a8:	d117      	bne.n	8b7da <__mdiff+0x42>
   8b7aa:	0089      	lsls	r1, r1, #2
   8b7ac:	f109 0714 	add.w	r7, r9, #20
   8b7b0:	f102 0614 	add.w	r6, r2, #20
   8b7b4:	187b      	adds	r3, r7, r1
   8b7b6:	4431      	add	r1, r6
   8b7b8:	e001      	b.n	8b7be <__mdiff+0x26>
   8b7ba:	429f      	cmp	r7, r3
   8b7bc:	d265      	bcs.n	8b88a <__mdiff+0xf2>
   8b7be:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b7c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8b7c6:	4295      	cmp	r5, r2
   8b7c8:	d0f7      	beq.n	8b7ba <__mdiff+0x22>
   8b7ca:	d267      	bcs.n	8b89c <__mdiff+0x104>
   8b7cc:	464b      	mov	r3, r9
   8b7ce:	46bb      	mov	fp, r7
   8b7d0:	46d1      	mov	r9, sl
   8b7d2:	4637      	mov	r7, r6
   8b7d4:	469a      	mov	sl, r3
   8b7d6:	2401      	movs	r4, #1
   8b7d8:	e005      	b.n	8b7e6 <__mdiff+0x4e>
   8b7da:	db61      	blt.n	8b8a0 <__mdiff+0x108>
   8b7dc:	2400      	movs	r4, #0
   8b7de:	f109 0714 	add.w	r7, r9, #20
   8b7e2:	f10a 0b14 	add.w	fp, sl, #20
   8b7e6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8b7ea:	f7ff fdbb 	bl	8b364 <_Balloc>
   8b7ee:	465d      	mov	r5, fp
   8b7f0:	f04f 0800 	mov.w	r8, #0
   8b7f4:	f8d9 e010 	ldr.w	lr, [r9, #16]
   8b7f8:	f8da 3010 	ldr.w	r3, [sl, #16]
   8b7fc:	463e      	mov	r6, r7
   8b7fe:	60c4      	str	r4, [r0, #12]
   8b800:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8b804:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   8b808:	f100 0414 	add.w	r4, r0, #20
   8b80c:	f856 9b04 	ldr.w	r9, [r6], #4
   8b810:	f855 2b04 	ldr.w	r2, [r5], #4
   8b814:	fa1f f389 	uxth.w	r3, r9
   8b818:	4443      	add	r3, r8
   8b81a:	fa1f f882 	uxth.w	r8, r2
   8b81e:	0c12      	lsrs	r2, r2, #16
   8b820:	eba3 0308 	sub.w	r3, r3, r8
   8b824:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   8b828:	eb02 4223 	add.w	r2, r2, r3, asr #16
   8b82c:	b29b      	uxth	r3, r3
   8b82e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b832:	45ac      	cmp	ip, r5
   8b834:	f844 3b04 	str.w	r3, [r4], #4
   8b838:	ea4f 4822 	mov.w	r8, r2, asr #16
   8b83c:	d8e6      	bhi.n	8b80c <__mdiff+0x74>
   8b83e:	42b7      	cmp	r7, r6
   8b840:	d917      	bls.n	8b872 <__mdiff+0xda>
   8b842:	46a4      	mov	ip, r4
   8b844:	4635      	mov	r5, r6
   8b846:	f855 3b04 	ldr.w	r3, [r5], #4
   8b84a:	b299      	uxth	r1, r3
   8b84c:	4441      	add	r1, r8
   8b84e:	140a      	asrs	r2, r1, #16
   8b850:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8b854:	b289      	uxth	r1, r1
   8b856:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8b85a:	42af      	cmp	r7, r5
   8b85c:	f84c 3b04 	str.w	r3, [ip], #4
   8b860:	ea4f 4822 	mov.w	r8, r2, asr #16
   8b864:	d8ef      	bhi.n	8b846 <__mdiff+0xae>
   8b866:	43f6      	mvns	r6, r6
   8b868:	4437      	add	r7, r6
   8b86a:	f027 0703 	bic.w	r7, r7, #3
   8b86e:	3704      	adds	r7, #4
   8b870:	443c      	add	r4, r7
   8b872:	3c04      	subs	r4, #4
   8b874:	b92b      	cbnz	r3, 8b882 <__mdiff+0xea>
   8b876:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8b87a:	f10e 3eff 	add.w	lr, lr, #4294967295
   8b87e:	2b00      	cmp	r3, #0
   8b880:	d0f9      	beq.n	8b876 <__mdiff+0xde>
   8b882:	f8c0 e010 	str.w	lr, [r0, #16]
   8b886:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b88a:	2100      	movs	r1, #0
   8b88c:	f7ff fd6a 	bl	8b364 <_Balloc>
   8b890:	2201      	movs	r2, #1
   8b892:	2300      	movs	r3, #0
   8b894:	6102      	str	r2, [r0, #16]
   8b896:	6143      	str	r3, [r0, #20]
   8b898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b89c:	46b3      	mov	fp, r6
   8b89e:	e7a2      	b.n	8b7e6 <__mdiff+0x4e>
   8b8a0:	464b      	mov	r3, r9
   8b8a2:	f109 0b14 	add.w	fp, r9, #20
   8b8a6:	f102 0714 	add.w	r7, r2, #20
   8b8aa:	4691      	mov	r9, r2
   8b8ac:	2401      	movs	r4, #1
   8b8ae:	469a      	mov	sl, r3
   8b8b0:	e799      	b.n	8b7e6 <__mdiff+0x4e>
   8b8b2:	bf00      	nop

0008b8b4 <__d2b>:
   8b8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b8b6:	2101      	movs	r1, #1
   8b8b8:	b083      	sub	sp, #12
   8b8ba:	461c      	mov	r4, r3
   8b8bc:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8b8c0:	4616      	mov	r6, r2
   8b8c2:	f7ff fd4f 	bl	8b364 <_Balloc>
   8b8c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8b8ca:	4607      	mov	r7, r0
   8b8cc:	b10d      	cbz	r5, 8b8d2 <__d2b+0x1e>
   8b8ce:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8b8d2:	9401      	str	r4, [sp, #4]
   8b8d4:	b306      	cbz	r6, 8b918 <__d2b+0x64>
   8b8d6:	a802      	add	r0, sp, #8
   8b8d8:	f840 6d08 	str.w	r6, [r0, #-8]!
   8b8dc:	f7ff fdd4 	bl	8b488 <__lo0bits>
   8b8e0:	2800      	cmp	r0, #0
   8b8e2:	d130      	bne.n	8b946 <__d2b+0x92>
   8b8e4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8b8e8:	617a      	str	r2, [r7, #20]
   8b8ea:	2b00      	cmp	r3, #0
   8b8ec:	bf0c      	ite	eq
   8b8ee:	2101      	moveq	r1, #1
   8b8f0:	2102      	movne	r1, #2
   8b8f2:	61bb      	str	r3, [r7, #24]
   8b8f4:	6139      	str	r1, [r7, #16]
   8b8f6:	b9d5      	cbnz	r5, 8b92e <__d2b+0x7a>
   8b8f8:	9a08      	ldr	r2, [sp, #32]
   8b8fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8b8fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8b902:	6010      	str	r0, [r2, #0]
   8b904:	6918      	ldr	r0, [r3, #16]
   8b906:	f7ff fd9f 	bl	8b448 <__hi0bits>
   8b90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8b90c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8b910:	6018      	str	r0, [r3, #0]
   8b912:	4638      	mov	r0, r7
   8b914:	b003      	add	sp, #12
   8b916:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b918:	a801      	add	r0, sp, #4
   8b91a:	f7ff fdb5 	bl	8b488 <__lo0bits>
   8b91e:	2201      	movs	r2, #1
   8b920:	9b01      	ldr	r3, [sp, #4]
   8b922:	4611      	mov	r1, r2
   8b924:	3020      	adds	r0, #32
   8b926:	613a      	str	r2, [r7, #16]
   8b928:	617b      	str	r3, [r7, #20]
   8b92a:	2d00      	cmp	r5, #0
   8b92c:	d0e4      	beq.n	8b8f8 <__d2b+0x44>
   8b92e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8b932:	9a08      	ldr	r2, [sp, #32]
   8b934:	4403      	add	r3, r0
   8b936:	6013      	str	r3, [r2, #0]
   8b938:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8b93a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8b93e:	6018      	str	r0, [r3, #0]
   8b940:	4638      	mov	r0, r7
   8b942:	b003      	add	sp, #12
   8b944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b946:	9b01      	ldr	r3, [sp, #4]
   8b948:	f1c0 0220 	rsb	r2, r0, #32
   8b94c:	9900      	ldr	r1, [sp, #0]
   8b94e:	fa03 f202 	lsl.w	r2, r3, r2
   8b952:	430a      	orrs	r2, r1
   8b954:	40c3      	lsrs	r3, r0
   8b956:	9301      	str	r3, [sp, #4]
   8b958:	617a      	str	r2, [r7, #20]
   8b95a:	e7c6      	b.n	8b8ea <__d2b+0x36>

0008b95c <_realloc_r>:
   8b95c:	2900      	cmp	r1, #0
   8b95e:	f000 8094 	beq.w	8ba8a <_realloc_r+0x12e>
   8b962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b966:	460c      	mov	r4, r1
   8b968:	4615      	mov	r5, r2
   8b96a:	b083      	sub	sp, #12
   8b96c:	4680      	mov	r8, r0
   8b96e:	f105 060b 	add.w	r6, r5, #11
   8b972:	f7ff fceb 	bl	8b34c <__malloc_lock>
   8b976:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8b97a:	2e16      	cmp	r6, #22
   8b97c:	f02e 0703 	bic.w	r7, lr, #3
   8b980:	f1a4 0908 	sub.w	r9, r4, #8
   8b984:	d83c      	bhi.n	8ba00 <_realloc_r+0xa4>
   8b986:	2210      	movs	r2, #16
   8b988:	4616      	mov	r6, r2
   8b98a:	42b5      	cmp	r5, r6
   8b98c:	d83d      	bhi.n	8ba0a <_realloc_r+0xae>
   8b98e:	4297      	cmp	r7, r2
   8b990:	da43      	bge.n	8ba1a <_realloc_r+0xbe>
   8b992:	4bc6      	ldr	r3, [pc, #792]	; (8bcac <_realloc_r+0x350>)
   8b994:	eb09 0007 	add.w	r0, r9, r7
   8b998:	6899      	ldr	r1, [r3, #8]
   8b99a:	4288      	cmp	r0, r1
   8b99c:	f000 80c3 	beq.w	8bb26 <_realloc_r+0x1ca>
   8b9a0:	6843      	ldr	r3, [r0, #4]
   8b9a2:	f023 0101 	bic.w	r1, r3, #1
   8b9a6:	4401      	add	r1, r0
   8b9a8:	6849      	ldr	r1, [r1, #4]
   8b9aa:	07c9      	lsls	r1, r1, #31
   8b9ac:	d54d      	bpl.n	8ba4a <_realloc_r+0xee>
   8b9ae:	f01e 0f01 	tst.w	lr, #1
   8b9b2:	f000 809b 	beq.w	8baec <_realloc_r+0x190>
   8b9b6:	4629      	mov	r1, r5
   8b9b8:	4640      	mov	r0, r8
   8b9ba:	f7ff f965 	bl	8ac88 <_malloc_r>
   8b9be:	4605      	mov	r5, r0
   8b9c0:	2800      	cmp	r0, #0
   8b9c2:	d03b      	beq.n	8ba3c <_realloc_r+0xe0>
   8b9c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b9c8:	f1a0 0208 	sub.w	r2, r0, #8
   8b9cc:	f023 0301 	bic.w	r3, r3, #1
   8b9d0:	444b      	add	r3, r9
   8b9d2:	429a      	cmp	r2, r3
   8b9d4:	f000 812b 	beq.w	8bc2e <_realloc_r+0x2d2>
   8b9d8:	1f3a      	subs	r2, r7, #4
   8b9da:	2a24      	cmp	r2, #36	; 0x24
   8b9dc:	f200 8118 	bhi.w	8bc10 <_realloc_r+0x2b4>
   8b9e0:	2a13      	cmp	r2, #19
   8b9e2:	f200 80eb 	bhi.w	8bbbc <_realloc_r+0x260>
   8b9e6:	4603      	mov	r3, r0
   8b9e8:	4622      	mov	r2, r4
   8b9ea:	6811      	ldr	r1, [r2, #0]
   8b9ec:	6019      	str	r1, [r3, #0]
   8b9ee:	6851      	ldr	r1, [r2, #4]
   8b9f0:	6059      	str	r1, [r3, #4]
   8b9f2:	6892      	ldr	r2, [r2, #8]
   8b9f4:	609a      	str	r2, [r3, #8]
   8b9f6:	4621      	mov	r1, r4
   8b9f8:	4640      	mov	r0, r8
   8b9fa:	f7fe fe19 	bl	8a630 <_free_r>
   8b9fe:	e01d      	b.n	8ba3c <_realloc_r+0xe0>
   8ba00:	f026 0607 	bic.w	r6, r6, #7
   8ba04:	2e00      	cmp	r6, #0
   8ba06:	4632      	mov	r2, r6
   8ba08:	dabf      	bge.n	8b98a <_realloc_r+0x2e>
   8ba0a:	2500      	movs	r5, #0
   8ba0c:	230c      	movs	r3, #12
   8ba0e:	4628      	mov	r0, r5
   8ba10:	f8c8 3000 	str.w	r3, [r8]
   8ba14:	b003      	add	sp, #12
   8ba16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ba1a:	4625      	mov	r5, r4
   8ba1c:	1bbb      	subs	r3, r7, r6
   8ba1e:	2b0f      	cmp	r3, #15
   8ba20:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8ba24:	d81d      	bhi.n	8ba62 <_realloc_r+0x106>
   8ba26:	f002 0201 	and.w	r2, r2, #1
   8ba2a:	433a      	orrs	r2, r7
   8ba2c:	eb09 0107 	add.w	r1, r9, r7
   8ba30:	f8c9 2004 	str.w	r2, [r9, #4]
   8ba34:	684b      	ldr	r3, [r1, #4]
   8ba36:	f043 0301 	orr.w	r3, r3, #1
   8ba3a:	604b      	str	r3, [r1, #4]
   8ba3c:	4640      	mov	r0, r8
   8ba3e:	f7ff fc8b 	bl	8b358 <__malloc_unlock>
   8ba42:	4628      	mov	r0, r5
   8ba44:	b003      	add	sp, #12
   8ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ba4a:	f023 0303 	bic.w	r3, r3, #3
   8ba4e:	18f9      	adds	r1, r7, r3
   8ba50:	4291      	cmp	r1, r2
   8ba52:	db1d      	blt.n	8ba90 <_realloc_r+0x134>
   8ba54:	68c3      	ldr	r3, [r0, #12]
   8ba56:	6882      	ldr	r2, [r0, #8]
   8ba58:	4625      	mov	r5, r4
   8ba5a:	60d3      	str	r3, [r2, #12]
   8ba5c:	460f      	mov	r7, r1
   8ba5e:	609a      	str	r2, [r3, #8]
   8ba60:	e7dc      	b.n	8ba1c <_realloc_r+0xc0>
   8ba62:	f002 0201 	and.w	r2, r2, #1
   8ba66:	eb09 0106 	add.w	r1, r9, r6
   8ba6a:	f043 0301 	orr.w	r3, r3, #1
   8ba6e:	4332      	orrs	r2, r6
   8ba70:	f8c9 2004 	str.w	r2, [r9, #4]
   8ba74:	444f      	add	r7, r9
   8ba76:	604b      	str	r3, [r1, #4]
   8ba78:	687b      	ldr	r3, [r7, #4]
   8ba7a:	3108      	adds	r1, #8
   8ba7c:	f043 0301 	orr.w	r3, r3, #1
   8ba80:	607b      	str	r3, [r7, #4]
   8ba82:	4640      	mov	r0, r8
   8ba84:	f7fe fdd4 	bl	8a630 <_free_r>
   8ba88:	e7d8      	b.n	8ba3c <_realloc_r+0xe0>
   8ba8a:	4611      	mov	r1, r2
   8ba8c:	f7ff b8fc 	b.w	8ac88 <_malloc_r>
   8ba90:	f01e 0f01 	tst.w	lr, #1
   8ba94:	d18f      	bne.n	8b9b6 <_realloc_r+0x5a>
   8ba96:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8ba9a:	eba9 0a01 	sub.w	sl, r9, r1
   8ba9e:	f8da 1004 	ldr.w	r1, [sl, #4]
   8baa2:	f021 0103 	bic.w	r1, r1, #3
   8baa6:	440b      	add	r3, r1
   8baa8:	443b      	add	r3, r7
   8baaa:	4293      	cmp	r3, r2
   8baac:	db26      	blt.n	8bafc <_realloc_r+0x1a0>
   8baae:	4655      	mov	r5, sl
   8bab0:	68c1      	ldr	r1, [r0, #12]
   8bab2:	6880      	ldr	r0, [r0, #8]
   8bab4:	1f3a      	subs	r2, r7, #4
   8bab6:	60c1      	str	r1, [r0, #12]
   8bab8:	6088      	str	r0, [r1, #8]
   8baba:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8babe:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bac2:	2a24      	cmp	r2, #36	; 0x24
   8bac4:	60c1      	str	r1, [r0, #12]
   8bac6:	6088      	str	r0, [r1, #8]
   8bac8:	d826      	bhi.n	8bb18 <_realloc_r+0x1bc>
   8baca:	2a13      	cmp	r2, #19
   8bacc:	f240 8081 	bls.w	8bbd2 <_realloc_r+0x276>
   8bad0:	6821      	ldr	r1, [r4, #0]
   8bad2:	2a1b      	cmp	r2, #27
   8bad4:	f8ca 1008 	str.w	r1, [sl, #8]
   8bad8:	6861      	ldr	r1, [r4, #4]
   8bada:	f8ca 100c 	str.w	r1, [sl, #12]
   8bade:	f200 80ad 	bhi.w	8bc3c <_realloc_r+0x2e0>
   8bae2:	f104 0008 	add.w	r0, r4, #8
   8bae6:	f10a 0210 	add.w	r2, sl, #16
   8baea:	e074      	b.n	8bbd6 <_realloc_r+0x27a>
   8baec:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8baf0:	eba9 0a03 	sub.w	sl, r9, r3
   8baf4:	f8da 1004 	ldr.w	r1, [sl, #4]
   8baf8:	f021 0103 	bic.w	r1, r1, #3
   8bafc:	187b      	adds	r3, r7, r1
   8bafe:	4293      	cmp	r3, r2
   8bb00:	f6ff af59 	blt.w	8b9b6 <_realloc_r+0x5a>
   8bb04:	4655      	mov	r5, sl
   8bb06:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bb0a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8bb0e:	1f3a      	subs	r2, r7, #4
   8bb10:	2a24      	cmp	r2, #36	; 0x24
   8bb12:	60c1      	str	r1, [r0, #12]
   8bb14:	6088      	str	r0, [r1, #8]
   8bb16:	d9d8      	bls.n	8baca <_realloc_r+0x16e>
   8bb18:	4621      	mov	r1, r4
   8bb1a:	4628      	mov	r0, r5
   8bb1c:	461f      	mov	r7, r3
   8bb1e:	46d1      	mov	r9, sl
   8bb20:	f7ff fbb0 	bl	8b284 <memmove>
   8bb24:	e77a      	b.n	8ba1c <_realloc_r+0xc0>
   8bb26:	6841      	ldr	r1, [r0, #4]
   8bb28:	f106 0010 	add.w	r0, r6, #16
   8bb2c:	f021 0b03 	bic.w	fp, r1, #3
   8bb30:	44bb      	add	fp, r7
   8bb32:	4583      	cmp	fp, r0
   8bb34:	da58      	bge.n	8bbe8 <_realloc_r+0x28c>
   8bb36:	f01e 0f01 	tst.w	lr, #1
   8bb3a:	f47f af3c 	bne.w	8b9b6 <_realloc_r+0x5a>
   8bb3e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8bb42:	eba9 0a01 	sub.w	sl, r9, r1
   8bb46:	f8da 1004 	ldr.w	r1, [sl, #4]
   8bb4a:	f021 0103 	bic.w	r1, r1, #3
   8bb4e:	448b      	add	fp, r1
   8bb50:	4558      	cmp	r0, fp
   8bb52:	dcd3      	bgt.n	8bafc <_realloc_r+0x1a0>
   8bb54:	4655      	mov	r5, sl
   8bb56:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bb5a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8bb5e:	1f3a      	subs	r2, r7, #4
   8bb60:	2a24      	cmp	r2, #36	; 0x24
   8bb62:	60c1      	str	r1, [r0, #12]
   8bb64:	6088      	str	r0, [r1, #8]
   8bb66:	f200 808d 	bhi.w	8bc84 <_realloc_r+0x328>
   8bb6a:	2a13      	cmp	r2, #19
   8bb6c:	f240 8087 	bls.w	8bc7e <_realloc_r+0x322>
   8bb70:	6821      	ldr	r1, [r4, #0]
   8bb72:	2a1b      	cmp	r2, #27
   8bb74:	f8ca 1008 	str.w	r1, [sl, #8]
   8bb78:	6861      	ldr	r1, [r4, #4]
   8bb7a:	f8ca 100c 	str.w	r1, [sl, #12]
   8bb7e:	f200 8088 	bhi.w	8bc92 <_realloc_r+0x336>
   8bb82:	f104 0108 	add.w	r1, r4, #8
   8bb86:	f10a 0210 	add.w	r2, sl, #16
   8bb8a:	6808      	ldr	r0, [r1, #0]
   8bb8c:	6010      	str	r0, [r2, #0]
   8bb8e:	6848      	ldr	r0, [r1, #4]
   8bb90:	6050      	str	r0, [r2, #4]
   8bb92:	6889      	ldr	r1, [r1, #8]
   8bb94:	6091      	str	r1, [r2, #8]
   8bb96:	ebab 0206 	sub.w	r2, fp, r6
   8bb9a:	eb0a 0106 	add.w	r1, sl, r6
   8bb9e:	f042 0201 	orr.w	r2, r2, #1
   8bba2:	6099      	str	r1, [r3, #8]
   8bba4:	604a      	str	r2, [r1, #4]
   8bba6:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bbaa:	4640      	mov	r0, r8
   8bbac:	f003 0301 	and.w	r3, r3, #1
   8bbb0:	431e      	orrs	r6, r3
   8bbb2:	f8ca 6004 	str.w	r6, [sl, #4]
   8bbb6:	f7ff fbcf 	bl	8b358 <__malloc_unlock>
   8bbba:	e742      	b.n	8ba42 <_realloc_r+0xe6>
   8bbbc:	6823      	ldr	r3, [r4, #0]
   8bbbe:	2a1b      	cmp	r2, #27
   8bbc0:	6003      	str	r3, [r0, #0]
   8bbc2:	6863      	ldr	r3, [r4, #4]
   8bbc4:	6043      	str	r3, [r0, #4]
   8bbc6:	d827      	bhi.n	8bc18 <_realloc_r+0x2bc>
   8bbc8:	f100 0308 	add.w	r3, r0, #8
   8bbcc:	f104 0208 	add.w	r2, r4, #8
   8bbd0:	e70b      	b.n	8b9ea <_realloc_r+0x8e>
   8bbd2:	4620      	mov	r0, r4
   8bbd4:	462a      	mov	r2, r5
   8bbd6:	6801      	ldr	r1, [r0, #0]
   8bbd8:	461f      	mov	r7, r3
   8bbda:	6011      	str	r1, [r2, #0]
   8bbdc:	6841      	ldr	r1, [r0, #4]
   8bbde:	46d1      	mov	r9, sl
   8bbe0:	6051      	str	r1, [r2, #4]
   8bbe2:	6883      	ldr	r3, [r0, #8]
   8bbe4:	6093      	str	r3, [r2, #8]
   8bbe6:	e719      	b.n	8ba1c <_realloc_r+0xc0>
   8bbe8:	ebab 0b06 	sub.w	fp, fp, r6
   8bbec:	eb09 0106 	add.w	r1, r9, r6
   8bbf0:	f04b 0201 	orr.w	r2, fp, #1
   8bbf4:	6099      	str	r1, [r3, #8]
   8bbf6:	604a      	str	r2, [r1, #4]
   8bbf8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bbfc:	4640      	mov	r0, r8
   8bbfe:	f003 0301 	and.w	r3, r3, #1
   8bc02:	431e      	orrs	r6, r3
   8bc04:	f844 6c04 	str.w	r6, [r4, #-4]
   8bc08:	f7ff fba6 	bl	8b358 <__malloc_unlock>
   8bc0c:	4625      	mov	r5, r4
   8bc0e:	e718      	b.n	8ba42 <_realloc_r+0xe6>
   8bc10:	4621      	mov	r1, r4
   8bc12:	f7ff fb37 	bl	8b284 <memmove>
   8bc16:	e6ee      	b.n	8b9f6 <_realloc_r+0x9a>
   8bc18:	68a3      	ldr	r3, [r4, #8]
   8bc1a:	2a24      	cmp	r2, #36	; 0x24
   8bc1c:	6083      	str	r3, [r0, #8]
   8bc1e:	68e3      	ldr	r3, [r4, #12]
   8bc20:	60c3      	str	r3, [r0, #12]
   8bc22:	d018      	beq.n	8bc56 <_realloc_r+0x2fa>
   8bc24:	f100 0310 	add.w	r3, r0, #16
   8bc28:	f104 0210 	add.w	r2, r4, #16
   8bc2c:	e6dd      	b.n	8b9ea <_realloc_r+0x8e>
   8bc2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8bc32:	4625      	mov	r5, r4
   8bc34:	f023 0303 	bic.w	r3, r3, #3
   8bc38:	441f      	add	r7, r3
   8bc3a:	e6ef      	b.n	8ba1c <_realloc_r+0xc0>
   8bc3c:	68a1      	ldr	r1, [r4, #8]
   8bc3e:	2a24      	cmp	r2, #36	; 0x24
   8bc40:	f8ca 1010 	str.w	r1, [sl, #16]
   8bc44:	68e1      	ldr	r1, [r4, #12]
   8bc46:	f8ca 1014 	str.w	r1, [sl, #20]
   8bc4a:	d00d      	beq.n	8bc68 <_realloc_r+0x30c>
   8bc4c:	f104 0010 	add.w	r0, r4, #16
   8bc50:	f10a 0218 	add.w	r2, sl, #24
   8bc54:	e7bf      	b.n	8bbd6 <_realloc_r+0x27a>
   8bc56:	6922      	ldr	r2, [r4, #16]
   8bc58:	f100 0318 	add.w	r3, r0, #24
   8bc5c:	6102      	str	r2, [r0, #16]
   8bc5e:	6961      	ldr	r1, [r4, #20]
   8bc60:	f104 0218 	add.w	r2, r4, #24
   8bc64:	6141      	str	r1, [r0, #20]
   8bc66:	e6c0      	b.n	8b9ea <_realloc_r+0x8e>
   8bc68:	6922      	ldr	r2, [r4, #16]
   8bc6a:	f104 0018 	add.w	r0, r4, #24
   8bc6e:	f8ca 2018 	str.w	r2, [sl, #24]
   8bc72:	6961      	ldr	r1, [r4, #20]
   8bc74:	f10a 0220 	add.w	r2, sl, #32
   8bc78:	f8ca 101c 	str.w	r1, [sl, #28]
   8bc7c:	e7ab      	b.n	8bbd6 <_realloc_r+0x27a>
   8bc7e:	4621      	mov	r1, r4
   8bc80:	462a      	mov	r2, r5
   8bc82:	e782      	b.n	8bb8a <_realloc_r+0x22e>
   8bc84:	4621      	mov	r1, r4
   8bc86:	4628      	mov	r0, r5
   8bc88:	9301      	str	r3, [sp, #4]
   8bc8a:	f7ff fafb 	bl	8b284 <memmove>
   8bc8e:	9b01      	ldr	r3, [sp, #4]
   8bc90:	e781      	b.n	8bb96 <_realloc_r+0x23a>
   8bc92:	68a1      	ldr	r1, [r4, #8]
   8bc94:	2a24      	cmp	r2, #36	; 0x24
   8bc96:	f8ca 1010 	str.w	r1, [sl, #16]
   8bc9a:	68e1      	ldr	r1, [r4, #12]
   8bc9c:	f8ca 1014 	str.w	r1, [sl, #20]
   8bca0:	d006      	beq.n	8bcb0 <_realloc_r+0x354>
   8bca2:	f104 0110 	add.w	r1, r4, #16
   8bca6:	f10a 0218 	add.w	r2, sl, #24
   8bcaa:	e76e      	b.n	8bb8a <_realloc_r+0x22e>
   8bcac:	20001128 	.word	0x20001128
   8bcb0:	6922      	ldr	r2, [r4, #16]
   8bcb2:	f104 0118 	add.w	r1, r4, #24
   8bcb6:	f8ca 2018 	str.w	r2, [sl, #24]
   8bcba:	6960      	ldr	r0, [r4, #20]
   8bcbc:	f10a 0220 	add.w	r2, sl, #32
   8bcc0:	f8ca 001c 	str.w	r0, [sl, #28]
   8bcc4:	e761      	b.n	8bb8a <_realloc_r+0x22e>
   8bcc6:	bf00      	nop

0008bcc8 <_sbrk_r>:
   8bcc8:	b538      	push	{r3, r4, r5, lr}
   8bcca:	2300      	movs	r3, #0
   8bccc:	4c06      	ldr	r4, [pc, #24]	; (8bce8 <_sbrk_r+0x20>)
   8bcce:	4605      	mov	r5, r0
   8bcd0:	4608      	mov	r0, r1
   8bcd2:	6023      	str	r3, [r4, #0]
   8bcd4:	f7fa fb84 	bl	863e0 <_sbrk>
   8bcd8:	1c43      	adds	r3, r0, #1
   8bcda:	d000      	beq.n	8bcde <_sbrk_r+0x16>
   8bcdc:	bd38      	pop	{r3, r4, r5, pc}
   8bcde:	6823      	ldr	r3, [r4, #0]
   8bce0:	2b00      	cmp	r3, #0
   8bce2:	d0fb      	beq.n	8bcdc <_sbrk_r+0x14>
   8bce4:	602b      	str	r3, [r5, #0]
   8bce6:	bd38      	pop	{r3, r4, r5, pc}
   8bce8:	200028b8 	.word	0x200028b8

0008bcec <__sread>:
   8bcec:	b510      	push	{r4, lr}
   8bcee:	460c      	mov	r4, r1
   8bcf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bcf4:	f000 faa2 	bl	8c23c <_read_r>
   8bcf8:	2800      	cmp	r0, #0
   8bcfa:	db03      	blt.n	8bd04 <__sread+0x18>
   8bcfc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8bcfe:	4403      	add	r3, r0
   8bd00:	6523      	str	r3, [r4, #80]	; 0x50
   8bd02:	bd10      	pop	{r4, pc}
   8bd04:	89a3      	ldrh	r3, [r4, #12]
   8bd06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8bd0a:	81a3      	strh	r3, [r4, #12]
   8bd0c:	bd10      	pop	{r4, pc}
   8bd0e:	bf00      	nop

0008bd10 <__swrite>:
   8bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bd14:	460c      	mov	r4, r1
   8bd16:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8bd1a:	461f      	mov	r7, r3
   8bd1c:	05cb      	lsls	r3, r1, #23
   8bd1e:	4616      	mov	r6, r2
   8bd20:	4605      	mov	r5, r0
   8bd22:	d507      	bpl.n	8bd34 <__swrite+0x24>
   8bd24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bd28:	2302      	movs	r3, #2
   8bd2a:	2200      	movs	r2, #0
   8bd2c:	f000 fa70 	bl	8c210 <_lseek_r>
   8bd30:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8bd34:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8bd38:	81a1      	strh	r1, [r4, #12]
   8bd3a:	463b      	mov	r3, r7
   8bd3c:	4632      	mov	r2, r6
   8bd3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bd42:	4628      	mov	r0, r5
   8bd44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8bd48:	f000 b920 	b.w	8bf8c <_write_r>

0008bd4c <__sseek>:
   8bd4c:	b510      	push	{r4, lr}
   8bd4e:	460c      	mov	r4, r1
   8bd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bd54:	f000 fa5c 	bl	8c210 <_lseek_r>
   8bd58:	89a3      	ldrh	r3, [r4, #12]
   8bd5a:	1c42      	adds	r2, r0, #1
   8bd5c:	bf0e      	itee	eq
   8bd5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8bd62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8bd66:	6520      	strne	r0, [r4, #80]	; 0x50
   8bd68:	81a3      	strh	r3, [r4, #12]
   8bd6a:	bd10      	pop	{r4, pc}

0008bd6c <__sclose>:
   8bd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bd70:	f000 b9b4 	b.w	8c0dc <_close_r>

0008bd74 <__ssprint_r>:
   8bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bd78:	6893      	ldr	r3, [r2, #8]
   8bd7a:	b083      	sub	sp, #12
   8bd7c:	4690      	mov	r8, r2
   8bd7e:	2b00      	cmp	r3, #0
   8bd80:	d070      	beq.n	8be64 <__ssprint_r+0xf0>
   8bd82:	4682      	mov	sl, r0
   8bd84:	460c      	mov	r4, r1
   8bd86:	6817      	ldr	r7, [r2, #0]
   8bd88:	688d      	ldr	r5, [r1, #8]
   8bd8a:	6808      	ldr	r0, [r1, #0]
   8bd8c:	e042      	b.n	8be14 <__ssprint_r+0xa0>
   8bd8e:	89a3      	ldrh	r3, [r4, #12]
   8bd90:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bd94:	d02e      	beq.n	8bdf4 <__ssprint_r+0x80>
   8bd96:	6965      	ldr	r5, [r4, #20]
   8bd98:	6921      	ldr	r1, [r4, #16]
   8bd9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8bd9e:	eba0 0b01 	sub.w	fp, r0, r1
   8bda2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8bda6:	f10b 0001 	add.w	r0, fp, #1
   8bdaa:	106d      	asrs	r5, r5, #1
   8bdac:	4430      	add	r0, r6
   8bdae:	42a8      	cmp	r0, r5
   8bdb0:	462a      	mov	r2, r5
   8bdb2:	bf84      	itt	hi
   8bdb4:	4605      	movhi	r5, r0
   8bdb6:	462a      	movhi	r2, r5
   8bdb8:	055b      	lsls	r3, r3, #21
   8bdba:	d538      	bpl.n	8be2e <__ssprint_r+0xba>
   8bdbc:	4611      	mov	r1, r2
   8bdbe:	4650      	mov	r0, sl
   8bdc0:	f7fe ff62 	bl	8ac88 <_malloc_r>
   8bdc4:	2800      	cmp	r0, #0
   8bdc6:	d03c      	beq.n	8be42 <__ssprint_r+0xce>
   8bdc8:	465a      	mov	r2, fp
   8bdca:	6921      	ldr	r1, [r4, #16]
   8bdcc:	9001      	str	r0, [sp, #4]
   8bdce:	f7fa fe87 	bl	86ae0 <memcpy>
   8bdd2:	89a2      	ldrh	r2, [r4, #12]
   8bdd4:	9b01      	ldr	r3, [sp, #4]
   8bdd6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bdda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bdde:	81a2      	strh	r2, [r4, #12]
   8bde0:	eba5 020b 	sub.w	r2, r5, fp
   8bde4:	eb03 000b 	add.w	r0, r3, fp
   8bde8:	6165      	str	r5, [r4, #20]
   8bdea:	46b3      	mov	fp, r6
   8bdec:	4635      	mov	r5, r6
   8bdee:	6123      	str	r3, [r4, #16]
   8bdf0:	6020      	str	r0, [r4, #0]
   8bdf2:	60a2      	str	r2, [r4, #8]
   8bdf4:	465a      	mov	r2, fp
   8bdf6:	4649      	mov	r1, r9
   8bdf8:	f7ff fa44 	bl	8b284 <memmove>
   8bdfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8be00:	68a2      	ldr	r2, [r4, #8]
   8be02:	6820      	ldr	r0, [r4, #0]
   8be04:	1b55      	subs	r5, r2, r5
   8be06:	4458      	add	r0, fp
   8be08:	1b9e      	subs	r6, r3, r6
   8be0a:	60a5      	str	r5, [r4, #8]
   8be0c:	6020      	str	r0, [r4, #0]
   8be0e:	f8c8 6008 	str.w	r6, [r8, #8]
   8be12:	b33e      	cbz	r6, 8be64 <__ssprint_r+0xf0>
   8be14:	687e      	ldr	r6, [r7, #4]
   8be16:	463b      	mov	r3, r7
   8be18:	3708      	adds	r7, #8
   8be1a:	2e00      	cmp	r6, #0
   8be1c:	d0fa      	beq.n	8be14 <__ssprint_r+0xa0>
   8be1e:	42ae      	cmp	r6, r5
   8be20:	f8d3 9000 	ldr.w	r9, [r3]
   8be24:	46ab      	mov	fp, r5
   8be26:	d2b2      	bcs.n	8bd8e <__ssprint_r+0x1a>
   8be28:	4635      	mov	r5, r6
   8be2a:	46b3      	mov	fp, r6
   8be2c:	e7e2      	b.n	8bdf4 <__ssprint_r+0x80>
   8be2e:	4650      	mov	r0, sl
   8be30:	f7ff fd94 	bl	8b95c <_realloc_r>
   8be34:	4603      	mov	r3, r0
   8be36:	2800      	cmp	r0, #0
   8be38:	d1d2      	bne.n	8bde0 <__ssprint_r+0x6c>
   8be3a:	6921      	ldr	r1, [r4, #16]
   8be3c:	4650      	mov	r0, sl
   8be3e:	f7fe fbf7 	bl	8a630 <_free_r>
   8be42:	230c      	movs	r3, #12
   8be44:	2200      	movs	r2, #0
   8be46:	f04f 30ff 	mov.w	r0, #4294967295
   8be4a:	f8ca 3000 	str.w	r3, [sl]
   8be4e:	89a3      	ldrh	r3, [r4, #12]
   8be50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8be54:	81a3      	strh	r3, [r4, #12]
   8be56:	f8c8 2008 	str.w	r2, [r8, #8]
   8be5a:	f8c8 2004 	str.w	r2, [r8, #4]
   8be5e:	b003      	add	sp, #12
   8be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be64:	2000      	movs	r0, #0
   8be66:	f8c8 0004 	str.w	r0, [r8, #4]
   8be6a:	b003      	add	sp, #12
   8be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008be70 <__swbuf_r>:
   8be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8be72:	460d      	mov	r5, r1
   8be74:	4614      	mov	r4, r2
   8be76:	4606      	mov	r6, r0
   8be78:	b110      	cbz	r0, 8be80 <__swbuf_r+0x10>
   8be7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8be7c:	2b00      	cmp	r3, #0
   8be7e:	d04b      	beq.n	8bf18 <__swbuf_r+0xa8>
   8be80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8be84:	69a3      	ldr	r3, [r4, #24]
   8be86:	b291      	uxth	r1, r2
   8be88:	0708      	lsls	r0, r1, #28
   8be8a:	60a3      	str	r3, [r4, #8]
   8be8c:	d539      	bpl.n	8bf02 <__swbuf_r+0x92>
   8be8e:	6923      	ldr	r3, [r4, #16]
   8be90:	2b00      	cmp	r3, #0
   8be92:	d036      	beq.n	8bf02 <__swbuf_r+0x92>
   8be94:	b2ed      	uxtb	r5, r5
   8be96:	0489      	lsls	r1, r1, #18
   8be98:	462f      	mov	r7, r5
   8be9a:	d515      	bpl.n	8bec8 <__swbuf_r+0x58>
   8be9c:	6822      	ldr	r2, [r4, #0]
   8be9e:	6961      	ldr	r1, [r4, #20]
   8bea0:	1ad3      	subs	r3, r2, r3
   8bea2:	428b      	cmp	r3, r1
   8bea4:	da1c      	bge.n	8bee0 <__swbuf_r+0x70>
   8bea6:	3301      	adds	r3, #1
   8bea8:	68a1      	ldr	r1, [r4, #8]
   8beaa:	1c50      	adds	r0, r2, #1
   8beac:	3901      	subs	r1, #1
   8beae:	60a1      	str	r1, [r4, #8]
   8beb0:	6020      	str	r0, [r4, #0]
   8beb2:	7015      	strb	r5, [r2, #0]
   8beb4:	6962      	ldr	r2, [r4, #20]
   8beb6:	429a      	cmp	r2, r3
   8beb8:	d01a      	beq.n	8bef0 <__swbuf_r+0x80>
   8beba:	89a3      	ldrh	r3, [r4, #12]
   8bebc:	07db      	lsls	r3, r3, #31
   8bebe:	d501      	bpl.n	8bec4 <__swbuf_r+0x54>
   8bec0:	2d0a      	cmp	r5, #10
   8bec2:	d015      	beq.n	8bef0 <__swbuf_r+0x80>
   8bec4:	4638      	mov	r0, r7
   8bec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bec8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8beca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8bece:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8bed2:	81a2      	strh	r2, [r4, #12]
   8bed4:	6822      	ldr	r2, [r4, #0]
   8bed6:	6661      	str	r1, [r4, #100]	; 0x64
   8bed8:	6961      	ldr	r1, [r4, #20]
   8beda:	1ad3      	subs	r3, r2, r3
   8bedc:	428b      	cmp	r3, r1
   8bede:	dbe2      	blt.n	8bea6 <__swbuf_r+0x36>
   8bee0:	4621      	mov	r1, r4
   8bee2:	4630      	mov	r0, r6
   8bee4:	f7fe fa26 	bl	8a334 <_fflush_r>
   8bee8:	b940      	cbnz	r0, 8befc <__swbuf_r+0x8c>
   8beea:	2301      	movs	r3, #1
   8beec:	6822      	ldr	r2, [r4, #0]
   8beee:	e7db      	b.n	8bea8 <__swbuf_r+0x38>
   8bef0:	4621      	mov	r1, r4
   8bef2:	4630      	mov	r0, r6
   8bef4:	f7fe fa1e 	bl	8a334 <_fflush_r>
   8bef8:	2800      	cmp	r0, #0
   8befa:	d0e3      	beq.n	8bec4 <__swbuf_r+0x54>
   8befc:	f04f 37ff 	mov.w	r7, #4294967295
   8bf00:	e7e0      	b.n	8bec4 <__swbuf_r+0x54>
   8bf02:	4621      	mov	r1, r4
   8bf04:	4630      	mov	r0, r6
   8bf06:	f7fd f94d 	bl	891a4 <__swsetup_r>
   8bf0a:	2800      	cmp	r0, #0
   8bf0c:	d1f6      	bne.n	8befc <__swbuf_r+0x8c>
   8bf0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bf12:	6923      	ldr	r3, [r4, #16]
   8bf14:	b291      	uxth	r1, r2
   8bf16:	e7bd      	b.n	8be94 <__swbuf_r+0x24>
   8bf18:	f7fe fa64 	bl	8a3e4 <__sinit>
   8bf1c:	e7b0      	b.n	8be80 <__swbuf_r+0x10>
   8bf1e:	bf00      	nop

0008bf20 <_wcrtomb_r>:
   8bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
   8bf22:	4606      	mov	r6, r0
   8bf24:	b085      	sub	sp, #20
   8bf26:	461f      	mov	r7, r3
   8bf28:	b189      	cbz	r1, 8bf4e <_wcrtomb_r+0x2e>
   8bf2a:	4c10      	ldr	r4, [pc, #64]	; (8bf6c <_wcrtomb_r+0x4c>)
   8bf2c:	4d10      	ldr	r5, [pc, #64]	; (8bf70 <_wcrtomb_r+0x50>)
   8bf2e:	6824      	ldr	r4, [r4, #0]
   8bf30:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8bf32:	2c00      	cmp	r4, #0
   8bf34:	bf08      	it	eq
   8bf36:	462c      	moveq	r4, r5
   8bf38:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8bf3c:	47a0      	blx	r4
   8bf3e:	1c43      	adds	r3, r0, #1
   8bf40:	d103      	bne.n	8bf4a <_wcrtomb_r+0x2a>
   8bf42:	2200      	movs	r2, #0
   8bf44:	238a      	movs	r3, #138	; 0x8a
   8bf46:	603a      	str	r2, [r7, #0]
   8bf48:	6033      	str	r3, [r6, #0]
   8bf4a:	b005      	add	sp, #20
   8bf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8bf4e:	460c      	mov	r4, r1
   8bf50:	4a06      	ldr	r2, [pc, #24]	; (8bf6c <_wcrtomb_r+0x4c>)
   8bf52:	4d07      	ldr	r5, [pc, #28]	; (8bf70 <_wcrtomb_r+0x50>)
   8bf54:	6811      	ldr	r1, [r2, #0]
   8bf56:	4622      	mov	r2, r4
   8bf58:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8bf5a:	a901      	add	r1, sp, #4
   8bf5c:	2c00      	cmp	r4, #0
   8bf5e:	bf08      	it	eq
   8bf60:	462c      	moveq	r4, r5
   8bf62:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8bf66:	47a0      	blx	r4
   8bf68:	e7e9      	b.n	8bf3e <_wcrtomb_r+0x1e>
   8bf6a:	bf00      	nop
   8bf6c:	20000b8c 	.word	0x20000b8c
   8bf70:	20000fbc 	.word	0x20000fbc

0008bf74 <__ascii_wctomb>:
   8bf74:	b119      	cbz	r1, 8bf7e <__ascii_wctomb+0xa>
   8bf76:	2aff      	cmp	r2, #255	; 0xff
   8bf78:	d803      	bhi.n	8bf82 <__ascii_wctomb+0xe>
   8bf7a:	700a      	strb	r2, [r1, #0]
   8bf7c:	2101      	movs	r1, #1
   8bf7e:	4608      	mov	r0, r1
   8bf80:	4770      	bx	lr
   8bf82:	238a      	movs	r3, #138	; 0x8a
   8bf84:	f04f 31ff 	mov.w	r1, #4294967295
   8bf88:	6003      	str	r3, [r0, #0]
   8bf8a:	e7f8      	b.n	8bf7e <__ascii_wctomb+0xa>

0008bf8c <_write_r>:
   8bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bf8e:	460e      	mov	r6, r1
   8bf90:	2500      	movs	r5, #0
   8bf92:	4c08      	ldr	r4, [pc, #32]	; (8bfb4 <_write_r+0x28>)
   8bf94:	4611      	mov	r1, r2
   8bf96:	4607      	mov	r7, r0
   8bf98:	461a      	mov	r2, r3
   8bf9a:	4630      	mov	r0, r6
   8bf9c:	6025      	str	r5, [r4, #0]
   8bf9e:	f7f8 fa79 	bl	84494 <_write>
   8bfa2:	1c43      	adds	r3, r0, #1
   8bfa4:	d000      	beq.n	8bfa8 <_write_r+0x1c>
   8bfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bfa8:	6823      	ldr	r3, [r4, #0]
   8bfaa:	2b00      	cmp	r3, #0
   8bfac:	d0fb      	beq.n	8bfa6 <_write_r+0x1a>
   8bfae:	603b      	str	r3, [r7, #0]
   8bfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bfb2:	bf00      	nop
   8bfb4:	200028b8 	.word	0x200028b8

0008bfb8 <__register_exitproc>:
   8bfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8bfbc:	4d2c      	ldr	r5, [pc, #176]	; (8c070 <__register_exitproc+0xb8>)
   8bfbe:	4606      	mov	r6, r0
   8bfc0:	6828      	ldr	r0, [r5, #0]
   8bfc2:	4698      	mov	r8, r3
   8bfc4:	460f      	mov	r7, r1
   8bfc6:	4691      	mov	r9, r2
   8bfc8:	f7fe fdda 	bl	8ab80 <__retarget_lock_acquire_recursive>
   8bfcc:	4b29      	ldr	r3, [pc, #164]	; (8c074 <__register_exitproc+0xbc>)
   8bfce:	681c      	ldr	r4, [r3, #0]
   8bfd0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8bfd4:	2b00      	cmp	r3, #0
   8bfd6:	d03e      	beq.n	8c056 <__register_exitproc+0x9e>
   8bfd8:	685a      	ldr	r2, [r3, #4]
   8bfda:	2a1f      	cmp	r2, #31
   8bfdc:	dc1c      	bgt.n	8c018 <__register_exitproc+0x60>
   8bfde:	f102 0e01 	add.w	lr, r2, #1
   8bfe2:	b176      	cbz	r6, 8c002 <__register_exitproc+0x4a>
   8bfe4:	2101      	movs	r1, #1
   8bfe6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8bfea:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8bfee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8bff2:	4091      	lsls	r1, r2
   8bff4:	4308      	orrs	r0, r1
   8bff6:	2e02      	cmp	r6, #2
   8bff8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8bffc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8c000:	d023      	beq.n	8c04a <__register_exitproc+0x92>
   8c002:	3202      	adds	r2, #2
   8c004:	f8c3 e004 	str.w	lr, [r3, #4]
   8c008:	6828      	ldr	r0, [r5, #0]
   8c00a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8c00e:	f7fe fdb9 	bl	8ab84 <__retarget_lock_release_recursive>
   8c012:	2000      	movs	r0, #0
   8c014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8c018:	4b17      	ldr	r3, [pc, #92]	; (8c078 <__register_exitproc+0xc0>)
   8c01a:	b30b      	cbz	r3, 8c060 <__register_exitproc+0xa8>
   8c01c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8c020:	f7fe fe2a 	bl	8ac78 <malloc>
   8c024:	4603      	mov	r3, r0
   8c026:	b1d8      	cbz	r0, 8c060 <__register_exitproc+0xa8>
   8c028:	2000      	movs	r0, #0
   8c02a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8c02e:	f04f 0e01 	mov.w	lr, #1
   8c032:	6058      	str	r0, [r3, #4]
   8c034:	6019      	str	r1, [r3, #0]
   8c036:	4602      	mov	r2, r0
   8c038:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8c03c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8c040:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8c044:	2e00      	cmp	r6, #0
   8c046:	d0dc      	beq.n	8c002 <__register_exitproc+0x4a>
   8c048:	e7cc      	b.n	8bfe4 <__register_exitproc+0x2c>
   8c04a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8c04e:	4301      	orrs	r1, r0
   8c050:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8c054:	e7d5      	b.n	8c002 <__register_exitproc+0x4a>
   8c056:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8c05a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8c05e:	e7bb      	b.n	8bfd8 <__register_exitproc+0x20>
   8c060:	6828      	ldr	r0, [r5, #0]
   8c062:	f7fe fd8f 	bl	8ab84 <__retarget_lock_release_recursive>
   8c066:	f04f 30ff 	mov.w	r0, #4294967295
   8c06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8c06e:	bf00      	nop
   8c070:	20000fb8 	.word	0x20000fb8
   8c074:	0008cc90 	.word	0x0008cc90
   8c078:	0008ac79 	.word	0x0008ac79

0008c07c <_calloc_r>:
   8c07c:	b510      	push	{r4, lr}
   8c07e:	fb02 f101 	mul.w	r1, r2, r1
   8c082:	f7fe fe01 	bl	8ac88 <_malloc_r>
   8c086:	4604      	mov	r4, r0
   8c088:	b1d8      	cbz	r0, 8c0c2 <_calloc_r+0x46>
   8c08a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c08e:	f022 0203 	bic.w	r2, r2, #3
   8c092:	3a04      	subs	r2, #4
   8c094:	2a24      	cmp	r2, #36	; 0x24
   8c096:	d818      	bhi.n	8c0ca <_calloc_r+0x4e>
   8c098:	2a13      	cmp	r2, #19
   8c09a:	d914      	bls.n	8c0c6 <_calloc_r+0x4a>
   8c09c:	2300      	movs	r3, #0
   8c09e:	2a1b      	cmp	r2, #27
   8c0a0:	6003      	str	r3, [r0, #0]
   8c0a2:	6043      	str	r3, [r0, #4]
   8c0a4:	d916      	bls.n	8c0d4 <_calloc_r+0x58>
   8c0a6:	2a24      	cmp	r2, #36	; 0x24
   8c0a8:	6083      	str	r3, [r0, #8]
   8c0aa:	60c3      	str	r3, [r0, #12]
   8c0ac:	bf11      	iteee	ne
   8c0ae:	f100 0210 	addne.w	r2, r0, #16
   8c0b2:	6103      	streq	r3, [r0, #16]
   8c0b4:	6143      	streq	r3, [r0, #20]
   8c0b6:	f100 0218 	addeq.w	r2, r0, #24
   8c0ba:	2300      	movs	r3, #0
   8c0bc:	6013      	str	r3, [r2, #0]
   8c0be:	6053      	str	r3, [r2, #4]
   8c0c0:	6093      	str	r3, [r2, #8]
   8c0c2:	4620      	mov	r0, r4
   8c0c4:	bd10      	pop	{r4, pc}
   8c0c6:	4602      	mov	r2, r0
   8c0c8:	e7f7      	b.n	8c0ba <_calloc_r+0x3e>
   8c0ca:	2100      	movs	r1, #0
   8c0cc:	f7fa fd7e 	bl	86bcc <memset>
   8c0d0:	4620      	mov	r0, r4
   8c0d2:	bd10      	pop	{r4, pc}
   8c0d4:	f100 0208 	add.w	r2, r0, #8
   8c0d8:	e7ef      	b.n	8c0ba <_calloc_r+0x3e>
   8c0da:	bf00      	nop

0008c0dc <_close_r>:
   8c0dc:	b538      	push	{r3, r4, r5, lr}
   8c0de:	2300      	movs	r3, #0
   8c0e0:	4c06      	ldr	r4, [pc, #24]	; (8c0fc <_close_r+0x20>)
   8c0e2:	4605      	mov	r5, r0
   8c0e4:	4608      	mov	r0, r1
   8c0e6:	6023      	str	r3, [r4, #0]
   8c0e8:	f7fa f996 	bl	86418 <_close>
   8c0ec:	1c43      	adds	r3, r0, #1
   8c0ee:	d000      	beq.n	8c0f2 <_close_r+0x16>
   8c0f0:	bd38      	pop	{r3, r4, r5, pc}
   8c0f2:	6823      	ldr	r3, [r4, #0]
   8c0f4:	2b00      	cmp	r3, #0
   8c0f6:	d0fb      	beq.n	8c0f0 <_close_r+0x14>
   8c0f8:	602b      	str	r3, [r5, #0]
   8c0fa:	bd38      	pop	{r3, r4, r5, pc}
   8c0fc:	200028b8 	.word	0x200028b8

0008c100 <_fclose_r>:
   8c100:	b570      	push	{r4, r5, r6, lr}
   8c102:	b159      	cbz	r1, 8c11c <_fclose_r+0x1c>
   8c104:	4605      	mov	r5, r0
   8c106:	460c      	mov	r4, r1
   8c108:	b110      	cbz	r0, 8c110 <_fclose_r+0x10>
   8c10a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c10c:	2b00      	cmp	r3, #0
   8c10e:	d03c      	beq.n	8c18a <_fclose_r+0x8a>
   8c110:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c112:	07d8      	lsls	r0, r3, #31
   8c114:	d505      	bpl.n	8c122 <_fclose_r+0x22>
   8c116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c11a:	b92b      	cbnz	r3, 8c128 <_fclose_r+0x28>
   8c11c:	2600      	movs	r6, #0
   8c11e:	4630      	mov	r0, r6
   8c120:	bd70      	pop	{r4, r5, r6, pc}
   8c122:	89a3      	ldrh	r3, [r4, #12]
   8c124:	0599      	lsls	r1, r3, #22
   8c126:	d53c      	bpl.n	8c1a2 <_fclose_r+0xa2>
   8c128:	4621      	mov	r1, r4
   8c12a:	4628      	mov	r0, r5
   8c12c:	f7fe f866 	bl	8a1fc <__sflush_r>
   8c130:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8c132:	4606      	mov	r6, r0
   8c134:	b133      	cbz	r3, 8c144 <_fclose_r+0x44>
   8c136:	69e1      	ldr	r1, [r4, #28]
   8c138:	4628      	mov	r0, r5
   8c13a:	4798      	blx	r3
   8c13c:	2800      	cmp	r0, #0
   8c13e:	bfb8      	it	lt
   8c140:	f04f 36ff 	movlt.w	r6, #4294967295
   8c144:	89a3      	ldrh	r3, [r4, #12]
   8c146:	061a      	lsls	r2, r3, #24
   8c148:	d422      	bmi.n	8c190 <_fclose_r+0x90>
   8c14a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c14c:	b141      	cbz	r1, 8c160 <_fclose_r+0x60>
   8c14e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c152:	4299      	cmp	r1, r3
   8c154:	d002      	beq.n	8c15c <_fclose_r+0x5c>
   8c156:	4628      	mov	r0, r5
   8c158:	f7fe fa6a 	bl	8a630 <_free_r>
   8c15c:	2300      	movs	r3, #0
   8c15e:	6323      	str	r3, [r4, #48]	; 0x30
   8c160:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8c162:	b121      	cbz	r1, 8c16e <_fclose_r+0x6e>
   8c164:	4628      	mov	r0, r5
   8c166:	f7fe fa63 	bl	8a630 <_free_r>
   8c16a:	2300      	movs	r3, #0
   8c16c:	6463      	str	r3, [r4, #68]	; 0x44
   8c16e:	f7fe f969 	bl	8a444 <__sfp_lock_acquire>
   8c172:	2200      	movs	r2, #0
   8c174:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c176:	81a2      	strh	r2, [r4, #12]
   8c178:	07db      	lsls	r3, r3, #31
   8c17a:	d50e      	bpl.n	8c19a <_fclose_r+0x9a>
   8c17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c17e:	f7fe fcfd 	bl	8ab7c <__retarget_lock_close_recursive>
   8c182:	f7fe f965 	bl	8a450 <__sfp_lock_release>
   8c186:	4630      	mov	r0, r6
   8c188:	bd70      	pop	{r4, r5, r6, pc}
   8c18a:	f7fe f92b 	bl	8a3e4 <__sinit>
   8c18e:	e7bf      	b.n	8c110 <_fclose_r+0x10>
   8c190:	6921      	ldr	r1, [r4, #16]
   8c192:	4628      	mov	r0, r5
   8c194:	f7fe fa4c 	bl	8a630 <_free_r>
   8c198:	e7d7      	b.n	8c14a <_fclose_r+0x4a>
   8c19a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c19c:	f7fe fcf2 	bl	8ab84 <__retarget_lock_release_recursive>
   8c1a0:	e7ec      	b.n	8c17c <_fclose_r+0x7c>
   8c1a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c1a4:	f7fe fcec 	bl	8ab80 <__retarget_lock_acquire_recursive>
   8c1a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c1ac:	2b00      	cmp	r3, #0
   8c1ae:	d1bb      	bne.n	8c128 <_fclose_r+0x28>
   8c1b0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8c1b2:	f016 0601 	ands.w	r6, r6, #1
   8c1b6:	d1b1      	bne.n	8c11c <_fclose_r+0x1c>
   8c1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c1ba:	f7fe fce3 	bl	8ab84 <__retarget_lock_release_recursive>
   8c1be:	4630      	mov	r0, r6
   8c1c0:	bd70      	pop	{r4, r5, r6, pc}
   8c1c2:	bf00      	nop

0008c1c4 <_fstat_r>:
   8c1c4:	b570      	push	{r4, r5, r6, lr}
   8c1c6:	460d      	mov	r5, r1
   8c1c8:	2300      	movs	r3, #0
   8c1ca:	4c07      	ldr	r4, [pc, #28]	; (8c1e8 <_fstat_r+0x24>)
   8c1cc:	4606      	mov	r6, r0
   8c1ce:	4611      	mov	r1, r2
   8c1d0:	4628      	mov	r0, r5
   8c1d2:	6023      	str	r3, [r4, #0]
   8c1d4:	f7fa f923 	bl	8641e <_fstat>
   8c1d8:	1c43      	adds	r3, r0, #1
   8c1da:	d000      	beq.n	8c1de <_fstat_r+0x1a>
   8c1dc:	bd70      	pop	{r4, r5, r6, pc}
   8c1de:	6823      	ldr	r3, [r4, #0]
   8c1e0:	2b00      	cmp	r3, #0
   8c1e2:	d0fb      	beq.n	8c1dc <_fstat_r+0x18>
   8c1e4:	6033      	str	r3, [r6, #0]
   8c1e6:	bd70      	pop	{r4, r5, r6, pc}
   8c1e8:	200028b8 	.word	0x200028b8

0008c1ec <_isatty_r>:
   8c1ec:	b538      	push	{r3, r4, r5, lr}
   8c1ee:	2300      	movs	r3, #0
   8c1f0:	4c06      	ldr	r4, [pc, #24]	; (8c20c <_isatty_r+0x20>)
   8c1f2:	4605      	mov	r5, r0
   8c1f4:	4608      	mov	r0, r1
   8c1f6:	6023      	str	r3, [r4, #0]
   8c1f8:	f7fa f916 	bl	86428 <_isatty>
   8c1fc:	1c43      	adds	r3, r0, #1
   8c1fe:	d000      	beq.n	8c202 <_isatty_r+0x16>
   8c200:	bd38      	pop	{r3, r4, r5, pc}
   8c202:	6823      	ldr	r3, [r4, #0]
   8c204:	2b00      	cmp	r3, #0
   8c206:	d0fb      	beq.n	8c200 <_isatty_r+0x14>
   8c208:	602b      	str	r3, [r5, #0]
   8c20a:	bd38      	pop	{r3, r4, r5, pc}
   8c20c:	200028b8 	.word	0x200028b8

0008c210 <_lseek_r>:
   8c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c212:	460e      	mov	r6, r1
   8c214:	2500      	movs	r5, #0
   8c216:	4c08      	ldr	r4, [pc, #32]	; (8c238 <_lseek_r+0x28>)
   8c218:	4611      	mov	r1, r2
   8c21a:	4607      	mov	r7, r0
   8c21c:	461a      	mov	r2, r3
   8c21e:	4630      	mov	r0, r6
   8c220:	6025      	str	r5, [r4, #0]
   8c222:	f7fa f903 	bl	8642c <_lseek>
   8c226:	1c43      	adds	r3, r0, #1
   8c228:	d000      	beq.n	8c22c <_lseek_r+0x1c>
   8c22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c22c:	6823      	ldr	r3, [r4, #0]
   8c22e:	2b00      	cmp	r3, #0
   8c230:	d0fb      	beq.n	8c22a <_lseek_r+0x1a>
   8c232:	603b      	str	r3, [r7, #0]
   8c234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c236:	bf00      	nop
   8c238:	200028b8 	.word	0x200028b8

0008c23c <_read_r>:
   8c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c23e:	460e      	mov	r6, r1
   8c240:	2500      	movs	r5, #0
   8c242:	4c08      	ldr	r4, [pc, #32]	; (8c264 <_read_r+0x28>)
   8c244:	4611      	mov	r1, r2
   8c246:	4607      	mov	r7, r0
   8c248:	461a      	mov	r2, r3
   8c24a:	4630      	mov	r0, r6
   8c24c:	6025      	str	r5, [r4, #0]
   8c24e:	f7f8 f903 	bl	84458 <_read>
   8c252:	1c43      	adds	r3, r0, #1
   8c254:	d000      	beq.n	8c258 <_read_r+0x1c>
   8c256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c258:	6823      	ldr	r3, [r4, #0]
   8c25a:	2b00      	cmp	r3, #0
   8c25c:	d0fb      	beq.n	8c256 <_read_r+0x1a>
   8c25e:	603b      	str	r3, [r7, #0]
   8c260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c262:	bf00      	nop
   8c264:	200028b8 	.word	0x200028b8

0008c268 <__aeabi_drsub>:
   8c268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c26c:	e002      	b.n	8c274 <__adddf3>
   8c26e:	bf00      	nop

0008c270 <__aeabi_dsub>:
   8c270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c274 <__adddf3>:
   8c274:	b530      	push	{r4, r5, lr}
   8c276:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c27a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c27e:	ea94 0f05 	teq	r4, r5
   8c282:	bf08      	it	eq
   8c284:	ea90 0f02 	teqeq	r0, r2
   8c288:	bf1f      	itttt	ne
   8c28a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c28e:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c29a:	f000 80e2 	beq.w	8c462 <__adddf3+0x1ee>
   8c29e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c2a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c2a6:	bfb8      	it	lt
   8c2a8:	426d      	neglt	r5, r5
   8c2aa:	dd0c      	ble.n	8c2c6 <__adddf3+0x52>
   8c2ac:	442c      	add	r4, r5
   8c2ae:	ea80 0202 	eor.w	r2, r0, r2
   8c2b2:	ea81 0303 	eor.w	r3, r1, r3
   8c2b6:	ea82 0000 	eor.w	r0, r2, r0
   8c2ba:	ea83 0101 	eor.w	r1, r3, r1
   8c2be:	ea80 0202 	eor.w	r2, r0, r2
   8c2c2:	ea81 0303 	eor.w	r3, r1, r3
   8c2c6:	2d36      	cmp	r5, #54	; 0x36
   8c2c8:	bf88      	it	hi
   8c2ca:	bd30      	pophi	{r4, r5, pc}
   8c2cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c2d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c2d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c2d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c2dc:	d002      	beq.n	8c2e4 <__adddf3+0x70>
   8c2de:	4240      	negs	r0, r0
   8c2e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c2e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c2e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c2ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c2f0:	d002      	beq.n	8c2f8 <__adddf3+0x84>
   8c2f2:	4252      	negs	r2, r2
   8c2f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c2f8:	ea94 0f05 	teq	r4, r5
   8c2fc:	f000 80a7 	beq.w	8c44e <__adddf3+0x1da>
   8c300:	f1a4 0401 	sub.w	r4, r4, #1
   8c304:	f1d5 0e20 	rsbs	lr, r5, #32
   8c308:	db0d      	blt.n	8c326 <__adddf3+0xb2>
   8c30a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c30e:	fa22 f205 	lsr.w	r2, r2, r5
   8c312:	1880      	adds	r0, r0, r2
   8c314:	f141 0100 	adc.w	r1, r1, #0
   8c318:	fa03 f20e 	lsl.w	r2, r3, lr
   8c31c:	1880      	adds	r0, r0, r2
   8c31e:	fa43 f305 	asr.w	r3, r3, r5
   8c322:	4159      	adcs	r1, r3
   8c324:	e00e      	b.n	8c344 <__adddf3+0xd0>
   8c326:	f1a5 0520 	sub.w	r5, r5, #32
   8c32a:	f10e 0e20 	add.w	lr, lr, #32
   8c32e:	2a01      	cmp	r2, #1
   8c330:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c334:	bf28      	it	cs
   8c336:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c33a:	fa43 f305 	asr.w	r3, r3, r5
   8c33e:	18c0      	adds	r0, r0, r3
   8c340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c348:	d507      	bpl.n	8c35a <__adddf3+0xe6>
   8c34a:	f04f 0e00 	mov.w	lr, #0
   8c34e:	f1dc 0c00 	rsbs	ip, ip, #0
   8c352:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c356:	eb6e 0101 	sbc.w	r1, lr, r1
   8c35a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c35e:	d31b      	bcc.n	8c398 <__adddf3+0x124>
   8c360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c364:	d30c      	bcc.n	8c380 <__adddf3+0x10c>
   8c366:	0849      	lsrs	r1, r1, #1
   8c368:	ea5f 0030 	movs.w	r0, r0, rrx
   8c36c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c370:	f104 0401 	add.w	r4, r4, #1
   8c374:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c37c:	f080 809a 	bcs.w	8c4b4 <__adddf3+0x240>
   8c380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c384:	bf08      	it	eq
   8c386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c38a:	f150 0000 	adcs.w	r0, r0, #0
   8c38e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c392:	ea41 0105 	orr.w	r1, r1, r5
   8c396:	bd30      	pop	{r4, r5, pc}
   8c398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c39c:	4140      	adcs	r0, r0
   8c39e:	eb41 0101 	adc.w	r1, r1, r1
   8c3a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c3a6:	f1a4 0401 	sub.w	r4, r4, #1
   8c3aa:	d1e9      	bne.n	8c380 <__adddf3+0x10c>
   8c3ac:	f091 0f00 	teq	r1, #0
   8c3b0:	bf04      	itt	eq
   8c3b2:	4601      	moveq	r1, r0
   8c3b4:	2000      	moveq	r0, #0
   8c3b6:	fab1 f381 	clz	r3, r1
   8c3ba:	bf08      	it	eq
   8c3bc:	3320      	addeq	r3, #32
   8c3be:	f1a3 030b 	sub.w	r3, r3, #11
   8c3c2:	f1b3 0220 	subs.w	r2, r3, #32
   8c3c6:	da0c      	bge.n	8c3e2 <__adddf3+0x16e>
   8c3c8:	320c      	adds	r2, #12
   8c3ca:	dd08      	ble.n	8c3de <__adddf3+0x16a>
   8c3cc:	f102 0c14 	add.w	ip, r2, #20
   8c3d0:	f1c2 020c 	rsb	r2, r2, #12
   8c3d4:	fa01 f00c 	lsl.w	r0, r1, ip
   8c3d8:	fa21 f102 	lsr.w	r1, r1, r2
   8c3dc:	e00c      	b.n	8c3f8 <__adddf3+0x184>
   8c3de:	f102 0214 	add.w	r2, r2, #20
   8c3e2:	bfd8      	it	le
   8c3e4:	f1c2 0c20 	rsble	ip, r2, #32
   8c3e8:	fa01 f102 	lsl.w	r1, r1, r2
   8c3ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c3f0:	bfdc      	itt	le
   8c3f2:	ea41 010c 	orrle.w	r1, r1, ip
   8c3f6:	4090      	lslle	r0, r2
   8c3f8:	1ae4      	subs	r4, r4, r3
   8c3fa:	bfa2      	ittt	ge
   8c3fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c400:	4329      	orrge	r1, r5
   8c402:	bd30      	popge	{r4, r5, pc}
   8c404:	ea6f 0404 	mvn.w	r4, r4
   8c408:	3c1f      	subs	r4, #31
   8c40a:	da1c      	bge.n	8c446 <__adddf3+0x1d2>
   8c40c:	340c      	adds	r4, #12
   8c40e:	dc0e      	bgt.n	8c42e <__adddf3+0x1ba>
   8c410:	f104 0414 	add.w	r4, r4, #20
   8c414:	f1c4 0220 	rsb	r2, r4, #32
   8c418:	fa20 f004 	lsr.w	r0, r0, r4
   8c41c:	fa01 f302 	lsl.w	r3, r1, r2
   8c420:	ea40 0003 	orr.w	r0, r0, r3
   8c424:	fa21 f304 	lsr.w	r3, r1, r4
   8c428:	ea45 0103 	orr.w	r1, r5, r3
   8c42c:	bd30      	pop	{r4, r5, pc}
   8c42e:	f1c4 040c 	rsb	r4, r4, #12
   8c432:	f1c4 0220 	rsb	r2, r4, #32
   8c436:	fa20 f002 	lsr.w	r0, r0, r2
   8c43a:	fa01 f304 	lsl.w	r3, r1, r4
   8c43e:	ea40 0003 	orr.w	r0, r0, r3
   8c442:	4629      	mov	r1, r5
   8c444:	bd30      	pop	{r4, r5, pc}
   8c446:	fa21 f004 	lsr.w	r0, r1, r4
   8c44a:	4629      	mov	r1, r5
   8c44c:	bd30      	pop	{r4, r5, pc}
   8c44e:	f094 0f00 	teq	r4, #0
   8c452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c456:	bf06      	itte	eq
   8c458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c45c:	3401      	addeq	r4, #1
   8c45e:	3d01      	subne	r5, #1
   8c460:	e74e      	b.n	8c300 <__adddf3+0x8c>
   8c462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c466:	bf18      	it	ne
   8c468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c46c:	d029      	beq.n	8c4c2 <__adddf3+0x24e>
   8c46e:	ea94 0f05 	teq	r4, r5
   8c472:	bf08      	it	eq
   8c474:	ea90 0f02 	teqeq	r0, r2
   8c478:	d005      	beq.n	8c486 <__adddf3+0x212>
   8c47a:	ea54 0c00 	orrs.w	ip, r4, r0
   8c47e:	bf04      	itt	eq
   8c480:	4619      	moveq	r1, r3
   8c482:	4610      	moveq	r0, r2
   8c484:	bd30      	pop	{r4, r5, pc}
   8c486:	ea91 0f03 	teq	r1, r3
   8c48a:	bf1e      	ittt	ne
   8c48c:	2100      	movne	r1, #0
   8c48e:	2000      	movne	r0, #0
   8c490:	bd30      	popne	{r4, r5, pc}
   8c492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c496:	d105      	bne.n	8c4a4 <__adddf3+0x230>
   8c498:	0040      	lsls	r0, r0, #1
   8c49a:	4149      	adcs	r1, r1
   8c49c:	bf28      	it	cs
   8c49e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c4a2:	bd30      	pop	{r4, r5, pc}
   8c4a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c4a8:	bf3c      	itt	cc
   8c4aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c4ae:	bd30      	popcc	{r4, r5, pc}
   8c4b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c4b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c4b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c4bc:	f04f 0000 	mov.w	r0, #0
   8c4c0:	bd30      	pop	{r4, r5, pc}
   8c4c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c4c6:	bf1a      	itte	ne
   8c4c8:	4619      	movne	r1, r3
   8c4ca:	4610      	movne	r0, r2
   8c4cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c4d0:	bf1c      	itt	ne
   8c4d2:	460b      	movne	r3, r1
   8c4d4:	4602      	movne	r2, r0
   8c4d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c4da:	bf06      	itte	eq
   8c4dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c4e0:	ea91 0f03 	teqeq	r1, r3
   8c4e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c4e8:	bd30      	pop	{r4, r5, pc}
   8c4ea:	bf00      	nop

0008c4ec <__aeabi_ui2d>:
   8c4ec:	f090 0f00 	teq	r0, #0
   8c4f0:	bf04      	itt	eq
   8c4f2:	2100      	moveq	r1, #0
   8c4f4:	4770      	bxeq	lr
   8c4f6:	b530      	push	{r4, r5, lr}
   8c4f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c4fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c500:	f04f 0500 	mov.w	r5, #0
   8c504:	f04f 0100 	mov.w	r1, #0
   8c508:	e750      	b.n	8c3ac <__adddf3+0x138>
   8c50a:	bf00      	nop

0008c50c <__aeabi_i2d>:
   8c50c:	f090 0f00 	teq	r0, #0
   8c510:	bf04      	itt	eq
   8c512:	2100      	moveq	r1, #0
   8c514:	4770      	bxeq	lr
   8c516:	b530      	push	{r4, r5, lr}
   8c518:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c51c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c524:	bf48      	it	mi
   8c526:	4240      	negmi	r0, r0
   8c528:	f04f 0100 	mov.w	r1, #0
   8c52c:	e73e      	b.n	8c3ac <__adddf3+0x138>
   8c52e:	bf00      	nop

0008c530 <__aeabi_f2d>:
   8c530:	0042      	lsls	r2, r0, #1
   8c532:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c536:	ea4f 0131 	mov.w	r1, r1, rrx
   8c53a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c53e:	bf1f      	itttt	ne
   8c540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c54c:	4770      	bxne	lr
   8c54e:	f092 0f00 	teq	r2, #0
   8c552:	bf14      	ite	ne
   8c554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c558:	4770      	bxeq	lr
   8c55a:	b530      	push	{r4, r5, lr}
   8c55c:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c568:	e720      	b.n	8c3ac <__adddf3+0x138>
   8c56a:	bf00      	nop

0008c56c <__aeabi_ul2d>:
   8c56c:	ea50 0201 	orrs.w	r2, r0, r1
   8c570:	bf08      	it	eq
   8c572:	4770      	bxeq	lr
   8c574:	b530      	push	{r4, r5, lr}
   8c576:	f04f 0500 	mov.w	r5, #0
   8c57a:	e00a      	b.n	8c592 <__aeabi_l2d+0x16>

0008c57c <__aeabi_l2d>:
   8c57c:	ea50 0201 	orrs.w	r2, r0, r1
   8c580:	bf08      	it	eq
   8c582:	4770      	bxeq	lr
   8c584:	b530      	push	{r4, r5, lr}
   8c586:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c58a:	d502      	bpl.n	8c592 <__aeabi_l2d+0x16>
   8c58c:	4240      	negs	r0, r0
   8c58e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c592:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c596:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c59a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c59e:	f43f aedc 	beq.w	8c35a <__adddf3+0xe6>
   8c5a2:	f04f 0203 	mov.w	r2, #3
   8c5a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c5aa:	bf18      	it	ne
   8c5ac:	3203      	addne	r2, #3
   8c5ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c5b2:	bf18      	it	ne
   8c5b4:	3203      	addne	r2, #3
   8c5b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c5ba:	f1c2 0320 	rsb	r3, r2, #32
   8c5be:	fa00 fc03 	lsl.w	ip, r0, r3
   8c5c2:	fa20 f002 	lsr.w	r0, r0, r2
   8c5c6:	fa01 fe03 	lsl.w	lr, r1, r3
   8c5ca:	ea40 000e 	orr.w	r0, r0, lr
   8c5ce:	fa21 f102 	lsr.w	r1, r1, r2
   8c5d2:	4414      	add	r4, r2
   8c5d4:	e6c1      	b.n	8c35a <__adddf3+0xe6>
   8c5d6:	bf00      	nop

0008c5d8 <__aeabi_dmul>:
   8c5d8:	b570      	push	{r4, r5, r6, lr}
   8c5da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c5de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c5e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c5e6:	bf1d      	ittte	ne
   8c5e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c5ec:	ea94 0f0c 	teqne	r4, ip
   8c5f0:	ea95 0f0c 	teqne	r5, ip
   8c5f4:	f000 f8de 	bleq	8c7b4 <__aeabi_dmul+0x1dc>
   8c5f8:	442c      	add	r4, r5
   8c5fa:	ea81 0603 	eor.w	r6, r1, r3
   8c5fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c602:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c606:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c60a:	bf18      	it	ne
   8c60c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c610:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c618:	d038      	beq.n	8c68c <__aeabi_dmul+0xb4>
   8c61a:	fba0 ce02 	umull	ip, lr, r0, r2
   8c61e:	f04f 0500 	mov.w	r5, #0
   8c622:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c626:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c62a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c62e:	f04f 0600 	mov.w	r6, #0
   8c632:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c636:	f09c 0f00 	teq	ip, #0
   8c63a:	bf18      	it	ne
   8c63c:	f04e 0e01 	orrne.w	lr, lr, #1
   8c640:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c644:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c648:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c64c:	d204      	bcs.n	8c658 <__aeabi_dmul+0x80>
   8c64e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c652:	416d      	adcs	r5, r5
   8c654:	eb46 0606 	adc.w	r6, r6, r6
   8c658:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c65c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c660:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c664:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c668:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c66c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c670:	bf88      	it	hi
   8c672:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c676:	d81e      	bhi.n	8c6b6 <__aeabi_dmul+0xde>
   8c678:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c67c:	bf08      	it	eq
   8c67e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c682:	f150 0000 	adcs.w	r0, r0, #0
   8c686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c68a:	bd70      	pop	{r4, r5, r6, pc}
   8c68c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c690:	ea46 0101 	orr.w	r1, r6, r1
   8c694:	ea40 0002 	orr.w	r0, r0, r2
   8c698:	ea81 0103 	eor.w	r1, r1, r3
   8c69c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c6a0:	bfc2      	ittt	gt
   8c6a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c6a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c6aa:	bd70      	popgt	{r4, r5, r6, pc}
   8c6ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c6b0:	f04f 0e00 	mov.w	lr, #0
   8c6b4:	3c01      	subs	r4, #1
   8c6b6:	f300 80ab 	bgt.w	8c810 <__aeabi_dmul+0x238>
   8c6ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c6be:	bfde      	ittt	le
   8c6c0:	2000      	movle	r0, #0
   8c6c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c6c6:	bd70      	pople	{r4, r5, r6, pc}
   8c6c8:	f1c4 0400 	rsb	r4, r4, #0
   8c6cc:	3c20      	subs	r4, #32
   8c6ce:	da35      	bge.n	8c73c <__aeabi_dmul+0x164>
   8c6d0:	340c      	adds	r4, #12
   8c6d2:	dc1b      	bgt.n	8c70c <__aeabi_dmul+0x134>
   8c6d4:	f104 0414 	add.w	r4, r4, #20
   8c6d8:	f1c4 0520 	rsb	r5, r4, #32
   8c6dc:	fa00 f305 	lsl.w	r3, r0, r5
   8c6e0:	fa20 f004 	lsr.w	r0, r0, r4
   8c6e4:	fa01 f205 	lsl.w	r2, r1, r5
   8c6e8:	ea40 0002 	orr.w	r0, r0, r2
   8c6ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c6f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c6f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c6f8:	fa21 f604 	lsr.w	r6, r1, r4
   8c6fc:	eb42 0106 	adc.w	r1, r2, r6
   8c700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c704:	bf08      	it	eq
   8c706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c70a:	bd70      	pop	{r4, r5, r6, pc}
   8c70c:	f1c4 040c 	rsb	r4, r4, #12
   8c710:	f1c4 0520 	rsb	r5, r4, #32
   8c714:	fa00 f304 	lsl.w	r3, r0, r4
   8c718:	fa20 f005 	lsr.w	r0, r0, r5
   8c71c:	fa01 f204 	lsl.w	r2, r1, r4
   8c720:	ea40 0002 	orr.w	r0, r0, r2
   8c724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c72c:	f141 0100 	adc.w	r1, r1, #0
   8c730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c734:	bf08      	it	eq
   8c736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c73a:	bd70      	pop	{r4, r5, r6, pc}
   8c73c:	f1c4 0520 	rsb	r5, r4, #32
   8c740:	fa00 f205 	lsl.w	r2, r0, r5
   8c744:	ea4e 0e02 	orr.w	lr, lr, r2
   8c748:	fa20 f304 	lsr.w	r3, r0, r4
   8c74c:	fa01 f205 	lsl.w	r2, r1, r5
   8c750:	ea43 0302 	orr.w	r3, r3, r2
   8c754:	fa21 f004 	lsr.w	r0, r1, r4
   8c758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c75c:	fa21 f204 	lsr.w	r2, r1, r4
   8c760:	ea20 0002 	bic.w	r0, r0, r2
   8c764:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c76c:	bf08      	it	eq
   8c76e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c772:	bd70      	pop	{r4, r5, r6, pc}
   8c774:	f094 0f00 	teq	r4, #0
   8c778:	d10f      	bne.n	8c79a <__aeabi_dmul+0x1c2>
   8c77a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c77e:	0040      	lsls	r0, r0, #1
   8c780:	eb41 0101 	adc.w	r1, r1, r1
   8c784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c788:	bf08      	it	eq
   8c78a:	3c01      	subeq	r4, #1
   8c78c:	d0f7      	beq.n	8c77e <__aeabi_dmul+0x1a6>
   8c78e:	ea41 0106 	orr.w	r1, r1, r6
   8c792:	f095 0f00 	teq	r5, #0
   8c796:	bf18      	it	ne
   8c798:	4770      	bxne	lr
   8c79a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c79e:	0052      	lsls	r2, r2, #1
   8c7a0:	eb43 0303 	adc.w	r3, r3, r3
   8c7a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c7a8:	bf08      	it	eq
   8c7aa:	3d01      	subeq	r5, #1
   8c7ac:	d0f7      	beq.n	8c79e <__aeabi_dmul+0x1c6>
   8c7ae:	ea43 0306 	orr.w	r3, r3, r6
   8c7b2:	4770      	bx	lr
   8c7b4:	ea94 0f0c 	teq	r4, ip
   8c7b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c7bc:	bf18      	it	ne
   8c7be:	ea95 0f0c 	teqne	r5, ip
   8c7c2:	d00c      	beq.n	8c7de <__aeabi_dmul+0x206>
   8c7c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c7c8:	bf18      	it	ne
   8c7ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c7ce:	d1d1      	bne.n	8c774 <__aeabi_dmul+0x19c>
   8c7d0:	ea81 0103 	eor.w	r1, r1, r3
   8c7d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c7d8:	f04f 0000 	mov.w	r0, #0
   8c7dc:	bd70      	pop	{r4, r5, r6, pc}
   8c7de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c7e2:	bf06      	itte	eq
   8c7e4:	4610      	moveq	r0, r2
   8c7e6:	4619      	moveq	r1, r3
   8c7e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c7ec:	d019      	beq.n	8c822 <__aeabi_dmul+0x24a>
   8c7ee:	ea94 0f0c 	teq	r4, ip
   8c7f2:	d102      	bne.n	8c7fa <__aeabi_dmul+0x222>
   8c7f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c7f8:	d113      	bne.n	8c822 <__aeabi_dmul+0x24a>
   8c7fa:	ea95 0f0c 	teq	r5, ip
   8c7fe:	d105      	bne.n	8c80c <__aeabi_dmul+0x234>
   8c800:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c804:	bf1c      	itt	ne
   8c806:	4610      	movne	r0, r2
   8c808:	4619      	movne	r1, r3
   8c80a:	d10a      	bne.n	8c822 <__aeabi_dmul+0x24a>
   8c80c:	ea81 0103 	eor.w	r1, r1, r3
   8c810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c814:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c81c:	f04f 0000 	mov.w	r0, #0
   8c820:	bd70      	pop	{r4, r5, r6, pc}
   8c822:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c826:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c82a:	bd70      	pop	{r4, r5, r6, pc}

0008c82c <__aeabi_ddiv>:
   8c82c:	b570      	push	{r4, r5, r6, lr}
   8c82e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c832:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c83a:	bf1d      	ittte	ne
   8c83c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c840:	ea94 0f0c 	teqne	r4, ip
   8c844:	ea95 0f0c 	teqne	r5, ip
   8c848:	f000 f8a7 	bleq	8c99a <__aeabi_ddiv+0x16e>
   8c84c:	eba4 0405 	sub.w	r4, r4, r5
   8c850:	ea81 0e03 	eor.w	lr, r1, r3
   8c854:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c858:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c85c:	f000 8088 	beq.w	8c970 <__aeabi_ddiv+0x144>
   8c860:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c864:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c868:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c86c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c870:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c874:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c878:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c87c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c880:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c884:	429d      	cmp	r5, r3
   8c886:	bf08      	it	eq
   8c888:	4296      	cmpeq	r6, r2
   8c88a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c88e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c892:	d202      	bcs.n	8c89a <__aeabi_ddiv+0x6e>
   8c894:	085b      	lsrs	r3, r3, #1
   8c896:	ea4f 0232 	mov.w	r2, r2, rrx
   8c89a:	1ab6      	subs	r6, r6, r2
   8c89c:	eb65 0503 	sbc.w	r5, r5, r3
   8c8a0:	085b      	lsrs	r3, r3, #1
   8c8a2:	ea4f 0232 	mov.w	r2, r2, rrx
   8c8a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c8aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c8ae:	ebb6 0e02 	subs.w	lr, r6, r2
   8c8b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c8b6:	bf22      	ittt	cs
   8c8b8:	1ab6      	subcs	r6, r6, r2
   8c8ba:	4675      	movcs	r5, lr
   8c8bc:	ea40 000c 	orrcs.w	r0, r0, ip
   8c8c0:	085b      	lsrs	r3, r3, #1
   8c8c2:	ea4f 0232 	mov.w	r2, r2, rrx
   8c8c6:	ebb6 0e02 	subs.w	lr, r6, r2
   8c8ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c8ce:	bf22      	ittt	cs
   8c8d0:	1ab6      	subcs	r6, r6, r2
   8c8d2:	4675      	movcs	r5, lr
   8c8d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c8d8:	085b      	lsrs	r3, r3, #1
   8c8da:	ea4f 0232 	mov.w	r2, r2, rrx
   8c8de:	ebb6 0e02 	subs.w	lr, r6, r2
   8c8e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c8e6:	bf22      	ittt	cs
   8c8e8:	1ab6      	subcs	r6, r6, r2
   8c8ea:	4675      	movcs	r5, lr
   8c8ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c8f0:	085b      	lsrs	r3, r3, #1
   8c8f2:	ea4f 0232 	mov.w	r2, r2, rrx
   8c8f6:	ebb6 0e02 	subs.w	lr, r6, r2
   8c8fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c8fe:	bf22      	ittt	cs
   8c900:	1ab6      	subcs	r6, r6, r2
   8c902:	4675      	movcs	r5, lr
   8c904:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c908:	ea55 0e06 	orrs.w	lr, r5, r6
   8c90c:	d018      	beq.n	8c940 <__aeabi_ddiv+0x114>
   8c90e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c912:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c916:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c91a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c91e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c922:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c926:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c92a:	d1c0      	bne.n	8c8ae <__aeabi_ddiv+0x82>
   8c92c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c930:	d10b      	bne.n	8c94a <__aeabi_ddiv+0x11e>
   8c932:	ea41 0100 	orr.w	r1, r1, r0
   8c936:	f04f 0000 	mov.w	r0, #0
   8c93a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c93e:	e7b6      	b.n	8c8ae <__aeabi_ddiv+0x82>
   8c940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c944:	bf04      	itt	eq
   8c946:	4301      	orreq	r1, r0
   8c948:	2000      	moveq	r0, #0
   8c94a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c94e:	bf88      	it	hi
   8c950:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c954:	f63f aeaf 	bhi.w	8c6b6 <__aeabi_dmul+0xde>
   8c958:	ebb5 0c03 	subs.w	ip, r5, r3
   8c95c:	bf04      	itt	eq
   8c95e:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c966:	f150 0000 	adcs.w	r0, r0, #0
   8c96a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c96e:	bd70      	pop	{r4, r5, r6, pc}
   8c970:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c974:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c978:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c97c:	bfc2      	ittt	gt
   8c97e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c986:	bd70      	popgt	{r4, r5, r6, pc}
   8c988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c98c:	f04f 0e00 	mov.w	lr, #0
   8c990:	3c01      	subs	r4, #1
   8c992:	e690      	b.n	8c6b6 <__aeabi_dmul+0xde>
   8c994:	ea45 0e06 	orr.w	lr, r5, r6
   8c998:	e68d      	b.n	8c6b6 <__aeabi_dmul+0xde>
   8c99a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c99e:	ea94 0f0c 	teq	r4, ip
   8c9a2:	bf08      	it	eq
   8c9a4:	ea95 0f0c 	teqeq	r5, ip
   8c9a8:	f43f af3b 	beq.w	8c822 <__aeabi_dmul+0x24a>
   8c9ac:	ea94 0f0c 	teq	r4, ip
   8c9b0:	d10a      	bne.n	8c9c8 <__aeabi_ddiv+0x19c>
   8c9b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c9b6:	f47f af34 	bne.w	8c822 <__aeabi_dmul+0x24a>
   8c9ba:	ea95 0f0c 	teq	r5, ip
   8c9be:	f47f af25 	bne.w	8c80c <__aeabi_dmul+0x234>
   8c9c2:	4610      	mov	r0, r2
   8c9c4:	4619      	mov	r1, r3
   8c9c6:	e72c      	b.n	8c822 <__aeabi_dmul+0x24a>
   8c9c8:	ea95 0f0c 	teq	r5, ip
   8c9cc:	d106      	bne.n	8c9dc <__aeabi_ddiv+0x1b0>
   8c9ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c9d2:	f43f aefd 	beq.w	8c7d0 <__aeabi_dmul+0x1f8>
   8c9d6:	4610      	mov	r0, r2
   8c9d8:	4619      	mov	r1, r3
   8c9da:	e722      	b.n	8c822 <__aeabi_dmul+0x24a>
   8c9dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c9e0:	bf18      	it	ne
   8c9e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c9e6:	f47f aec5 	bne.w	8c774 <__aeabi_dmul+0x19c>
   8c9ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8c9ee:	f47f af0d 	bne.w	8c80c <__aeabi_dmul+0x234>
   8c9f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8c9f6:	f47f aeeb 	bne.w	8c7d0 <__aeabi_dmul+0x1f8>
   8c9fa:	e712      	b.n	8c822 <__aeabi_dmul+0x24a>

0008c9fc <__gedf2>:
   8c9fc:	f04f 3cff 	mov.w	ip, #4294967295
   8ca00:	e006      	b.n	8ca10 <__cmpdf2+0x4>
   8ca02:	bf00      	nop

0008ca04 <__ledf2>:
   8ca04:	f04f 0c01 	mov.w	ip, #1
   8ca08:	e002      	b.n	8ca10 <__cmpdf2+0x4>
   8ca0a:	bf00      	nop

0008ca0c <__cmpdf2>:
   8ca0c:	f04f 0c01 	mov.w	ip, #1
   8ca10:	f84d cd04 	str.w	ip, [sp, #-4]!
   8ca14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8ca18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ca1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8ca20:	bf18      	it	ne
   8ca22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8ca26:	d01b      	beq.n	8ca60 <__cmpdf2+0x54>
   8ca28:	b001      	add	sp, #4
   8ca2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8ca2e:	bf0c      	ite	eq
   8ca30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8ca34:	ea91 0f03 	teqne	r1, r3
   8ca38:	bf02      	ittt	eq
   8ca3a:	ea90 0f02 	teqeq	r0, r2
   8ca3e:	2000      	moveq	r0, #0
   8ca40:	4770      	bxeq	lr
   8ca42:	f110 0f00 	cmn.w	r0, #0
   8ca46:	ea91 0f03 	teq	r1, r3
   8ca4a:	bf58      	it	pl
   8ca4c:	4299      	cmppl	r1, r3
   8ca4e:	bf08      	it	eq
   8ca50:	4290      	cmpeq	r0, r2
   8ca52:	bf2c      	ite	cs
   8ca54:	17d8      	asrcs	r0, r3, #31
   8ca56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8ca5a:	f040 0001 	orr.w	r0, r0, #1
   8ca5e:	4770      	bx	lr
   8ca60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8ca64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ca68:	d102      	bne.n	8ca70 <__cmpdf2+0x64>
   8ca6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8ca6e:	d107      	bne.n	8ca80 <__cmpdf2+0x74>
   8ca70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8ca74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ca78:	d1d6      	bne.n	8ca28 <__cmpdf2+0x1c>
   8ca7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8ca7e:	d0d3      	beq.n	8ca28 <__cmpdf2+0x1c>
   8ca80:	f85d 0b04 	ldr.w	r0, [sp], #4
   8ca84:	4770      	bx	lr
   8ca86:	bf00      	nop

0008ca88 <__aeabi_cdrcmple>:
   8ca88:	4684      	mov	ip, r0
   8ca8a:	4610      	mov	r0, r2
   8ca8c:	4662      	mov	r2, ip
   8ca8e:	468c      	mov	ip, r1
   8ca90:	4619      	mov	r1, r3
   8ca92:	4663      	mov	r3, ip
   8ca94:	e000      	b.n	8ca98 <__aeabi_cdcmpeq>
   8ca96:	bf00      	nop

0008ca98 <__aeabi_cdcmpeq>:
   8ca98:	b501      	push	{r0, lr}
   8ca9a:	f7ff ffb7 	bl	8ca0c <__cmpdf2>
   8ca9e:	2800      	cmp	r0, #0
   8caa0:	bf48      	it	mi
   8caa2:	f110 0f00 	cmnmi.w	r0, #0
   8caa6:	bd01      	pop	{r0, pc}

0008caa8 <__aeabi_dcmpeq>:
   8caa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8caac:	f7ff fff4 	bl	8ca98 <__aeabi_cdcmpeq>
   8cab0:	bf0c      	ite	eq
   8cab2:	2001      	moveq	r0, #1
   8cab4:	2000      	movne	r0, #0
   8cab6:	f85d fb08 	ldr.w	pc, [sp], #8
   8caba:	bf00      	nop

0008cabc <__aeabi_dcmplt>:
   8cabc:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cac0:	f7ff ffea 	bl	8ca98 <__aeabi_cdcmpeq>
   8cac4:	bf34      	ite	cc
   8cac6:	2001      	movcc	r0, #1
   8cac8:	2000      	movcs	r0, #0
   8caca:	f85d fb08 	ldr.w	pc, [sp], #8
   8cace:	bf00      	nop

0008cad0 <__aeabi_dcmple>:
   8cad0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cad4:	f7ff ffe0 	bl	8ca98 <__aeabi_cdcmpeq>
   8cad8:	bf94      	ite	ls
   8cada:	2001      	movls	r0, #1
   8cadc:	2000      	movhi	r0, #0
   8cade:	f85d fb08 	ldr.w	pc, [sp], #8
   8cae2:	bf00      	nop

0008cae4 <__aeabi_dcmpge>:
   8cae4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cae8:	f7ff ffce 	bl	8ca88 <__aeabi_cdrcmple>
   8caec:	bf94      	ite	ls
   8caee:	2001      	movls	r0, #1
   8caf0:	2000      	movhi	r0, #0
   8caf2:	f85d fb08 	ldr.w	pc, [sp], #8
   8caf6:	bf00      	nop

0008caf8 <__aeabi_dcmpgt>:
   8caf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cafc:	f7ff ffc4 	bl	8ca88 <__aeabi_cdrcmple>
   8cb00:	bf34      	ite	cc
   8cb02:	2001      	movcc	r0, #1
   8cb04:	2000      	movcs	r0, #0
   8cb06:	f85d fb08 	ldr.w	pc, [sp], #8
   8cb0a:	bf00      	nop

0008cb0c <__aeabi_dcmpun>:
   8cb0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cb10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cb14:	d102      	bne.n	8cb1c <__aeabi_dcmpun+0x10>
   8cb16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8cb1a:	d10a      	bne.n	8cb32 <__aeabi_dcmpun+0x26>
   8cb1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cb20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cb24:	d102      	bne.n	8cb2c <__aeabi_dcmpun+0x20>
   8cb26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8cb2a:	d102      	bne.n	8cb32 <__aeabi_dcmpun+0x26>
   8cb2c:	f04f 0000 	mov.w	r0, #0
   8cb30:	4770      	bx	lr
   8cb32:	f04f 0001 	mov.w	r0, #1
   8cb36:	4770      	bx	lr

0008cb38 <__aeabi_d2iz>:
   8cb38:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8cb3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8cb40:	d215      	bcs.n	8cb6e <__aeabi_d2iz+0x36>
   8cb42:	d511      	bpl.n	8cb68 <__aeabi_d2iz+0x30>
   8cb44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8cb48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8cb4c:	d912      	bls.n	8cb74 <__aeabi_d2iz+0x3c>
   8cb4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8cb52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8cb56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8cb5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8cb5e:	fa23 f002 	lsr.w	r0, r3, r2
   8cb62:	bf18      	it	ne
   8cb64:	4240      	negne	r0, r0
   8cb66:	4770      	bx	lr
   8cb68:	f04f 0000 	mov.w	r0, #0
   8cb6c:	4770      	bx	lr
   8cb6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8cb72:	d105      	bne.n	8cb80 <__aeabi_d2iz+0x48>
   8cb74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8cb78:	bf08      	it	eq
   8cb7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8cb7e:	4770      	bx	lr
   8cb80:	f04f 0000 	mov.w	r0, #0
   8cb84:	4770      	bx	lr
   8cb86:	bf00      	nop

0008cb88 <BUILD_DATE>:
   8cb88:	6544 2063 3631 3220 3230 0031               Dec 16 2021.

0008cb94 <BUILD_TIME>:
   8cb94:	3531 303a 3a37 3834 0000 0000 5743 494c     15:07:48....CWLI
   8cba4:	4554 415f 5256 5349 0050 0000 0000 0000     TE_AVRISP.......
   8cbb4:	0000 0000 aa00 aaaa aaaa aaaa eeaa eeee     ................
   8cbc4:	eeee eeee feee ffff ffff ffff ffff ffff     ................
   8cbd4:	7fff dfbf f7ef fdfb 7efc dfbf f7ef fdfb     .........~......
   8cbe4:	007e 0000 3025 7838 0000 0000 6544 2063     ~...%08x....Dec 
   8cbf4:	3631 3220 3230 0031 3531 303a 3a37 3934     16 2021.15:07:49
   8cc04:	0000 0000 6843 7069 6857 7369 6570 6572     ....ChipWhispere
   8cc14:	2d72 694c 6574 4f20 6c6e 6e69 2e65 4620     r-Lite Online. F
   8cc24:	7269 776d 7261 2065 7562 6c69 3a64 2520     irmware build: %
   8cc34:	2f73 7325 000a 0000 6553 6972 6c61 6e20     s/%s....Serial n
   8cc44:	6d75 6562 3a72 2520 0a73 0000 6553 7474     umber: %s...Sett
   8cc54:	6e69 2067 7075 4620 4750 2041 6f43 6d6d     ing up FPGA Comm
   8cc64:	6e75 6369 7461 6f69 0a6e 0000 7645 6e65     unication...Even
   8cc74:	2074 6f4c 706f 4520 746e 7265 6465 202c     t Loop Entered, 
   8cc84:	6177 7469 6e69 2e67 2e2e 000a               waiting.....

0008cc90 <_global_impure_ptr>:
   8cc90:	0b90 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
   8cca0:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
   8ccb0:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   8ccc0:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   8ccd0:	296c 0000 0030 0000                         l)..0...

0008ccd8 <blanks.7223>:
   8ccd8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008cce8 <zeroes.7224>:
   8cce8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008ccf8 <blanks.7217>:
   8ccf8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008cd08 <zeroes.7218>:
   8cd08:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8cd18:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   8cd28:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0008cd38 <__mprec_bigtens>:
   8cd38:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   8cd48:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   8cd58:	bf3c 7f73 4fdd 7515                         <.s..O.u

0008cd60 <__mprec_tens>:
   8cd60:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   8cd70:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   8cd80:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   8cd90:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   8cda0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   8cdb0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   8cdc0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   8cdd0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   8cde0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   8cdf0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   8ce00:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   8ce10:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   8ce20:	9db4 79d9 7843 44ea                         ...yCx.D

0008ce28 <p05.6055>:
   8ce28:	0005 0000 0019 0000 007d 0000               ........}...

0008ce34 <_ctype_>:
   8ce34:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8ce44:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8ce54:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8ce64:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8ce74:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8ce84:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8ce94:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8cea4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8ceb4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008cf38 <_init>:
   8cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf3a:	bf00      	nop
   8cf3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cf3e:	bc08      	pop	{r3}
   8cf40:	469e      	mov	lr, r3
   8cf42:	4770      	bx	lr

0008cf44 <__init_array_start>:
   8cf44:	0008926d 	.word	0x0008926d

0008cf48 <__frame_dummy_init_array_entry>:
   8cf48:	000800e1                                ....

0008cf4c <_fini>:
   8cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf4e:	bf00      	nop
   8cf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cf52:	bc08      	pop	{r3}
   8cf54:	469e      	mov	lr, r3
   8cf56:	4770      	bx	lr

0008cf58 <__fini_array_start>:
   8cf58:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	0007fffc 	.word	0x0007fffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
	...

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a21      	ldr	r2, [pc, #132]	; (20000120 <SystemInit+0x8c>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x90>)
200000b4:	4b1c      	ldr	r3, [pc, #112]	; (20000128 <SystemInit+0x94>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	461a      	mov	r2, r3
200000ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fb      	beq.n	200000ba <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4a1a      	ldr	r2, [pc, #104]	; (2000012c <SystemInit+0x98>)
200000c4:	4b18      	ldr	r3, [pc, #96]	; (20000128 <SystemInit+0x94>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	461a      	mov	r2, r3
200000ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fb      	beq.n	200000ca <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000e2:	f013 0f08 	tst.w	r3, #8
200000e6:	d0fb      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e8:	4a11      	ldr	r2, [pc, #68]	; (20000130 <SystemInit+0x9c>)
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ee:	461a      	mov	r2, r3
200000f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000f2:	f013 0f02 	tst.w	r3, #2
200000f6:	d0fb      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f8:	2211      	movs	r2, #17
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fe:	461a      	mov	r2, r3
20000100:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000102:	f013 0f08 	tst.w	r3, #8
20000106:	d0fb      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000108:	2212      	movs	r2, #18
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010e:	461a      	mov	r2, r3
20000110:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000112:	f013 0f08 	tst.w	r3, #8
20000116:	d0fb      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <SystemInit+0xa0>)
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	4770      	bx	lr
20000120:	400e0800 	.word	0x400e0800
20000124:	00370809 	.word	0x00370809
20000128:	400e0400 	.word	0x400e0400
2000012c:	01370809 	.word	0x01370809
20000130:	200f3f01 	.word	0x200f3f01
20000134:	05b8d800 	.word	0x05b8d800
20000138:	20000b64 	.word	0x20000b64

2000013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2000013c:	4b16      	ldr	r3, [pc, #88]	; (20000198 <system_init_flash+0x5c>)
2000013e:	4298      	cmp	r0, r3
20000140:	d912      	bls.n	20000168 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000142:	4b16      	ldr	r3, [pc, #88]	; (2000019c <system_init_flash+0x60>)
20000144:	4298      	cmp	r0, r3
20000146:	d916      	bls.n	20000176 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000148:	4b15      	ldr	r3, [pc, #84]	; (200001a0 <system_init_flash+0x64>)
2000014a:	4298      	cmp	r0, r3
2000014c:	d91b      	bls.n	20000186 <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000014e:	4b15      	ldr	r3, [pc, #84]	; (200001a4 <system_init_flash+0x68>)
20000150:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000152:	bf94      	ite	ls
20000154:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000158:	f44f 6380 	movhi.w	r3, #1024	; 0x400
2000015c:	4a12      	ldr	r2, [pc, #72]	; (200001a8 <system_init_flash+0x6c>)
2000015e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000160:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000164:	6013      	str	r3, [r2, #0]
20000166:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000168:	2300      	movs	r3, #0
2000016a:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <system_init_flash+0x6c>)
2000016c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000016e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000172:	6013      	str	r3, [r2, #0]
20000174:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000176:	f44f 7380 	mov.w	r3, #256	; 0x100
2000017a:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <system_init_flash+0x6c>)
2000017c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000017e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000182:	6013      	str	r3, [r2, #0]
20000184:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000186:	f44f 7300 	mov.w	r3, #512	; 0x200
2000018a:	4a07      	ldr	r2, [pc, #28]	; (200001a8 <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
20000196:	bf00      	nop
20000198:	016e35ff 	.word	0x016e35ff
2000019c:	026259ff 	.word	0x026259ff
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff
200001a8:	400e0800 	.word	0x400e0800

200001ac <udi_api_cdc_comm>:
200001ac:	000801c5 00080129 00080141 0008013d     ....)...A...=...
200001bc:	00000000                                ....

200001c0 <udi_api_cdc_data>:
200001c0:	0008050d 000803b5 00080139 0008013d     ........9...=...
200001d0:	000803a5                                ....

200001d4 <avrispmkIIfreqs>:
200001d4:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
200001e4:	0007a120 0003d090 0001e848 00017882      .......H....x..
200001f4:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
20000204:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000214:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000224:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000234:	000099f1 00009586 00008d68 0000861f     ........h.......
20000244:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000254:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000264:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000274:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
20000284:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
20000294:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200002a4:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200002b4:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200002c4:	00001be1 00001a99 0000194e 00001822     ........N..."...
200002d4:	000016f7 000015e7 000014ef 000013e5     ................
200002e4:	00001306 00001219 00001142 00001071     ........B...q...
200002f4:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
20000304:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000314:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000324:	000008d1 00000868 00000804 000007a4     ....h...........
20000334:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000344:	00000603 000005bc 00000576 00000535     ........v...5...
20000354:	000004f7 000004bc 00000483 0000044d     ............M...
20000364:	00000419 000003e8 000003b9 0000038d     ................
20000374:	00000362 0000033a 00000313 000002ee     b...:...........
20000384:	000002cb 000002aa 0000028a 0000026b     ............k...
20000394:	0000024e 00000233 00000218 000001ff     N...3...........
200003a4:	000001e7 000001d1 000001bb 000001a6     ................
200003b4:	00000192 00000180 0000016e 0000015d     ........n...]...
200003c4:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200003d4:	00000112 00000105 000000f9 000000ee     ................
200003e4:	000000e2 000000d8 000000ce 000000c4     ................
200003f4:	000000bb 000000b2 000000aa 000000a2     ................
20000404:	0000009a 00000093 0000008c 00000086     ................
20000414:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000424:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000434:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000444:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000454:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000464 <main_b_vendor_enable>:
20000464:	00000001                                ....

20000468 <mpsse_state>:
20000468:	00000000 00000200 00000000 00000000     ................
20000478:	0f000000 0e000000 0d000000 14000000     ................
20000488:	18000000 00000000 00000000 00000000     ................
	...

200004ac <usart0_driver>:
200004ac:	40090000 00000000 00000000 00000000     ...@............
	...
20000748:	00000009                                ....

2000074c <MS_BOS_PACKET>:
2000074c:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
2000075c:	65d29c4c 8a649e9d 0300009f 01014a06     L..e..d......J..
2000076c:	00000000                                ....

20000770 <MS_OS_DESC>:
20000770:	0000000a 06030000 0008014a 00000002     ........J.......
20000780:	001400a0 49570003 4253554e 00000000     ......WINUSB....
20000790:	00000000 00840000 00070004 0044002a     ............*.D.
200007a0:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
200007b0:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
200007c0:	00440049 00000073 007b0050 00410030     I.D.s...P.{.0.A.
200007d0:	00450043 00420032 00450033 0032002d     C.E.2.B.3.E.-.2.
200007e0:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
200007f0:	0032002d 00330042 002d0045 00340032     -.2.B.3.E.-.2.4.
20000800:	00320036 00410030 00450043 00420032     6.2.0.A.C.E.2.B.
20000810:	00450033 0000007d 00080000 00010002     3.E.}...........
20000820:	001400a0 49570003 4253554e 00000000     ......WINUSB....
20000830:	00000000 00840000 00070004 0044002a     ............*.D.
20000840:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000850:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000860:	00440049 00000073 007b0050 00410031     I.D.s...P.{.1.A.
20000870:	00450043 00420032 00450033 0032002d     C.E.2.B.3.E.-.2.
20000880:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
20000890:	0032002d 00330042 002d0045 00340032     -.2.B.3.E.-.2.4.
200008a0:	00320036 00410031 00450043 00420032     6.2.1.A.C.E.2.B.
200008b0:	00450033 0000007d 00000000              3.E.}.......

200008bc <udc_string_desc>:
200008bc:	00000300 00000000 00000000 00000000     ................
	...

20000900 <udc_string_desc_languageid>:
20000900:	04090304                                ....

20000904 <udc_string_manufacturer_name>:
20000904:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000914:	636e4920 0000002e                        Inc....

2000091c <udc_string_product_name>:
2000091c:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
2000092c:	00006574                                te..

20000930 <mpsse_udi_apis>:
20000930:	20000b4c 20000b4c                       L.. L.. 

20000938 <udc_config>:
20000938:	20000af0 20000958 20000af0 20000b04     ... X.. ... ... 
20000948:	20000950 00000000                       P.. ....

20000950 <udc_config_hs>:
20000950:	20000a28 20000b10                       (.. ... 

20000958 <udc_config_lsfs>:
20000958:	20000960 20000b10                       `.. ... 

20000960 <udc_desc_fs>:
20000960:	00620209 80000103 000409fa ffff0200     ..b.............
20000970:	050700ff 00400281 02050700 00004002     ......@......@..
20000980:	02010b08 00010202 00010409 01020201     ................
20000990:	00240500 24040110 24050202 05020106     ..$....$...$....
200009a0:	02030124 03830507 09100040 02000204     $.......@.......
200009b0:	0000000a 02850507 07000040 40020605     ........@......@
200009c0:	00000000                                ....

200009c4 <udc_desc_fs_mpsse>:
200009c4:	00370209 80000102 000409fa ffff0200     ..7.............
200009d4:	050700ff 00400281 02050700 00004002     ......@......@..
200009e4:	00010409 ffffff02 85050700 00020002     ................
200009f4:	02060507 00000200 00000000 00000000     ................
	...

20000a28 <udc_desc_hs>:
20000a28:	00620209 80000103 000409fa ffff0200     ..b.............
20000a38:	050700ff 02000281 02050700 00020002     ................
20000a48:	02010b08 00010202 00010409 01020201     ................
20000a58:	00240500 24040110 24050202 05020106     ..$....$...$....
20000a68:	02030124 03830507 09100040 02000204     $.......@.......
20000a78:	0000000a 02850507 07000200 00020605     ................
20000a88:	00000002                                ....

20000a8c <udc_desc_hs_mpsse>:
20000a8c:	00370209 80000102 000409fa ffff0200     ..7.............
20000a9c:	050700ff 02000281 02050700 00020002     ................
20000aac:	00010409 ffffff02 85050700 00020002     ................
20000abc:	02060507 00000200 00000000 00000000     ................
	...

20000af0 <udc_device_desc>:
20000af0:	02000112 40000000 ace22b3e 02010900     .......@>+......
20000b00:	00000103                                ....

20000b04 <udc_device_qual>:
20000b04:	0200060a 40000000 00000001              .......@....

20000b10 <udi_apis>:
20000b10:	20000b4c 200001ac 200001c0              L.. ... ... 

20000b1c <xram>:
20000b1c:	60000000                                ...`

20000b20 <ParameterTable>:
20000b20:	81000180 01900001 01019100 94170192     ................
20000b30:	03982101 01039e06 a40001a1 00200003              .!............

20000b3e <XPROG_Param_EEPageSize>:
20000b3e:	01c00020                                          .

20000b40 <XPROG_Param_NVMBase>:
20000b40:	010001c0                                ....

20000b44 <XPROG_Param_NVMCMDRegAddr>:
20000b44:	00003233                                         3

20000b45 <XPROG_Param_NVMCSRRegAddr>:
20000b45:	f4000032                                         2..

20000b48 <defaultTimeoutTicks>:
20000b48:	000001f4                                ....

20000b4c <udi_api_vendor>:
20000b4c:	00084341 00084365 0008437d 00084335     AC..eC..}C..5C..
20000b5c:	00000000                                ....

20000b60 <g_interrupt_enabled>:
20000b60:	00000001                                ....

20000b64 <SystemCoreClock>:
20000b64:	003d0900                                ..=.

20000b68 <usb_serial_number>:
20000b68:	30303030 30303030 30303030 44414544     000000000000DEAD
20000b78:	46454542 00000000 00000000 00000000     BEEF............
20000b88:	00000000                                ....

20000b8c <_impure_ptr>:
20000b8c:	20000b90                                ... 

20000b90 <impure_data>:
20000b90:	00000000 20000e7c 20000ee4 20000f4c     ....|.. ... L.. 
	...
20000c38:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000c48:	0005deec 0000000b 00000000 00000000     ................
	...

20000fb8 <__atexit_recursive_mutex>:
20000fb8:	20002894                                .(. 

20000fbc <__global_locale>:
20000fbc:	00000043 00000000 00000000 00000000     C...............
	...
20000fdc:	00000043 00000000 00000000 00000000     C...............
	...
20000ffc:	00000043 00000000 00000000 00000000     C...............
	...
2000101c:	00000043 00000000 00000000 00000000     C...............
	...
2000103c:	00000043 00000000 00000000 00000000     C...............
	...
2000105c:	00000043 00000000 00000000 00000000     C...............
	...
2000107c:	00000043 00000000 00000000 00000000     C...............
	...
2000109c:	0008bf75 0008b1cd 00000000 0008ce34     u...........4...
200010ac:	0008cd34 0008cc04 0008cc04 0008cc04     4...............
200010bc:	0008cc04 0008cc04 0008cc04 0008cc04     ................
200010cc:	0008cc04 0008cc04 ffffffff ffffffff     ................
200010dc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20001104:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20001128 <__malloc_av_>:
	...
20001130:	20001128 20001128 20001130 20001130     (.. (.. 0.. 0.. 
20001140:	20001138 20001138 20001140 20001140     8.. 8.. @.. @.. 
20001150:	20001148 20001148 20001150 20001150     H.. H.. P.. P.. 
20001160:	20001158 20001158 20001160 20001160     X.. X.. `.. `.. 
20001170:	20001168 20001168 20001170 20001170     h.. h.. p.. p.. 
20001180:	20001178 20001178 20001180 20001180     x.. x.. ... ... 
20001190:	20001188 20001188 20001190 20001190     ... ... ... ... 
200011a0:	20001198 20001198 200011a0 200011a0     ... ... ... ... 
200011b0:	200011a8 200011a8 200011b0 200011b0     ... ... ... ... 
200011c0:	200011b8 200011b8 200011c0 200011c0     ... ... ... ... 
200011d0:	200011c8 200011c8 200011d0 200011d0     ... ... ... ... 
200011e0:	200011d8 200011d8 200011e0 200011e0     ... ... ... ... 
200011f0:	200011e8 200011e8 200011f0 200011f0     ... ... ... ... 
20001200:	200011f8 200011f8 20001200 20001200     ... ... ... ... 
20001210:	20001208 20001208 20001210 20001210     ... ... ... ... 
20001220:	20001218 20001218 20001220 20001220     ... ...  ..  .. 
20001230:	20001228 20001228 20001230 20001230     (.. (.. 0.. 0.. 
20001240:	20001238 20001238 20001240 20001240     8.. 8.. @.. @.. 
20001250:	20001248 20001248 20001250 20001250     H.. H.. P.. P.. 
20001260:	20001258 20001258 20001260 20001260     X.. X.. `.. `.. 
20001270:	20001268 20001268 20001270 20001270     h.. h.. p.. p.. 
20001280:	20001278 20001278 20001280 20001280     x.. x.. ... ... 
20001290:	20001288 20001288 20001290 20001290     ... ... ... ... 
200012a0:	20001298 20001298 200012a0 200012a0     ... ... ... ... 
200012b0:	200012a8 200012a8 200012b0 200012b0     ... ... ... ... 
200012c0:	200012b8 200012b8 200012c0 200012c0     ... ... ... ... 
200012d0:	200012c8 200012c8 200012d0 200012d0     ... ... ... ... 
200012e0:	200012d8 200012d8 200012e0 200012e0     ... ... ... ... 
200012f0:	200012e8 200012e8 200012f0 200012f0     ... ... ... ... 
20001300:	200012f8 200012f8 20001300 20001300     ... ... ... ... 
20001310:	20001308 20001308 20001310 20001310     ... ... ... ... 
20001320:	20001318 20001318 20001320 20001320     ... ...  ..  .. 
20001330:	20001328 20001328 20001330 20001330     (.. (.. 0.. 0.. 
20001340:	20001338 20001338 20001340 20001340     8.. 8.. @.. @.. 
20001350:	20001348 20001348 20001350 20001350     H.. H.. P.. P.. 
20001360:	20001358 20001358 20001360 20001360     X.. X.. `.. `.. 
20001370:	20001368 20001368 20001370 20001370     h.. h.. p.. p.. 
20001380:	20001378 20001378 20001380 20001380     x.. x.. ... ... 
20001390:	20001388 20001388 20001390 20001390     ... ... ... ... 
200013a0:	20001398 20001398 200013a0 200013a0     ... ... ... ... 
200013b0:	200013a8 200013a8 200013b0 200013b0     ... ... ... ... 
200013c0:	200013b8 200013b8 200013c0 200013c0     ... ... ... ... 
200013d0:	200013c8 200013c8 200013d0 200013d0     ... ... ... ... 
200013e0:	200013d8 200013d8 200013e0 200013e0     ... ... ... ... 
200013f0:	200013e8 200013e8 200013f0 200013f0     ... ... ... ... 
20001400:	200013f8 200013f8 20001400 20001400     ... ... ... ... 
20001410:	20001408 20001408 20001410 20001410     ... ... ... ... 
20001420:	20001418 20001418 20001420 20001420     ... ...  ..  .. 
20001430:	20001428 20001428 20001430 20001430     (.. (.. 0.. 0.. 
20001440:	20001438 20001438 20001440 20001440     8.. 8.. @.. @.. 
20001450:	20001448 20001448 20001450 20001450     H.. H.. P.. P.. 
20001460:	20001458 20001458 20001460 20001460     X.. X.. `.. `.. 
20001470:	20001468 20001468 20001470 20001470     h.. h.. p.. p.. 
20001480:	20001478 20001478 20001480 20001480     x.. x.. ... ... 
20001490:	20001488 20001488 20001490 20001490     ... ... ... ... 
200014a0:	20001498 20001498 200014a0 200014a0     ... ... ... ... 
200014b0:	200014a8 200014a8 200014b0 200014b0     ... ... ... ... 
200014c0:	200014b8 200014b8 200014c0 200014c0     ... ... ... ... 
200014d0:	200014c8 200014c8 200014d0 200014d0     ... ... ... ... 
200014e0:	200014d8 200014d8 200014e0 200014e0     ... ... ... ... 
200014f0:	200014e8 200014e8 200014f0 200014f0     ... ... ... ... 
20001500:	200014f8 200014f8 20001500 20001500     ... ... ... ... 
20001510:	20001508 20001508 20001510 20001510     ... ... ... ... 
20001520:	20001518 20001518 20001520 20001520     ... ...  ..  .. 

20001530 <__malloc_sbrk_base>:
20001530:	ffffffff                                ....

20001534 <__malloc_trim_threshold>:
20001534:	00020000                                ....
