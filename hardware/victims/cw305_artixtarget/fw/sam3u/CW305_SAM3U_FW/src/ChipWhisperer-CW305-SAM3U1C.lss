
ChipWhisperer-CW305-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c644  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008c644  0008c644  0001c644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d98  20000000  0008c64c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000c1c  20000d98  0008d3e4  00020d98  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020d98  2**0
                  CONTENTS, READONLY
  6 .comment      00000049  00000000  00000000  00020dc1  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001bf43  00000000  00000000  00020e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00005887  00000000  00000000  0003cd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000bc07  00000000  00000000  000425d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001500  00000000  00000000  0004e1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001720  00000000  00000000  0004f6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00021945  00000000  00000000  00050dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0002775d  00000000  00000000  00072740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005e86c  00000000  00000000  00099e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  000045f4  00000000  00000000  000f870c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 d1 44 08 00 31 4c 08 00 31 4c 08 00     .@. .D..1L..1L..
   80010:	31 4c 08 00 31 4c 08 00 31 4c 08 00 00 00 00 00     1L..1L..1L......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 31 4c 08 00     ............1L..
   80030:	31 4c 08 00 00 00 00 00 31 4c 08 00 31 4c 08 00     1L......1L..1L..
   80040:	31 4c 08 00 31 4c 08 00 31 4c 08 00 31 4c 08 00     1L..1L..1L..1L..
   80050:	31 4c 08 00 31 4c 08 00 31 4c 08 00 31 4c 08 00     1L..1L..1L..1L..
   80060:	31 4c 08 00 31 4c 08 00 fd 2e 08 00 11 2f 08 00     1L..1L......./..
   80070:	25 2f 08 00 31 4c 08 00 31 4c 08 00 31 4c 08 00     %/..1L..1L..1L..
   80080:	31 4c 08 00 31 4c 08 00 31 4c 08 00 31 4c 08 00     1L..1L..1L..1L..
   80090:	31 4c 08 00 31 4c 08 00 55 17 08 00 31 4c 08 00     1L..1L..U...1L..
   800a0:	31 4c 08 00 31 4c 08 00 31 4c 08 00 31 4c 08 00     1L..1L..1L..1L..
   800b0:	31 4c 08 00 79 39 08 00 31 4c 08 00                 1L..y9..1L..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000d98 	.word	0x20000d98
   800d8:	00000000 	.word	0x00000000
   800dc:	0008c64c 	.word	0x0008c64c

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000d9c 	.word	0x20000d9c
   800f8:	0008c64c 	.word	0x0008c64c

000800fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   800fc:	b530      	push	{r4, r5, lr}
   800fe:	b083      	sub	sp, #12
   80100:	4604      	mov	r4, r0
   80102:	460d      	mov	r5, r1
	uint32_t val = 0;
   80104:	2300      	movs	r3, #0
   80106:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80108:	4b1f      	ldr	r3, [pc, #124]	; (80188 <usart_serial_getchar+0x8c>)
   8010a:	4298      	cmp	r0, r3
   8010c:	d00d      	beq.n	8012a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8010e:	4b1f      	ldr	r3, [pc, #124]	; (8018c <usart_serial_getchar+0x90>)
   80110:	429c      	cmp	r4, r3
   80112:	d011      	beq.n	80138 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80114:	4b1e      	ldr	r3, [pc, #120]	; (80190 <usart_serial_getchar+0x94>)
   80116:	429c      	cmp	r4, r3
   80118:	d018      	beq.n	8014c <usart_serial_getchar+0x50>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8011a:	4b1e      	ldr	r3, [pc, #120]	; (80194 <usart_serial_getchar+0x98>)
   8011c:	429c      	cmp	r4, r3
   8011e:	d01f      	beq.n	80160 <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80120:	4b1d      	ldr	r3, [pc, #116]	; (80198 <usart_serial_getchar+0x9c>)
   80122:	429c      	cmp	r4, r3
   80124:	d026      	beq.n	80174 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80126:	b003      	add	sp, #12
   80128:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
   8012a:	4629      	mov	r1, r5
   8012c:	4620      	mov	r0, r4
   8012e:	4b1b      	ldr	r3, [pc, #108]	; (8019c <usart_serial_getchar+0xa0>)
   80130:	4798      	blx	r3
   80132:	2800      	cmp	r0, #0
   80134:	d1f9      	bne.n	8012a <usart_serial_getchar+0x2e>
   80136:	e7ea      	b.n	8010e <usart_serial_getchar+0x12>
		while (usart_read(p_usart, &val));
   80138:	a901      	add	r1, sp, #4
   8013a:	4620      	mov	r0, r4
   8013c:	4b18      	ldr	r3, [pc, #96]	; (801a0 <usart_serial_getchar+0xa4>)
   8013e:	4798      	blx	r3
   80140:	2800      	cmp	r0, #0
   80142:	d1f9      	bne.n	80138 <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
   80144:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80148:	702b      	strb	r3, [r5, #0]
   8014a:	e7e3      	b.n	80114 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
   8014c:	a901      	add	r1, sp, #4
   8014e:	4620      	mov	r0, r4
   80150:	4b13      	ldr	r3, [pc, #76]	; (801a0 <usart_serial_getchar+0xa4>)
   80152:	4798      	blx	r3
   80154:	2800      	cmp	r0, #0
   80156:	d1f9      	bne.n	8014c <usart_serial_getchar+0x50>
		*data = (uint8_t)(val & 0xFF);
   80158:	f89d 3004 	ldrb.w	r3, [sp, #4]
   8015c:	702b      	strb	r3, [r5, #0]
   8015e:	e7dc      	b.n	8011a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80160:	a901      	add	r1, sp, #4
   80162:	4620      	mov	r0, r4
   80164:	4b0e      	ldr	r3, [pc, #56]	; (801a0 <usart_serial_getchar+0xa4>)
   80166:	4798      	blx	r3
   80168:	2800      	cmp	r0, #0
   8016a:	d1f9      	bne.n	80160 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
   8016c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80170:	702b      	strb	r3, [r5, #0]
   80172:	e7d5      	b.n	80120 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80174:	a901      	add	r1, sp, #4
   80176:	4620      	mov	r0, r4
   80178:	4b09      	ldr	r3, [pc, #36]	; (801a0 <usart_serial_getchar+0xa4>)
   8017a:	4798      	blx	r3
   8017c:	2800      	cmp	r0, #0
   8017e:	d1f9      	bne.n	80174 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   80180:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80184:	702b      	strb	r3, [r5, #0]
}
   80186:	e7ce      	b.n	80126 <usart_serial_getchar+0x2a>
   80188:	400e0600 	.word	0x400e0600
   8018c:	40090000 	.word	0x40090000
   80190:	40094000 	.word	0x40094000
   80194:	40098000 	.word	0x40098000
   80198:	4009c000 	.word	0x4009c000
   8019c:	00084ec7 	.word	0x00084ec7
   801a0:	00082cf1 	.word	0x00082cf1

000801a4 <usart_serial_putchar>:
{
   801a4:	b538      	push	{r3, r4, r5, lr}
   801a6:	4604      	mov	r4, r0
   801a8:	460d      	mov	r5, r1
	if (UART == (Uart*)p_usart) {
   801aa:	4b1c      	ldr	r3, [pc, #112]	; (8021c <usart_serial_putchar+0x78>)
   801ac:	4298      	cmp	r0, r3
   801ae:	d00d      	beq.n	801cc <usart_serial_putchar+0x28>
	if (USART0 == p_usart) {
   801b0:	4b1b      	ldr	r3, [pc, #108]	; (80220 <usart_serial_putchar+0x7c>)
   801b2:	4298      	cmp	r0, r3
   801b4:	d012      	beq.n	801dc <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   801b6:	4b1b      	ldr	r3, [pc, #108]	; (80224 <usart_serial_putchar+0x80>)
   801b8:	4298      	cmp	r0, r3
   801ba:	d017      	beq.n	801ec <usart_serial_putchar+0x48>
	if (USART2 == p_usart) {
   801bc:	4b1a      	ldr	r3, [pc, #104]	; (80228 <usart_serial_putchar+0x84>)
   801be:	4298      	cmp	r0, r3
   801c0:	d01c      	beq.n	801fc <usart_serial_putchar+0x58>
	if (USART3 == p_usart) {
   801c2:	4b1a      	ldr	r3, [pc, #104]	; (8022c <usart_serial_putchar+0x88>)
   801c4:	4298      	cmp	r0, r3
   801c6:	d021      	beq.n	8020c <usart_serial_putchar+0x68>
	return 0;
   801c8:	2000      	movs	r0, #0
}
   801ca:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   801cc:	4629      	mov	r1, r5
   801ce:	4620      	mov	r0, r4
   801d0:	4b17      	ldr	r3, [pc, #92]	; (80230 <usart_serial_putchar+0x8c>)
   801d2:	4798      	blx	r3
   801d4:	2800      	cmp	r0, #0
   801d6:	d1f9      	bne.n	801cc <usart_serial_putchar+0x28>
		return 1;
   801d8:	2001      	movs	r0, #1
   801da:	e7f6      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   801dc:	4629      	mov	r1, r5
   801de:	4620      	mov	r0, r4
   801e0:	4b14      	ldr	r3, [pc, #80]	; (80234 <usart_serial_putchar+0x90>)
   801e2:	4798      	blx	r3
   801e4:	2800      	cmp	r0, #0
   801e6:	d1f9      	bne.n	801dc <usart_serial_putchar+0x38>
		return 1;
   801e8:	2001      	movs	r0, #1
   801ea:	e7ee      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   801ec:	4629      	mov	r1, r5
   801ee:	4620      	mov	r0, r4
   801f0:	4b10      	ldr	r3, [pc, #64]	; (80234 <usart_serial_putchar+0x90>)
   801f2:	4798      	blx	r3
   801f4:	2800      	cmp	r0, #0
   801f6:	d1f9      	bne.n	801ec <usart_serial_putchar+0x48>
		return 1;
   801f8:	2001      	movs	r0, #1
   801fa:	e7e6      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   801fc:	4629      	mov	r1, r5
   801fe:	4620      	mov	r0, r4
   80200:	4b0c      	ldr	r3, [pc, #48]	; (80234 <usart_serial_putchar+0x90>)
   80202:	4798      	blx	r3
   80204:	2800      	cmp	r0, #0
   80206:	d1f9      	bne.n	801fc <usart_serial_putchar+0x58>
		return 1;
   80208:	2001      	movs	r0, #1
   8020a:	e7de      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   8020c:	4629      	mov	r1, r5
   8020e:	4620      	mov	r0, r4
   80210:	4b08      	ldr	r3, [pc, #32]	; (80234 <usart_serial_putchar+0x90>)
   80212:	4798      	blx	r3
   80214:	2800      	cmp	r0, #0
   80216:	d1f9      	bne.n	8020c <usart_serial_putchar+0x68>
		return 1;
   80218:	2001      	movs	r0, #1
   8021a:	e7d6      	b.n	801ca <usart_serial_putchar+0x26>
   8021c:	400e0600 	.word	0x400e0600
   80220:	40090000 	.word	0x40090000
   80224:	40094000 	.word	0x40094000
   80228:	40098000 	.word	0x40098000
   8022c:	4009c000 	.word	0x4009c000
   80230:	00084eb5 	.word	0x00084eb5
   80234:	00082cc9 	.word	0x00082cc9

00080238 <configure_console>:

/**
 *  Configure UART console.
 */
static void configure_console(void)
{
   80238:	b570      	push	{r4, r5, r6, lr}
   8023a:	b08e      	sub	sp, #56	; 0x38
	const usart_serial_options_t uart_serial_options = {
   8023c:	2400      	movs	r4, #0
   8023e:	940a      	str	r4, [sp, #40]	; 0x28
   80240:	940b      	str	r4, [sp, #44]	; 0x2c
   80242:	940c      	str	r4, [sp, #48]	; 0x30
   80244:	940d      	str	r4, [sp, #52]	; 0x34
   80246:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8024a:	930a      	str	r3, [sp, #40]	; 0x28
   8024c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80250:	930c      	str	r3, [sp, #48]	; 0x30
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80252:	2008      	movs	r0, #8
   80254:	4e15      	ldr	r6, [pc, #84]	; (802ac <configure_console+0x74>)
   80256:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80258:	4d15      	ldr	r5, [pc, #84]	; (802b0 <configure_console+0x78>)
   8025a:	4b16      	ldr	r3, [pc, #88]	; (802b4 <configure_console+0x7c>)
   8025c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8025e:	4b16      	ldr	r3, [pc, #88]	; (802b8 <configure_console+0x80>)
   80260:	4a16      	ldr	r2, [pc, #88]	; (802bc <configure_console+0x84>)
   80262:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80264:	4b16      	ldr	r3, [pc, #88]	; (802c0 <configure_console+0x88>)
   80266:	4a17      	ldr	r2, [pc, #92]	; (802c4 <configure_console+0x8c>)
   80268:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8026a:	4b17      	ldr	r3, [pc, #92]	; (802c8 <configure_console+0x90>)
   8026c:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8026e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80270:	9202      	str	r2, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   80274:	9303      	str	r3, [sp, #12]
	usart_settings.baudrate = opt->baudrate;
   80276:	9204      	str	r2, [sp, #16]
	usart_settings.char_length = opt->charlength;
   80278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8027a:	9205      	str	r2, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
   8027c:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
   8027e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   80282:	9307      	str	r3, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   80284:	9408      	str	r4, [sp, #32]
   80286:	2008      	movs	r0, #8
   80288:	47b0      	blx	r6
		uart_init((Uart*)p_usart, &uart_settings);
   8028a:	a901      	add	r1, sp, #4
   8028c:	4628      	mov	r0, r5
   8028e:	4b0f      	ldr	r3, [pc, #60]	; (802cc <configure_console+0x94>)
   80290:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80292:	4e0f      	ldr	r6, [pc, #60]	; (802d0 <configure_console+0x98>)
   80294:	6833      	ldr	r3, [r6, #0]
   80296:	4621      	mov	r1, r4
   80298:	6898      	ldr	r0, [r3, #8]
   8029a:	4d0e      	ldr	r5, [pc, #56]	; (802d4 <configure_console+0x9c>)
   8029c:	47a8      	blx	r5
	setbuf(stdin, NULL);
   8029e:	6833      	ldr	r3, [r6, #0]
   802a0:	4621      	mov	r1, r4
   802a2:	6858      	ldr	r0, [r3, #4]
   802a4:	47a8      	blx	r5
	};
	
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}
   802a6:	b00e      	add	sp, #56	; 0x38
   802a8:	bd70      	pop	{r4, r5, r6, pc}
   802aa:	bf00      	nop
   802ac:	000847d5 	.word	0x000847d5
   802b0:	400e0600 	.word	0x400e0600
   802b4:	2000194c 	.word	0x2000194c
   802b8:	20001948 	.word	0x20001948
   802bc:	000801a5 	.word	0x000801a5
   802c0:	20001960 	.word	0x20001960
   802c4:	000800fd 	.word	0x000800fd
   802c8:	05b8d800 	.word	0x05b8d800
   802cc:	00084e81 	.word	0x00084e81
   802d0:	200003e8 	.word	0x200003e8
   802d4:	0008535d 	.word	0x0008535d

000802d8 <fpga_pins>:
{
   802d8:	b570      	push	{r4, r5, r6, lr}
   802da:	4604      	mov	r4, r0
	gpio_configure_pin(PIO_PB22_IDX, PIO_OUTPUT_0);
   802dc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   802e0:	2036      	movs	r0, #54	; 0x36
   802e2:	4d95      	ldr	r5, [pc, #596]	; (80538 <fpga_pins+0x260>)
   802e4:	47a8      	blx	r5
	gpio_configure_pin(PIO_PB18_IDX, PIO_OUTPUT_0);
   802e6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   802ea:	2032      	movs	r0, #50	; 0x32
   802ec:	47a8      	blx	r5
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   802ee:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   802f2:	2007      	movs	r0, #7
   802f4:	47a8      	blx	r5
	if (enabled){
   802f6:	2c00      	cmp	r4, #0
   802f8:	d07e      	beq.n	803f8 <fpga_pins+0x120>
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   802fa:	4d90      	ldr	r5, [pc, #576]	; (8053c <fpga_pins+0x264>)
   802fc:	4629      	mov	r1, r5
   802fe:	2029      	movs	r0, #41	; 0x29
   80300:	4c8d      	ldr	r4, [pc, #564]	; (80538 <fpga_pins+0x260>)
   80302:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80304:	4629      	mov	r1, r5
   80306:	202a      	movs	r0, #42	; 0x2a
   80308:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   8030a:	4629      	mov	r1, r5
   8030c:	202b      	movs	r0, #43	; 0x2b
   8030e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80310:	4629      	mov	r1, r5
   80312:	202c      	movs	r0, #44	; 0x2c
   80314:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80316:	4629      	mov	r1, r5
   80318:	202d      	movs	r0, #45	; 0x2d
   8031a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   8031c:	4629      	mov	r1, r5
   8031e:	202e      	movs	r0, #46	; 0x2e
   80320:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80322:	4629      	mov	r1, r5
   80324:	202f      	movs	r0, #47	; 0x2f
   80326:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80328:	4629      	mov	r1, r5
   8032a:	2030      	movs	r0, #48	; 0x30
   8032c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8032e:	4629      	mov	r1, r5
   80330:	2033      	movs	r0, #51	; 0x33
   80332:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80334:	4629      	mov	r1, r5
   80336:	2037      	movs	r0, #55	; 0x37
   80338:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8033a:	4629      	mov	r1, r5
   8033c:	2034      	movs	r0, #52	; 0x34
   8033e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_DATA_BUS_FLAG2);
   80340:	4e7f      	ldr	r6, [pc, #508]	; (80540 <fpga_pins+0x268>)
   80342:	4631      	mov	r1, r6
   80344:	2027      	movs	r0, #39	; 0x27
   80346:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_DATA_BUS_FLAG2);
   80348:	4631      	mov	r1, r6
   8034a:	2028      	movs	r0, #40	; 0x28
   8034c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_DATA_BUS_FLAG1);
   8034e:	4629      	mov	r1, r5
   80350:	2040      	movs	r0, #64	; 0x40
   80352:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_DATA_BUS_FLAG1);
   80354:	4629      	mov	r1, r5
   80356:	2041      	movs	r0, #65	; 0x41
   80358:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_DATA_BUS_FLAG1);
   8035a:	4629      	mov	r1, r5
   8035c:	2042      	movs	r0, #66	; 0x42
   8035e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_DATA_BUS_FLAG1);
   80360:	4629      	mov	r1, r5
   80362:	2043      	movs	r0, #67	; 0x43
   80364:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_DATA_BUS_FLAG1);
   80366:	4629      	mov	r1, r5
   80368:	2044      	movs	r0, #68	; 0x44
   8036a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_DATA_BUS_FLAG1);
   8036c:	4629      	mov	r1, r5
   8036e:	2045      	movs	r0, #69	; 0x45
   80370:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_DATA_BUS_FLAG1);
   80372:	4629      	mov	r1, r5
   80374:	2046      	movs	r0, #70	; 0x46
   80376:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_DATA_BUS_FLAG1);
   80378:	4629      	mov	r1, r5
   8037a:	2047      	movs	r0, #71	; 0x47
   8037c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_DATA_BUS_FLAG1);
   8037e:	4629      	mov	r1, r5
   80380:	2048      	movs	r0, #72	; 0x48
   80382:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_DATA_BUS_FLAG1);
   80384:	4629      	mov	r1, r5
   80386:	2049      	movs	r0, #73	; 0x49
   80388:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_DATA_BUS_FLAG1);
   8038a:	4629      	mov	r1, r5
   8038c:	204a      	movs	r0, #74	; 0x4a
   8038e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_DATA_BUS_FLAG1);
   80390:	4629      	mov	r1, r5
   80392:	204b      	movs	r0, #75	; 0x4b
   80394:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_DATA_BUS_FLAG1);
   80396:	4629      	mov	r1, r5
   80398:	2054      	movs	r0, #84	; 0x54
   8039a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_DATA_BUS_FLAG1);
   8039c:	4629      	mov	r1, r5
   8039e:	2055      	movs	r0, #85	; 0x55
   803a0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_DATA_BUS_FLAG1);
   803a2:	4629      	mov	r1, r5
   803a4:	2056      	movs	r0, #86	; 0x56
   803a6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_DATA_BUS_FLAG1);
   803a8:	4629      	mov	r1, r5
   803aa:	2057      	movs	r0, #87	; 0x57
   803ac:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_DATA_BUS_FLAG1);
   803ae:	4629      	mov	r1, r5
   803b0:	2058      	movs	r0, #88	; 0x58
   803b2:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
   803b4:	4629      	mov	r1, r5
   803b6:	2059      	movs	r0, #89	; 0x59
   803b8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_DATA_BUS_FLAG1);
   803ba:	4629      	mov	r1, r5
   803bc:	205a      	movs	r0, #90	; 0x5a
   803be:	47a0      	blx	r4
		FPGA_NPROG_SETUP();
   803c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803c4:	2008      	movs	r0, #8
   803c6:	47a0      	blx	r4
		FPGA_NPROG_HIGH();
   803c8:	2008      	movs	r0, #8
   803ca:	4b5e      	ldr	r3, [pc, #376]	; (80544 <fpga_pins+0x26c>)
   803cc:	4798      	blx	r3
		gpio_configure_pin(FPGA_TRIGGER_GPIO, FPGA_TRIGGER_FLAGS);
   803ce:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   803d2:	2031      	movs	r0, #49	; 0x31
   803d4:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIN_FPGA_PROGRAM_FLAGS);
   803d6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803da:	2008      	movs	r0, #8
   803dc:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   803de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803e2:	200d      	movs	r0, #13
   803e4:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   803e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803ea:	200e      	movs	r0, #14
   803ec:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   803ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803f2:	200f      	movs	r0, #15
   803f4:	47a0      	blx	r4
}
   803f6:	bd70      	pop	{r4, r5, r6, pc}
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIO_INPUT);
   803f8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803fc:	2029      	movs	r0, #41	; 0x29
   803fe:	4c4e      	ldr	r4, [pc, #312]	; (80538 <fpga_pins+0x260>)
   80400:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIO_INPUT);
   80402:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80406:	202a      	movs	r0, #42	; 0x2a
   80408:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIO_INPUT);
   8040a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8040e:	202b      	movs	r0, #43	; 0x2b
   80410:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIO_INPUT);
   80412:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80416:	202c      	movs	r0, #44	; 0x2c
   80418:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIO_INPUT);
   8041a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8041e:	202d      	movs	r0, #45	; 0x2d
   80420:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIO_INPUT);
   80422:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80426:	202e      	movs	r0, #46	; 0x2e
   80428:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIO_INPUT);
   8042a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8042e:	202f      	movs	r0, #47	; 0x2f
   80430:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIO_INPUT);
   80432:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80436:	2030      	movs	r0, #48	; 0x30
   80438:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIO_INPUT);
   8043a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8043e:	2033      	movs	r0, #51	; 0x33
   80440:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIO_INPUT);
   80442:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80446:	2037      	movs	r0, #55	; 0x37
   80448:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIO_INPUT);
   8044a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8044e:	2034      	movs	r0, #52	; 0x34
   80450:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIO_INPUT);
   80452:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80456:	2027      	movs	r0, #39	; 0x27
   80458:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIO_INPUT);
   8045a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8045e:	2028      	movs	r0, #40	; 0x28
   80460:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIO_INPUT);
   80462:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80466:	2040      	movs	r0, #64	; 0x40
   80468:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIO_INPUT);
   8046a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8046e:	2041      	movs	r0, #65	; 0x41
   80470:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIO_INPUT);
   80472:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80476:	2042      	movs	r0, #66	; 0x42
   80478:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIO_INPUT);
   8047a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8047e:	2043      	movs	r0, #67	; 0x43
   80480:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIO_INPUT);
   80482:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80486:	2044      	movs	r0, #68	; 0x44
   80488:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIO_INPUT);
   8048a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8048e:	2045      	movs	r0, #69	; 0x45
   80490:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIO_INPUT);
   80492:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80496:	2046      	movs	r0, #70	; 0x46
   80498:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIO_INPUT);
   8049a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8049e:	2047      	movs	r0, #71	; 0x47
   804a0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIO_INPUT);
   804a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804a6:	2048      	movs	r0, #72	; 0x48
   804a8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIO_INPUT);
   804aa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804ae:	2049      	movs	r0, #73	; 0x49
   804b0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIO_INPUT);
   804b2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804b6:	204a      	movs	r0, #74	; 0x4a
   804b8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIO_INPUT);
   804ba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804be:	204b      	movs	r0, #75	; 0x4b
   804c0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIO_INPUT);
   804c2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804c6:	2054      	movs	r0, #84	; 0x54
   804c8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIO_INPUT);
   804ca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804ce:	2055      	movs	r0, #85	; 0x55
   804d0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIO_INPUT);
   804d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804d6:	2056      	movs	r0, #86	; 0x56
   804d8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIO_INPUT);
   804da:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804de:	2057      	movs	r0, #87	; 0x57
   804e0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIO_INPUT);
   804e2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804e6:	2058      	movs	r0, #88	; 0x58
   804e8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIO_INPUT);
   804ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804ee:	2059      	movs	r0, #89	; 0x59
   804f0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIO_INPUT);	
   804f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804f6:	205a      	movs	r0, #90	; 0x5a
   804f8:	47a0      	blx	r4
		gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, PIO_INPUT);
   804fa:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
   804fe:	21ff      	movs	r1, #255	; 0xff
   80500:	4811      	ldr	r0, [pc, #68]	; (80548 <fpga_pins+0x270>)
   80502:	4b12      	ldr	r3, [pc, #72]	; (8054c <fpga_pins+0x274>)
   80504:	4798      	blx	r3
		gpio_configure_pin(FPGA_ALE_GPIO, PIO_INPUT);
   80506:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8050a:	2035      	movs	r0, #53	; 0x35
   8050c:	47a0      	blx	r4
		gpio_configure_pin(FPGA_TRIGGER_GPIO, PIO_INPUT);
   8050e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80512:	2031      	movs	r0, #49	; 0x31
   80514:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIO_INPUT);
   80516:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8051a:	2008      	movs	r0, #8
   8051c:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT);
   8051e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80522:	200d      	movs	r0, #13
   80524:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT);
   80526:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8052a:	200e      	movs	r0, #14
   8052c:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT);
   8052e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80532:	200f      	movs	r0, #15
   80534:	47a0      	blx	r4
}
   80536:	e75e      	b.n	803f6 <fpga_pins+0x11e>
   80538:	00084b59 	.word	0x00084b59
   8053c:	08000001 	.word	0x08000001
   80540:	10000001 	.word	0x10000001
   80544:	00084b21 	.word	0x00084b21
   80548:	400e0e00 	.word	0x400e0e00
   8054c:	00084a4d 	.word	0x00084a4d

00080550 <main>:
{
   80550:	b5f0      	push	{r4, r5, r6, r7, lr}
   80552:	b085      	sub	sp, #20
	flash_read_unique_id(serial_number, sizeof(serial_number));
   80554:	2110      	movs	r1, #16
   80556:	4668      	mov	r0, sp
   80558:	4b37      	ldr	r3, [pc, #220]	; (80638 <main+0xe8>)
   8055a:	4798      	blx	r3
	configure_console();
   8055c:	4b37      	ldr	r3, [pc, #220]	; (8063c <main+0xec>)
   8055e:	4798      	blx	r3
	cpu_irq_enable();
   80560:	4b37      	ldr	r3, [pc, #220]	; (80640 <main+0xf0>)
   80562:	2201      	movs	r2, #1
   80564:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80566:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8056a:	b662      	cpsie	i
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8056c:	2300      	movs	r3, #0
}
   8056e:	e004      	b.n	8057a <main+0x2a>
		sleepmgr_locks[i] = 0;
   80570:	4a34      	ldr	r2, [pc, #208]	; (80644 <main+0xf4>)
   80572:	2100      	movs	r1, #0
   80574:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80576:	3301      	adds	r3, #1
   80578:	b2db      	uxtb	r3, r3
   8057a:	2b04      	cmp	r3, #4
   8057c:	d9f8      	bls.n	80570 <main+0x20>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   8057e:	4b31      	ldr	r3, [pc, #196]	; (80644 <main+0xf4>)
   80580:	2201      	movs	r2, #1
   80582:	715a      	strb	r2, [r3, #5]
	sysclk_init();
   80584:	4b30      	ldr	r3, [pc, #192]	; (80648 <main+0xf8>)
   80586:	4798      	blx	r3
	board_init();
   80588:	4b30      	ldr	r3, [pc, #192]	; (8064c <main+0xfc>)
   8058a:	4798      	blx	r3
	fpga_program_init();
   8058c:	4b30      	ldr	r3, [pc, #192]	; (80650 <main+0x100>)
   8058e:	4798      	blx	r3
	tps56520_init();
   80590:	4b30      	ldr	r3, [pc, #192]	; (80654 <main+0x104>)
   80592:	4798      	blx	r3
	cdce906_init();
   80594:	4b30      	ldr	r3, [pc, #192]	; (80658 <main+0x108>)
   80596:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80598:	2400      	movs	r4, #0
   8059a:	e00b      	b.n	805b4 <main+0x64>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   8059c:	ab04      	add	r3, sp, #16
   8059e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   805a2:	f853 2c10 	ldr.w	r2, [r3, #-16]
   805a6:	492d      	ldr	r1, [pc, #180]	; (8065c <main+0x10c>)
   805a8:	482d      	ldr	r0, [pc, #180]	; (80660 <main+0x110>)
   805aa:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   805ae:	4b2d      	ldr	r3, [pc, #180]	; (80664 <main+0x114>)
   805b0:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   805b2:	3401      	adds	r4, #1
   805b4:	2c03      	cmp	r4, #3
   805b6:	d9f1      	bls.n	8059c <main+0x4c>
	usb_serial_number[32] = 0;
   805b8:	4e29      	ldr	r6, [pc, #164]	; (80660 <main+0x110>)
   805ba:	2400      	movs	r4, #0
   805bc:	f886 4020 	strb.w	r4, [r6, #32]
	printf("ChipWhisperer-CW305 Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   805c0:	4a29      	ldr	r2, [pc, #164]	; (80668 <main+0x118>)
   805c2:	492a      	ldr	r1, [pc, #168]	; (8066c <main+0x11c>)
   805c4:	482a      	ldr	r0, [pc, #168]	; (80670 <main+0x120>)
   805c6:	4d2b      	ldr	r5, [pc, #172]	; (80674 <main+0x124>)
   805c8:	47a8      	blx	r5
	printf("Serial number: %s\n", usb_serial_number);
   805ca:	4631      	mov	r1, r6
   805cc:	482a      	ldr	r0, [pc, #168]	; (80678 <main+0x128>)
   805ce:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_SMC);	
   805d0:	2009      	movs	r0, #9
   805d2:	4b2a      	ldr	r3, [pc, #168]	; (8067c <main+0x12c>)
   805d4:	4798      	blx	r3
	fpga_pins(true);
   805d6:	2001      	movs	r0, #1
   805d8:	4f29      	ldr	r7, [pc, #164]	; (80680 <main+0x130>)
   805da:	47b8      	blx	r7
	printf("Setting up FPGA Communication\n");
   805dc:	4829      	ldr	r0, [pc, #164]	; (80684 <main+0x134>)
   805de:	47a8      	blx	r5
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   805e0:	4e29      	ldr	r6, [pc, #164]	; (80688 <main+0x138>)
   805e2:	4a2a      	ldr	r2, [pc, #168]	; (8068c <main+0x13c>)
   805e4:	4621      	mov	r1, r4
   805e6:	4630      	mov	r0, r6
   805e8:	4b29      	ldr	r3, [pc, #164]	; (80690 <main+0x140>)
   805ea:	4798      	blx	r3
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(3)
   805ec:	4a29      	ldr	r2, [pc, #164]	; (80694 <main+0x144>)
   805ee:	4621      	mov	r1, r4
   805f0:	4630      	mov	r0, r6
   805f2:	4b29      	ldr	r3, [pc, #164]	; (80698 <main+0x148>)
   805f4:	4798      	blx	r3
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(4)
   805f6:	f04f 1204 	mov.w	r2, #262148	; 0x40004
   805fa:	4621      	mov	r1, r4
   805fc:	4630      	mov	r0, r6
   805fe:	4b27      	ldr	r3, [pc, #156]	; (8069c <main+0x14c>)
   80600:	4798      	blx	r3
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80602:	2203      	movs	r2, #3
   80604:	4621      	mov	r1, r4
   80606:	4630      	mov	r0, r6
   80608:	4b25      	ldr	r3, [pc, #148]	; (806a0 <main+0x150>)
   8060a:	4798      	blx	r3
	ui_init();
   8060c:	4b25      	ldr	r3, [pc, #148]	; (806a4 <main+0x154>)
   8060e:	4798      	blx	r3
	udc_start();
   80610:	4b25      	ldr	r3, [pc, #148]	; (806a8 <main+0x158>)
   80612:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80614:	2204      	movs	r2, #4
   80616:	4b25      	ldr	r3, [pc, #148]	; (806ac <main+0x15c>)
   80618:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   8061a:	4620      	mov	r0, r4
   8061c:	4b24      	ldr	r3, [pc, #144]	; (806b0 <main+0x160>)
   8061e:	4798      	blx	r3
	printf("Event Loop Entered, waiting...\n");	
   80620:	4824      	ldr	r0, [pc, #144]	; (806b4 <main+0x164>)
   80622:	47a8      	blx	r5
	fpga_pins(false);
   80624:	4620      	mov	r0, r4
   80626:	47b8      	blx	r7
	naeusb_register_handlers();
   80628:	4b23      	ldr	r3, [pc, #140]	; (806b8 <main+0x168>)
   8062a:	4798      	blx	r3
    fpga_target_register_handlers();
   8062c:	4b23      	ldr	r3, [pc, #140]	; (806bc <main+0x16c>)
   8062e:	4798      	blx	r3
		process_events();
   80630:	4b23      	ldr	r3, [pc, #140]	; (806c0 <main+0x170>)
   80632:	4798      	blx	r3
	while (true) {
   80634:	e7fc      	b.n	80630 <main+0xe0>
   80636:	bf00      	nop
   80638:	00082c11 	.word	0x00082c11
   8063c:	00080239 	.word	0x00080239
   80640:	20000354 	.word	0x20000354
   80644:	20001964 	.word	0x20001964
   80648:	00084581 	.word	0x00084581
   8064c:	00084f31 	.word	0x00084f31
   80650:	00080755 	.word	0x00080755
   80654:	00080bd9 	.word	0x00080bd9
   80658:	000808b9 	.word	0x000808b9
   8065c:	0008c0e8 	.word	0x0008c0e8
   80660:	200001bc 	.word	0x200001bc
   80664:	0008551d 	.word	0x0008551d
   80668:	0008c0f0 	.word	0x0008c0f0
   8066c:	0008c0fc 	.word	0x0008c0fc
   80670:	0008c108 	.word	0x0008c108
   80674:	000851a5 	.word	0x000851a5
   80678:	0008c13c 	.word	0x0008c13c
   8067c:	000847d5 	.word	0x000847d5
   80680:	000802d9 	.word	0x000802d9
   80684:	0008c150 	.word	0x0008c150
   80688:	400e0000 	.word	0x400e0000
   8068c:	01010100 	.word	0x01010100
   80690:	00082e75 	.word	0x00082e75
   80694:	03030103 	.word	0x03030103
   80698:	00082e81 	.word	0x00082e81
   8069c:	00082e8d 	.word	0x00082e8d
   806a0:	00082e99 	.word	0x00082e99
   806a4:	000845fd 	.word	0x000845fd
   806a8:	000828a5 	.word	0x000828a5
   806ac:	400e0400 	.word	0x400e0400
   806b0:	0008483d 	.word	0x0008483d
   806b4:	0008c170 	.word	0x0008c170
   806b8:	00081a5d 	.word	0x00081a5d
   806bc:	000822cd 	.word	0x000822cd
   806c0:	00081779 	.word	0x00081779

000806c4 <do_task>:

/*
Can insert regular tasks here if needed
*/
void do_task(void)
{
   806c4:	b508      	push	{r3, lr}
	static bool last_power_state = false;
	
	//If change in external state pin
	if (board_get_powerstate() != last_power_state){
   806c6:	203e      	movs	r0, #62	; 0x3e
   806c8:	4b0e      	ldr	r3, [pc, #56]	; (80704 <do_task+0x40>)
   806ca:	4798      	blx	r3
   806cc:	3800      	subs	r0, #0
   806ce:	bf18      	it	ne
   806d0:	2001      	movne	r0, #1
   806d2:	4b0d      	ldr	r3, [pc, #52]	; (80708 <do_task+0x44>)
   806d4:	781b      	ldrb	r3, [r3, #0]
   806d6:	4298      	cmp	r0, r3
   806d8:	d100      	bne.n	806dc <do_task+0x18>
		}
		
		//Record new state
		last_power_state = board_get_powerstate();
	}
}
   806da:	bd08      	pop	{r3, pc}
		if (board_get_powerstate()){
   806dc:	203e      	movs	r0, #62	; 0x3e
   806de:	4b09      	ldr	r3, [pc, #36]	; (80704 <do_task+0x40>)
   806e0:	4798      	blx	r3
   806e2:	b158      	cbz	r0, 806fc <do_task+0x38>
			fpga_pins(true);
   806e4:	2001      	movs	r0, #1
   806e6:	4b09      	ldr	r3, [pc, #36]	; (8070c <do_task+0x48>)
   806e8:	4798      	blx	r3
		last_power_state = board_get_powerstate();
   806ea:	203e      	movs	r0, #62	; 0x3e
   806ec:	4b05      	ldr	r3, [pc, #20]	; (80704 <do_task+0x40>)
   806ee:	4798      	blx	r3
   806f0:	3800      	subs	r0, #0
   806f2:	bf18      	it	ne
   806f4:	2001      	movne	r0, #1
   806f6:	4b04      	ldr	r3, [pc, #16]	; (80708 <do_task+0x44>)
   806f8:	7018      	strb	r0, [r3, #0]
}
   806fa:	e7ee      	b.n	806da <do_task+0x16>
			fpga_pins(false);
   806fc:	2000      	movs	r0, #0
   806fe:	4b03      	ldr	r3, [pc, #12]	; (8070c <do_task+0x48>)
   80700:	4798      	blx	r3
   80702:	e7f2      	b.n	806ea <do_task+0x26>
   80704:	00084b05 	.word	0x00084b05
   80708:	20000db4 	.word	0x20000db4
   8070c:	000802d9 	.word	0x000802d9

00080710 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   80710:	b510      	push	{r4, lr}
   80712:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   80714:	4b06      	ldr	r3, [pc, #24]	; (80730 <FPGA_setlock+0x20>)
   80716:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   80718:	4b06      	ldr	r3, [pc, #24]	; (80734 <FPGA_setlock+0x24>)
   8071a:	781b      	ldrb	r3, [r3, #0]
   8071c:	b933      	cbnz	r3, 8072c <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   8071e:	4b05      	ldr	r3, [pc, #20]	; (80734 <FPGA_setlock+0x24>)
   80720:	701c      	strb	r4, [r3, #0]
    ret = 1;
   80722:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   80724:	4b04      	ldr	r3, [pc, #16]	; (80738 <FPGA_setlock+0x28>)
   80726:	4798      	blx	r3
  return ret;
}
   80728:	4620      	mov	r0, r4
   8072a:	bd10      	pop	{r4, pc}
  int ret = 0;
   8072c:	2400      	movs	r4, #0
   8072e:	e7f9      	b.n	80724 <FPGA_setlock+0x14>
   80730:	00084f5d 	.word	0x00084f5d
   80734:	20000db5 	.word	0x20000db5
   80738:	00084f99 	.word	0x00084f99

0008073c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   8073c:	4b01      	ldr	r3, [pc, #4]	; (80744 <FPGA_releaselock+0x8>)
   8073e:	2200      	movs	r2, #0
   80740:	701a      	strb	r2, [r3, #0]
}
   80742:	4770      	bx	lr
   80744:	20000db5 	.word	0x20000db5

00080748 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   80748:	4b01      	ldr	r3, [pc, #4]	; (80750 <FPGA_lockstatus+0x8>)
   8074a:	7818      	ldrb	r0, [r3, #0]
}
   8074c:	4770      	bx	lr
   8074e:	bf00      	nop
   80750:	20000db5 	.word	0x20000db5

00080754 <fpga_program_init>:
	#endif
}

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   80754:	b508      	push	{r3, lr}
    FPGA_NPROG_SETUP();
   80756:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8075a:	2008      	movs	r0, #8
   8075c:	4b02      	ldr	r3, [pc, #8]	; (80768 <fpga_program_init+0x14>)
   8075e:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   80760:	2008      	movs	r0, #8
   80762:	4b02      	ldr	r3, [pc, #8]	; (8076c <fpga_program_init+0x18>)
   80764:	4798      	blx	r3
}
   80766:	bd08      	pop	{r3, pc}
   80768:	00084b59 	.word	0x00084b59
   8076c:	00084b21 	.word	0x00084b21

00080770 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   80770:	b538      	push	{r3, r4, r5, lr}
   80772:	4605      	mov	r5, r0
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   80774:	2008      	movs	r0, #8
   80776:	4b19      	ldr	r3, [pc, #100]	; (807dc <fpga_program_setup1+0x6c>)
   80778:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   8077a:	4c19      	ldr	r4, [pc, #100]	; (807e0 <fpga_program_setup1+0x70>)
   8077c:	4620      	mov	r0, r4
   8077e:	4b19      	ldr	r3, [pc, #100]	; (807e4 <fpga_program_setup1+0x74>)
   80780:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   80782:	2380      	movs	r3, #128	; 0x80
   80784:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80786:	6863      	ldr	r3, [r4, #4]
   80788:	f043 0301 	orr.w	r3, r3, #1
   8078c:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8078e:	6863      	ldr	r3, [r4, #4]
   80790:	f043 0310 	orr.w	r3, r3, #16
   80794:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80796:	6863      	ldr	r3, [r4, #4]
   80798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8079c:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   8079e:	2200      	movs	r2, #0
   807a0:	4611      	mov	r1, r2
   807a2:	4620      	mov	r0, r4
   807a4:	4b10      	ldr	r3, [pc, #64]	; (807e8 <fpga_program_setup1+0x78>)
   807a6:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   807a8:	2201      	movs	r2, #1
   807aa:	2100      	movs	r1, #0
   807ac:	4620      	mov	r0, r4
   807ae:	4b0f      	ldr	r3, [pc, #60]	; (807ec <fpga_program_setup1+0x7c>)
   807b0:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   807b2:	490f      	ldr	r1, [pc, #60]	; (807f0 <fpga_program_setup1+0x80>)
   807b4:	4628      	mov	r0, r5
   807b6:	4b0f      	ldr	r3, [pc, #60]	; (807f4 <fpga_program_setup1+0x84>)
   807b8:	4798      	blx	r3
   807ba:	b2c2      	uxtb	r2, r0
   807bc:	2100      	movs	r1, #0
   807be:	4620      	mov	r0, r4
   807c0:	4b0d      	ldr	r3, [pc, #52]	; (807f8 <fpga_program_setup1+0x88>)
   807c2:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   807c4:	2301      	movs	r3, #1
   807c6:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   807c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807cc:	200e      	movs	r0, #14
   807ce:	4c0b      	ldr	r4, [pc, #44]	; (807fc <fpga_program_setup1+0x8c>)
   807d0:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   807d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807d6:	200f      	movs	r0, #15
   807d8:	47a0      	blx	r4
	#endif
#endif
}
   807da:	bd38      	pop	{r3, r4, r5, pc}
   807dc:	00084b3d 	.word	0x00084b3d
   807e0:	40008000 	.word	0x40008000
   807e4:	00082db1 	.word	0x00082db1
   807e8:	00082df9 	.word	0x00082df9
   807ec:	00082e1b 	.word	0x00082e1b
   807f0:	05b8d800 	.word	0x05b8d800
   807f4:	00082e3d 	.word	0x00082e3d
   807f8:	00082e55 	.word	0x00082e55
   807fc:	00084b59 	.word	0x00084b59

00080800 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   80800:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   80802:	2008      	movs	r0, #8
   80804:	4b01      	ldr	r3, [pc, #4]	; (8080c <fpga_program_setup2+0xc>)
   80806:	4798      	blx	r3
}
   80808:	bd08      	pop	{r3, pc}
   8080a:	bf00      	nop
   8080c:	00084b21 	.word	0x00084b21

00080810 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   80810:	b510      	push	{r4, lr}
   80812:	4601      	mov	r1, r0
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   80814:	2300      	movs	r3, #0
   80816:	461a      	mov	r2, r3
   80818:	4801      	ldr	r0, [pc, #4]	; (80820 <fpga_program_sendbyte+0x10>)
   8081a:	4c02      	ldr	r4, [pc, #8]	; (80824 <fpga_program_sendbyte+0x14>)
   8081c:	47a0      	blx	r4
		#endif
	#endif
}
   8081e:	bd10      	pop	{r4, pc}
   80820:	40008000 	.word	0x40008000
   80824:	00082dc1 	.word	0x00082dc1

00080828 <cdce906_write>:

	return false;
}

bool cdce906_write(uint8_t addr, uint8_t data)
{
   80828:	b500      	push	{lr}
   8082a:	b089      	sub	sp, #36	; 0x24
   8082c:	f88d 1007 	strb.w	r1, [sp, #7]
	twi_package_t packet_write = {
   80830:	2300      	movs	r3, #0
   80832:	9303      	str	r3, [sp, #12]
   80834:	9304      	str	r3, [sp, #16]
   80836:	9305      	str	r3, [sp, #20]
   80838:	9306      	str	r3, [sp, #24]
   8083a:	9307      	str	r3, [sp, #28]
   8083c:	f060 007f 	orn	r0, r0, #127	; 0x7f
   80840:	f88d 000c 	strb.w	r0, [sp, #12]
   80844:	2301      	movs	r3, #1
   80846:	9304      	str	r3, [sp, #16]
   80848:	f10d 0207 	add.w	r2, sp, #7
   8084c:	9205      	str	r2, [sp, #20]
   8084e:	9306      	str	r3, [sp, #24]
   80850:	2369      	movs	r3, #105	; 0x69
   80852:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = &data, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI1, &packet_write) == TWI_SUCCESS){
   80856:	a903      	add	r1, sp, #12
   80858:	4804      	ldr	r0, [pc, #16]	; (8086c <cdce906_write+0x44>)
   8085a:	4b05      	ldr	r3, [pc, #20]	; (80870 <cdce906_write+0x48>)
   8085c:	4798      	blx	r3
   8085e:	b918      	cbnz	r0, 80868 <cdce906_write+0x40>
		return true;
   80860:	2001      	movs	r0, #1
	} else {
		return false;
	}
}
   80862:	b009      	add	sp, #36	; 0x24
   80864:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   80868:	2000      	movs	r0, #0
   8086a:	e7fa      	b.n	80862 <cdce906_write+0x3a>
   8086c:	40088000 	.word	0x40088000
   80870:	00084d45 	.word	0x00084d45

00080874 <cdce906_read>:

bool cdce906_read(uint8_t addr, uint8_t * data)
{
   80874:	b500      	push	{lr}
   80876:	b087      	sub	sp, #28
	twi_package_t packet_read = {
   80878:	2300      	movs	r3, #0
   8087a:	9301      	str	r3, [sp, #4]
   8087c:	9302      	str	r3, [sp, #8]
   8087e:	9303      	str	r3, [sp, #12]
   80880:	9304      	str	r3, [sp, #16]
   80882:	9305      	str	r3, [sp, #20]
   80884:	f060 007f 	orn	r0, r0, #127	; 0x7f
   80888:	f88d 0004 	strb.w	r0, [sp, #4]
   8088c:	2301      	movs	r3, #1
   8088e:	9302      	str	r3, [sp, #8]
   80890:	9103      	str	r1, [sp, #12]
   80892:	9304      	str	r3, [sp, #16]
   80894:	2369      	movs	r3, #105	; 0x69
   80896:	f88d 3014 	strb.w	r3, [sp, #20]
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = data,        // transfer data destination buffer
		.length       = 1,                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI1, &packet_read) == TWI_SUCCESS){
   8089a:	a901      	add	r1, sp, #4
   8089c:	4804      	ldr	r0, [pc, #16]	; (808b0 <cdce906_read+0x3c>)
   8089e:	4b05      	ldr	r3, [pc, #20]	; (808b4 <cdce906_read+0x40>)
   808a0:	4798      	blx	r3
   808a2:	b918      	cbnz	r0, 808ac <cdce906_read+0x38>
		return true;
   808a4:	2001      	movs	r0, #1
	} else {
		return false;
	}	
   808a6:	b007      	add	sp, #28
   808a8:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   808ac:	2000      	movs	r0, #0
   808ae:	e7fa      	b.n	808a6 <cdce906_read+0x32>
   808b0:	40088000 	.word	0x40088000
   808b4:	00084ca1 	.word	0x00084ca1

000808b8 <cdce906_init>:
{
   808b8:	b510      	push	{r4, lr}
   808ba:	b084      	sub	sp, #16
	gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
   808bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808c0:	2018      	movs	r0, #24
   808c2:	4c16      	ldr	r4, [pc, #88]	; (8091c <cdce906_init+0x64>)
   808c4:	47a0      	blx	r4
	gpio_configure_pin(PIN_CDCE_SCL, PIN_CDCE_SCL_FLAGS);
   808c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808ca:	2019      	movs	r0, #25
   808cc:	47a0      	blx	r4
	twi_master_options_t opt = {
   808ce:	2400      	movs	r4, #0
   808d0:	9401      	str	r4, [sp, #4]
   808d2:	9402      	str	r4, [sp, #8]
   808d4:	9403      	str	r4, [sp, #12]
   808d6:	f24c 3350 	movw	r3, #50000	; 0xc350
   808da:	9302      	str	r3, [sp, #8]
   808dc:	2369      	movs	r3, #105	; 0x69
   808de:	f88d 300c 	strb.w	r3, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   808e2:	4b0f      	ldr	r3, [pc, #60]	; (80920 <cdce906_init+0x68>)
   808e4:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   808e6:	f88d 400d 	strb.w	r4, [sp, #13]
   808ea:	2013      	movs	r0, #19
   808ec:	4b0d      	ldr	r3, [pc, #52]	; (80924 <cdce906_init+0x6c>)
   808ee:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   808f0:	a901      	add	r1, sp, #4
   808f2:	480d      	ldr	r0, [pc, #52]	; (80928 <cdce906_init+0x70>)
   808f4:	4b0d      	ldr	r3, [pc, #52]	; (8092c <cdce906_init+0x74>)
   808f6:	4798      	blx	r3
	uint8_t data = 0;
   808f8:	f88d 4003 	strb.w	r4, [sp, #3]
	if (cdce906_read(0, &data) == false){
   808fc:	f10d 0103 	add.w	r1, sp, #3
   80900:	4620      	mov	r0, r4
   80902:	4b0b      	ldr	r3, [pc, #44]	; (80930 <cdce906_init+0x78>)
   80904:	4798      	blx	r3
   80906:	b130      	cbz	r0, 80916 <cdce906_init+0x5e>
	if ((data & 0x0F) == 0x01){
   80908:	f89d 3003 	ldrb.w	r3, [sp, #3]
   8090c:	f003 030f 	and.w	r3, r3, #15
   80910:	2b01      	cmp	r3, #1
   80912:	d000      	beq.n	80916 <cdce906_init+0x5e>
	return false;
   80914:	4620      	mov	r0, r4
}
   80916:	b004      	add	sp, #16
   80918:	bd10      	pop	{r4, pc}
   8091a:	bf00      	nop
   8091c:	00084b59 	.word	0x00084b59
   80920:	05b8d800 	.word	0x05b8d800
   80924:	000847d5 	.word	0x000847d5
   80928:	40088000 	.word	0x40088000
   8092c:	00084dc5 	.word	0x00084dc5
   80930:	00080875 	.word	0x00080875

00080934 <fpgaspi_program_init>:
#include "fpgaspi_program.h"
#include "spi.h"

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void fpgaspi_program_init(void)
{
   80934:	b510      	push	{r4, lr}
	FPGASPI_CCLK_SETUP();
   80936:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8093a:	200f      	movs	r0, #15
   8093c:	4c0a      	ldr	r4, [pc, #40]	; (80968 <fpgaspi_program_init+0x34>)
   8093e:	47a0      	blx	r4
	FPGASPI_DO_SETUP();
   80940:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80944:	2032      	movs	r0, #50	; 0x32
   80946:	47a0      	blx	r4
	FPGASPI_DI_SETUP();
   80948:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8094c:	200e      	movs	r0, #14
   8094e:	47a0      	blx	r4
	FPGASPI_CS_SETUP();
   80950:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80954:	2036      	movs	r0, #54	; 0x36
   80956:	47a0      	blx	r4
	FPGASPI_CS_HIGH();
   80958:	2036      	movs	r0, #54	; 0x36
   8095a:	4b04      	ldr	r3, [pc, #16]	; (8096c <fpgaspi_program_init+0x38>)
   8095c:	4798      	blx	r3
	FPGASPI_CCLK_LOW();
   8095e:	200f      	movs	r0, #15
   80960:	4b03      	ldr	r3, [pc, #12]	; (80970 <fpgaspi_program_init+0x3c>)
   80962:	4798      	blx	r3
}
   80964:	bd10      	pop	{r4, pc}
   80966:	bf00      	nop
   80968:	00084b59 	.word	0x00084b59
   8096c:	00084b21 	.word	0x00084b21
   80970:	00084b3d 	.word	0x00084b3d

00080974 <fpgaspi_cs_low>:


/* SPI CS Pin Low */
void fpgaspi_cs_low(void)
{
   80974:	b508      	push	{r3, lr}
	FPGASPI_CS_LOW();
   80976:	2036      	movs	r0, #54	; 0x36
   80978:	4b01      	ldr	r3, [pc, #4]	; (80980 <fpgaspi_cs_low+0xc>)
   8097a:	4798      	blx	r3
}
   8097c:	bd08      	pop	{r3, pc}
   8097e:	bf00      	nop
   80980:	00084b3d 	.word	0x00084b3d

00080984 <fpgaspi_cs_high>:

/* SPI CS Pin High */
void fpgaspi_cs_high(void)
{
   80984:	b508      	push	{r3, lr}
	FPGASPI_CS_HIGH();
   80986:	2036      	movs	r0, #54	; 0x36
   80988:	4b01      	ldr	r3, [pc, #4]	; (80990 <fpgaspi_cs_high+0xc>)
   8098a:	4798      	blx	r3
}
   8098c:	bd08      	pop	{r3, pc}
   8098e:	bf00      	nop
   80990:	00084b21 	.word	0x00084b21

00080994 <fpgaspi_xferbyte>:


/* SPI data byte transfer */
uint8_t fpgaspi_xferbyte(uint8_t databyte)
{
   80994:	b570      	push	{r4, r5, r6, lr}
   80996:	4605      	mov	r5, r0
	uint8_t result = 0;

	for(unsigned int i=0; i < 8; i++){	
   80998:	2600      	movs	r6, #0
	uint8_t result = 0;
   8099a:	4634      	mov	r4, r6
	for(unsigned int i=0; i < 8; i++){	
   8099c:	e00a      	b.n	809b4 <fpgaspi_xferbyte+0x20>
		FPGASPI_CCLK_LOW();

		if (databyte & 0x80){
			FPGASPI_DO_HIGH();
			} else {
			FPGASPI_DO_LOW();
   8099e:	2032      	movs	r0, #50	; 0x32
   809a0:	4b14      	ldr	r3, [pc, #80]	; (809f4 <fpgaspi_xferbyte+0x60>)
   809a2:	4798      	blx	r3
		}
		
		FPGASPI_CCLK_HIGH();
   809a4:	200f      	movs	r0, #15
   809a6:	4b14      	ldr	r3, [pc, #80]	; (809f8 <fpgaspi_xferbyte+0x64>)
   809a8:	4798      	blx	r3
		databyte = databyte << 1;
   809aa:	006d      	lsls	r5, r5, #1
   809ac:	b2ed      	uxtb	r5, r5
		result = result << 1;
   809ae:	0064      	lsls	r4, r4, #1
   809b0:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   809b2:	3601      	adds	r6, #1
   809b4:	2e07      	cmp	r6, #7
   809b6:	d810      	bhi.n	809da <fpgaspi_xferbyte+0x46>
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   809b8:	200e      	movs	r0, #14
   809ba:	4b10      	ldr	r3, [pc, #64]	; (809fc <fpgaspi_xferbyte+0x68>)
   809bc:	4798      	blx	r3
   809be:	2800      	cmp	r0, #0
   809c0:	bf18      	it	ne
   809c2:	f044 0401 	orrne.w	r4, r4, #1
		FPGASPI_CCLK_LOW();
   809c6:	200f      	movs	r0, #15
   809c8:	4b0a      	ldr	r3, [pc, #40]	; (809f4 <fpgaspi_xferbyte+0x60>)
   809ca:	4798      	blx	r3
		if (databyte & 0x80){
   809cc:	f015 0f80 	tst.w	r5, #128	; 0x80
   809d0:	d0e5      	beq.n	8099e <fpgaspi_xferbyte+0xa>
			FPGASPI_DO_HIGH();
   809d2:	2032      	movs	r0, #50	; 0x32
   809d4:	4b08      	ldr	r3, [pc, #32]	; (809f8 <fpgaspi_xferbyte+0x64>)
   809d6:	4798      	blx	r3
   809d8:	e7e4      	b.n	809a4 <fpgaspi_xferbyte+0x10>
	}

	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   809da:	200e      	movs	r0, #14
   809dc:	4b07      	ldr	r3, [pc, #28]	; (809fc <fpgaspi_xferbyte+0x68>)
   809de:	4798      	blx	r3
   809e0:	2800      	cmp	r0, #0
   809e2:	bf18      	it	ne
   809e4:	f044 0401 	orrne.w	r4, r4, #1

	FPGASPI_CCLK_LOW();
   809e8:	200f      	movs	r0, #15
   809ea:	4b02      	ldr	r3, [pc, #8]	; (809f4 <fpgaspi_xferbyte+0x60>)
   809ec:	4798      	blx	r3

	return result;
}
   809ee:	4620      	mov	r0, r4
   809f0:	bd70      	pop	{r4, r5, r6, pc}
   809f2:	bf00      	nop
   809f4:	00084b3d 	.word	0x00084b3d
   809f8:	00084b21 	.word	0x00084b21
   809fc:	00084b05 	.word	0x00084b05

00080a00 <fpgaspi_program_deinit>:


void fpgaspi_program_deinit(void)
{
   80a00:	b510      	push	{r4, lr}
	FPGASPI_CCLK_RELEASE();
   80a02:	2100      	movs	r1, #0
   80a04:	200f      	movs	r0, #15
   80a06:	4c04      	ldr	r4, [pc, #16]	; (80a18 <fpgaspi_program_deinit+0x18>)
   80a08:	47a0      	blx	r4
	FPGASPI_DO_RELEASE();
   80a0a:	2100      	movs	r1, #0
   80a0c:	2032      	movs	r0, #50	; 0x32
   80a0e:	47a0      	blx	r4
	FPGASPI_CS_RELEASE();
   80a10:	2100      	movs	r1, #0
   80a12:	2036      	movs	r0, #54	; 0x36
   80a14:	47a0      	blx	r4
   80a16:	bd10      	pop	{r4, pc}
   80a18:	00084b59 	.word	0x00084b59

00080a1c <spi1util_init>:
int pin_spi1_sck = -1;
int pin_spi1_cs = -1;

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void spi1util_init(void)
{
   80a1c:	b508      	push	{r3, lr}
    /* IO setup is done when IO pins are configured right now */
	gpio_set_pin_high(pin_spi1_cs);
   80a1e:	4b04      	ldr	r3, [pc, #16]	; (80a30 <spi1util_init+0x14>)
   80a20:	6818      	ldr	r0, [r3, #0]
   80a22:	4b04      	ldr	r3, [pc, #16]	; (80a34 <spi1util_init+0x18>)
   80a24:	4798      	blx	r3
	gpio_set_pin_low(pin_spi1_sck);
   80a26:	4b04      	ldr	r3, [pc, #16]	; (80a38 <spi1util_init+0x1c>)
   80a28:	6818      	ldr	r0, [r3, #0]
   80a2a:	4b04      	ldr	r3, [pc, #16]	; (80a3c <spi1util_init+0x20>)
   80a2c:	4798      	blx	r3
}
   80a2e:	bd08      	pop	{r3, pc}
   80a30:	200001e4 	.word	0x200001e4
   80a34:	00084b21 	.word	0x00084b21
   80a38:	200001f0 	.word	0x200001f0
   80a3c:	00084b3d 	.word	0x00084b3d

00080a40 <spi1util_cs_low>:

/* SPI CS Pin Low */
void spi1util_cs_low(void)
{
   80a40:	b508      	push	{r3, lr}
	gpio_set_pin_low(pin_spi1_cs);
   80a42:	4b02      	ldr	r3, [pc, #8]	; (80a4c <spi1util_cs_low+0xc>)
   80a44:	6818      	ldr	r0, [r3, #0]
   80a46:	4b02      	ldr	r3, [pc, #8]	; (80a50 <spi1util_cs_low+0x10>)
   80a48:	4798      	blx	r3
}
   80a4a:	bd08      	pop	{r3, pc}
   80a4c:	200001e4 	.word	0x200001e4
   80a50:	00084b3d 	.word	0x00084b3d

00080a54 <spi1util_cs_high>:

/* SPI CS Pin High */
void spi1util_cs_high(void)
{
   80a54:	b508      	push	{r3, lr}
	gpio_set_pin_high(pin_spi1_cs);
   80a56:	4b02      	ldr	r3, [pc, #8]	; (80a60 <spi1util_cs_high+0xc>)
   80a58:	6818      	ldr	r0, [r3, #0]
   80a5a:	4b02      	ldr	r3, [pc, #8]	; (80a64 <spi1util_cs_high+0x10>)
   80a5c:	4798      	blx	r3
}
   80a5e:	bd08      	pop	{r3, pc}
   80a60:	200001e4 	.word	0x200001e4
   80a64:	00084b21 	.word	0x00084b21

00080a68 <spi1util_xferbyte>:

/* SPI data byte transfer */
uint8_t spi1util_xferbyte(uint8_t databyte)
{
   80a68:	b570      	push	{r4, r5, r6, lr}
   80a6a:	4605      	mov	r5, r0
	uint8_t result = 0;

	for(unsigned int i=0; i < 8; i++){	
   80a6c:	2600      	movs	r6, #0
	uint8_t result = 0;
   80a6e:	4634      	mov	r4, r6
	for(unsigned int i=0; i < 8; i++){	
   80a70:	e00c      	b.n	80a8c <spi1util_xferbyte+0x24>
		gpio_set_pin_low(pin_spi1_sck);

		if (databyte & 0x80){
			gpio_set_pin_high(pin_spi1_mosi);
			} else {
			gpio_set_pin_low(pin_spi1_mosi);
   80a72:	4b18      	ldr	r3, [pc, #96]	; (80ad4 <spi1util_xferbyte+0x6c>)
   80a74:	6818      	ldr	r0, [r3, #0]
   80a76:	4b18      	ldr	r3, [pc, #96]	; (80ad8 <spi1util_xferbyte+0x70>)
   80a78:	4798      	blx	r3
		}
		
		gpio_set_pin_high(pin_spi1_sck);
   80a7a:	4b18      	ldr	r3, [pc, #96]	; (80adc <spi1util_xferbyte+0x74>)
   80a7c:	6818      	ldr	r0, [r3, #0]
   80a7e:	4b18      	ldr	r3, [pc, #96]	; (80ae0 <spi1util_xferbyte+0x78>)
   80a80:	4798      	blx	r3
		databyte = databyte << 1;
   80a82:	006d      	lsls	r5, r5, #1
   80a84:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80a86:	0064      	lsls	r4, r4, #1
   80a88:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   80a8a:	3601      	adds	r6, #1
   80a8c:	2e07      	cmp	r6, #7
   80a8e:	d813      	bhi.n	80ab8 <spi1util_xferbyte+0x50>
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80a90:	4b14      	ldr	r3, [pc, #80]	; (80ae4 <spi1util_xferbyte+0x7c>)
   80a92:	6818      	ldr	r0, [r3, #0]
   80a94:	4b14      	ldr	r3, [pc, #80]	; (80ae8 <spi1util_xferbyte+0x80>)
   80a96:	4798      	blx	r3
   80a98:	2800      	cmp	r0, #0
   80a9a:	bf18      	it	ne
   80a9c:	f044 0401 	orrne.w	r4, r4, #1
		gpio_set_pin_low(pin_spi1_sck);
   80aa0:	4b0e      	ldr	r3, [pc, #56]	; (80adc <spi1util_xferbyte+0x74>)
   80aa2:	6818      	ldr	r0, [r3, #0]
   80aa4:	4b0c      	ldr	r3, [pc, #48]	; (80ad8 <spi1util_xferbyte+0x70>)
   80aa6:	4798      	blx	r3
		if (databyte & 0x80){
   80aa8:	f015 0f80 	tst.w	r5, #128	; 0x80
   80aac:	d0e1      	beq.n	80a72 <spi1util_xferbyte+0xa>
			gpio_set_pin_high(pin_spi1_mosi);
   80aae:	4b09      	ldr	r3, [pc, #36]	; (80ad4 <spi1util_xferbyte+0x6c>)
   80ab0:	6818      	ldr	r0, [r3, #0]
   80ab2:	4b0b      	ldr	r3, [pc, #44]	; (80ae0 <spi1util_xferbyte+0x78>)
   80ab4:	4798      	blx	r3
   80ab6:	e7e0      	b.n	80a7a <spi1util_xferbyte+0x12>
	}

	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80ab8:	4b0a      	ldr	r3, [pc, #40]	; (80ae4 <spi1util_xferbyte+0x7c>)
   80aba:	6818      	ldr	r0, [r3, #0]
   80abc:	4b0a      	ldr	r3, [pc, #40]	; (80ae8 <spi1util_xferbyte+0x80>)
   80abe:	4798      	blx	r3
   80ac0:	2800      	cmp	r0, #0
   80ac2:	bf18      	it	ne
   80ac4:	f044 0401 	orrne.w	r4, r4, #1

	gpio_set_pin_low(pin_spi1_sck);
   80ac8:	4b04      	ldr	r3, [pc, #16]	; (80adc <spi1util_xferbyte+0x74>)
   80aca:	6818      	ldr	r0, [r3, #0]
   80acc:	4b02      	ldr	r3, [pc, #8]	; (80ad8 <spi1util_xferbyte+0x70>)
   80ace:	4798      	blx	r3

	return result;
}
   80ad0:	4620      	mov	r0, r4
   80ad2:	bd70      	pop	{r4, r5, r6, pc}
   80ad4:	200001ec 	.word	0x200001ec
   80ad8:	00084b3d 	.word	0x00084b3d
   80adc:	200001f0 	.word	0x200001f0
   80ae0:	00084b21 	.word	0x00084b21
   80ae4:	200001e8 	.word	0x200001e8
   80ae8:	00084b05 	.word	0x00084b05

00080aec <spi1util_deinit>:


void spi1util_deinit(void)
{
	/* IO setup is done when IO pins are configured right now */
   80aec:	4770      	bx	lr

00080aee <checkoddparity>:
unsigned char checkoddparity(unsigned char p);

/* Is current byte odd-parity already? */
unsigned char checkoddparity(unsigned char p)
{
	p = p ^ (p >> 4 | p << 4);
   80aee:	0903      	lsrs	r3, r0, #4
   80af0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   80af4:	b25b      	sxtb	r3, r3
   80af6:	4058      	eors	r0, r3
   80af8:	b2c3      	uxtb	r3, r0
	p = p ^ (p >> 2);
   80afa:	f3c0 0085 	ubfx	r0, r0, #2, #6
   80afe:	4058      	eors	r0, r3
	p = p ^ (p >> 1);
   80b00:	ea80 0050 	eor.w	r0, r0, r0, lsr #1
	return p & 1;
}
   80b04:	f000 0001 	and.w	r0, r0, #1
   80b08:	4770      	bx	lr
   80b0a:	0000      	movs	r0, r0

00080b0c <tps56520_set>:

/* Set voltage in mV for FPGA VCC_INT Voltage */
bool tps56520_set(uint16_t mv_output)
{
	/* Validate output voltage is in range */
	if ((mv_output < 600) || (mv_output > 1800)){
   80b0c:	f5a0 7316 	sub.w	r3, r0, #600	; 0x258
   80b10:	b29b      	uxth	r3, r3
   80b12:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   80b16:	d84c      	bhi.n	80bb2 <tps56520_set+0xa6>
		return false;
	}
	
	/* Avoid frying FPGA */
	if (mv_output > 1200){
   80b18:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   80b1c:	d84b      	bhi.n	80bb6 <tps56520_set+0xaa>
{
   80b1e:	b510      	push	{r4, lr}
   80b20:	b08c      	sub	sp, #48	; 0x30
		return false;
	}
	
	uint8_t setting = (mv_output - 600) / 10;
   80b22:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   80b26:	4c26      	ldr	r4, [pc, #152]	; (80bc0 <tps56520_set+0xb4>)
   80b28:	fb84 3400 	smull	r3, r4, r4, r0
   80b2c:	17c0      	asrs	r0, r0, #31
   80b2e:	ebc0 04a4 	rsb	r4, r0, r4, asr #2
   80b32:	b2e4      	uxtb	r4, r4
   80b34:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
	
	if (!checkoddparity(setting)){
   80b38:	4620      	mov	r0, r4
   80b3a:	4b22      	ldr	r3, [pc, #136]	; (80bc4 <tps56520_set+0xb8>)
   80b3c:	4798      	blx	r3
   80b3e:	b918      	cbnz	r0, 80b48 <tps56520_set+0x3c>
		setting |= 1<<7;
   80b40:	f064 047f 	orn	r4, r4, #127	; 0x7f
   80b44:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
	}
	twi_package_t packet_write = {
   80b48:	4b1f      	ldr	r3, [pc, #124]	; (80bc8 <tps56520_set+0xbc>)
   80b4a:	681b      	ldr	r3, [r3, #0]
   80b4c:	f8ad 3018 	strh.w	r3, [sp, #24]
   80b50:	0c1b      	lsrs	r3, r3, #16
   80b52:	f88d 301a 	strb.w	r3, [sp, #26]
   80b56:	2301      	movs	r3, #1
   80b58:	9307      	str	r3, [sp, #28]
   80b5a:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   80b5e:	9208      	str	r2, [sp, #32]
   80b60:	9309      	str	r3, [sp, #36]	; 0x24
   80b62:	2334      	movs	r3, #52	; 0x34
   80b64:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &setting, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   80b68:	a906      	add	r1, sp, #24
   80b6a:	4818      	ldr	r0, [pc, #96]	; (80bcc <tps56520_set+0xc0>)
   80b6c:	4b18      	ldr	r3, [pc, #96]	; (80bd0 <tps56520_set+0xc4>)
   80b6e:	4798      	blx	r3
   80b70:	b110      	cbz	r0, 80b78 <tps56520_set+0x6c>
		return false;
   80b72:	2000      	movs	r0, #0
	if (volt_read == setting){
		return true;
	}
	
	return false;
   80b74:	b00c      	add	sp, #48	; 0x30
   80b76:	bd10      	pop	{r4, pc}
	twi_package_t packet_read = {
   80b78:	4b13      	ldr	r3, [pc, #76]	; (80bc8 <tps56520_set+0xbc>)
   80b7a:	681b      	ldr	r3, [r3, #0]
   80b7c:	f8ad 3000 	strh.w	r3, [sp]
   80b80:	0c1b      	lsrs	r3, r3, #16
   80b82:	f88d 3002 	strb.w	r3, [sp, #2]
   80b86:	2301      	movs	r3, #1
   80b88:	9301      	str	r3, [sp, #4]
   80b8a:	f10d 0217 	add.w	r2, sp, #23
   80b8e:	9202      	str	r2, [sp, #8]
   80b90:	9303      	str	r3, [sp, #12]
   80b92:	2334      	movs	r3, #52	; 0x34
   80b94:	f88d 3010 	strb.w	r3, [sp, #16]
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   80b98:	4669      	mov	r1, sp
   80b9a:	480c      	ldr	r0, [pc, #48]	; (80bcc <tps56520_set+0xc0>)
   80b9c:	4b0d      	ldr	r3, [pc, #52]	; (80bd4 <tps56520_set+0xc8>)
   80b9e:	4798      	blx	r3
   80ba0:	b958      	cbnz	r0, 80bba <tps56520_set+0xae>
	if (volt_read == setting){
   80ba2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   80ba6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   80baa:	429a      	cmp	r2, r3
   80bac:	d1e2      	bne.n	80b74 <tps56520_set+0x68>
		return true;
   80bae:	2001      	movs	r0, #1
   80bb0:	e7e0      	b.n	80b74 <tps56520_set+0x68>
		return false;
   80bb2:	2000      	movs	r0, #0
   80bb4:	4770      	bx	lr
		return false;
   80bb6:	2000      	movs	r0, #0
   80bb8:	4770      	bx	lr
		return false;
   80bba:	2000      	movs	r0, #0
   80bbc:	e7da      	b.n	80b74 <tps56520_set+0x68>
   80bbe:	bf00      	nop
   80bc0:	66666667 	.word	0x66666667
   80bc4:	00080aef 	.word	0x00080aef
   80bc8:	0008c190 	.word	0x0008c190
   80bcc:	40084000 	.word	0x40084000
   80bd0:	00084d45 	.word	0x00084d45
   80bd4:	00084ca1 	.word	0x00084ca1

00080bd8 <tps56520_init>:
{
   80bd8:	b510      	push	{r4, lr}
   80bda:	b084      	sub	sp, #16
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   80bdc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80be0:	2009      	movs	r0, #9
   80be2:	4c16      	ldr	r4, [pc, #88]	; (80c3c <tps56520_init+0x64>)
   80be4:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWD_SCL, PIN_PWD_SCL_FLAGS);
   80be6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bea:	200a      	movs	r0, #10
   80bec:	47a0      	blx	r4
	twi_master_options_t opt = {
   80bee:	2300      	movs	r3, #0
   80bf0:	9301      	str	r3, [sp, #4]
   80bf2:	9302      	str	r3, [sp, #8]
   80bf4:	9303      	str	r3, [sp, #12]
   80bf6:	f24c 3250 	movw	r2, #50000	; 0xc350
   80bfa:	9202      	str	r2, [sp, #8]
   80bfc:	2234      	movs	r2, #52	; 0x34
   80bfe:	f88d 200c 	strb.w	r2, [sp, #12]
	p_opt->master_clk = sysclk_get_cpu_hz();
   80c02:	4a0f      	ldr	r2, [pc, #60]	; (80c40 <tps56520_init+0x68>)
   80c04:	9201      	str	r2, [sp, #4]
	p_opt->smbus      = 0;
   80c06:	f88d 300d 	strb.w	r3, [sp, #13]
   80c0a:	2012      	movs	r0, #18
   80c0c:	4b0d      	ldr	r3, [pc, #52]	; (80c44 <tps56520_init+0x6c>)
   80c0e:	4798      	blx	r3
	return (twi_master_init(p_twi, p_opt));
   80c10:	a901      	add	r1, sp, #4
   80c12:	480d      	ldr	r0, [pc, #52]	; (80c48 <tps56520_init+0x70>)
   80c14:	4b0d      	ldr	r3, [pc, #52]	; (80c4c <tps56520_init+0x74>)
   80c16:	4798      	blx	r3
	for(int retry = 3; retry > 0; retry--){
   80c18:	2403      	movs	r4, #3
   80c1a:	e000      	b.n	80c1e <tps56520_init+0x46>
   80c1c:	3c01      	subs	r4, #1
   80c1e:	2c00      	cmp	r4, #0
   80c20:	dd07      	ble.n	80c32 <tps56520_init+0x5a>
		if(tps56520_set(1000)){
   80c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80c26:	4b0a      	ldr	r3, [pc, #40]	; (80c50 <tps56520_init+0x78>)
   80c28:	4798      	blx	r3
   80c2a:	4603      	mov	r3, r0
   80c2c:	2800      	cmp	r0, #0
   80c2e:	d0f5      	beq.n	80c1c <tps56520_init+0x44>
   80c30:	e000      	b.n	80c34 <tps56520_init+0x5c>
	return false;
   80c32:	2300      	movs	r3, #0
}
   80c34:	4618      	mov	r0, r3
   80c36:	b004      	add	sp, #16
   80c38:	bd10      	pop	{r4, pc}
   80c3a:	bf00      	nop
   80c3c:	00084b59 	.word	0x00084b59
   80c40:	05b8d800 	.word	0x05b8d800
   80c44:	000847d5 	.word	0x000847d5
   80c48:	40084000 	.word	0x40084000
   80c4c:	00084dc5 	.word	0x00084dc5
   80c50:	00080b0d 	.word	0x00080b0d

00080c54 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   80c54:	b538      	push	{r3, r4, r5, lr}
   80c56:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80c58:	b2c0      	uxtb	r0, r0
   80c5a:	4d05      	ldr	r5, [pc, #20]	; (80c70 <XMEGANVM_SendAddress+0x1c>)
   80c5c:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80c5e:	f3c4 2007 	ubfx	r0, r4, #8, #8
   80c62:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80c64:	f3c4 4007 	ubfx	r0, r4, #16, #8
   80c68:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80c6a:	0e20      	lsrs	r0, r4, #24
   80c6c:	47a8      	blx	r5
}
   80c6e:	bd38      	pop	{r3, r4, r5, pc}
   80c70:	00081521 	.word	0x00081521

00080c74 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   80c74:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80c76:	4b03      	ldr	r3, [pc, #12]	; (80c84 <XMEGANVM_SendNVMRegAddress+0x10>)
   80c78:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   80c7a:	4318      	orrs	r0, r3
   80c7c:	4b02      	ldr	r3, [pc, #8]	; (80c88 <XMEGANVM_SendNVMRegAddress+0x14>)
   80c7e:	4798      	blx	r3
}
   80c80:	bd08      	pop	{r3, pc}
   80c82:	bf00      	nop
   80c84:	200001f8 	.word	0x200001f8
   80c88:	00080c55 	.word	0x00080c55

00080c8c <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   80c8c:	b508      	push	{r3, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   80c8e:	2080      	movs	r0, #128	; 0x80
   80c90:	4b06      	ldr	r3, [pc, #24]	; (80cac <XMEGANVM_WaitWhileNVMBusBusy+0x20>)
   80c92:	4798      	blx	r3

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80c94:	4b06      	ldr	r3, [pc, #24]	; (80cb0 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)
   80c96:	4798      	blx	r3

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   80c98:	4b06      	ldr	r3, [pc, #24]	; (80cb4 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
   80c9a:	681b      	ldr	r3, [r3, #0]
   80c9c:	b123      	cbz	r3, 80ca8 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   80c9e:	f010 0f02 	tst.w	r0, #2
   80ca2:	d0f4      	beq.n	80c8e <XMEGANVM_WaitWhileNVMBusBusy+0x2>
		  return true;
   80ca4:	2001      	movs	r0, #1
   80ca6:	e000      	b.n	80caa <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   80ca8:	2000      	movs	r0, #0
		}
	}
}
   80caa:	bd08      	pop	{r3, pc}
   80cac:	00081521 	.word	0x00081521
   80cb0:	0008154d 	.word	0x0008154d
   80cb4:	20000ec0 	.word	0x20000ec0

00080cb8 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   80cb8:	b508      	push	{r3, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80cba:	206b      	movs	r0, #107	; 0x6b
   80cbc:	4b09      	ldr	r3, [pc, #36]	; (80ce4 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   80cbe:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   80cc0:	200f      	movs	r0, #15
   80cc2:	4b09      	ldr	r3, [pc, #36]	; (80ce8 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   80cc4:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   80cc6:	2020      	movs	r0, #32
   80cc8:	4b06      	ldr	r3, [pc, #24]	; (80ce4 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   80cca:	4798      	blx	r3

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80ccc:	4b07      	ldr	r3, [pc, #28]	; (80cec <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)
   80cce:	4798      	blx	r3

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   80cd0:	4b07      	ldr	r3, [pc, #28]	; (80cf0 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
   80cd2:	681b      	ldr	r3, [r3, #0]
   80cd4:	b123      	cbz	r3, 80ce0 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   80cd6:	f010 0f80 	tst.w	r0, #128	; 0x80
   80cda:	d1f4      	bne.n	80cc6 <XMEGANVM_WaitWhileNVMControllerBusy+0xe>
		  return true;
   80cdc:	2001      	movs	r0, #1
   80cde:	e000      	b.n	80ce2 <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   80ce0:	2000      	movs	r0, #0
		}
	}
}
   80ce2:	bd08      	pop	{r3, pc}
   80ce4:	00081521 	.word	0x00081521
   80ce8:	00080c75 	.word	0x00080c75
   80cec:	0008154d 	.word	0x0008154d
   80cf0:	20000ec0 	.word	0x20000ec0

00080cf4 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   80cf4:	b510      	push	{r4, lr}
   80cf6:	b082      	sub	sp, #8
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   80cf8:	4b11      	ldr	r3, [pc, #68]	; (80d40 <XMEGANVM_EnablePDI+0x4c>)
   80cfa:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   80cfc:	20c1      	movs	r0, #193	; 0xc1
   80cfe:	4c11      	ldr	r4, [pc, #68]	; (80d44 <XMEGANVM_EnablePDI+0x50>)
   80d00:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   80d02:	2059      	movs	r0, #89	; 0x59
   80d04:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   80d06:	20c2      	movs	r0, #194	; 0xc2
   80d08:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   80d0a:	2002      	movs	r0, #2
   80d0c:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   80d0e:	20e0      	movs	r0, #224	; 0xe0
   80d10:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   80d12:	2408      	movs	r4, #8
   80d14:	e00d      	b.n	80d32 <XMEGANVM_EnablePDI+0x3e>
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   80d16:	4a0c      	ldr	r2, [pc, #48]	; (80d48 <XMEGANVM_EnablePDI+0x54>)
   80d18:	e892 0003 	ldmia.w	r2, {r0, r1}
   80d1c:	ab02      	add	r3, sp, #8
   80d1e:	e903 0003 	stmdb	r3, {r0, r1}
   80d22:	1de3      	adds	r3, r4, #7
   80d24:	3c01      	subs	r4, #1
   80d26:	446b      	add	r3, sp
   80d28:	f813 0c08 	ldrb.w	r0, [r3, #-8]
   80d2c:	4b05      	ldr	r3, [pc, #20]	; (80d44 <XMEGANVM_EnablePDI+0x50>)
   80d2e:	4798      	blx	r3
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   80d30:	b2e4      	uxtb	r4, r4
   80d32:	2c00      	cmp	r4, #0
   80d34:	d1ef      	bne.n	80d16 <XMEGANVM_EnablePDI+0x22>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   80d36:	4b05      	ldr	r3, [pc, #20]	; (80d4c <XMEGANVM_EnablePDI+0x58>)
   80d38:	4798      	blx	r3
}
   80d3a:	b002      	add	sp, #8
   80d3c:	bd10      	pop	{r4, pc}
   80d3e:	bf00      	nop
   80d40:	000815f1 	.word	0x000815f1
   80d44:	00081521 	.word	0x00081521
   80d48:	0008c194 	.word	0x0008c194
   80d4c:	00080c8d 	.word	0x00080c8d

00080d50 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   80d50:	b510      	push	{r4, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   80d52:	4b09      	ldr	r3, [pc, #36]	; (80d78 <XMEGANVM_DisablePDI+0x28>)
   80d54:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   80d56:	20c1      	movs	r0, #193	; 0xc1
   80d58:	4c08      	ldr	r4, [pc, #32]	; (80d7c <XMEGANVM_DisablePDI+0x2c>)
   80d5a:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   80d5c:	2000      	movs	r0, #0
   80d5e:	47a0      	blx	r4

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   80d60:	2081      	movs	r0, #129	; 0x81
   80d62:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   80d64:	4b06      	ldr	r3, [pc, #24]	; (80d80 <XMEGANVM_DisablePDI+0x30>)
   80d66:	4798      	blx	r3
   80d68:	b118      	cbz	r0, 80d72 <XMEGANVM_DisablePDI+0x22>
   80d6a:	4b06      	ldr	r3, [pc, #24]	; (80d84 <XMEGANVM_DisablePDI+0x34>)
   80d6c:	681b      	ldr	r3, [r3, #0]
   80d6e:	2b00      	cmp	r3, #0
   80d70:	d1f1      	bne.n	80d56 <XMEGANVM_DisablePDI+0x6>

	XPROGTarget_DisableTargetPDI();
   80d72:	4b05      	ldr	r3, [pc, #20]	; (80d88 <XMEGANVM_DisablePDI+0x38>)
   80d74:	4798      	blx	r3
}
   80d76:	bd10      	pop	{r4, pc}
   80d78:	00080c8d 	.word	0x00080c8d
   80d7c:	00081521 	.word	0x00081521
   80d80:	0008154d 	.word	0x0008154d
   80d84:	20000ec0 	.word	0x20000ec0
   80d88:	000814c5 	.word	0x000814c5

00080d8c <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   80d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d8e:	4605      	mov	r5, r0
   80d90:	460e      	mov	r6, r1
   80d92:	4614      	mov	r4, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80d94:	4b1b      	ldr	r3, [pc, #108]	; (80e04 <XMEGANVM_ReadMemory+0x78>)
   80d96:	4798      	blx	r3
   80d98:	4603      	mov	r3, r0
   80d9a:	b908      	cbnz	r0, 80da0 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   80d9c:	4618      	mov	r0, r3
   80d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80da0:	204c      	movs	r0, #76	; 0x4c
   80da2:	4f19      	ldr	r7, [pc, #100]	; (80e08 <XMEGANVM_ReadMemory+0x7c>)
   80da4:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80da6:	200a      	movs	r0, #10
   80da8:	4b18      	ldr	r3, [pc, #96]	; (80e0c <XMEGANVM_ReadMemory+0x80>)
   80daa:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   80dac:	2043      	movs	r0, #67	; 0x43
   80dae:	47b8      	blx	r7
	if (ReadSize > 1)
   80db0:	2c01      	cmp	r4, #1
   80db2:	d917      	bls.n	80de4 <XMEGANVM_ReadMemory+0x58>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80db4:	206b      	movs	r0, #107	; 0x6b
   80db6:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   80db8:	4628      	mov	r0, r5
   80dba:	4b15      	ldr	r3, [pc, #84]	; (80e10 <XMEGANVM_ReadMemory+0x84>)
   80dbc:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80dbe:	20a0      	movs	r0, #160	; 0xa0
   80dc0:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   80dc2:	1e60      	subs	r0, r4, #1
   80dc4:	b2c0      	uxtb	r0, r0
   80dc6:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80dc8:	2024      	movs	r0, #36	; 0x24
   80dca:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   80dcc:	1e63      	subs	r3, r4, #1
   80dce:	b29d      	uxth	r5, r3
   80dd0:	b18c      	cbz	r4, 80df6 <XMEGANVM_ReadMemory+0x6a>
   80dd2:	4b10      	ldr	r3, [pc, #64]	; (80e14 <XMEGANVM_ReadMemory+0x88>)
   80dd4:	681b      	ldr	r3, [r3, #0]
   80dd6:	b173      	cbz	r3, 80df6 <XMEGANVM_ReadMemory+0x6a>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80dd8:	4b0f      	ldr	r3, [pc, #60]	; (80e18 <XMEGANVM_ReadMemory+0x8c>)
   80dda:	4798      	blx	r3
   80ddc:	f806 0b01 	strb.w	r0, [r6], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   80de0:	462c      	mov	r4, r5
   80de2:	e7f3      	b.n	80dcc <XMEGANVM_ReadMemory+0x40>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80de4:	200c      	movs	r0, #12
   80de6:	4b08      	ldr	r3, [pc, #32]	; (80e08 <XMEGANVM_ReadMemory+0x7c>)
   80de8:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   80dea:	4628      	mov	r0, r5
   80dec:	4b08      	ldr	r3, [pc, #32]	; (80e10 <XMEGANVM_ReadMemory+0x84>)
   80dee:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80df0:	4b09      	ldr	r3, [pc, #36]	; (80e18 <XMEGANVM_ReadMemory+0x8c>)
   80df2:	4798      	blx	r3
   80df4:	7030      	strb	r0, [r6, #0]
	return (TimeoutTicksRemaining > 0);
   80df6:	4b07      	ldr	r3, [pc, #28]	; (80e14 <XMEGANVM_ReadMemory+0x88>)
   80df8:	681b      	ldr	r3, [r3, #0]
   80dfa:	3b00      	subs	r3, #0
   80dfc:	bf18      	it	ne
   80dfe:	2301      	movne	r3, #1
   80e00:	e7cc      	b.n	80d9c <XMEGANVM_ReadMemory+0x10>
   80e02:	bf00      	nop
   80e04:	00080cb9 	.word	0x00080cb9
   80e08:	00081521 	.word	0x00081521
   80e0c:	00080c75 	.word	0x00080c75
   80e10:	00080c55 	.word	0x00080c55
   80e14:	20000ec0 	.word	0x20000ec0
   80e18:	0008154d 	.word	0x0008154d

00080e1c <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   80e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e20:	4607      	mov	r7, r0
   80e22:	4688      	mov	r8, r1
   80e24:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80e26:	4b0b      	ldr	r3, [pc, #44]	; (80e54 <XMEGANVM_WriteByteMemory+0x38>)
   80e28:	4798      	blx	r3
   80e2a:	4605      	mov	r5, r0
   80e2c:	b910      	cbnz	r0, 80e34 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   80e2e:	4628      	mov	r0, r5
   80e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80e34:	204c      	movs	r0, #76	; 0x4c
   80e36:	4c08      	ldr	r4, [pc, #32]	; (80e58 <XMEGANVM_WriteByteMemory+0x3c>)
   80e38:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80e3a:	200a      	movs	r0, #10
   80e3c:	4b07      	ldr	r3, [pc, #28]	; (80e5c <XMEGANVM_WriteByteMemory+0x40>)
   80e3e:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   80e40:	4638      	mov	r0, r7
   80e42:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80e44:	204c      	movs	r0, #76	; 0x4c
   80e46:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   80e48:	4640      	mov	r0, r8
   80e4a:	4b05      	ldr	r3, [pc, #20]	; (80e60 <XMEGANVM_WriteByteMemory+0x44>)
   80e4c:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   80e4e:	4630      	mov	r0, r6
   80e50:	47a0      	blx	r4
	return true;
   80e52:	e7ec      	b.n	80e2e <XMEGANVM_WriteByteMemory+0x12>
   80e54:	00080cb9 	.word	0x00080cb9
   80e58:	00081521 	.word	0x00081521
   80e5c:	00080c75 	.word	0x00080c75
   80e60:	00080c55 	.word	0x00080c55

00080e64 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   80e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80e68:	4607      	mov	r7, r0
   80e6a:	4690      	mov	r8, r2
   80e6c:	461e      	mov	r6, r3
   80e6e:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if (PageMode & XPROG_PAGEMODE_ERASE)
   80e72:	f013 0f01 	tst.w	r3, #1
   80e76:	d107      	bne.n	80e88 <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   80e78:	b9e4      	cbnz	r4, 80eb4 <XMEGANVM_WritePageMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   80e7a:	f016 0f02 	tst.w	r6, #2
   80e7e:	d13f      	bne.n	80f00 <XMEGANVM_WritePageMemory+0x9c>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   80e80:	2501      	movs	r5, #1
}
   80e82:	4628      	mov	r0, r5
   80e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80e88:	4689      	mov	r9, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80e8a:	4b28      	ldr	r3, [pc, #160]	; (80f2c <XMEGANVM_WritePageMemory+0xc8>)
   80e8c:	4798      	blx	r3
   80e8e:	4605      	mov	r5, r0
   80e90:	2800      	cmp	r0, #0
   80e92:	d0f6      	beq.n	80e82 <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80e94:	204c      	movs	r0, #76	; 0x4c
   80e96:	4d26      	ldr	r5, [pc, #152]	; (80f30 <XMEGANVM_WritePageMemory+0xcc>)
   80e98:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80e9a:	200a      	movs	r0, #10
   80e9c:	f8df a094 	ldr.w	sl, [pc, #148]	; 80f34 <XMEGANVM_WritePageMemory+0xd0>
   80ea0:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   80ea2:	4648      	mov	r0, r9
   80ea4:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80ea6:	204c      	movs	r0, #76	; 0x4c
   80ea8:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80eaa:	200b      	movs	r0, #11
   80eac:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80eae:	2001      	movs	r0, #1
   80eb0:	47a8      	blx	r5
   80eb2:	e7e1      	b.n	80e78 <XMEGANVM_WritePageMemory+0x14>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80eb4:	4b1d      	ldr	r3, [pc, #116]	; (80f2c <XMEGANVM_WritePageMemory+0xc8>)
   80eb6:	4798      	blx	r3
   80eb8:	4605      	mov	r5, r0
   80eba:	2800      	cmp	r0, #0
   80ebc:	d0e1      	beq.n	80e82 <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80ebe:	204c      	movs	r0, #76	; 0x4c
   80ec0:	4d1b      	ldr	r5, [pc, #108]	; (80f30 <XMEGANVM_WritePageMemory+0xcc>)
   80ec2:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80ec4:	200a      	movs	r0, #10
   80ec6:	4b1b      	ldr	r3, [pc, #108]	; (80f34 <XMEGANVM_WritePageMemory+0xd0>)
   80ec8:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   80eca:	4638      	mov	r0, r7
   80ecc:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80ece:	206b      	movs	r0, #107	; 0x6b
   80ed0:	47a8      	blx	r5
		XMEGANVM_SendAddress(WriteAddress);
   80ed2:	9808      	ldr	r0, [sp, #32]
   80ed4:	4b18      	ldr	r3, [pc, #96]	; (80f38 <XMEGANVM_WritePageMemory+0xd4>)
   80ed6:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80ed8:	20a0      	movs	r0, #160	; 0xa0
   80eda:	47a8      	blx	r5
		XPROGTarget_SendByte(WriteSize - 1);
   80edc:	1e60      	subs	r0, r4, #1
   80ede:	b2c0      	uxtb	r0, r0
   80ee0:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80ee2:	2064      	movs	r0, #100	; 0x64
   80ee4:	47a8      	blx	r5
		while (WriteSize--)
   80ee6:	e006      	b.n	80ef6 <XMEGANVM_WritePageMemory+0x92>
		  XPROGTarget_SendByte(*(WriteBuffer++));
   80ee8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   80eea:	f817 0b01 	ldrb.w	r0, [r7], #1
   80eee:	4b10      	ldr	r3, [pc, #64]	; (80f30 <XMEGANVM_WritePageMemory+0xcc>)
   80ef0:	4798      	blx	r3
		while (WriteSize--)
   80ef2:	462c      	mov	r4, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   80ef4:	9709      	str	r7, [sp, #36]	; 0x24
		while (WriteSize--)
   80ef6:	1e61      	subs	r1, r4, #1
   80ef8:	b28d      	uxth	r5, r1
   80efa:	2c00      	cmp	r4, #0
   80efc:	d1f4      	bne.n	80ee8 <XMEGANVM_WritePageMemory+0x84>
   80efe:	e7bc      	b.n	80e7a <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80f00:	4b0a      	ldr	r3, [pc, #40]	; (80f2c <XMEGANVM_WritePageMemory+0xc8>)
   80f02:	4798      	blx	r3
   80f04:	4605      	mov	r5, r0
   80f06:	2800      	cmp	r0, #0
   80f08:	d0bb      	beq.n	80e82 <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f0a:	204c      	movs	r0, #76	; 0x4c
   80f0c:	4c08      	ldr	r4, [pc, #32]	; (80f30 <XMEGANVM_WritePageMemory+0xcc>)
   80f0e:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80f10:	200a      	movs	r0, #10
   80f12:	4b08      	ldr	r3, [pc, #32]	; (80f34 <XMEGANVM_WritePageMemory+0xd0>)
   80f14:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   80f16:	4640      	mov	r0, r8
   80f18:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f1a:	204c      	movs	r0, #76	; 0x4c
   80f1c:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   80f1e:	9808      	ldr	r0, [sp, #32]
   80f20:	4b05      	ldr	r3, [pc, #20]	; (80f38 <XMEGANVM_WritePageMemory+0xd4>)
   80f22:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   80f24:	2000      	movs	r0, #0
   80f26:	47a0      	blx	r4
   80f28:	e7ab      	b.n	80e82 <XMEGANVM_WritePageMemory+0x1e>
   80f2a:	bf00      	nop
   80f2c:	00080cb9 	.word	0x00080cb9
   80f30:	00081521 	.word	0x00081521
   80f34:	00080c75 	.word	0x00080c75
   80f38:	00080c55 	.word	0x00080c55

00080f3c <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   80f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80f3e:	4604      	mov	r4, r0
   80f40:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80f42:	4b36      	ldr	r3, [pc, #216]	; (8101c <XMEGANVM_EraseMemory+0xe0>)
   80f44:	4798      	blx	r3
   80f46:	4603      	mov	r3, r0
   80f48:	b1a8      	cbz	r0, 80f76 <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   80f4a:	2c40      	cmp	r4, #64	; 0x40
   80f4c:	d015      	beq.n	80f7a <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   80f4e:	2c30      	cmp	r4, #48	; 0x30
   80f50:	d022      	beq.n	80f98 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f52:	204c      	movs	r0, #76	; 0x4c
   80f54:	4e32      	ldr	r6, [pc, #200]	; (81020 <XMEGANVM_EraseMemory+0xe4>)
   80f56:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80f58:	200a      	movs	r0, #10
   80f5a:	4b32      	ldr	r3, [pc, #200]	; (81024 <XMEGANVM_EraseMemory+0xe8>)
   80f5c:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   80f5e:	4620      	mov	r0, r4
   80f60:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f62:	204c      	movs	r0, #76	; 0x4c
   80f64:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   80f66:	4628      	mov	r0, r5
   80f68:	4b2f      	ldr	r3, [pc, #188]	; (81028 <XMEGANVM_EraseMemory+0xec>)
   80f6a:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   80f6c:	2000      	movs	r0, #0
   80f6e:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   80f70:	4b2e      	ldr	r3, [pc, #184]	; (8102c <XMEGANVM_EraseMemory+0xf0>)
   80f72:	4798      	blx	r3
   80f74:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   80f76:	4618      	mov	r0, r3
   80f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f7a:	204c      	movs	r0, #76	; 0x4c
   80f7c:	4d28      	ldr	r5, [pc, #160]	; (81020 <XMEGANVM_EraseMemory+0xe4>)
   80f7e:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80f80:	200a      	movs	r0, #10
   80f82:	4e28      	ldr	r6, [pc, #160]	; (81024 <XMEGANVM_EraseMemory+0xe8>)
   80f84:	47b0      	blx	r6
		XPROGTarget_SendByte(EraseCommand);
   80f86:	4620      	mov	r0, r4
   80f88:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f8a:	204c      	movs	r0, #76	; 0x4c
   80f8c:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80f8e:	200b      	movs	r0, #11
   80f90:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80f92:	2001      	movs	r0, #1
   80f94:	47a8      	blx	r5
   80f96:	e7eb      	b.n	80f70 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f98:	204c      	movs	r0, #76	; 0x4c
   80f9a:	4e21      	ldr	r6, [pc, #132]	; (81020 <XMEGANVM_EraseMemory+0xe4>)
   80f9c:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80f9e:	200a      	movs	r0, #10
   80fa0:	4f20      	ldr	r7, [pc, #128]	; (81024 <XMEGANVM_EraseMemory+0xe8>)
   80fa2:	47b8      	blx	r7
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   80fa4:	2036      	movs	r0, #54	; 0x36
   80fa6:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80fa8:	204c      	movs	r0, #76	; 0x4c
   80faa:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80fac:	200b      	movs	r0, #11
   80fae:	47b8      	blx	r7
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80fb0:	2001      	movs	r0, #1
   80fb2:	47b0      	blx	r6
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80fb4:	4b19      	ldr	r3, [pc, #100]	; (8101c <XMEGANVM_EraseMemory+0xe0>)
   80fb6:	4798      	blx	r3
   80fb8:	4603      	mov	r3, r0
   80fba:	2800      	cmp	r0, #0
   80fbc:	d0db      	beq.n	80f76 <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80fbe:	204c      	movs	r0, #76	; 0x4c
   80fc0:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80fc2:	200a      	movs	r0, #10
   80fc4:	47b8      	blx	r7
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   80fc6:	2033      	movs	r0, #51	; 0x33
   80fc8:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80fca:	206b      	movs	r0, #107	; 0x6b
   80fcc:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   80fce:	4628      	mov	r0, r5
   80fd0:	4b15      	ldr	r3, [pc, #84]	; (81028 <XMEGANVM_EraseMemory+0xec>)
   80fd2:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80fd4:	20a0      	movs	r0, #160	; 0xa0
   80fd6:	47b0      	blx	r6
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   80fd8:	4b15      	ldr	r3, [pc, #84]	; (81030 <XMEGANVM_EraseMemory+0xf4>)
   80fda:	8818      	ldrh	r0, [r3, #0]
   80fdc:	3801      	subs	r0, #1
   80fde:	b2c0      	uxtb	r0, r0
   80fe0:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80fe2:	2064      	movs	r0, #100	; 0x64
   80fe4:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   80fe6:	2500      	movs	r5, #0
   80fe8:	e004      	b.n	80ff4 <XMEGANVM_EraseMemory+0xb8>
		  XPROGTarget_SendByte(0x00);
   80fea:	2000      	movs	r0, #0
   80fec:	4b0c      	ldr	r3, [pc, #48]	; (81020 <XMEGANVM_EraseMemory+0xe4>)
   80fee:	4798      	blx	r3
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   80ff0:	3501      	adds	r5, #1
   80ff2:	b2ed      	uxtb	r5, r5
   80ff4:	b2ab      	uxth	r3, r5
   80ff6:	4a0e      	ldr	r2, [pc, #56]	; (81030 <XMEGANVM_EraseMemory+0xf4>)
   80ff8:	8812      	ldrh	r2, [r2, #0]
   80ffa:	4293      	cmp	r3, r2
   80ffc:	d3f5      	bcc.n	80fea <XMEGANVM_EraseMemory+0xae>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80ffe:	204c      	movs	r0, #76	; 0x4c
   81000:	4d07      	ldr	r5, [pc, #28]	; (81020 <XMEGANVM_EraseMemory+0xe4>)
   81002:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   81004:	200a      	movs	r0, #10
   81006:	4e07      	ldr	r6, [pc, #28]	; (81024 <XMEGANVM_EraseMemory+0xe8>)
   81008:	47b0      	blx	r6
		XPROGTarget_SendByte(EraseCommand);
   8100a:	4620      	mov	r0, r4
   8100c:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8100e:	204c      	movs	r0, #76	; 0x4c
   81010:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   81012:	200b      	movs	r0, #11
   81014:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   81016:	2001      	movs	r0, #1
   81018:	47a8      	blx	r5
   8101a:	e7a9      	b.n	80f70 <XMEGANVM_EraseMemory+0x34>
   8101c:	00080cb9 	.word	0x00080cb9
   81020:	00081521 	.word	0x00081521
   81024:	00080c75 	.word	0x00080c75
   81028:	00080c55 	.word	0x00080c55
   8102c:	00080c8d 	.word	0x00080c8d
   81030:	200001f4 	.word	0x200001f4

00081034 <XPROGProtocol_EnterXPROGMode>:
	
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
   81034:	b508      	push	{r3, lr}
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   81036:	4b03      	ldr	r3, [pc, #12]	; (81044 <XPROGProtocol_EnterXPROGMode+0x10>)
   81038:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   8103a:	f080 0001 	eor.w	r0, r0, #1
   8103e:	4b02      	ldr	r3, [pc, #8]	; (81048 <XPROGProtocol_EnterXPROGMode+0x14>)
   81040:	7018      	strb	r0, [r3, #0]
}
   81042:	bd08      	pop	{r3, pc}
   81044:	00080cf5 	.word	0x00080cf5
   81048:	20000db6 	.word	0x20000db6

0008104c <XPROGProtocol_LeaveXPROGMode>:

/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
   8104c:	b508      	push	{r3, lr}
    XMEGANVM_DisablePDI();
   8104e:	4b03      	ldr	r3, [pc, #12]	; (8105c <XPROGProtocol_LeaveXPROGMode+0x10>)
   81050:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   81052:	4b03      	ldr	r3, [pc, #12]	; (81060 <XPROGProtocol_LeaveXPROGMode+0x14>)
   81054:	2200      	movs	r2, #0
   81056:	701a      	strb	r2, [r3, #0]
}
   81058:	bd08      	pop	{r3, pc}
   8105a:	bf00      	nop
   8105c:	00080d51 	.word	0x00080d51
   81060:	20000db6 	.word	0x20000db6

00081064 <XPROGProtocol_Erase>:

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
   81064:	b508      	push	{r3, lr}
	XPROG_Status = XPROG_ERR_OK;
   81066:	4b1d      	ldr	r3, [pc, #116]	; (810dc <XPROGProtocol_Erase+0x78>)
   81068:	2200      	movs	r2, #0
   8106a:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   8106c:	4b1c      	ldr	r3, [pc, #112]	; (810e0 <XPROGProtocol_Erase+0x7c>)
   8106e:	899b      	ldrh	r3, [r3, #12]
   81070:	2b04      	cmp	r3, #4
   81072:	d915      	bls.n	810a0 <XPROGProtocol_Erase+0x3c>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   81074:	4b1a      	ldr	r3, [pc, #104]	; (810e0 <XPROGProtocol_Erase+0x7c>)
   81076:	689b      	ldr	r3, [r3, #8]
   81078:	781a      	ldrb	r2, [r3, #0]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8107a:	7918      	ldrb	r0, [r3, #4]
   8107c:	78d9      	ldrb	r1, [r3, #3]
   8107e:	0409      	lsls	r1, r1, #16
   81080:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
   81084:	7898      	ldrb	r0, [r3, #2]
   81086:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   8108a:	785b      	ldrb	r3, [r3, #1]
   8108c:	4319      	orrs	r1, r3

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   8108e:	1e53      	subs	r3, r2, #1
   81090:	2b07      	cmp	r3, #7
   81092:	d81e      	bhi.n	810d2 <XPROGProtocol_Erase+0x6e>
   81094:	e8df f003 	tbb	[pc, r3]
   81098:	13111f08 	.word	0x13111f08
   8109c:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   810a0:	4b0e      	ldr	r3, [pc, #56]	; (810dc <XPROGProtocol_Erase+0x78>)
   810a2:	2201      	movs	r2, #1
   810a4:	701a      	strb	r2, [r3, #0]

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
		XPROG_Status = XPROG_ERR_TIMEOUT;		
	}
}
   810a6:	bd08      	pop	{r3, pc}
	switch (MemoryType)
   810a8:	2040      	movs	r0, #64	; 0x40
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   810aa:	4b0e      	ldr	r3, [pc, #56]	; (810e4 <XPROGProtocol_Erase+0x80>)
   810ac:	4798      	blx	r3
   810ae:	2800      	cmp	r0, #0
   810b0:	d1f9      	bne.n	810a6 <XPROGProtocol_Erase+0x42>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   810b2:	4b0a      	ldr	r3, [pc, #40]	; (810dc <XPROGProtocol_Erase+0x78>)
   810b4:	2203      	movs	r2, #3
   810b6:	701a      	strb	r2, [r3, #0]
   810b8:	e7f5      	b.n	810a6 <XPROGProtocol_Erase+0x42>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   810ba:	2068      	movs	r0, #104	; 0x68
		break;
   810bc:	e7f5      	b.n	810aa <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   810be:	2030      	movs	r0, #48	; 0x30
		break;
   810c0:	e7f3      	b.n	810aa <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   810c2:	2022      	movs	r0, #34	; 0x22
		break;
   810c4:	e7f1      	b.n	810aa <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   810c6:	202a      	movs	r0, #42	; 0x2a
		break;
   810c8:	e7ef      	b.n	810aa <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   810ca:	2032      	movs	r0, #50	; 0x32
		break;
   810cc:	e7ed      	b.n	810aa <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   810ce:	2018      	movs	r0, #24
		break;
   810d0:	e7eb      	b.n	810aa <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   810d2:	2000      	movs	r0, #0
		break;
   810d4:	e7e9      	b.n	810aa <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
   810d6:	2020      	movs	r0, #32
   810d8:	e7e7      	b.n	810aa <XPROGProtocol_Erase+0x46>
   810da:	bf00      	nop
   810dc:	20000db6 	.word	0x20000db6
   810e0:	20001930 	.word	0x20001930
   810e4:	00080f3d 	.word	0x00080f3d

000810e8 <XPROGProtocol_WriteMemory>:

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
   810e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810ec:	b084      	sub	sp, #16
   810ee:	4605      	mov	r5, r0
	XPROG_Status = XPROG_ERR_OK;
   810f0:	4b35      	ldr	r3, [pc, #212]	; (811c8 <XPROGProtocol_WriteMemory+0xe0>)
   810f2:	2200      	movs	r2, #0
   810f4:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   810f6:	4b35      	ldr	r3, [pc, #212]	; (811cc <XPROGProtocol_WriteMemory+0xe4>)
   810f8:	88db      	ldrh	r3, [r3, #6]
   810fa:	2b07      	cmp	r3, #7
   810fc:	d802      	bhi.n	81104 <XPROGProtocol_WriteMemory+0x1c>
		XPROG_Status = XPROG_ERR_FAILED;
   810fe:	4b32      	ldr	r3, [pc, #200]	; (811c8 <XPROGProtocol_WriteMemory+0xe0>)
   81100:	2201      	movs	r2, #1
   81102:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   81104:	4b31      	ldr	r3, [pc, #196]	; (811cc <XPROGProtocol_WriteMemory+0xe4>)
   81106:	689a      	ldr	r2, [r3, #8]
   81108:	7810      	ldrb	r0, [r2, #0]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
   8110a:	7853      	ldrb	r3, [r2, #1]
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   8110c:	7954      	ldrb	r4, [r2, #5]
   8110e:	7911      	ldrb	r1, [r2, #4]
   81110:	0409      	lsls	r1, r1, #16
   81112:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
   81116:	78d4      	ldrb	r4, [r2, #3]
   81118:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   8111c:	7894      	ldrb	r4, [r2, #2]
   8111e:	430c      	orrs	r4, r1
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   81120:	7996      	ldrb	r6, [r2, #6]
   81122:	79d2      	ldrb	r2, [r2, #7]
   81124:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
	
	if (Length > XMEGA_BUF_SIZE) {
   81128:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   8112c:	d901      	bls.n	81132 <XPROGProtocol_WriteMemory+0x4a>
		Length = XMEGA_BUF_SIZE;
   8112e:	f44f 7680 	mov.w	r6, #256	; 0x100
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   81132:	1e42      	subs	r2, r0, #1
   81134:	2a05      	cmp	r2, #5
   81136:	d804      	bhi.n	81142 <XPROGProtocol_WriteMemory+0x5a>
   81138:	e8df f002 	tbb	[pc, r2]
   8113c:	1b0f0927 	.word	0x1b0f0927
   81140:	1521      	.short	0x1521
   81142:	2701      	movs	r7, #1
   81144:	2126      	movs	r1, #38	; 0x26
   81146:	2023      	movs	r0, #35	; 0x23
   81148:	f04f 082e 	mov.w	r8, #46	; 0x2e
   8114c:	e022      	b.n	81194 <XPROGProtocol_WriteMemory+0xac>
	bool    PagedMemory      = true;
   8114e:	2701      	movs	r7, #1
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   81150:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   81152:	2023      	movs	r0, #35	; 0x23
	{
		case XPROG_MEM_TYPE_APPL:
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
		break;
		case XPROG_MEM_TYPE_BOOT:
		WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
   81154:	f04f 082c 	mov.w	r8, #44	; 0x2c
		break;
   81158:	e01c      	b.n	81194 <XPROGProtocol_WriteMemory+0xac>
	bool    PagedMemory      = true;
   8115a:	2701      	movs	r7, #1
		case XPROG_MEM_TYPE_EEPROM:
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   8115c:	2136      	movs	r1, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   8115e:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   81160:	f04f 0835 	mov.w	r8, #53	; 0x35
		break;
   81164:	e016      	b.n	81194 <XPROGProtocol_WriteMemory+0xac>
	bool    PagedMemory      = true;
   81166:	2701      	movs	r7, #1
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   81168:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8116a:	2023      	movs	r0, #35	; 0x23
		case XPROG_MEM_TYPE_USERSIG:
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   8116c:	f04f 081a 	mov.w	r8, #26
		break;
   81170:	e010      	b.n	81194 <XPROGProtocol_WriteMemory+0xac>
		case XPROG_MEM_TYPE_FUSE:
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
		PagedMemory      = false;
   81172:	2700      	movs	r7, #0
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   81174:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   81176:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   81178:	f04f 084c 	mov.w	r8, #76	; 0x4c
		break;
   8117c:	e00a      	b.n	81194 <XPROGProtocol_WriteMemory+0xac>
		case XPROG_MEM_TYPE_LOCKBITS:
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
		PagedMemory      = false;
   8117e:	2700      	movs	r7, #0
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   81180:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   81182:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
   81184:	f04f 0808 	mov.w	r8, #8
		break;
   81188:	e004      	b.n	81194 <XPROGProtocol_WriteMemory+0xac>
	bool    PagedMemory      = true;
   8118a:	2701      	movs	r7, #1
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   8118c:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8118e:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   81190:	f04f 0824 	mov.w	r8, #36	; 0x24
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   81194:	b91f      	cbnz	r7, 8119e <XPROGProtocol_WriteMemory+0xb6>
												   PageMode, Address,outbuf, Length)))          ||
   81196:	b177      	cbz	r7, 811b6 <XPROGProtocol_WriteMemory+0xce>
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
	}

}
   81198:	b004      	add	sp, #16
   8119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   8119e:	9602      	str	r6, [sp, #8]
   811a0:	9501      	str	r5, [sp, #4]
   811a2:	9400      	str	r4, [sp, #0]
   811a4:	4642      	mov	r2, r8
   811a6:	4e0a      	ldr	r6, [pc, #40]	; (811d0 <XPROGProtocol_WriteMemory+0xe8>)
   811a8:	47b0      	blx	r6
   811aa:	2800      	cmp	r0, #0
   811ac:	d1f3      	bne.n	81196 <XPROGProtocol_WriteMemory+0xae>
		XPROG_Status = XPROG_ERR_TIMEOUT;
   811ae:	4b06      	ldr	r3, [pc, #24]	; (811c8 <XPROGProtocol_WriteMemory+0xe0>)
   811b0:	2203      	movs	r2, #3
   811b2:	701a      	strb	r2, [r3, #0]
}
   811b4:	e7f0      	b.n	81198 <XPROGProtocol_WriteMemory+0xb0>
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   811b6:	782a      	ldrb	r2, [r5, #0]
   811b8:	4621      	mov	r1, r4
   811ba:	4640      	mov	r0, r8
   811bc:	4b05      	ldr	r3, [pc, #20]	; (811d4 <XPROGProtocol_WriteMemory+0xec>)
   811be:	4798      	blx	r3
   811c0:	2800      	cmp	r0, #0
   811c2:	d1e9      	bne.n	81198 <XPROGProtocol_WriteMemory+0xb0>
   811c4:	e7f3      	b.n	811ae <XPROGProtocol_WriteMemory+0xc6>
   811c6:	bf00      	nop
   811c8:	20000db6 	.word	0x20000db6
   811cc:	20001930 	.word	0x20001930
   811d0:	00080e65 	.word	0x00080e65
   811d4:	00080e1d 	.word	0x00080e1d

000811d8 <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
   811d8:	b510      	push	{r4, lr}
   811da:	4601      	mov	r1, r0
	XPROG_Status = XPROG_ERR_OK;
   811dc:	4b0f      	ldr	r3, [pc, #60]	; (8121c <XPROGProtocol_ReadMemory+0x44>)
   811de:	2200      	movs	r2, #0
   811e0:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   811e2:	4b0f      	ldr	r3, [pc, #60]	; (81220 <XPROGProtocol_ReadMemory+0x48>)
   811e4:	689c      	ldr	r4, [r3, #8]
   811e6:	7920      	ldrb	r0, [r4, #4]
   811e8:	78e3      	ldrb	r3, [r4, #3]
   811ea:	041b      	lsls	r3, r3, #16
   811ec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   811f0:	78a0      	ldrb	r0, [r4, #2]
   811f2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   811f6:	7860      	ldrb	r0, [r4, #1]
   811f8:	4318      	orrs	r0, r3
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   811fa:	7962      	ldrb	r2, [r4, #5]
   811fc:	79a3      	ldrb	r3, [r4, #6]
   811fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	
	if (Length > XMEGA_BUF_SIZE) {
   81202:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   81206:	d901      	bls.n	8120c <XPROGProtocol_ReadMemory+0x34>
		Length = XMEGA_BUF_SIZE;
   81208:	f44f 7280 	mov.w	r2, #256	; 0x100
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   8120c:	4b05      	ldr	r3, [pc, #20]	; (81224 <XPROGProtocol_ReadMemory+0x4c>)
   8120e:	4798      	blx	r3
   81210:	b910      	cbnz	r0, 81218 <XPROGProtocol_ReadMemory+0x40>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   81212:	4b02      	ldr	r3, [pc, #8]	; (8121c <XPROGProtocol_ReadMemory+0x44>)
   81214:	2203      	movs	r2, #3
   81216:	701a      	strb	r2, [r3, #0]
	}
}
   81218:	bd10      	pop	{r4, pc}
   8121a:	bf00      	nop
   8121c:	20000db6 	.word	0x20000db6
   81220:	20001930 	.word	0x20001930
   81224:	00080d8d 	.word	0x00080d8d

00081228 <XPROGProtocol_SetParam>:


static void XPROGProtocol_SetParam(void)
{
   81228:	b508      	push	{r3, lr}
	XPROG_Status = XPROG_ERR_OK;
   8122a:	4b2a      	ldr	r3, [pc, #168]	; (812d4 <XPROGProtocol_SetParam+0xac>)
   8122c:	2200      	movs	r2, #0
   8122e:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   81230:	4a29      	ldr	r2, [pc, #164]	; (812d8 <XPROGProtocol_SetParam+0xb0>)
   81232:	6891      	ldr	r1, [r2, #8]
   81234:	780b      	ldrb	r3, [r1, #0]
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   81236:	8992      	ldrh	r2, [r2, #12]
   81238:	2a01      	cmp	r2, #1
   8123a:	d908      	bls.n	8124e <XPROGProtocol_SetParam+0x26>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   8123c:	3b01      	subs	r3, #1
   8123e:	2b07      	cmp	r3, #7
   81240:	d844      	bhi.n	812cc <XPROGProtocol_SetParam+0xa4>
   81242:	e8df f003 	tbb	[pc, r3]
   81246:	1b08      	.short	0x1b08
   81248:	43432c28 	.word	0x43432c28
   8124c:	3043      	.short	0x3043
		XPROG_Status = XPROG_ERR_FAILED;
   8124e:	4b21      	ldr	r3, [pc, #132]	; (812d4 <XPROGProtocol_SetParam+0xac>)
   81250:	2201      	movs	r2, #1
   81252:	701a      	strb	r2, [r3, #0]
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
			break;
	}
   81254:	bd08      	pop	{r3, pc}
			if (udd_g_ctrlreq.payload_size < 5){
   81256:	2a04      	cmp	r2, #4
   81258:	d90c      	bls.n	81274 <XPROGProtocol_SetParam+0x4c>
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8125a:	790a      	ldrb	r2, [r1, #4]
   8125c:	78cb      	ldrb	r3, [r1, #3]
   8125e:	041b      	lsls	r3, r3, #16
   81260:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   81264:	788a      	ldrb	r2, [r1, #2]
   81266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8126a:	784a      	ldrb	r2, [r1, #1]
   8126c:	4313      	orrs	r3, r2
   8126e:	4a1b      	ldr	r2, [pc, #108]	; (812dc <XPROGProtocol_SetParam+0xb4>)
   81270:	6013      	str	r3, [r2, #0]
			break;
   81272:	e7ef      	b.n	81254 <XPROGProtocol_SetParam+0x2c>
				XPROG_Status = XPROG_ERR_FAILED;
   81274:	4b17      	ldr	r3, [pc, #92]	; (812d4 <XPROGProtocol_SetParam+0xac>)
   81276:	2201      	movs	r2, #1
   81278:	701a      	strb	r2, [r3, #0]
				return;
   8127a:	e7eb      	b.n	81254 <XPROGProtocol_SetParam+0x2c>
			if (udd_g_ctrlreq.payload_size < 3){
   8127c:	2a02      	cmp	r2, #2
   8127e:	d906      	bls.n	8128e <XPROGProtocol_SetParam+0x66>
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   81280:	784b      	ldrb	r3, [r1, #1]
   81282:	788a      	ldrb	r2, [r1, #2]
   81284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   81288:	4a15      	ldr	r2, [pc, #84]	; (812e0 <XPROGProtocol_SetParam+0xb8>)
   8128a:	8013      	strh	r3, [r2, #0]
			break;
   8128c:	e7e2      	b.n	81254 <XPROGProtocol_SetParam+0x2c>
				XPROG_Status = XPROG_ERR_FAILED;
   8128e:	4b11      	ldr	r3, [pc, #68]	; (812d4 <XPROGProtocol_SetParam+0xac>)
   81290:	2201      	movs	r2, #1
   81292:	701a      	strb	r2, [r3, #0]
				return;
   81294:	e7de      	b.n	81254 <XPROGProtocol_SetParam+0x2c>
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   81296:	784a      	ldrb	r2, [r1, #1]
   81298:	4b12      	ldr	r3, [pc, #72]	; (812e4 <XPROGProtocol_SetParam+0xbc>)
   8129a:	701a      	strb	r2, [r3, #0]
			break;
   8129c:	e7da      	b.n	81254 <XPROGProtocol_SetParam+0x2c>
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   8129e:	784a      	ldrb	r2, [r1, #1]
   812a0:	4b11      	ldr	r3, [pc, #68]	; (812e8 <XPROGProtocol_SetParam+0xc0>)
   812a2:	701a      	strb	r2, [r3, #0]
			break;
   812a4:	e7d6      	b.n	81254 <XPROGProtocol_SetParam+0x2c>
			if (udd_g_ctrlreq.payload_size < 5){
   812a6:	2a04      	cmp	r2, #4
   812a8:	d803      	bhi.n	812b2 <XPROGProtocol_SetParam+0x8a>
				XPROG_Status = XPROG_ERR_FAILED;
   812aa:	4b0a      	ldr	r3, [pc, #40]	; (812d4 <XPROGProtocol_SetParam+0xac>)
   812ac:	2201      	movs	r2, #1
   812ae:	701a      	strb	r2, [r3, #0]
				return;
   812b0:	e7d0      	b.n	81254 <XPROGProtocol_SetParam+0x2c>
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   812b2:	7908      	ldrb	r0, [r1, #4]
   812b4:	78cb      	ldrb	r3, [r1, #3]
   812b6:	041b      	lsls	r3, r3, #16
   812b8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   812bc:	7888      	ldrb	r0, [r1, #2]
   812be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   812c2:	7848      	ldrb	r0, [r1, #1]
   812c4:	4318      	orrs	r0, r3
   812c6:	4b09      	ldr	r3, [pc, #36]	; (812ec <XPROGProtocol_SetParam+0xc4>)
   812c8:	4798      	blx	r3
			break;
   812ca:	e7c3      	b.n	81254 <XPROGProtocol_SetParam+0x2c>
			XPROG_Status = XPROG_ERR_FAILED;
   812cc:	4b01      	ldr	r3, [pc, #4]	; (812d4 <XPROGProtocol_SetParam+0xac>)
   812ce:	2201      	movs	r2, #1
   812d0:	701a      	strb	r2, [r3, #0]
			break;
   812d2:	e7bf      	b.n	81254 <XPROGProtocol_SetParam+0x2c>
   812d4:	20000db6 	.word	0x20000db6
   812d8:	20001930 	.word	0x20001930
   812dc:	200001f8 	.word	0x200001f8
   812e0:	200001f4 	.word	0x200001f4
   812e4:	200001fc 	.word	0x200001fc
   812e8:	200001fd 	.word	0x200001fd
   812ec:	00081689 	.word	0x00081689

000812f0 <XPROGProtocol_Command>:
{
   812f0:	b508      	push	{r3, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   812f2:	4b39      	ldr	r3, [pc, #228]	; (813d8 <XPROGProtocol_Command+0xe8>)
   812f4:	8859      	ldrh	r1, [r3, #2]
   812f6:	b2cb      	uxtb	r3, r1
   812f8:	4a38      	ldr	r2, [pc, #224]	; (813dc <XPROGProtocol_Command+0xec>)
   812fa:	7013      	strb	r3, [r2, #0]
	switch (status_payload[0])
   812fc:	3b01      	subs	r3, #1
   812fe:	2b21      	cmp	r3, #33	; 0x21
   81300:	d816      	bhi.n	81330 <XPROGProtocol_Command+0x40>
   81302:	e8df f003 	tbb	[pc, r3]
   81306:	1911      	.short	0x1911
   81308:	2f29231e 	.word	0x2f29231e
   8130c:	15151532 	.word	0x15151532
   81310:	15151515 	.word	0x15151515
   81314:	15151515 	.word	0x15151515
   81318:	15151515 	.word	0x15151515
   8131c:	15151515 	.word	0x15151515
   81320:	15151515 	.word	0x15151515
   81324:	46375715 	.word	0x46375715
			start_timeoutcnt();
   81328:	4b2d      	ldr	r3, [pc, #180]	; (813e0 <XPROGProtocol_Command+0xf0>)
   8132a:	4798      	blx	r3
			XPROGProtocol_EnterXPROGMode();
   8132c:	4b2d      	ldr	r3, [pc, #180]	; (813e4 <XPROGProtocol_Command+0xf4>)
   8132e:	4798      	blx	r3
	stop_timeoutcnt();
   81330:	4b2d      	ldr	r3, [pc, #180]	; (813e8 <XPROGProtocol_Command+0xf8>)
   81332:	4798      	blx	r3
	return false;
   81334:	2000      	movs	r0, #0
}
   81336:	bd08      	pop	{r3, pc}
			start_timeoutcnt();
   81338:	4b29      	ldr	r3, [pc, #164]	; (813e0 <XPROGProtocol_Command+0xf0>)
   8133a:	4798      	blx	r3
			XPROGProtocol_LeaveXPROGMode();
   8133c:	4b2b      	ldr	r3, [pc, #172]	; (813ec <XPROGProtocol_Command+0xfc>)
   8133e:	4798      	blx	r3
			break;
   81340:	e7f6      	b.n	81330 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   81342:	4b27      	ldr	r3, [pc, #156]	; (813e0 <XPROGProtocol_Command+0xf0>)
   81344:	4798      	blx	r3
			XPROGProtocol_Erase();
   81346:	4b2a      	ldr	r3, [pc, #168]	; (813f0 <XPROGProtocol_Command+0x100>)
   81348:	4798      	blx	r3
			break;
   8134a:	e7f1      	b.n	81330 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   8134c:	4b24      	ldr	r3, [pc, #144]	; (813e0 <XPROGProtocol_Command+0xf0>)
   8134e:	4798      	blx	r3
			XPROGProtocol_WriteMemory(xprog_rambuf);
   81350:	4828      	ldr	r0, [pc, #160]	; (813f4 <XPROGProtocol_Command+0x104>)
   81352:	4b29      	ldr	r3, [pc, #164]	; (813f8 <XPROGProtocol_Command+0x108>)
   81354:	4798      	blx	r3
			break;
   81356:	e7eb      	b.n	81330 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   81358:	4b21      	ldr	r3, [pc, #132]	; (813e0 <XPROGProtocol_Command+0xf0>)
   8135a:	4798      	blx	r3
			XPROGProtocol_ReadMemory(xprog_rambuf);
   8135c:	4825      	ldr	r0, [pc, #148]	; (813f4 <XPROGProtocol_Command+0x104>)
   8135e:	4b27      	ldr	r3, [pc, #156]	; (813fc <XPROGProtocol_Command+0x10c>)
   81360:	4798      	blx	r3
			break;
   81362:	e7e5      	b.n	81330 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   81364:	4b1e      	ldr	r3, [pc, #120]	; (813e0 <XPROGProtocol_Command+0xf0>)
   81366:	4798      	blx	r3
			break;
   81368:	e7e2      	b.n	81330 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   8136a:	4b1d      	ldr	r3, [pc, #116]	; (813e0 <XPROGProtocol_Command+0xf0>)
   8136c:	4798      	blx	r3
			XPROGProtocol_SetParam();
   8136e:	4b24      	ldr	r3, [pc, #144]	; (81400 <XPROGProtocol_Command+0x110>)
   81370:	4798      	blx	r3
			break;
   81372:	e7dd      	b.n	81330 <XPROGProtocol_Command+0x40>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   81374:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   81376:	4b18      	ldr	r3, [pc, #96]	; (813d8 <XPROGProtocol_Command+0xe8>)
   81378:	88db      	ldrh	r3, [r3, #6]
   8137a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   8137e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81382:	dc27      	bgt.n	813d4 <XPROGProtocol_Command+0xe4>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   81384:	4a1b      	ldr	r2, [pc, #108]	; (813f4 <XPROGProtocol_Command+0x104>)
   81386:	4402      	add	r2, r0
   81388:	4913      	ldr	r1, [pc, #76]	; (813d8 <XPROGProtocol_Command+0xe8>)
   8138a:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8138c:	818b      	strh	r3, [r1, #12]
			return true;
   8138e:	2001      	movs	r0, #1
   81390:	e7d1      	b.n	81336 <XPROGProtocol_Command+0x46>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   81392:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   81394:	4b10      	ldr	r3, [pc, #64]	; (813d8 <XPROGProtocol_Command+0xe8>)
   81396:	88da      	ldrh	r2, [r3, #6]
   81398:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   8139c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   813a0:	dd01      	ble.n	813a6 <XPROGProtocol_Command+0xb6>
				return false;
   813a2:	2000      	movs	r0, #0
   813a4:	e7c7      	b.n	81336 <XPROGProtocol_Command+0x46>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   813a6:	6899      	ldr	r1, [r3, #8]
   813a8:	4b12      	ldr	r3, [pc, #72]	; (813f4 <XPROGProtocol_Command+0x104>)
   813aa:	4418      	add	r0, r3
   813ac:	4b15      	ldr	r3, [pc, #84]	; (81404 <XPROGProtocol_Command+0x114>)
   813ae:	4798      	blx	r3
			return true;
   813b0:	2001      	movs	r0, #1
   813b2:	e7c0      	b.n	81336 <XPROGProtocol_Command+0x46>
			status_payload[1] = XPROG_Status;
   813b4:	4a09      	ldr	r2, [pc, #36]	; (813dc <XPROGProtocol_Command+0xec>)
   813b6:	4b14      	ldr	r3, [pc, #80]	; (81408 <XPROGProtocol_Command+0x118>)
   813b8:	781b      	ldrb	r3, [r3, #0]
   813ba:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   813bc:	4b13      	ldr	r3, [pc, #76]	; (8140c <XPROGProtocol_Command+0x11c>)
   813be:	681b      	ldr	r3, [r3, #0]
   813c0:	fab3 f383 	clz	r3, r3
   813c4:	095b      	lsrs	r3, r3, #5
   813c6:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   813c8:	4b03      	ldr	r3, [pc, #12]	; (813d8 <XPROGProtocol_Command+0xe8>)
   813ca:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   813cc:	2203      	movs	r2, #3
   813ce:	819a      	strh	r2, [r3, #12]
			return true;
   813d0:	2001      	movs	r0, #1
   813d2:	e7b0      	b.n	81336 <XPROGProtocol_Command+0x46>
				return false;
   813d4:	2000      	movs	r0, #0
   813d6:	e7ae      	b.n	81336 <XPROGProtocol_Command+0x46>
   813d8:	20001930 	.word	0x20001930
   813dc:	20000db8 	.word	0x20000db8
   813e0:	000816f9 	.word	0x000816f9
   813e4:	00081035 	.word	0x00081035
   813e8:	00081741 	.word	0x00081741
   813ec:	0008104d 	.word	0x0008104d
   813f0:	00081065 	.word	0x00081065
   813f4:	20000dbc 	.word	0x20000dbc
   813f8:	000810e9 	.word	0x000810e9
   813fc:	000811d9 	.word	0x000811d9
   81400:	00081229 	.word	0x00081229
   81404:	000851cd 	.word	0x000851cd
   81408:	20000db6 	.word	0x20000db6
   8140c:	20000ec0 	.word	0x20000ec0

00081410 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   81410:	b510      	push	{r4, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   81412:	480a      	ldr	r0, [pc, #40]	; (8143c <XPROGTarget_SetRxMode+0x2c>)
   81414:	4b0a      	ldr	r3, [pc, #40]	; (81440 <XPROGTarget_SetRxMode+0x30>)
   81416:	4798      	blx	r3
   81418:	2800      	cmp	r0, #0
   8141a:	d0fa      	beq.n	81412 <XPROGTarget_SetRxMode+0x2>

	usart_disable_tx(USART_PDI);
   8141c:	4c07      	ldr	r4, [pc, #28]	; (8143c <XPROGTarget_SetRxMode+0x2c>)
   8141e:	4620      	mov	r0, r4
   81420:	4b08      	ldr	r3, [pc, #32]	; (81444 <XPROGTarget_SetRxMode+0x34>)
   81422:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   81424:	4620      	mov	r0, r4
   81426:	4b08      	ldr	r3, [pc, #32]	; (81448 <XPROGTarget_SetRxMode+0x38>)
   81428:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   8142a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8142e:	2012      	movs	r0, #18
   81430:	4b06      	ldr	r3, [pc, #24]	; (8144c <XPROGTarget_SetRxMode+0x3c>)
   81432:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   81434:	4b06      	ldr	r3, [pc, #24]	; (81450 <XPROGTarget_SetRxMode+0x40>)
   81436:	2200      	movs	r2, #0
   81438:	701a      	strb	r2, [r3, #0]
}
   8143a:	bd10      	pop	{r4, pc}
   8143c:	40090000 	.word	0x40090000
   81440:	00082cc1 	.word	0x00082cc1
   81444:	00082c8b 	.word	0x00082c8b
   81448:	00082c97 	.word	0x00082c97
   8144c:	00084b59 	.word	0x00084b59
   81450:	20000ebc 	.word	0x20000ebc

00081454 <XPROGTarget_SetTxMode>:
{
   81454:	b510      	push	{r4, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   81456:	2011      	movs	r0, #17
   81458:	4b13      	ldr	r3, [pc, #76]	; (814a8 <XPROGTarget_SetTxMode+0x54>)
   8145a:	4798      	blx	r3
   8145c:	b118      	cbz	r0, 81466 <XPROGTarget_SetTxMode+0x12>
   8145e:	4b13      	ldr	r3, [pc, #76]	; (814ac <XPROGTarget_SetTxMode+0x58>)
   81460:	681b      	ldr	r3, [r3, #0]
   81462:	2b00      	cmp	r3, #0
   81464:	d1f7      	bne.n	81456 <XPROGTarget_SetTxMode+0x2>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   81466:	2011      	movs	r0, #17
   81468:	4b0f      	ldr	r3, [pc, #60]	; (814a8 <XPROGTarget_SetTxMode+0x54>)
   8146a:	4798      	blx	r3
   8146c:	b918      	cbnz	r0, 81476 <XPROGTarget_SetTxMode+0x22>
   8146e:	4b0f      	ldr	r3, [pc, #60]	; (814ac <XPROGTarget_SetTxMode+0x58>)
   81470:	681b      	ldr	r3, [r3, #0]
   81472:	2b00      	cmp	r3, #0
   81474:	d1f7      	bne.n	81466 <XPROGTarget_SetTxMode+0x12>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   81476:	2011      	movs	r0, #17
   81478:	4b0b      	ldr	r3, [pc, #44]	; (814a8 <XPROGTarget_SetTxMode+0x54>)
   8147a:	4798      	blx	r3
   8147c:	b118      	cbz	r0, 81486 <XPROGTarget_SetTxMode+0x32>
   8147e:	4b0b      	ldr	r3, [pc, #44]	; (814ac <XPROGTarget_SetTxMode+0x58>)
   81480:	681b      	ldr	r3, [r3, #0]
   81482:	2b00      	cmp	r3, #0
   81484:	d1f7      	bne.n	81476 <XPROGTarget_SetTxMode+0x22>
	usart_disable_rx(USART_PDI);
   81486:	4c0a      	ldr	r4, [pc, #40]	; (814b0 <XPROGTarget_SetTxMode+0x5c>)
   81488:	4620      	mov	r0, r4
   8148a:	4b0a      	ldr	r3, [pc, #40]	; (814b4 <XPROGTarget_SetTxMode+0x60>)
   8148c:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   8148e:	4620      	mov	r0, r4
   81490:	4b09      	ldr	r3, [pc, #36]	; (814b8 <XPROGTarget_SetTxMode+0x64>)
   81492:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   81494:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81498:	2012      	movs	r0, #18
   8149a:	4b08      	ldr	r3, [pc, #32]	; (814bc <XPROGTarget_SetTxMode+0x68>)
   8149c:	4798      	blx	r3
	IsSending = true;
   8149e:	4b08      	ldr	r3, [pc, #32]	; (814c0 <XPROGTarget_SetTxMode+0x6c>)
   814a0:	2201      	movs	r2, #1
   814a2:	701a      	strb	r2, [r3, #0]
}
   814a4:	bd10      	pop	{r4, pc}
   814a6:	bf00      	nop
   814a8:	00084b05 	.word	0x00084b05
   814ac:	20000ec0 	.word	0x20000ec0
   814b0:	40090000 	.word	0x40090000
   814b4:	00082c9d 	.word	0x00082c9d
   814b8:	00082c85 	.word	0x00082c85
   814bc:	00084b59 	.word	0x00084b59
   814c0:	20000ebc 	.word	0x20000ebc

000814c4 <XPROGTarget_DisableTargetPDI>:
{
   814c4:	b510      	push	{r4, lr}
	if (IsSending)
   814c6:	4b0f      	ldr	r3, [pc, #60]	; (81504 <XPROGTarget_DisableTargetPDI+0x40>)
   814c8:	781b      	ldrb	r3, [r3, #0]
   814ca:	b9bb      	cbnz	r3, 814fc <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   814cc:	4c0e      	ldr	r4, [pc, #56]	; (81508 <XPROGTarget_DisableTargetPDI+0x44>)
   814ce:	4620      	mov	r0, r4
   814d0:	4b0e      	ldr	r3, [pc, #56]	; (8150c <XPROGTarget_DisableTargetPDI+0x48>)
   814d2:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   814d4:	4620      	mov	r0, r4
   814d6:	4b0e      	ldr	r3, [pc, #56]	; (81510 <XPROGTarget_DisableTargetPDI+0x4c>)
   814d8:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   814da:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   814de:	2011      	movs	r0, #17
   814e0:	4c0c      	ldr	r4, [pc, #48]	; (81514 <XPROGTarget_DisableTargetPDI+0x50>)
   814e2:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   814e4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   814e8:	2013      	movs	r0, #19
   814ea:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   814ec:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   814f0:	2012      	movs	r0, #18
   814f2:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   814f4:	200d      	movs	r0, #13
   814f6:	4b08      	ldr	r3, [pc, #32]	; (81518 <XPROGTarget_DisableTargetPDI+0x54>)
   814f8:	4798      	blx	r3
}
   814fa:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   814fc:	4b07      	ldr	r3, [pc, #28]	; (8151c <XPROGTarget_DisableTargetPDI+0x58>)
   814fe:	4798      	blx	r3
   81500:	e7e4      	b.n	814cc <XPROGTarget_DisableTargetPDI+0x8>
   81502:	bf00      	nop
   81504:	20000ebc 	.word	0x20000ebc
   81508:	40090000 	.word	0x40090000
   8150c:	00082c9d 	.word	0x00082c9d
   81510:	00082c8b 	.word	0x00082c8b
   81514:	00084b59 	.word	0x00084b59
   81518:	00084809 	.word	0x00084809
   8151c:	00081411 	.word	0x00081411

00081520 <XPROGTarget_SendByte>:
{
   81520:	b510      	push	{r4, lr}
   81522:	4604      	mov	r4, r0
	if (!(IsSending))
   81524:	4b05      	ldr	r3, [pc, #20]	; (8153c <XPROGTarget_SendByte+0x1c>)
   81526:	781b      	ldrb	r3, [r3, #0]
   81528:	b123      	cbz	r3, 81534 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   8152a:	4621      	mov	r1, r4
   8152c:	4804      	ldr	r0, [pc, #16]	; (81540 <XPROGTarget_SendByte+0x20>)
   8152e:	4b05      	ldr	r3, [pc, #20]	; (81544 <XPROGTarget_SendByte+0x24>)
   81530:	4798      	blx	r3
}
   81532:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   81534:	4b04      	ldr	r3, [pc, #16]	; (81548 <XPROGTarget_SendByte+0x28>)
   81536:	4798      	blx	r3
   81538:	e7f7      	b.n	8152a <XPROGTarget_SendByte+0xa>
   8153a:	bf00      	nop
   8153c:	20000ebc 	.word	0x20000ebc
   81540:	40090000 	.word	0x40090000
   81544:	00082cdf 	.word	0x00082cdf
   81548:	00081455 	.word	0x00081455

0008154c <XPROGTarget_ReceiveByte>:
{
   8154c:	b500      	push	{lr}
   8154e:	b083      	sub	sp, #12
	if (IsSending)
   81550:	4b0a      	ldr	r3, [pc, #40]	; (8157c <XPROGTarget_ReceiveByte+0x30>)
   81552:	781b      	ldrb	r3, [r3, #0]
   81554:	b973      	cbnz	r3, 81574 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   81556:	a901      	add	r1, sp, #4
   81558:	4809      	ldr	r0, [pc, #36]	; (81580 <XPROGTarget_ReceiveByte+0x34>)
   8155a:	4b0a      	ldr	r3, [pc, #40]	; (81584 <XPROGTarget_ReceiveByte+0x38>)
   8155c:	4798      	blx	r3
   8155e:	2801      	cmp	r0, #1
   81560:	d103      	bne.n	8156a <XPROGTarget_ReceiveByte+0x1e>
   81562:	4b09      	ldr	r3, [pc, #36]	; (81588 <XPROGTarget_ReceiveByte+0x3c>)
   81564:	681b      	ldr	r3, [r3, #0]
   81566:	2b00      	cmp	r3, #0
   81568:	d1f5      	bne.n	81556 <XPROGTarget_ReceiveByte+0xa>
}
   8156a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   8156e:	b003      	add	sp, #12
   81570:	f85d fb04 	ldr.w	pc, [sp], #4
	  XPROGTarget_SetRxMode();
   81574:	4b05      	ldr	r3, [pc, #20]	; (8158c <XPROGTarget_ReceiveByte+0x40>)
   81576:	4798      	blx	r3
   81578:	e7ed      	b.n	81556 <XPROGTarget_ReceiveByte+0xa>
   8157a:	bf00      	nop
   8157c:	20000ebc 	.word	0x20000ebc
   81580:	40090000 	.word	0x40090000
   81584:	00082cf1 	.word	0x00082cf1
   81588:	20000ec0 	.word	0x20000ec0
   8158c:	00081411 	.word	0x00081411

00081590 <XPROGTarget_SendIdle>:
{
   81590:	b510      	push	{r4, lr}
	if (!(IsSending))
   81592:	4b13      	ldr	r3, [pc, #76]	; (815e0 <XPROGTarget_SendIdle+0x50>)
   81594:	781b      	ldrb	r3, [r3, #0]
   81596:	b10b      	cbz	r3, 8159c <XPROGTarget_SendIdle+0xc>
{
   81598:	2400      	movs	r4, #0
   8159a:	e014      	b.n	815c6 <XPROGTarget_SendIdle+0x36>
	  XPROGTarget_SetTxMode();
   8159c:	4b11      	ldr	r3, [pc, #68]	; (815e4 <XPROGTarget_SendIdle+0x54>)
   8159e:	4798      	blx	r3
   815a0:	e7fa      	b.n	81598 <XPROGTarget_SendIdle+0x8>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   815a2:	2011      	movs	r0, #17
   815a4:	4b10      	ldr	r3, [pc, #64]	; (815e8 <XPROGTarget_SendIdle+0x58>)
   815a6:	4798      	blx	r3
   815a8:	b918      	cbnz	r0, 815b2 <XPROGTarget_SendIdle+0x22>
   815aa:	4b10      	ldr	r3, [pc, #64]	; (815ec <XPROGTarget_SendIdle+0x5c>)
   815ac:	681b      	ldr	r3, [r3, #0]
   815ae:	2b00      	cmp	r3, #0
   815b0:	d1f7      	bne.n	815a2 <XPROGTarget_SendIdle+0x12>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   815b2:	2011      	movs	r0, #17
   815b4:	4b0c      	ldr	r3, [pc, #48]	; (815e8 <XPROGTarget_SendIdle+0x58>)
   815b6:	4798      	blx	r3
   815b8:	b118      	cbz	r0, 815c2 <XPROGTarget_SendIdle+0x32>
   815ba:	4b0c      	ldr	r3, [pc, #48]	; (815ec <XPROGTarget_SendIdle+0x5c>)
   815bc:	681b      	ldr	r3, [r3, #0]
   815be:	2b00      	cmp	r3, #0
   815c0:	d1f7      	bne.n	815b2 <XPROGTarget_SendIdle+0x22>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   815c2:	3401      	adds	r4, #1
   815c4:	b2e4      	uxtb	r4, r4
   815c6:	2c0b      	cmp	r4, #11
   815c8:	d809      	bhi.n	815de <XPROGTarget_SendIdle+0x4e>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   815ca:	2011      	movs	r0, #17
   815cc:	4b06      	ldr	r3, [pc, #24]	; (815e8 <XPROGTarget_SendIdle+0x58>)
   815ce:	4798      	blx	r3
   815d0:	2800      	cmp	r0, #0
   815d2:	d0e6      	beq.n	815a2 <XPROGTarget_SendIdle+0x12>
   815d4:	4b05      	ldr	r3, [pc, #20]	; (815ec <XPROGTarget_SendIdle+0x5c>)
   815d6:	681b      	ldr	r3, [r3, #0]
   815d8:	2b00      	cmp	r3, #0
   815da:	d1f6      	bne.n	815ca <XPROGTarget_SendIdle+0x3a>
   815dc:	e7e1      	b.n	815a2 <XPROGTarget_SendIdle+0x12>
}
   815de:	bd10      	pop	{r4, pc}
   815e0:	20000ebc 	.word	0x20000ebc
   815e4:	00081455 	.word	0x00081455
   815e8:	00084b05 	.word	0x00084b05
   815ec:	20000ec0 	.word	0x20000ec0

000815f0 <XPROGTarget_EnableTargetPDI>:
{
   815f0:	b570      	push	{r4, r5, r6, lr}
   815f2:	b086      	sub	sp, #24
	IsSending = false;
   815f4:	2400      	movs	r4, #0
   815f6:	4b1a      	ldr	r3, [pc, #104]	; (81660 <XPROGTarget_EnableTargetPDI+0x70>)
   815f8:	701c      	strb	r4, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   815fa:	200d      	movs	r0, #13
   815fc:	4b19      	ldr	r3, [pc, #100]	; (81664 <XPROGTarget_EnableTargetPDI+0x74>)
   815fe:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   81600:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81604:	2012      	movs	r0, #18
   81606:	4d18      	ldr	r5, [pc, #96]	; (81668 <XPROGTarget_EnableTargetPDI+0x78>)
   81608:	47a8      	blx	r5
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   8160a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8160e:	2013      	movs	r0, #19
   81610:	47a8      	blx	r5
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   81612:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81616:	2011      	movs	r0, #17
   81618:	47a8      	blx	r5
	delay_us(50);
   8161a:	201b      	movs	r0, #27
   8161c:	4e13      	ldr	r6, [pc, #76]	; (8166c <XPROGTarget_EnableTargetPDI+0x7c>)
   8161e:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   81620:	2012      	movs	r0, #18
   81622:	4b13      	ldr	r3, [pc, #76]	; (81670 <XPROGTarget_EnableTargetPDI+0x80>)
   81624:	4798      	blx	r3
	delay_us(10);
   81626:	2006      	movs	r0, #6
   81628:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   8162a:	9400      	str	r4, [sp, #0]
   8162c:	9401      	str	r4, [sp, #4]
   8162e:	9402      	str	r4, [sp, #8]
   81630:	9403      	str	r4, [sp, #12]
   81632:	9404      	str	r4, [sp, #16]
   81634:	9405      	str	r4, [sp, #20]
   81636:	4b0f      	ldr	r3, [pc, #60]	; (81674 <XPROGTarget_EnableTargetPDI+0x84>)
   81638:	9300      	str	r3, [sp, #0]
   8163a:	23c0      	movs	r3, #192	; 0xc0
   8163c:	9301      	str	r3, [sp, #4]
   8163e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81642:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   81644:	4a0c      	ldr	r2, [pc, #48]	; (81678 <XPROGTarget_EnableTargetPDI+0x88>)
   81646:	4669      	mov	r1, sp
   81648:	480c      	ldr	r0, [pc, #48]	; (8167c <XPROGTarget_EnableTargetPDI+0x8c>)
   8164a:	4b0d      	ldr	r3, [pc, #52]	; (81680 <XPROGTarget_EnableTargetPDI+0x90>)
   8164c:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   8164e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81652:	2011      	movs	r0, #17
   81654:	47a8      	blx	r5
	XPROGTarget_SendIdle();
   81656:	4c0b      	ldr	r4, [pc, #44]	; (81684 <XPROGTarget_EnableTargetPDI+0x94>)
   81658:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   8165a:	47a0      	blx	r4
}
   8165c:	b006      	add	sp, #24
   8165e:	bd70      	pop	{r4, r5, r6, pc}
   81660:	20000ebc 	.word	0x20000ebc
   81664:	000847d5 	.word	0x000847d5
   81668:	00084b59 	.word	0x00084b59
   8166c:	2000008b 	.word	0x2000008b
   81670:	00084b21 	.word	0x00084b21
   81674:	0007a120 	.word	0x0007a120
   81678:	0b71b000 	.word	0x0b71b000
   8167c:	40090000 	.word	0x40090000
   81680:	00082d5d 	.word	0x00082d5d
   81684:	00081591 	.word	0x00081591

00081688 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   81688:	4b01      	ldr	r3, [pc, #4]	; (81690 <set_timeout+0x8>)
   8168a:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   8168c:	4770      	bx	lr
   8168e:	bf00      	nop
   81690:	20000200 	.word	0x20000200

00081694 <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   81694:	b538      	push	{r3, r4, r5, lr}
   81696:	2016      	movs	r0, #22
   81698:	4b10      	ldr	r3, [pc, #64]	; (816dc <setup_timeoutcnt+0x48>)
   8169a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8169c:	4b10      	ldr	r3, [pc, #64]	; (816e0 <setup_timeoutcnt+0x4c>)
   8169e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   816a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   816a6:	2510      	movs	r5, #16
   816a8:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   816ac:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   816ae:	4c0d      	ldr	r4, [pc, #52]	; (816e4 <setup_timeoutcnt+0x50>)
   816b0:	f24c 0201 	movw	r2, #49153	; 0xc001
   816b4:	2100      	movs	r1, #0
   816b6:	4620      	mov	r0, r4
   816b8:	4b0b      	ldr	r3, [pc, #44]	; (816e8 <setup_timeoutcnt+0x54>)
   816ba:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   816bc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   816c0:	2100      	movs	r1, #0
   816c2:	4620      	mov	r0, r4
   816c4:	4b09      	ldr	r3, [pc, #36]	; (816ec <setup_timeoutcnt+0x58>)
   816c6:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   816c8:	462a      	mov	r2, r5
   816ca:	2100      	movs	r1, #0
   816cc:	4620      	mov	r0, r4
   816ce:	4b08      	ldr	r3, [pc, #32]	; (816f0 <setup_timeoutcnt+0x5c>)
   816d0:	4798      	blx	r3
	
	timerEnabled = true;
   816d2:	4b08      	ldr	r3, [pc, #32]	; (816f4 <setup_timeoutcnt+0x60>)
   816d4:	2201      	movs	r2, #1
   816d6:	701a      	strb	r2, [r3, #0]
}
   816d8:	bd38      	pop	{r3, r4, r5, pc}
   816da:	bf00      	nop
   816dc:	000847d5 	.word	0x000847d5
   816e0:	e000e100 	.word	0xe000e100
   816e4:	40080000 	.word	0x40080000
   816e8:	00085119 	.word	0x00085119
   816ec:	00085143 	.word	0x00085143
   816f0:	0008514b 	.word	0x0008514b
   816f4:	20000ec4 	.word	0x20000ec4

000816f8 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   816f8:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   816fa:	4b0a      	ldr	r3, [pc, #40]	; (81724 <start_timeoutcnt+0x2c>)
   816fc:	781b      	ldrb	r3, [r3, #0]
   816fe:	b16b      	cbz	r3, 8171c <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   81700:	4c09      	ldr	r4, [pc, #36]	; (81728 <start_timeoutcnt+0x30>)
   81702:	2100      	movs	r1, #0
   81704:	4620      	mov	r0, r4
   81706:	4b09      	ldr	r3, [pc, #36]	; (8172c <start_timeoutcnt+0x34>)
   81708:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   8170a:	4b09      	ldr	r3, [pc, #36]	; (81730 <start_timeoutcnt+0x38>)
   8170c:	681a      	ldr	r2, [r3, #0]
   8170e:	4b09      	ldr	r3, [pc, #36]	; (81734 <start_timeoutcnt+0x3c>)
   81710:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   81712:	2100      	movs	r1, #0
   81714:	4620      	mov	r0, r4
   81716:	4b08      	ldr	r3, [pc, #32]	; (81738 <start_timeoutcnt+0x40>)
   81718:	4798      	blx	r3
}
   8171a:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   8171c:	4b07      	ldr	r3, [pc, #28]	; (8173c <start_timeoutcnt+0x44>)
   8171e:	4798      	blx	r3
   81720:	e7ee      	b.n	81700 <start_timeoutcnt+0x8>
   81722:	bf00      	nop
   81724:	20000ec4 	.word	0x20000ec4
   81728:	40080000 	.word	0x40080000
   8172c:	0008513b 	.word	0x0008513b
   81730:	20000200 	.word	0x20000200
   81734:	20000ec0 	.word	0x20000ec0
   81738:	00085133 	.word	0x00085133
   8173c:	00081695 	.word	0x00081695

00081740 <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   81740:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   81742:	2100      	movs	r1, #0
   81744:	4801      	ldr	r0, [pc, #4]	; (8174c <stop_timeoutcnt+0xc>)
   81746:	4b02      	ldr	r3, [pc, #8]	; (81750 <stop_timeoutcnt+0x10>)
   81748:	4798      	blx	r3
}
   8174a:	bd08      	pop	{r3, pc}
   8174c:	40080000 	.word	0x40080000
   81750:	0008513b 	.word	0x0008513b

00081754 <TC0_Handler>:

ISR(TC0_Handler)
{
   81754:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   81756:	4b05      	ldr	r3, [pc, #20]	; (8176c <TC0_Handler+0x18>)
   81758:	681b      	ldr	r3, [r3, #0]
   8175a:	b113      	cbz	r3, 81762 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   8175c:	3b01      	subs	r3, #1
   8175e:	4a03      	ldr	r2, [pc, #12]	; (8176c <TC0_Handler+0x18>)
   81760:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   81762:	2100      	movs	r1, #0
   81764:	4802      	ldr	r0, [pc, #8]	; (81770 <TC0_Handler+0x1c>)
   81766:	4b03      	ldr	r3, [pc, #12]	; (81774 <TC0_Handler+0x20>)
   81768:	4798      	blx	r3
}
   8176a:	bd08      	pop	{r3, pc}
   8176c:	20000ec0 	.word	0x20000ec0
   81770:	40080000 	.word	0x40080000
   81774:	00085153 	.word	0x00085153

00081778 <process_events>:
/*
TODO: Need to have a proper event loop not this crappy hack
*/

void process_events(void)
{
   81778:	b508      	push	{r3, lr}
	static uint32_t nextCnt = 0;
	
	/* Hack for now - fixed at 100 mS, one event */	
	if (task_tickCnt > nextCnt){
   8177a:	4b0c      	ldr	r3, [pc, #48]	; (817ac <process_events+0x34>)
   8177c:	681a      	ldr	r2, [r3, #0]
   8177e:	4b0c      	ldr	r3, [pc, #48]	; (817b0 <process_events+0x38>)
   81780:	681b      	ldr	r3, [r3, #0]
   81782:	429a      	cmp	r2, r3
   81784:	d800      	bhi.n	81788 <process_events+0x10>
		if (nextCnt < task_tickCnt){
			task_tickCnt = 0;
			nextCnt = 100;
		}
	}
}
   81786:	bd08      	pop	{r3, pc}
		do_task();
   81788:	4b0a      	ldr	r3, [pc, #40]	; (817b4 <process_events+0x3c>)
   8178a:	4798      	blx	r3
		nextCnt += 100;
   8178c:	4a08      	ldr	r2, [pc, #32]	; (817b0 <process_events+0x38>)
   8178e:	6813      	ldr	r3, [r2, #0]
   81790:	3364      	adds	r3, #100	; 0x64
   81792:	6013      	str	r3, [r2, #0]
		if (nextCnt < task_tickCnt){
   81794:	4a05      	ldr	r2, [pc, #20]	; (817ac <process_events+0x34>)
   81796:	6812      	ldr	r2, [r2, #0]
   81798:	4293      	cmp	r3, r2
   8179a:	d2f4      	bcs.n	81786 <process_events+0xe>
			task_tickCnt = 0;
   8179c:	4b03      	ldr	r3, [pc, #12]	; (817ac <process_events+0x34>)
   8179e:	2200      	movs	r2, #0
   817a0:	601a      	str	r2, [r3, #0]
			nextCnt = 100;
   817a2:	4b03      	ldr	r3, [pc, #12]	; (817b0 <process_events+0x38>)
   817a4:	2264      	movs	r2, #100	; 0x64
   817a6:	601a      	str	r2, [r3, #0]
}
   817a8:	e7ed      	b.n	81786 <process_events+0xe>
   817aa:	bf00      	nop
   817ac:	20000ecc 	.word	0x20000ecc
   817b0:	20000ec8 	.word	0x20000ec8
   817b4:	000806c5 	.word	0x000806c5

000817b8 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers >= 16)
   817b8:	4b06      	ldr	r3, [pc, #24]	; (817d4 <naeusb_add_in_handler+0x1c>)
   817ba:	781b      	ldrb	r3, [r3, #0]
   817bc:	2b0f      	cmp	r3, #15
   817be:	d807      	bhi.n	817d0 <naeusb_add_in_handler+0x18>
        return false;
    
    naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   817c0:	1c59      	adds	r1, r3, #1
   817c2:	4a04      	ldr	r2, [pc, #16]	; (817d4 <naeusb_add_in_handler+0x1c>)
   817c4:	7011      	strb	r1, [r2, #0]
   817c6:	4a04      	ldr	r2, [pc, #16]	; (817d8 <naeusb_add_in_handler+0x20>)
   817c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   817cc:	2001      	movs	r0, #1
   817ce:	4770      	bx	lr
        return false;
   817d0:	2000      	movs	r0, #0
}
   817d2:	4770      	bx	lr
   817d4:	20001354 	.word	0x20001354
   817d8:	20001314 	.word	0x20001314

000817dc <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers >= 16)
   817dc:	4b06      	ldr	r3, [pc, #24]	; (817f8 <naeusb_add_out_handler+0x1c>)
   817de:	781b      	ldrb	r3, [r3, #0]
   817e0:	2b0f      	cmp	r3, #15
   817e2:	d807      	bhi.n	817f4 <naeusb_add_out_handler+0x18>
        return false;
    
    naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   817e4:	1c59      	adds	r1, r3, #1
   817e6:	4a04      	ldr	r2, [pc, #16]	; (817f8 <naeusb_add_out_handler+0x1c>)
   817e8:	7011      	strb	r1, [r2, #0]
   817ea:	4a04      	ldr	r2, [pc, #16]	; (817fc <naeusb_add_out_handler+0x20>)
   817ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   817f0:	2001      	movs	r0, #1
   817f2:	4770      	bx	lr
        return false;
   817f4:	2000      	movs	r0, #0
}
   817f6:	4770      	bx	lr
   817f8:	20001355 	.word	0x20001355
   817fc:	20001358 	.word	0x20001358

00081800 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   81800:	b508      	push	{r3, lr}
	active = false;
   81802:	4b03      	ldr	r3, [pc, #12]	; (81810 <main_suspend_action+0x10>)
   81804:	2200      	movs	r2, #0
   81806:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   81808:	4b02      	ldr	r3, [pc, #8]	; (81814 <main_suspend_action+0x14>)
   8180a:	4798      	blx	r3
}
   8180c:	bd08      	pop	{r3, pc}
   8180e:	bf00      	nop
   81810:	20000ed0 	.word	0x20000ed0
   81814:	00084615 	.word	0x00084615

00081818 <main_resume_action>:

void main_resume_action(void)
{
   81818:	b508      	push	{r3, lr}
    ui_wakeup();
   8181a:	4b01      	ldr	r3, [pc, #4]	; (81820 <main_resume_action+0x8>)
   8181c:	4798      	blx	r3
}
   8181e:	bd08      	pop	{r3, pc}
   81820:	00084635 	.word	0x00084635

00081824 <main_sof_action>:

void main_sof_action(void)
{
   81824:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   81826:	4b04      	ldr	r3, [pc, #16]	; (81838 <main_sof_action+0x14>)
   81828:	781b      	ldrb	r3, [r3, #0]
   8182a:	b903      	cbnz	r3, 8182e <main_sof_action+0xa>
        return;
    ui_process(udd_get_frame_number());
}
   8182c:	bd08      	pop	{r3, pc}
    ui_process(udd_get_frame_number());
   8182e:	4b03      	ldr	r3, [pc, #12]	; (8183c <main_sof_action+0x18>)
   81830:	4798      	blx	r3
   81832:	4b03      	ldr	r3, [pc, #12]	; (81840 <main_sof_action+0x1c>)
   81834:	4798      	blx	r3
   81836:	e7f9      	b.n	8182c <main_sof_action+0x8>
   81838:	20000204 	.word	0x20000204
   8183c:	00083ca9 	.word	0x00083ca9
   81840:	0008464d 	.word	0x0008464d

00081844 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   81844:	b510      	push	{r4, lr}
    active = true;
   81846:	2401      	movs	r4, #1
   81848:	4b05      	ldr	r3, [pc, #20]	; (81860 <main_vendor_enable+0x1c>)
   8184a:	701c      	strb	r4, [r3, #0]
    main_b_vendor_enable = true;
   8184c:	4b05      	ldr	r3, [pc, #20]	; (81864 <main_vendor_enable+0x20>)
   8184e:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   81850:	4a05      	ldr	r2, [pc, #20]	; (81868 <main_vendor_enable+0x24>)
   81852:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81856:	4805      	ldr	r0, [pc, #20]	; (8186c <main_vendor_enable+0x28>)
   81858:	4b05      	ldr	r3, [pc, #20]	; (81870 <main_vendor_enable+0x2c>)
   8185a:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   8185c:	4620      	mov	r0, r4
   8185e:	bd10      	pop	{r4, pc}
   81860:	20000ed0 	.word	0x20000ed0
   81864:	20000204 	.word	0x20000204
   81868:	00081d85 	.word	0x00081d85
   8186c:	20000f14 	.word	0x20000f14
   81870:	00084909 	.word	0x00084909

00081874 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   81874:	4b01      	ldr	r3, [pc, #4]	; (8187c <main_vendor_disable+0x8>)
   81876:	2200      	movs	r2, #0
   81878:	701a      	strb	r2, [r3, #0]
}
   8187a:	4770      	bx	lr
   8187c:	20000204 	.word	0x20000204

00081880 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81880:	b510      	push	{r4, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   81882:	4b0d      	ldr	r3, [pc, #52]	; (818b8 <main_setup_out_received+0x38>)
   81884:	4a0d      	ldr	r2, [pc, #52]	; (818bc <main_setup_out_received+0x3c>)
   81886:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81888:	88da      	ldrh	r2, [r3, #6]
   8188a:	2a40      	cmp	r2, #64	; 0x40
   8188c:	bf28      	it	cs
   8188e:	2240      	movcs	r2, #64	; 0x40
   81890:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81892:	4b0b      	ldr	r3, [pc, #44]	; (818c0 <main_setup_out_received+0x40>)
   81894:	781c      	ldrb	r4, [r3, #0]
   81896:	e001      	b.n	8189c <main_setup_out_received+0x1c>
   81898:	3c01      	subs	r4, #1
   8189a:	b2e4      	uxtb	r4, r4
   8189c:	b144      	cbz	r4, 818b0 <main_setup_out_received+0x30>
        handler_status = naeusb_out_request_handlers[i-1]();
   8189e:	1e63      	subs	r3, r4, #1
   818a0:	4a08      	ldr	r2, [pc, #32]	; (818c4 <main_setup_out_received+0x44>)
   818a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   818a6:	4798      	blx	r3
        if (handler_status == true) {
   818a8:	4603      	mov	r3, r0
   818aa:	2800      	cmp	r0, #0
   818ac:	d0f4      	beq.n	81898 <main_setup_out_received+0x18>
   818ae:	e000      	b.n	818b2 <main_setup_out_received+0x32>
            return true;
        }
    }

    return false;
   818b0:	2300      	movs	r3, #0

}
   818b2:	4618      	mov	r0, r3
   818b4:	bd10      	pop	{r4, pc}
   818b6:	bf00      	nop
   818b8:	20001930 	.word	0x20001930
   818bc:	20000ed4 	.word	0x20000ed4
   818c0:	20001355 	.word	0x20001355
   818c4:	20001358 	.word	0x20001358

000818c8 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   818c8:	b510      	push	{r4, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   818ca:	4b09      	ldr	r3, [pc, #36]	; (818f0 <main_setup_in_received+0x28>)
   818cc:	781c      	ldrb	r4, [r3, #0]
   818ce:	e001      	b.n	818d4 <main_setup_in_received+0xc>
   818d0:	3c01      	subs	r4, #1
   818d2:	b2e4      	uxtb	r4, r4
   818d4:	b144      	cbz	r4, 818e8 <main_setup_in_received+0x20>
        handler_status = naeusb_in_request_handlers[i-1]();
   818d6:	1e63      	subs	r3, r4, #1
   818d8:	4a06      	ldr	r2, [pc, #24]	; (818f4 <main_setup_in_received+0x2c>)
   818da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   818de:	4798      	blx	r3
        if (handler_status == true) {
   818e0:	4603      	mov	r3, r0
   818e2:	2800      	cmp	r0, #0
   818e4:	d0f4      	beq.n	818d0 <main_setup_in_received+0x8>
   818e6:	e000      	b.n	818ea <main_setup_in_received+0x22>
            return true;
        }
    }

    return false;
   818e8:	2300      	movs	r3, #0

   818ea:	4618      	mov	r0, r3
   818ec:	bd10      	pop	{r4, pc}
   818ee:	bf00      	nop
   818f0:	20001354 	.word	0x20001354
   818f4:	20001314 	.word	0x20001314

000818f8 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   818f8:	4b05      	ldr	r3, [pc, #20]	; (81910 <naeusb_setup_out_received+0x18>)
   818fa:	785b      	ldrb	r3, [r3, #1]
   818fc:	2b22      	cmp	r3, #34	; 0x22
   818fe:	d001      	beq.n	81904 <naeusb_setup_out_received+0xc>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
            return true;
            break;
    }
    return false;
   81900:	2000      	movs	r0, #0
}
   81902:	4770      	bx	lr
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81904:	4b02      	ldr	r3, [pc, #8]	; (81910 <naeusb_setup_out_received+0x18>)
   81906:	4a03      	ldr	r2, [pc, #12]	; (81914 <naeusb_setup_out_received+0x1c>)
   81908:	611a      	str	r2, [r3, #16]
            return true;
   8190a:	2001      	movs	r0, #1
   8190c:	4770      	bx	lr
   8190e:	bf00      	nop
   81910:	20001930 	.word	0x20001930
   81914:	00081919 	.word	0x00081919

00081918 <naeusb_sam_cfg_out>:
{
   81918:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   8191a:	4b22      	ldr	r3, [pc, #136]	; (819a4 <naeusb_sam_cfg_out+0x8c>)
   8191c:	789b      	ldrb	r3, [r3, #2]
   8191e:	3b01      	subs	r3, #1
   81920:	2b10      	cmp	r3, #16
   81922:	d814      	bhi.n	8194e <naeusb_sam_cfg_out+0x36>
   81924:	e8df f003 	tbb	[pc, r3]
   81928:	13181409 	.word	0x13181409
   8192c:	13131313 	.word	0x13131313
   81930:	13131313 	.word	0x13131313
   81934:	2c131313 	.word	0x2c131313
   81938:	3b          	.byte	0x3b
   81939:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8193a:	203e      	movs	r0, #62	; 0x3e
   8193c:	4b1a      	ldr	r3, [pc, #104]	; (819a8 <naeusb_sam_cfg_out+0x90>)
   8193e:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   81940:	4b1a      	ldr	r3, [pc, #104]	; (819ac <naeusb_sam_cfg_out+0x94>)
   81942:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81944:	2800      	cmp	r0, #0
   81946:	d0fb      	beq.n	81940 <naeusb_sam_cfg_out+0x28>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   81948:	2010      	movs	r0, #16
   8194a:	4b19      	ldr	r3, [pc, #100]	; (819b0 <naeusb_sam_cfg_out+0x98>)
   8194c:	4798      	blx	r3
}
   8194e:	bd08      	pop	{r3, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81950:	2010      	movs	r0, #16
   81952:	4b18      	ldr	r3, [pc, #96]	; (819b4 <naeusb_sam_cfg_out+0x9c>)
   81954:	4798      	blx	r3
        break;
   81956:	e7fa      	b.n	8194e <naeusb_sam_cfg_out+0x36>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   81958:	2201      	movs	r2, #1
   8195a:	210c      	movs	r1, #12
   8195c:	4816      	ldr	r0, [pc, #88]	; (819b8 <naeusb_sam_cfg_out+0xa0>)
   8195e:	4b17      	ldr	r3, [pc, #92]	; (819bc <naeusb_sam_cfg_out+0xa4>)
   81960:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   81962:	4b17      	ldr	r3, [pc, #92]	; (819c0 <naeusb_sam_cfg_out+0xa8>)
   81964:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81966:	4b17      	ldr	r3, [pc, #92]	; (819c4 <naeusb_sam_cfg_out+0xac>)
   81968:	685b      	ldr	r3, [r3, #4]
   8196a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   8196e:	d1fa      	bne.n	81966 <naeusb_sam_cfg_out+0x4e>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81970:	4a14      	ldr	r2, [pc, #80]	; (819c4 <naeusb_sam_cfg_out+0xac>)
   81972:	6813      	ldr	r3, [r2, #0]
   81974:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81978:	f043 0305 	orr.w	r3, r3, #5
   8197c:	6013      	str	r3, [r2, #0]
        while(1);
   8197e:	e7fe      	b.n	8197e <naeusb_sam_cfg_out+0x66>
   81980:	4b0f      	ldr	r3, [pc, #60]	; (819c0 <naeusb_sam_cfg_out+0xa8>)
   81982:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81984:	4b0f      	ldr	r3, [pc, #60]	; (819c4 <naeusb_sam_cfg_out+0xac>)
   81986:	685b      	ldr	r3, [r3, #4]
   81988:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   8198c:	d1fa      	bne.n	81984 <naeusb_sam_cfg_out+0x6c>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   8198e:	4a0d      	ldr	r2, [pc, #52]	; (819c4 <naeusb_sam_cfg_out+0xac>)
   81990:	6813      	ldr	r3, [r2, #0]
   81992:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81996:	f043 0305 	orr.w	r3, r3, #5
   8199a:	6013      	str	r3, [r2, #0]
        while(1);
   8199c:	e7fe      	b.n	8199c <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   8199e:	4b0a      	ldr	r3, [pc, #40]	; (819c8 <naeusb_sam_cfg_out+0xb0>)
   819a0:	4798      	blx	r3
}
   819a2:	e7d4      	b.n	8194e <naeusb_sam_cfg_out+0x36>
   819a4:	20001930 	.word	0x20001930
   819a8:	0008473d 	.word	0x0008473d
   819ac:	00084765 	.word	0x00084765
   819b0:	00084695 	.word	0x00084695
   819b4:	000846e9 	.word	0x000846e9
   819b8:	400e0800 	.word	0x400e0800
   819bc:	00084925 	.word	0x00084925
   819c0:	00083c29 	.word	0x00083c29
   819c4:	400e1200 	.word	0x400e1200
   819c8:	0008073d 	.word	0x0008073d

000819cc <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   819cc:	4b05      	ldr	r3, [pc, #20]	; (819e4 <naeusb_fw_version_in+0x18>)
   819ce:	2200      	movs	r2, #0
   819d0:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   819d2:	2135      	movs	r1, #53	; 0x35
   819d4:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   819d6:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   819d8:	4a03      	ldr	r2, [pc, #12]	; (819e8 <naeusb_fw_version_in+0x1c>)
   819da:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   819dc:	2303      	movs	r3, #3
   819de:	8193      	strh	r3, [r2, #12]
}
   819e0:	2001      	movs	r0, #1
   819e2:	4770      	bx	lr
   819e4:	20001398 	.word	0x20001398
   819e8:	20001930 	.word	0x20001930

000819ec <naeusb_build_date_in>:
{
   819ec:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   819ee:	4c0a      	ldr	r4, [pc, #40]	; (81a18 <naeusb_build_date_in+0x2c>)
   819f0:	2240      	movs	r2, #64	; 0x40
   819f2:	490a      	ldr	r1, [pc, #40]	; (81a1c <naeusb_build_date_in+0x30>)
   819f4:	4620      	mov	r0, r4
   819f6:	4d0a      	ldr	r5, [pc, #40]	; (81a20 <naeusb_build_date_in+0x34>)
   819f8:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   819fa:	2320      	movs	r3, #32
   819fc:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   819fe:	2237      	movs	r2, #55	; 0x37
   81a00:	4908      	ldr	r1, [pc, #32]	; (81a24 <naeusb_build_date_in+0x38>)
   81a02:	f104 0009 	add.w	r0, r4, #9
   81a06:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   81a08:	4d07      	ldr	r5, [pc, #28]	; (81a28 <naeusb_build_date_in+0x3c>)
   81a0a:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81a0c:	4620      	mov	r0, r4
   81a0e:	4b07      	ldr	r3, [pc, #28]	; (81a2c <naeusb_build_date_in+0x40>)
   81a10:	4798      	blx	r3
   81a12:	81a8      	strh	r0, [r5, #12]
}
   81a14:	2001      	movs	r0, #1
   81a16:	bd38      	pop	{r3, r4, r5, pc}
   81a18:	20001398 	.word	0x20001398
   81a1c:	0008c1a8 	.word	0x0008c1a8
   81a20:	000855bd 	.word	0x000855bd
   81a24:	0008c19c 	.word	0x0008c19c
   81a28:	20001930 	.word	0x20001930
   81a2c:	00085561 	.word	0x00085561

00081a30 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   81a30:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   81a32:	4b07      	ldr	r3, [pc, #28]	; (81a50 <naeusb_setup_in_received+0x20>)
   81a34:	785b      	ldrb	r3, [r3, #1]
   81a36:	2b17      	cmp	r3, #23
   81a38:	d003      	beq.n	81a42 <naeusb_setup_in_received+0x12>
   81a3a:	2b40      	cmp	r3, #64	; 0x40
   81a3c:	d004      	beq.n	81a48 <naeusb_setup_in_received+0x18>
   81a3e:	2000      	movs	r0, #0
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
}
   81a40:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   81a42:	4b04      	ldr	r3, [pc, #16]	; (81a54 <naeusb_setup_in_received+0x24>)
   81a44:	4798      	blx	r3
   81a46:	e7fb      	b.n	81a40 <naeusb_setup_in_received+0x10>
            return naeusb_build_date_in();
   81a48:	4b03      	ldr	r3, [pc, #12]	; (81a58 <naeusb_setup_in_received+0x28>)
   81a4a:	4798      	blx	r3
   81a4c:	e7f8      	b.n	81a40 <naeusb_setup_in_received+0x10>
   81a4e:	bf00      	nop
   81a50:	20001930 	.word	0x20001930
   81a54:	000819cd 	.word	0x000819cd
   81a58:	000819ed 	.word	0x000819ed

00081a5c <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81a5c:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   81a5e:	4803      	ldr	r0, [pc, #12]	; (81a6c <naeusb_register_handlers+0x10>)
   81a60:	4b03      	ldr	r3, [pc, #12]	; (81a70 <naeusb_register_handlers+0x14>)
   81a62:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   81a64:	4803      	ldr	r0, [pc, #12]	; (81a74 <naeusb_register_handlers+0x18>)
   81a66:	4b04      	ldr	r3, [pc, #16]	; (81a78 <naeusb_register_handlers+0x1c>)
   81a68:	4798      	blx	r3
   81a6a:	bd08      	pop	{r3, pc}
   81a6c:	00081a31 	.word	0x00081a31
   81a70:	000817b9 	.word	0x000817b9
   81a74:	000818f9 	.word	0x000818f9
   81a78:	000817dd 	.word	0x000817dd

00081a7c <fpga_target_setup_out_received>:
	}
}

bool fpga_target_setup_out_received(void)
{
    blockendpoint_usage = bep_emem;
   81a7c:	4b33      	ldr	r3, [pc, #204]	; (81b4c <fpga_target_setup_out_received+0xd0>)
   81a7e:	2200      	movs	r2, #0
   81a80:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   81a82:	4b33      	ldr	r3, [pc, #204]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81a84:	785b      	ldrb	r3, [r3, #1]
   81a86:	3b10      	subs	r3, #16
   81a88:	2b25      	cmp	r3, #37	; 0x25
   81a8a:	d85b      	bhi.n	81b44 <fpga_target_setup_out_received+0xc8>
   81a8c:	e8df f003 	tbb	[pc, r3]
   81a90:	2d23281e 	.word	0x2d23281e
   81a94:	5a37325a 	.word	0x5a37325a
   81a98:	5a5a5a5a 	.word	0x5a5a5a5a
   81a9c:	5a5a5a5a 	.word	0x5a5a5a5a
   81aa0:	5a135a3c 	.word	0x5a135a3c
   81aa4:	5a5a5a5a 	.word	0x5a5a5a5a
   81aa8:	5a5a5a5a 	.word	0x5a5a5a5a
   81aac:	5a5a5a5a 	.word	0x5a5a5a5a
   81ab0:	4b5a4641 	.word	0x4b5a4641
   81ab4:	5550      	.short	0x5550
		case REQ_SAM_CFG:
			0;
			uint16_t wVal = udd_g_ctrlreq.req.wValue & 0xFF;
   81ab6:	4b26      	ldr	r3, [pc, #152]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81ab8:	789b      	ldrb	r3, [r3, #2]
			if ((wVal > 0x03) && (wVal < 0x10)) {
   81aba:	3b04      	subs	r3, #4
   81abc:	b29b      	uxth	r3, r3
   81abe:	2b0b      	cmp	r3, #11
   81ac0:	d842      	bhi.n	81b48 <fpga_target_setup_out_received+0xcc>
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   81ac2:	4b23      	ldr	r3, [pc, #140]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81ac4:	4a23      	ldr	r2, [pc, #140]	; (81b54 <fpga_target_setup_out_received+0xd8>)
   81ac6:	611a      	str	r2, [r3, #16]
				return true;
   81ac8:	2001      	movs	r0, #1
   81aca:	4770      	bx	lr
				return false;
			}
			break;
        /* Memory Read */
        case REQ_MEMREAD_BULK:
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81acc:	4b20      	ldr	r3, [pc, #128]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81ace:	4a22      	ldr	r2, [pc, #136]	; (81b58 <fpga_target_setup_out_received+0xdc>)
   81ad0:	611a      	str	r2, [r3, #16]
            return true;
   81ad2:	2001      	movs	r0, #1
   81ad4:	4770      	bx	lr
        case REQ_MEMREAD_CTRL:
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81ad6:	4b1e      	ldr	r3, [pc, #120]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81ad8:	4a20      	ldr	r2, [pc, #128]	; (81b5c <fpga_target_setup_out_received+0xe0>)
   81ada:	611a      	str	r2, [r3, #16]
            return true;	
   81adc:	2001      	movs	r0, #1
   81ade:	4770      	bx	lr

            /* Memory Write */
        case REQ_MEMWRITE_BULK:
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   81ae0:	4b1b      	ldr	r3, [pc, #108]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81ae2:	4a1f      	ldr	r2, [pc, #124]	; (81b60 <fpga_target_setup_out_received+0xe4>)
   81ae4:	611a      	str	r2, [r3, #16]
            return true;
   81ae6:	2001      	movs	r0, #1
   81ae8:	4770      	bx	lr

        case REQ_MEMWRITE_CTRL:
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   81aea:	4b19      	ldr	r3, [pc, #100]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81aec:	4a1d      	ldr	r2, [pc, #116]	; (81b64 <fpga_target_setup_out_received+0xe8>)
   81aee:	611a      	str	r2, [r3, #16]
            return true;		
   81af0:	2001      	movs	r0, #1
   81af2:	4770      	bx	lr

        case REQ_MEMWRITE_CTRL_SAMU3:
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   81af4:	4b16      	ldr	r3, [pc, #88]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81af6:	4a1c      	ldr	r2, [pc, #112]	; (81b68 <fpga_target_setup_out_received+0xec>)
   81af8:	611a      	str	r2, [r3, #16]
            return true;		
   81afa:	2001      	movs	r0, #1
   81afc:	4770      	bx	lr

            /* Send bitstream to FPGA */
        case REQ_FPGA_PROGRAM:
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81afe:	4b14      	ldr	r3, [pc, #80]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81b00:	4a1a      	ldr	r2, [pc, #104]	; (81b6c <fpga_target_setup_out_received+0xf0>)
   81b02:	611a      	str	r2, [r3, #16]
            return true;
   81b04:	2001      	movs	r0, #1
   81b06:	4770      	bx	lr
        case REQ_XMEGA_PROGRAM:
            /*
               udd_g_ctrlreq.payload = xmegabuffer;
               udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
               */
            udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   81b08:	4b11      	ldr	r3, [pc, #68]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81b0a:	4a19      	ldr	r2, [pc, #100]	; (81b70 <fpga_target_setup_out_received+0xf4>)
   81b0c:	611a      	str	r2, [r3, #16]
            return true;
   81b0e:	2001      	movs	r0, #1
   81b10:	4770      	bx	lr
#endif

        case REQ_CDCE906:
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   81b12:	4b0f      	ldr	r3, [pc, #60]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81b14:	4a17      	ldr	r2, [pc, #92]	; (81b74 <fpga_target_setup_out_received+0xf8>)
   81b16:	611a      	str	r2, [r3, #16]
            return true;
   81b18:	2001      	movs	r0, #1
   81b1a:	4770      	bx	lr

            /* VCC-INT Setting */
        case REQ_VCCINT:
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   81b1c:	4b0c      	ldr	r3, [pc, #48]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81b1e:	4a16      	ldr	r2, [pc, #88]	; (81b78 <fpga_target_setup_out_received+0xfc>)
   81b20:	611a      	str	r2, [r3, #16]
            return true;
   81b22:	2001      	movs	r0, #1
   81b24:	4770      	bx	lr

		/* Send SPI commands to FPGA-attached SPI flash */
		case REQ_FPGASPI_PROGRAM:
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   81b26:	4b0a      	ldr	r3, [pc, #40]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81b28:	4a14      	ldr	r2, [pc, #80]	; (81b7c <fpga_target_setup_out_received+0x100>)
   81b2a:	611a      	str	r2, [r3, #16]
			return true;
   81b2c:	2001      	movs	r0, #1
   81b2e:	4770      	bx	lr

        /* IO Util Setup */
        case REQ_FPGAIO_UTIL:
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   81b30:	4b07      	ldr	r3, [pc, #28]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81b32:	4a13      	ldr	r2, [pc, #76]	; (81b80 <fpga_target_setup_out_received+0x104>)
   81b34:	611a      	str	r2, [r3, #16]
            return true;
   81b36:	2001      	movs	r0, #1
   81b38:	4770      	bx	lr

        /* Bit-Banged SPI1 */
        case FREQ_FPGASPI1_XFER:
            udd_g_ctrlreq.callback = ctrl_spi1util;
   81b3a:	4b05      	ldr	r3, [pc, #20]	; (81b50 <fpga_target_setup_out_received+0xd4>)
   81b3c:	4a11      	ldr	r2, [pc, #68]	; (81b84 <fpga_target_setup_out_received+0x108>)
   81b3e:	611a      	str	r2, [r3, #16]
            return true;
   81b40:	2001      	movs	r0, #1
   81b42:	4770      	bx	lr
    switch(udd_g_ctrlreq.req.bRequest){
   81b44:	2000      	movs	r0, #0
   81b46:	4770      	bx	lr
				return false;
   81b48:	2000      	movs	r0, #0

        default:
            return false;
    }					
}
   81b4a:	4770      	bx	lr
   81b4c:	200013d8 	.word	0x200013d8
   81b50:	20001930 	.word	0x20001930
   81b54:	00081f59 	.word	0x00081f59
   81b58:	00081c11 	.word	0x00081c11
   81b5c:	00081b89 	.word	0x00081b89
   81b60:	00081bf1 	.word	0x00081bf1
   81b64:	00081bb5 	.word	0x00081bb5
   81b68:	00081c3d 	.word	0x00081c3d
   81b6c:	00081d2d 	.word	0x00081d2d
   81b70:	00081d01 	.word	0x00081d01
   81b74:	00082259 	.word	0x00082259
   81b78:	000821d5 	.word	0x000821d5
   81b7c:	00082155 	.word	0x00082155
   81b80:	00081fad 	.word	0x00081fad
   81b84:	000820d5 	.word	0x000820d5

00081b88 <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   81b88:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81b8a:	4b06      	ldr	r3, [pc, #24]	; (81ba4 <ctrl_readmem_ctrl+0x1c>)
   81b8c:	681d      	ldr	r5, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81b8e:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_ctrlmem);
   81b90:	2005      	movs	r0, #5
   81b92:	4b05      	ldr	r3, [pc, #20]	; (81ba8 <ctrl_readmem_ctrl+0x20>)
   81b94:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   81b96:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
   81b9a:	4b04      	ldr	r3, [pc, #16]	; (81bac <ctrl_readmem_ctrl+0x24>)
   81b9c:	601c      	str	r4, [r3, #0]
    ctrlmemread_size = buflen;
   81b9e:	4b04      	ldr	r3, [pc, #16]	; (81bb0 <ctrl_readmem_ctrl+0x28>)
   81ba0:	601d      	str	r5, [r3, #0]
}
   81ba2:	bd38      	pop	{r3, r4, r5, pc}
   81ba4:	20000ed4 	.word	0x20000ed4
   81ba8:	00080711 	.word	0x00080711
   81bac:	200013e4 	.word	0x200013e4
   81bb0:	200013e8 	.word	0x200013e8

00081bb4 <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   81bb4:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81bb6:	4b0a      	ldr	r3, [pc, #40]	; (81be0 <ctrl_writemem_ctrl+0x2c>)
   81bb8:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81bba:	685d      	ldr	r5, [r3, #4]
    FPGA_setlock(fpga_generic);
   81bbc:	2001      	movs	r0, #1
   81bbe:	4b09      	ldr	r3, [pc, #36]	; (81be4 <ctrl_writemem_ctrl+0x30>)
   81bc0:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   81bc2:	2300      	movs	r3, #0
   81bc4:	e006      	b.n	81bd4 <ctrl_writemem_ctrl+0x20>
        xram[i+address] = ctrlbuf_payload[i];
   81bc6:	195a      	adds	r2, r3, r5
   81bc8:	4907      	ldr	r1, [pc, #28]	; (81be8 <ctrl_writemem_ctrl+0x34>)
   81bca:	6809      	ldr	r1, [r1, #0]
   81bcc:	4807      	ldr	r0, [pc, #28]	; (81bec <ctrl_writemem_ctrl+0x38>)
   81bce:	5c18      	ldrb	r0, [r3, r0]
   81bd0:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   81bd2:	3301      	adds	r3, #1
   81bd4:	42a3      	cmp	r3, r4
   81bd6:	d3f6      	bcc.n	81bc6 <ctrl_writemem_ctrl+0x12>
    FPGA_setlock(fpga_unlocked);
   81bd8:	2000      	movs	r0, #0
   81bda:	4b02      	ldr	r3, [pc, #8]	; (81be4 <ctrl_writemem_ctrl+0x30>)
   81bdc:	4798      	blx	r3
}
   81bde:	bd38      	pop	{r3, r4, r5, pc}
   81be0:	20000ed4 	.word	0x20000ed4
   81be4:	00080711 	.word	0x00080711
   81be8:	200001e0 	.word	0x200001e0
   81bec:	20000edc 	.word	0x20000edc

00081bf0 <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   81bf0:	b508      	push	{r3, lr}
    FPGA_setlock(fpga_blockout);
   81bf2:	2004      	movs	r0, #4
   81bf4:	4b03      	ldr	r3, [pc, #12]	; (81c04 <ctrl_writemem_bulk+0x14>)
   81bf6:	4798      	blx	r3
    bulk_fpga_write_addr = *(CTRLBUFFER_WORDPTR + 1);
   81bf8:	4b03      	ldr	r3, [pc, #12]	; (81c08 <ctrl_writemem_bulk+0x18>)
   81bfa:	685a      	ldr	r2, [r3, #4]
   81bfc:	4b03      	ldr	r3, [pc, #12]	; (81c0c <ctrl_writemem_bulk+0x1c>)
   81bfe:	601a      	str	r2, [r3, #0]
}
   81c00:	bd08      	pop	{r3, pc}
   81c02:	bf00      	nop
   81c04:	00080711 	.word	0x00080711
   81c08:	20000ed4 	.word	0x20000ed4
   81c0c:	200013dc 	.word	0x200013dc

00081c10 <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   81c10:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   81c12:	4b06      	ldr	r3, [pc, #24]	; (81c2c <ctrl_readmem_bulk+0x1c>)
   81c14:	681d      	ldr	r5, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81c16:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_blockin);
   81c18:	2002      	movs	r0, #2
   81c1a:	4b05      	ldr	r3, [pc, #20]	; (81c30 <ctrl_readmem_bulk+0x20>)
   81c1c:	4798      	blx	r3
    udi_vendor_bulk_in_run(
   81c1e:	4a05      	ldr	r2, [pc, #20]	; (81c34 <ctrl_readmem_bulk+0x24>)
   81c20:	4629      	mov	r1, r5
   81c22:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   81c26:	4b04      	ldr	r3, [pc, #16]	; (81c38 <ctrl_readmem_bulk+0x28>)
   81c28:	4798      	blx	r3
}
   81c2a:	bd38      	pop	{r3, r4, r5, pc}
   81c2c:	20000ed4 	.word	0x20000ed4
   81c30:	00080711 	.word	0x00080711
   81c34:	00081d0d 	.word	0x00081d0d
   81c38:	000848ed 	.word	0x000848ed

00081c3c <ctrl_writemem_ctrl_sam3u>:
void ctrl_writemem_ctrl_sam3u(void){
   81c3c:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR) - 4; // remove the first 4 bytes of the payload who contain the flags
   81c3e:	4b28      	ldr	r3, [pc, #160]	; (81ce0 <ctrl_writemem_ctrl_sam3u+0xa4>)
   81c40:	681c      	ldr	r4, [r3, #0]
   81c42:	3c04      	subs	r4, #4
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81c44:	685e      	ldr	r6, [r3, #4]
    uint32_t flags = *(CTRLBUFFER_WORDPTR + 2);
   81c46:	689d      	ldr	r5, [r3, #8]
    for(unsigned int i = 0; i < buflen; i++){
   81c48:	2300      	movs	r3, #0
   81c4a:	e005      	b.n	81c58 <ctrl_writemem_ctrl_sam3u+0x1c>
        sam3u_mem_b[i+address] = ctrlbuf_payload[i];
   81c4c:	199a      	adds	r2, r3, r6
   81c4e:	4925      	ldr	r1, [pc, #148]	; (81ce4 <ctrl_writemem_ctrl_sam3u+0xa8>)
   81c50:	5c58      	ldrb	r0, [r3, r1]
   81c52:	4925      	ldr	r1, [pc, #148]	; (81ce8 <ctrl_writemem_ctrl_sam3u+0xac>)
   81c54:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   81c56:	3301      	adds	r3, #1
   81c58:	42a3      	cmp	r3, r4
   81c5a:	d3f7      	bcc.n	81c4c <ctrl_writemem_ctrl_sam3u+0x10>
    if ( flags & 0x1 ){ // encryptions have been requested
   81c5c:	f015 0f01 	tst.w	r5, #1
   81c60:	d03d      	beq.n	81cde <ctrl_writemem_ctrl_sam3u+0xa2>
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   81c62:	4b21      	ldr	r3, [pc, #132]	; (81ce8 <ctrl_writemem_ctrl_sam3u+0xac>)
   81c64:	681c      	ldr	r4, [r3, #0]
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81c66:	2600      	movs	r6, #0
   81c68:	e02b      	b.n	81cc2 <ctrl_writemem_ctrl_sam3u+0x86>
                    xram[j+0x400+0x100] = seed >> 24;
   81c6a:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
   81c6e:	491f      	ldr	r1, [pc, #124]	; (81cec <ctrl_writemem_ctrl_sam3u+0xb0>)
   81c70:	6809      	ldr	r1, [r1, #0]
   81c72:	0e20      	lsrs	r0, r4, #24
   81c74:	5488      	strb	r0, [r1, r2]
                    seed += (seed*seed) | 0x5;
   81c76:	fb04 f204 	mul.w	r2, r4, r4
   81c7a:	f042 0205 	orr.w	r2, r2, #5
   81c7e:	4414      	add	r4, r2
                for(unsigned int j = 0; j < 16; j++){
   81c80:	3301      	adds	r3, #1
   81c82:	2b0f      	cmp	r3, #15
   81c84:	d9f1      	bls.n	81c6a <ctrl_writemem_ctrl_sam3u+0x2e>
   81c86:	e025      	b.n	81cd4 <ctrl_writemem_ctrl_sam3u+0x98>
   81c88:	2300      	movs	r3, #0
   81c8a:	e7fa      	b.n	81c82 <ctrl_writemem_ctrl_sam3u+0x46>
                    xram[j+0x400+0x200] = seed >> 24;
   81c8c:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
   81c90:	4916      	ldr	r1, [pc, #88]	; (81cec <ctrl_writemem_ctrl_sam3u+0xb0>)
   81c92:	6809      	ldr	r1, [r1, #0]
   81c94:	0e20      	lsrs	r0, r4, #24
   81c96:	5488      	strb	r0, [r1, r2]
                    seed += (seed*seed) | 0x5;
   81c98:	fb04 f204 	mul.w	r2, r4, r4
   81c9c:	f042 0205 	orr.w	r2, r2, #5
   81ca0:	4414      	add	r4, r2
                for(unsigned int j = 0; j < 16; j++){
   81ca2:	3301      	adds	r3, #1
   81ca4:	2b0f      	cmp	r3, #15
   81ca6:	d9f1      	bls.n	81c8c <ctrl_writemem_ctrl_sam3u+0x50>
            FPGA_setlock(fpga_unlocked);
   81ca8:	2000      	movs	r0, #0
   81caa:	4b11      	ldr	r3, [pc, #68]	; (81cf0 <ctrl_writemem_ctrl_sam3u+0xb4>)
   81cac:	4798      	blx	r3
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   81cae:	2031      	movs	r0, #49	; 0x31
   81cb0:	4b10      	ldr	r3, [pc, #64]	; (81cf4 <ctrl_writemem_ctrl_sam3u+0xb8>)
   81cb2:	4798      	blx	r3
            delay_cycles(50);
   81cb4:	2032      	movs	r0, #50	; 0x32
   81cb6:	4b10      	ldr	r3, [pc, #64]	; (81cf8 <ctrl_writemem_ctrl_sam3u+0xbc>)
   81cb8:	4798      	blx	r3
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   81cba:	2031      	movs	r0, #49	; 0x31
   81cbc:	4b0f      	ldr	r3, [pc, #60]	; (81cfc <ctrl_writemem_ctrl_sam3u+0xc0>)
   81cbe:	4798      	blx	r3
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81cc0:	3601      	adds	r6, #1
   81cc2:	ebb6 4f15 	cmp.w	r6, r5, lsr #16
   81cc6:	d20a      	bcs.n	81cde <ctrl_writemem_ctrl_sam3u+0xa2>
            FPGA_setlock(fpga_generic);
   81cc8:	2001      	movs	r0, #1
   81cca:	4b09      	ldr	r3, [pc, #36]	; (81cf0 <ctrl_writemem_ctrl_sam3u+0xb4>)
   81ccc:	4798      	blx	r3
            if ((flags >> 1) & 0x1){ // write the key
   81cce:	f015 0f02 	tst.w	r5, #2
   81cd2:	d1d9      	bne.n	81c88 <ctrl_writemem_ctrl_sam3u+0x4c>
            if ((flags >> 2) & 0x1){ // write the pts
   81cd4:	f015 0f04 	tst.w	r5, #4
   81cd8:	d0e6      	beq.n	81ca8 <ctrl_writemem_ctrl_sam3u+0x6c>
                for(unsigned int j = 0; j < 16; j++){
   81cda:	2300      	movs	r3, #0
   81cdc:	e7e2      	b.n	81ca4 <ctrl_writemem_ctrl_sam3u+0x68>
}
   81cde:	bd70      	pop	{r4, r5, r6, pc}
   81ce0:	20000ed4 	.word	0x20000ed4
   81ce4:	20000ee0 	.word	0x20000ee0
   81ce8:	20001430 	.word	0x20001430
   81cec:	200001e0 	.word	0x200001e0
   81cf0:	00080711 	.word	0x00080711
   81cf4:	00084b21 	.word	0x00084b21
   81cf8:	2000008b 	.word	0x2000008b
   81cfc:	00084b3d 	.word	0x00084b3d

00081d00 <ctrl_xmega_program_void>:
{
   81d00:	b508      	push	{r3, lr}
    XPROGProtocol_Command();
   81d02:	4b01      	ldr	r3, [pc, #4]	; (81d08 <ctrl_xmega_program_void+0x8>)
   81d04:	4798      	blx	r3
}
   81d06:	bd08      	pop	{r3, pc}
   81d08:	000812f1 	.word	0x000812f1

00081d0c <main_vendor_bulk_in_received>:
    if (UDD_EP_TRANSFER_OK != status) {
   81d0c:	b100      	cbz	r0, 81d10 <main_vendor_bulk_in_received+0x4>
   81d0e:	4770      	bx	lr
{
   81d10:	b508      	push	{r3, lr}
    if (FPGA_lockstatus() == fpga_blockin){		
   81d12:	4b04      	ldr	r3, [pc, #16]	; (81d24 <main_vendor_bulk_in_received+0x18>)
   81d14:	4798      	blx	r3
   81d16:	2802      	cmp	r0, #2
   81d18:	d000      	beq.n	81d1c <main_vendor_bulk_in_received+0x10>
}
   81d1a:	bd08      	pop	{r3, pc}
        FPGA_setlock(fpga_unlocked);
   81d1c:	2000      	movs	r0, #0
   81d1e:	4b02      	ldr	r3, [pc, #8]	; (81d28 <main_vendor_bulk_in_received+0x1c>)
   81d20:	4798      	blx	r3
   81d22:	e7fa      	b.n	81d1a <main_vendor_bulk_in_received+0xe>
   81d24:	00080749 	.word	0x00080749
   81d28:	00080711 	.word	0x00080711

00081d2c <ctrl_progfpga_bulk>:
void ctrl_progfpga_bulk(void){
   81d2c:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.wValue){
   81d2e:	4b0f      	ldr	r3, [pc, #60]	; (81d6c <ctrl_progfpga_bulk+0x40>)
   81d30:	885b      	ldrh	r3, [r3, #2]
   81d32:	2ba1      	cmp	r3, #161	; 0xa1
   81d34:	d00f      	beq.n	81d56 <ctrl_progfpga_bulk+0x2a>
   81d36:	2ba2      	cmp	r3, #162	; 0xa2
   81d38:	d013      	beq.n	81d62 <ctrl_progfpga_bulk+0x36>
   81d3a:	2ba0      	cmp	r3, #160	; 0xa0
   81d3c:	d000      	beq.n	81d40 <ctrl_progfpga_bulk+0x14>
}
   81d3e:	bd08      	pop	{r3, pc}
            if (udd_g_ctrlreq.req.wLength == 4) {
   81d40:	4b0a      	ldr	r3, [pc, #40]	; (81d6c <ctrl_progfpga_bulk+0x40>)
   81d42:	88db      	ldrh	r3, [r3, #6]
   81d44:	2b04      	cmp	r3, #4
   81d46:	d003      	beq.n	81d50 <ctrl_progfpga_bulk+0x24>
    uint32_t prog_freq = 1E6;
   81d48:	4809      	ldr	r0, [pc, #36]	; (81d70 <ctrl_progfpga_bulk+0x44>)
            fpga_program_setup1(prog_freq);			
   81d4a:	4b0a      	ldr	r3, [pc, #40]	; (81d74 <ctrl_progfpga_bulk+0x48>)
   81d4c:	4798      	blx	r3
            break;
   81d4e:	e7f6      	b.n	81d3e <ctrl_progfpga_bulk+0x12>
                prog_freq = *(CTRLBUFFER_WORDPTR);
   81d50:	4b09      	ldr	r3, [pc, #36]	; (81d78 <ctrl_progfpga_bulk+0x4c>)
   81d52:	6818      	ldr	r0, [r3, #0]
   81d54:	e7f9      	b.n	81d4a <ctrl_progfpga_bulk+0x1e>
            fpga_program_setup2();
   81d56:	4b09      	ldr	r3, [pc, #36]	; (81d7c <ctrl_progfpga_bulk+0x50>)
   81d58:	4798      	blx	r3
            blockendpoint_usage = bep_fpgabitstream;
   81d5a:	4b09      	ldr	r3, [pc, #36]	; (81d80 <ctrl_progfpga_bulk+0x54>)
   81d5c:	220a      	movs	r2, #10
   81d5e:	701a      	strb	r2, [r3, #0]
            break;
   81d60:	e7ed      	b.n	81d3e <ctrl_progfpga_bulk+0x12>
            blockendpoint_usage = bep_emem;
   81d62:	4b07      	ldr	r3, [pc, #28]	; (81d80 <ctrl_progfpga_bulk+0x54>)
   81d64:	2200      	movs	r2, #0
   81d66:	701a      	strb	r2, [r3, #0]
}
   81d68:	e7e9      	b.n	81d3e <ctrl_progfpga_bulk+0x12>
   81d6a:	bf00      	nop
   81d6c:	20001930 	.word	0x20001930
   81d70:	000f4240 	.word	0x000f4240
   81d74:	00080771 	.word	0x00080771
   81d78:	20000ed4 	.word	0x20000ed4
   81d7c:	00080801 	.word	0x00080801
   81d80:	200013d8 	.word	0x200013d8

00081d84 <main_vendor_bulk_out_received>:
{
   81d84:	b538      	push	{r3, r4, r5, lr}
    if (UDD_EP_TRANSFER_OK != status) {
   81d86:	b938      	cbnz	r0, 81d98 <main_vendor_bulk_out_received+0x14>
   81d88:	460c      	mov	r4, r1
    if (blockendpoint_usage == bep_emem){
   81d8a:	4b1a      	ldr	r3, [pc, #104]	; (81df4 <main_vendor_bulk_out_received+0x70>)
   81d8c:	781b      	ldrb	r3, [r3, #0]
   81d8e:	b303      	cbz	r3, 81dd2 <main_vendor_bulk_out_received+0x4e>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81d90:	2b0a      	cmp	r3, #10
   81d92:	d117      	bne.n	81dc4 <main_vendor_bulk_out_received+0x40>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81d94:	2500      	movs	r5, #0
   81d96:	e027      	b.n	81de8 <main_vendor_bulk_out_received+0x64>
        udi_vendor_bulk_out_run(
   81d98:	4a17      	ldr	r2, [pc, #92]	; (81df8 <main_vendor_bulk_out_received+0x74>)
   81d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81d9e:	4817      	ldr	r0, [pc, #92]	; (81dfc <main_vendor_bulk_out_received+0x78>)
   81da0:	4b17      	ldr	r3, [pc, #92]	; (81e00 <main_vendor_bulk_out_received+0x7c>)
   81da2:	4798      	blx	r3
        return;
   81da4:	e014      	b.n	81dd0 <main_vendor_bulk_out_received+0x4c>
            xram[i+bulk_fpga_write_addr] = main_buf_loopback[i];
   81da6:	4a17      	ldr	r2, [pc, #92]	; (81e04 <main_vendor_bulk_out_received+0x80>)
   81da8:	6812      	ldr	r2, [r2, #0]
   81daa:	441a      	add	r2, r3
   81dac:	4916      	ldr	r1, [pc, #88]	; (81e08 <main_vendor_bulk_out_received+0x84>)
   81dae:	6809      	ldr	r1, [r1, #0]
   81db0:	4812      	ldr	r0, [pc, #72]	; (81dfc <main_vendor_bulk_out_received+0x78>)
   81db2:	5cc0      	ldrb	r0, [r0, r3]
   81db4:	5488      	strb	r0, [r1, r2]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81db6:	3301      	adds	r3, #1
   81db8:	42a3      	cmp	r3, r4
   81dba:	d3f4      	bcc.n	81da6 <main_vendor_bulk_out_received+0x22>
        if (FPGA_lockstatus() == fpga_blockout){
   81dbc:	4b13      	ldr	r3, [pc, #76]	; (81e0c <main_vendor_bulk_out_received+0x88>)
   81dbe:	4798      	blx	r3
   81dc0:	2804      	cmp	r0, #4
   81dc2:	d008      	beq.n	81dd6 <main_vendor_bulk_out_received+0x52>
    udi_vendor_bulk_out_run(
   81dc4:	4a0c      	ldr	r2, [pc, #48]	; (81df8 <main_vendor_bulk_out_received+0x74>)
   81dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81dca:	480c      	ldr	r0, [pc, #48]	; (81dfc <main_vendor_bulk_out_received+0x78>)
   81dcc:	4b0c      	ldr	r3, [pc, #48]	; (81e00 <main_vendor_bulk_out_received+0x7c>)
   81dce:	4798      	blx	r3
}
   81dd0:	bd38      	pop	{r3, r4, r5, pc}
        for(unsigned int i = 0; i < nb_transfered; i++){
   81dd2:	2300      	movs	r3, #0
   81dd4:	e7f0      	b.n	81db8 <main_vendor_bulk_out_received+0x34>
            FPGA_setlock(fpga_unlocked);
   81dd6:	2000      	movs	r0, #0
   81dd8:	4b0d      	ldr	r3, [pc, #52]	; (81e10 <main_vendor_bulk_out_received+0x8c>)
   81dda:	4798      	blx	r3
   81ddc:	e7f2      	b.n	81dc4 <main_vendor_bulk_out_received+0x40>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81dde:	4b07      	ldr	r3, [pc, #28]	; (81dfc <main_vendor_bulk_out_received+0x78>)
   81de0:	5d58      	ldrb	r0, [r3, r5]
   81de2:	4b0c      	ldr	r3, [pc, #48]	; (81e14 <main_vendor_bulk_out_received+0x90>)
   81de4:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   81de6:	3501      	adds	r5, #1
   81de8:	42a5      	cmp	r5, r4
   81dea:	d3f8      	bcc.n	81dde <main_vendor_bulk_out_received+0x5a>
        FPGA_CCLK_LOW();
   81dec:	200f      	movs	r0, #15
   81dee:	4b0a      	ldr	r3, [pc, #40]	; (81e18 <main_vendor_bulk_out_received+0x94>)
   81df0:	4798      	blx	r3
   81df2:	e7e7      	b.n	81dc4 <main_vendor_bulk_out_received+0x40>
   81df4:	200013d8 	.word	0x200013d8
   81df8:	00081d85 	.word	0x00081d85
   81dfc:	20000f14 	.word	0x20000f14
   81e00:	00084909 	.word	0x00084909
   81e04:	200013dc 	.word	0x200013dc
   81e08:	200001e0 	.word	0x200001e0
   81e0c:	00080749 	.word	0x00080749
   81e10:	00080711 	.word	0x00080711
   81e14:	00080811 	.word	0x00080811
   81e18:	00084b3d 	.word	0x00084b3d

00081e1c <fpga_target_setup_in_received>:
{
   81e1c:	b538      	push	{r3, r4, r5, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   81e1e:	4b42      	ldr	r3, [pc, #264]	; (81f28 <fpga_target_setup_in_received+0x10c>)
   81e20:	785b      	ldrb	r3, [r3, #1]
   81e22:	3b12      	subs	r3, #18
   81e24:	2b23      	cmp	r3, #35	; 0x23
   81e26:	d878      	bhi.n	81f1a <fpga_target_setup_in_received+0xfe>
   81e28:	e8df f003 	tbb	[pc, r3]
   81e2c:	1d777712 	.word	0x1d777712
   81e30:	77777777 	.word	0x77777777
   81e34:	77777777 	.word	0x77777777
   81e38:	77347777 	.word	0x77347777
   81e3c:	77777777 	.word	0x77777777
   81e40:	77777777 	.word	0x77777777
   81e44:	77777777 	.word	0x77777777
   81e48:	473a7777 	.word	0x473a7777
   81e4c:	606a5677 	.word	0x606a5677
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   81e50:	4a35      	ldr	r2, [pc, #212]	; (81f28 <fpga_target_setup_in_received+0x10c>)
   81e52:	4b36      	ldr	r3, [pc, #216]	; (81f2c <fpga_target_setup_in_received+0x110>)
   81e54:	681b      	ldr	r3, [r3, #0]
   81e56:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81e58:	4b35      	ldr	r3, [pc, #212]	; (81f30 <fpga_target_setup_in_received+0x114>)
   81e5a:	6819      	ldr	r1, [r3, #0]
   81e5c:	8191      	strh	r1, [r2, #12]
            ctrlmemread_size = 0;
   81e5e:	2200      	movs	r2, #0
   81e60:	601a      	str	r2, [r3, #0]
            return true;
   81e62:	2001      	movs	r0, #1
   81e64:	e05a      	b.n	81f1c <fpga_target_setup_in_received+0x100>
            respbuf[0] = FPGA_ISDONE();
   81e66:	2007      	movs	r0, #7
   81e68:	4d32      	ldr	r5, [pc, #200]	; (81f34 <fpga_target_setup_in_received+0x118>)
   81e6a:	47a8      	blx	r5
   81e6c:	3800      	subs	r0, #0
   81e6e:	bf18      	it	ne
   81e70:	2001      	movne	r0, #1
   81e72:	4c31      	ldr	r4, [pc, #196]	; (81f38 <fpga_target_setup_in_received+0x11c>)
   81e74:	7020      	strb	r0, [r4, #0]
            respbuf[1] = FPGA_INITB_STATUS();
   81e76:	205d      	movs	r0, #93	; 0x5d
   81e78:	47a8      	blx	r5
   81e7a:	3800      	subs	r0, #0
   81e7c:	bf18      	it	ne
   81e7e:	2001      	movne	r0, #1
   81e80:	7060      	strb	r0, [r4, #1]
            respbuf[2] = 0;
   81e82:	2300      	movs	r3, #0
   81e84:	70a3      	strb	r3, [r4, #2]
            respbuf[3] = 0;
   81e86:	70e3      	strb	r3, [r4, #3]
            udd_g_ctrlreq.payload = respbuf;
   81e88:	4b27      	ldr	r3, [pc, #156]	; (81f28 <fpga_target_setup_in_received+0x10c>)
   81e8a:	609c      	str	r4, [r3, #8]
            udd_g_ctrlreq.payload_size = 4;
   81e8c:	2204      	movs	r2, #4
   81e8e:	819a      	strh	r2, [r3, #12]
            return true;
   81e90:	2001      	movs	r0, #1
   81e92:	e043      	b.n	81f1c <fpga_target_setup_in_received+0x100>
            return XPROGProtocol_Command();
   81e94:	4b29      	ldr	r3, [pc, #164]	; (81f3c <fpga_target_setup_in_received+0x120>)
   81e96:	4798      	blx	r3
   81e98:	3800      	subs	r0, #0
   81e9a:	bf18      	it	ne
   81e9c:	2001      	movne	r0, #1
   81e9e:	e03d      	b.n	81f1c <fpga_target_setup_in_received+0x100>
            respbuf[0] = cdce906_status;
   81ea0:	4b25      	ldr	r3, [pc, #148]	; (81f38 <fpga_target_setup_in_received+0x11c>)
   81ea2:	4a27      	ldr	r2, [pc, #156]	; (81f40 <fpga_target_setup_in_received+0x124>)
   81ea4:	7812      	ldrb	r2, [r2, #0]
   81ea6:	701a      	strb	r2, [r3, #0]
            respbuf[1] = cdce906_data;
   81ea8:	4a26      	ldr	r2, [pc, #152]	; (81f44 <fpga_target_setup_in_received+0x128>)
   81eaa:	7812      	ldrb	r2, [r2, #0]
   81eac:	705a      	strb	r2, [r3, #1]
            udd_g_ctrlreq.payload = respbuf;
   81eae:	4a1e      	ldr	r2, [pc, #120]	; (81f28 <fpga_target_setup_in_received+0x10c>)
   81eb0:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 2;
   81eb2:	2302      	movs	r3, #2
   81eb4:	8193      	strh	r3, [r2, #12]
            return true;
   81eb6:	2001      	movs	r0, #1
   81eb8:	e030      	b.n	81f1c <fpga_target_setup_in_received+0x100>
            respbuf[0] = vccint_status;
   81eba:	4b1f      	ldr	r3, [pc, #124]	; (81f38 <fpga_target_setup_in_received+0x11c>)
   81ebc:	4a22      	ldr	r2, [pc, #136]	; (81f48 <fpga_target_setup_in_received+0x12c>)
   81ebe:	7812      	ldrb	r2, [r2, #0]
   81ec0:	701a      	strb	r2, [r3, #0]
            respbuf[1] = (uint8_t)vccint_setting;
   81ec2:	4a22      	ldr	r2, [pc, #136]	; (81f4c <fpga_target_setup_in_received+0x130>)
   81ec4:	8812      	ldrh	r2, [r2, #0]
   81ec6:	705a      	strb	r2, [r3, #1]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   81ec8:	0a12      	lsrs	r2, r2, #8
   81eca:	709a      	strb	r2, [r3, #2]
            udd_g_ctrlreq.payload = respbuf;
   81ecc:	4a16      	ldr	r2, [pc, #88]	; (81f28 <fpga_target_setup_in_received+0x10c>)
   81ece:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 3;
   81ed0:	2303      	movs	r3, #3
   81ed2:	8193      	strh	r3, [r2, #12]
            return true;
   81ed4:	2001      	movs	r0, #1
   81ed6:	e021      	b.n	81f1c <fpga_target_setup_in_received+0x100>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer))
   81ed8:	4b13      	ldr	r3, [pc, #76]	; (81f28 <fpga_target_setup_in_received+0x10c>)
   81eda:	88db      	ldrh	r3, [r3, #6]
   81edc:	2b40      	cmp	r3, #64	; 0x40
   81ede:	d81e      	bhi.n	81f1e <fpga_target_setup_in_received+0x102>
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   81ee0:	4a11      	ldr	r2, [pc, #68]	; (81f28 <fpga_target_setup_in_received+0x10c>)
   81ee2:	491b      	ldr	r1, [pc, #108]	; (81f50 <fpga_target_setup_in_received+0x134>)
   81ee4:	6091      	str	r1, [r2, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81ee6:	8193      	strh	r3, [r2, #12]
			return true;
   81ee8:	2001      	movs	r0, #1
   81eea:	e017      	b.n	81f1c <fpga_target_setup_in_received+0x100>
 			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   81eec:	4b0e      	ldr	r3, [pc, #56]	; (81f28 <fpga_target_setup_in_received+0x10c>)
   81eee:	88db      	ldrh	r3, [r3, #6]
   81ef0:	2b40      	cmp	r3, #64	; 0x40
   81ef2:	d816      	bhi.n	81f22 <fpga_target_setup_in_received+0x106>
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   81ef4:	4a0c      	ldr	r2, [pc, #48]	; (81f28 <fpga_target_setup_in_received+0x10c>)
   81ef6:	4917      	ldr	r1, [pc, #92]	; (81f54 <fpga_target_setup_in_received+0x138>)
   81ef8:	6091      	str	r1, [r2, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81efa:	8193      	strh	r3, [r2, #12]
			return true;
   81efc:	2001      	movs	r0, #1
   81efe:	e00d      	b.n	81f1c <fpga_target_setup_in_received+0x100>
			pin = udd_g_ctrlreq.req.wValue & 0xFF;
   81f00:	4c09      	ldr	r4, [pc, #36]	; (81f28 <fpga_target_setup_in_received+0x10c>)
			respbuf[0] = gpio_pin_is_high(pin);
   81f02:	78a0      	ldrb	r0, [r4, #2]
   81f04:	4b0b      	ldr	r3, [pc, #44]	; (81f34 <fpga_target_setup_in_received+0x118>)
   81f06:	4798      	blx	r3
   81f08:	3800      	subs	r0, #0
   81f0a:	bf18      	it	ne
   81f0c:	2001      	movne	r0, #1
   81f0e:	4b0a      	ldr	r3, [pc, #40]	; (81f38 <fpga_target_setup_in_received+0x11c>)
   81f10:	7018      	strb	r0, [r3, #0]
			udd_g_ctrlreq.payload = respbuf;
   81f12:	60a3      	str	r3, [r4, #8]
			udd_g_ctrlreq.payload_size = 1;
   81f14:	2001      	movs	r0, #1
   81f16:	81a0      	strh	r0, [r4, #12]
			return true;
   81f18:	e000      	b.n	81f1c <fpga_target_setup_in_received+0x100>
    switch(udd_g_ctrlreq.req.bRequest){
   81f1a:	2000      	movs	r0, #0
}
   81f1c:	bd38      	pop	{r3, r4, r5, pc}
                return false;
   81f1e:	2000      	movs	r0, #0
   81f20:	e7fc      	b.n	81f1c <fpga_target_setup_in_received+0x100>
                return false;
   81f22:	2000      	movs	r0, #0
   81f24:	e7fa      	b.n	81f1c <fpga_target_setup_in_received+0x100>
   81f26:	bf00      	nop
   81f28:	20001930 	.word	0x20001930
   81f2c:	200013e4 	.word	0x200013e4
   81f30:	200013e8 	.word	0x200013e8
   81f34:	00084b05 	.word	0x00084b05
   81f38:	20001398 	.word	0x20001398
   81f3c:	000812f1 	.word	0x000812f1
   81f40:	200013e1 	.word	0x200013e1
   81f44:	200013e0 	.word	0x200013e0
   81f48:	20001874 	.word	0x20001874
   81f4c:	20000206 	.word	0x20000206
   81f50:	200013f0 	.word	0x200013f0
   81f54:	20001830 	.word	0x20001830

00081f58 <fpga_target_sam_cfg_out>:
{
   81f58:	b508      	push	{r3, lr}
	switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81f5a:	4b0f      	ldr	r3, [pc, #60]	; (81f98 <fpga_target_sam_cfg_out+0x40>)
   81f5c:	789b      	ldrb	r3, [r3, #2]
   81f5e:	2b05      	cmp	r3, #5
   81f60:	d00a      	beq.n	81f78 <fpga_target_sam_cfg_out+0x20>
   81f62:	2b06      	cmp	r3, #6
   81f64:	d00e      	beq.n	81f84 <fpga_target_sam_cfg_out+0x2c>
   81f66:	2b04      	cmp	r3, #4
   81f68:	d000      	beq.n	81f6c <fpga_target_sam_cfg_out+0x14>
}
   81f6a:	bd08      	pop	{r3, pc}
	    gpio_configure_pin(PIN_PCK0, PIO_OUTPUT_0);
   81f6c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81f70:	201b      	movs	r0, #27
   81f72:	4b0a      	ldr	r3, [pc, #40]	; (81f9c <fpga_target_sam_cfg_out+0x44>)
   81f74:	4798      	blx	r3
	    break;
   81f76:	e7f8      	b.n	81f6a <fpga_target_sam_cfg_out+0x12>
	    gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   81f78:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f7c:	201b      	movs	r0, #27
   81f7e:	4b07      	ldr	r3, [pc, #28]	; (81f9c <fpga_target_sam_cfg_out+0x44>)
   81f80:	4798      	blx	r3
	    break;
   81f82:	e7f2      	b.n	81f6a <fpga_target_sam_cfg_out+0x12>
	    gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   81f84:	2031      	movs	r0, #49	; 0x31
   81f86:	4b06      	ldr	r3, [pc, #24]	; (81fa0 <fpga_target_sam_cfg_out+0x48>)
   81f88:	4798      	blx	r3
	    delay_cycles(250);
   81f8a:	20fa      	movs	r0, #250	; 0xfa
   81f8c:	4b05      	ldr	r3, [pc, #20]	; (81fa4 <fpga_target_sam_cfg_out+0x4c>)
   81f8e:	4798      	blx	r3
	    gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   81f90:	2031      	movs	r0, #49	; 0x31
   81f92:	4b05      	ldr	r3, [pc, #20]	; (81fa8 <fpga_target_sam_cfg_out+0x50>)
   81f94:	4798      	blx	r3
}
   81f96:	e7e8      	b.n	81f6a <fpga_target_sam_cfg_out+0x12>
   81f98:	20001930 	.word	0x20001930
   81f9c:	00084b59 	.word	0x00084b59
   81fa0:	00084b21 	.word	0x00084b21
   81fa4:	2000008b 	.word	0x2000008b
   81fa8:	00084b3d 	.word	0x00084b3d

00081fac <ctrl_fpgaioutil>:
static void ctrl_fpgaioutil(void){
   81fac:	b538      	push	{r3, r4, r5, lr}
    if (udd_g_ctrlreq.req.wLength != 2){
   81fae:	4b41      	ldr	r3, [pc, #260]	; (820b4 <ctrl_fpgaioutil+0x108>)
   81fb0:	88db      	ldrh	r3, [r3, #6]
   81fb2:	2b02      	cmp	r3, #2
   81fb4:	d10d      	bne.n	81fd2 <ctrl_fpgaioutil+0x26>
    int pin = udd_g_ctrlreq.payload[0];
   81fb6:	4b3f      	ldr	r3, [pc, #252]	; (820b4 <ctrl_fpgaioutil+0x108>)
   81fb8:	689b      	ldr	r3, [r3, #8]
   81fba:	781c      	ldrb	r4, [r3, #0]
    int config = udd_g_ctrlreq.payload[1];
   81fbc:	785d      	ldrb	r5, [r3, #1]
	if ((pin < 0) || (pin > 95)){
   81fbe:	2c5f      	cmp	r4, #95	; 0x5f
   81fc0:	d807      	bhi.n	81fd2 <ctrl_fpgaioutil+0x26>
	switch(udd_g_ctrlreq.req.wValue){
   81fc2:	4b3c      	ldr	r3, [pc, #240]	; (820b4 <ctrl_fpgaioutil+0x108>)
   81fc4:	885b      	ldrh	r3, [r3, #2]
   81fc6:	2ba1      	cmp	r3, #161	; 0xa1
   81fc8:	d064      	beq.n	82094 <ctrl_fpgaioutil+0xe8>
   81fca:	2ba2      	cmp	r3, #162	; 0xa2
   81fcc:	d067      	beq.n	8209e <ctrl_fpgaioutil+0xf2>
   81fce:	2ba0      	cmp	r3, #160	; 0xa0
   81fd0:	d000      	beq.n	81fd4 <ctrl_fpgaioutil+0x28>
}
   81fd2:	bd38      	pop	{r3, r4, r5, pc}
            switch(config)
   81fd4:	3d01      	subs	r5, #1
   81fd6:	2d12      	cmp	r5, #18
   81fd8:	d857      	bhi.n	8208a <ctrl_fpgaioutil+0xde>
   81fda:	e8df f005 	tbb	[pc, r5]
   81fde:	100a      	.short	0x100a
   81fe0:	56565656 	.word	0x56565656
   81fe4:	56565656 	.word	0x56565656
   81fe8:	56565656 	.word	0x56565656
   81fec:	36261656 	.word	0x36261656
   81ff0:	46          	.byte	0x46
   81ff1:	00          	.byte	0x00
                    gpio_configure_pin(pin, PIO_INPUT);
   81ff2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81ff6:	4620      	mov	r0, r4
   81ff8:	4b2f      	ldr	r3, [pc, #188]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   81ffa:	4798      	blx	r3
                    break;
   81ffc:	e7e9      	b.n	81fd2 <ctrl_fpgaioutil+0x26>
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   81ffe:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82002:	4620      	mov	r0, r4
   82004:	4b2c      	ldr	r3, [pc, #176]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   82006:	4798      	blx	r3
                    break;
   82008:	e7e3      	b.n	81fd2 <ctrl_fpgaioutil+0x26>
                    if(pin_spi1_mosi > -1){
   8200a:	4b2c      	ldr	r3, [pc, #176]	; (820bc <ctrl_fpgaioutil+0x110>)
   8200c:	6818      	ldr	r0, [r3, #0]
   8200e:	2800      	cmp	r0, #0
   82010:	da07      	bge.n	82022 <ctrl_fpgaioutil+0x76>
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   82012:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82016:	4620      	mov	r0, r4
   82018:	4b27      	ldr	r3, [pc, #156]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   8201a:	4798      	blx	r3
                    pin_spi1_mosi = pin;
   8201c:	4b27      	ldr	r3, [pc, #156]	; (820bc <ctrl_fpgaioutil+0x110>)
   8201e:	601c      	str	r4, [r3, #0]
                    break;
   82020:	e7d7      	b.n	81fd2 <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_mosi, PIO_DEFAULT);
   82022:	2100      	movs	r1, #0
   82024:	4b24      	ldr	r3, [pc, #144]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   82026:	4798      	blx	r3
   82028:	e7f3      	b.n	82012 <ctrl_fpgaioutil+0x66>
                    if(pin_spi1_miso > -1){
   8202a:	4b25      	ldr	r3, [pc, #148]	; (820c0 <ctrl_fpgaioutil+0x114>)
   8202c:	6818      	ldr	r0, [r3, #0]
   8202e:	2800      	cmp	r0, #0
   82030:	da07      	bge.n	82042 <ctrl_fpgaioutil+0x96>
                    gpio_configure_pin(pin, PIO_INPUT);
   82032:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82036:	4620      	mov	r0, r4
   82038:	4b1f      	ldr	r3, [pc, #124]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   8203a:	4798      	blx	r3
                    pin_spi1_miso = pin;
   8203c:	4b20      	ldr	r3, [pc, #128]	; (820c0 <ctrl_fpgaioutil+0x114>)
   8203e:	601c      	str	r4, [r3, #0]
                    break;
   82040:	e7c7      	b.n	81fd2 <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_miso, PIO_DEFAULT);
   82042:	2100      	movs	r1, #0
   82044:	4b1c      	ldr	r3, [pc, #112]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   82046:	4798      	blx	r3
   82048:	e7f3      	b.n	82032 <ctrl_fpgaioutil+0x86>
                    if(pin_spi1_sck > -1){
   8204a:	4b1e      	ldr	r3, [pc, #120]	; (820c4 <ctrl_fpgaioutil+0x118>)
   8204c:	6818      	ldr	r0, [r3, #0]
   8204e:	2800      	cmp	r0, #0
   82050:	da07      	bge.n	82062 <ctrl_fpgaioutil+0xb6>
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   82052:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82056:	4620      	mov	r0, r4
   82058:	4b17      	ldr	r3, [pc, #92]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   8205a:	4798      	blx	r3
                    pin_spi1_sck = pin;
   8205c:	4b19      	ldr	r3, [pc, #100]	; (820c4 <ctrl_fpgaioutil+0x118>)
   8205e:	601c      	str	r4, [r3, #0]
                    break;
   82060:	e7b7      	b.n	81fd2 <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_sck, PIO_DEFAULT);
   82062:	2100      	movs	r1, #0
   82064:	4b14      	ldr	r3, [pc, #80]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   82066:	4798      	blx	r3
   82068:	e7f3      	b.n	82052 <ctrl_fpgaioutil+0xa6>
                    if(pin_spi1_cs > -1){
   8206a:	4b17      	ldr	r3, [pc, #92]	; (820c8 <ctrl_fpgaioutil+0x11c>)
   8206c:	6818      	ldr	r0, [r3, #0]
   8206e:	2800      	cmp	r0, #0
   82070:	da07      	bge.n	82082 <ctrl_fpgaioutil+0xd6>
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   82072:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82076:	4620      	mov	r0, r4
   82078:	4b0f      	ldr	r3, [pc, #60]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   8207a:	4798      	blx	r3
                    pin_spi1_cs = pin;                    
   8207c:	4b12      	ldr	r3, [pc, #72]	; (820c8 <ctrl_fpgaioutil+0x11c>)
   8207e:	601c      	str	r4, [r3, #0]
                    break;
   82080:	e7a7      	b.n	81fd2 <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_cs, PIO_DEFAULT);
   82082:	2100      	movs	r1, #0
   82084:	4b0c      	ldr	r3, [pc, #48]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   82086:	4798      	blx	r3
   82088:	e7f3      	b.n	82072 <ctrl_fpgaioutil+0xc6>
                    gpio_configure_pin(pin, PIO_DEFAULT);
   8208a:	2100      	movs	r1, #0
   8208c:	4620      	mov	r0, r4
   8208e:	4b0a      	ldr	r3, [pc, #40]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   82090:	4798      	blx	r3
                    break;
   82092:	e79e      	b.n	81fd2 <ctrl_fpgaioutil+0x26>
            gpio_configure_pin(pin, PIO_DEFAULT);
   82094:	2100      	movs	r1, #0
   82096:	4620      	mov	r0, r4
   82098:	4b07      	ldr	r3, [pc, #28]	; (820b8 <ctrl_fpgaioutil+0x10c>)
   8209a:	4798      	blx	r3
			break;
   8209c:	e799      	b.n	81fd2 <ctrl_fpgaioutil+0x26>
            if (config == 0){
   8209e:	b12d      	cbz	r5, 820ac <ctrl_fpgaioutil+0x100>
            if (config == 1){
   820a0:	2d01      	cmp	r5, #1
   820a2:	d196      	bne.n	81fd2 <ctrl_fpgaioutil+0x26>
                gpio_set_pin_high(pin);
   820a4:	4620      	mov	r0, r4
   820a6:	4b09      	ldr	r3, [pc, #36]	; (820cc <ctrl_fpgaioutil+0x120>)
   820a8:	4798      	blx	r3
   820aa:	e792      	b.n	81fd2 <ctrl_fpgaioutil+0x26>
                gpio_set_pin_low(pin);
   820ac:	4620      	mov	r0, r4
   820ae:	4b08      	ldr	r3, [pc, #32]	; (820d0 <ctrl_fpgaioutil+0x124>)
   820b0:	4798      	blx	r3
   820b2:	e7f5      	b.n	820a0 <ctrl_fpgaioutil+0xf4>
   820b4:	20001930 	.word	0x20001930
   820b8:	00084b59 	.word	0x00084b59
   820bc:	200001ec 	.word	0x200001ec
   820c0:	200001e8 	.word	0x200001e8
   820c4:	200001f0 	.word	0x200001f0
   820c8:	200001e4 	.word	0x200001e4
   820cc:	00084b21 	.word	0x00084b21
   820d0:	00084b3d 	.word	0x00084b3d

000820d4 <ctrl_spi1util>:
static void ctrl_spi1util(void){
   820d4:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue){
   820d6:	4b17      	ldr	r3, [pc, #92]	; (82134 <ctrl_spi1util+0x60>)
   820d8:	885b      	ldrh	r3, [r3, #2]
   820da:	3ba0      	subs	r3, #160	; 0xa0
   820dc:	2b04      	cmp	r3, #4
   820de:	d806      	bhi.n	820ee <ctrl_spi1util+0x1a>
   820e0:	e8df f003 	tbb	[pc, r3]
   820e4:	0c090603 	.word	0x0c090603
   820e8:	0f          	.byte	0x0f
   820e9:	00          	.byte	0x00
			spi1util_init();			
   820ea:	4b13      	ldr	r3, [pc, #76]	; (82138 <ctrl_spi1util+0x64>)
   820ec:	4798      	blx	r3
}
   820ee:	bd10      	pop	{r4, pc}
			spi1util_deinit();
   820f0:	4b12      	ldr	r3, [pc, #72]	; (8213c <ctrl_spi1util+0x68>)
   820f2:	4798      	blx	r3
			break;
   820f4:	e7fb      	b.n	820ee <ctrl_spi1util+0x1a>
			spi1util_cs_low();
   820f6:	4b12      	ldr	r3, [pc, #72]	; (82140 <ctrl_spi1util+0x6c>)
   820f8:	4798      	blx	r3
			break;
   820fa:	e7f8      	b.n	820ee <ctrl_spi1util+0x1a>
			spi1util_cs_high();
   820fc:	4b11      	ldr	r3, [pc, #68]	; (82144 <ctrl_spi1util+0x70>)
   820fe:	4798      	blx	r3
			break;
   82100:	e7f5      	b.n	820ee <ctrl_spi1util+0x1a>
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82102:	4a0c      	ldr	r2, [pc, #48]	; (82134 <ctrl_spi1util+0x60>)
   82104:	88d3      	ldrh	r3, [r2, #6]
   82106:	8992      	ldrh	r2, [r2, #12]
   82108:	4293      	cmp	r3, r2
   8210a:	d8f0      	bhi.n	820ee <ctrl_spi1util+0x1a>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   8210c:	2b40      	cmp	r3, #64	; 0x40
   8210e:	d8ee      	bhi.n	820ee <ctrl_spi1util+0x1a>
			spi1util_databuffer_len = udd_g_ctrlreq.req.wLength;
   82110:	4a0d      	ldr	r2, [pc, #52]	; (82148 <ctrl_spi1util+0x74>)
   82112:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82114:	2400      	movs	r4, #0
   82116:	e007      	b.n	82128 <ctrl_spi1util+0x54>
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   82118:	4b06      	ldr	r3, [pc, #24]	; (82134 <ctrl_spi1util+0x60>)
   8211a:	689b      	ldr	r3, [r3, #8]
   8211c:	5d18      	ldrb	r0, [r3, r4]
   8211e:	4b0b      	ldr	r3, [pc, #44]	; (8214c <ctrl_spi1util+0x78>)
   82120:	4798      	blx	r3
   82122:	4b0b      	ldr	r3, [pc, #44]	; (82150 <ctrl_spi1util+0x7c>)
   82124:	5518      	strb	r0, [r3, r4]
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82126:	3401      	adds	r4, #1
   82128:	4b02      	ldr	r3, [pc, #8]	; (82134 <ctrl_spi1util+0x60>)
   8212a:	88db      	ldrh	r3, [r3, #6]
   8212c:	42a3      	cmp	r3, r4
   8212e:	dcf3      	bgt.n	82118 <ctrl_spi1util+0x44>
   82130:	e7dd      	b.n	820ee <ctrl_spi1util+0x1a>
   82132:	bf00      	nop
   82134:	20001930 	.word	0x20001930
   82138:	00080a1d 	.word	0x00080a1d
   8213c:	00080aed 	.word	0x00080aed
   82140:	00080a41 	.word	0x00080a41
   82144:	00080a55 	.word	0x00080a55
   82148:	20001870 	.word	0x20001870
   8214c:	00080a69 	.word	0x00080a69
   82150:	20001830 	.word	0x20001830

00082154 <ctrl_progfpgaspi>:
static void ctrl_progfpgaspi(void){
   82154:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue){
   82156:	4b17      	ldr	r3, [pc, #92]	; (821b4 <ctrl_progfpgaspi+0x60>)
   82158:	885b      	ldrh	r3, [r3, #2]
   8215a:	3ba0      	subs	r3, #160	; 0xa0
   8215c:	2b04      	cmp	r3, #4
   8215e:	d806      	bhi.n	8216e <ctrl_progfpgaspi+0x1a>
   82160:	e8df f003 	tbb	[pc, r3]
   82164:	0c090603 	.word	0x0c090603
   82168:	0f          	.byte	0x0f
   82169:	00          	.byte	0x00
			fpgaspi_program_init();			
   8216a:	4b13      	ldr	r3, [pc, #76]	; (821b8 <ctrl_progfpgaspi+0x64>)
   8216c:	4798      	blx	r3
}
   8216e:	bd10      	pop	{r4, pc}
			fpgaspi_program_deinit();
   82170:	4b12      	ldr	r3, [pc, #72]	; (821bc <ctrl_progfpgaspi+0x68>)
   82172:	4798      	blx	r3
			break;
   82174:	e7fb      	b.n	8216e <ctrl_progfpgaspi+0x1a>
			fpgaspi_cs_low();
   82176:	4b12      	ldr	r3, [pc, #72]	; (821c0 <ctrl_progfpgaspi+0x6c>)
   82178:	4798      	blx	r3
			break;
   8217a:	e7f8      	b.n	8216e <ctrl_progfpgaspi+0x1a>
			fpgaspi_cs_high();
   8217c:	4b11      	ldr	r3, [pc, #68]	; (821c4 <ctrl_progfpgaspi+0x70>)
   8217e:	4798      	blx	r3
			break;
   82180:	e7f5      	b.n	8216e <ctrl_progfpgaspi+0x1a>
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82182:	4a0c      	ldr	r2, [pc, #48]	; (821b4 <ctrl_progfpgaspi+0x60>)
   82184:	88d3      	ldrh	r3, [r2, #6]
   82186:	8992      	ldrh	r2, [r2, #12]
   82188:	4293      	cmp	r3, r2
   8218a:	d8f0      	bhi.n	8216e <ctrl_progfpgaspi+0x1a>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   8218c:	2b40      	cmp	r3, #64	; 0x40
   8218e:	d8ee      	bhi.n	8216e <ctrl_progfpgaspi+0x1a>
			fpga_spi_databuffer_len = udd_g_ctrlreq.req.wLength;
   82190:	4a0d      	ldr	r2, [pc, #52]	; (821c8 <ctrl_progfpgaspi+0x74>)
   82192:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82194:	2400      	movs	r4, #0
   82196:	e007      	b.n	821a8 <ctrl_progfpgaspi+0x54>
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   82198:	4b06      	ldr	r3, [pc, #24]	; (821b4 <ctrl_progfpgaspi+0x60>)
   8219a:	689b      	ldr	r3, [r3, #8]
   8219c:	5d18      	ldrb	r0, [r3, r4]
   8219e:	4b0b      	ldr	r3, [pc, #44]	; (821cc <ctrl_progfpgaspi+0x78>)
   821a0:	4798      	blx	r3
   821a2:	4b0b      	ldr	r3, [pc, #44]	; (821d0 <ctrl_progfpgaspi+0x7c>)
   821a4:	5518      	strb	r0, [r3, r4]
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   821a6:	3401      	adds	r4, #1
   821a8:	4b02      	ldr	r3, [pc, #8]	; (821b4 <ctrl_progfpgaspi+0x60>)
   821aa:	88db      	ldrh	r3, [r3, #6]
   821ac:	42a3      	cmp	r3, r4
   821ae:	dcf3      	bgt.n	82198 <ctrl_progfpgaspi+0x44>
   821b0:	e7dd      	b.n	8216e <ctrl_progfpgaspi+0x1a>
   821b2:	bf00      	nop
   821b4:	20001930 	.word	0x20001930
   821b8:	00080935 	.word	0x00080935
   821bc:	00080a01 	.word	0x00080a01
   821c0:	00080975 	.word	0x00080975
   821c4:	00080985 	.word	0x00080985
   821c8:	200013ec 	.word	0x200013ec
   821cc:	00080995 	.word	0x00080995
   821d0:	200013f0 	.word	0x200013f0

000821d4 <ctrl_vccint_cb>:
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   821d4:	4b1c      	ldr	r3, [pc, #112]	; (82248 <ctrl_vccint_cb+0x74>)
   821d6:	88d9      	ldrh	r1, [r3, #6]
   821d8:	899b      	ldrh	r3, [r3, #12]
   821da:	4299      	cmp	r1, r3
   821dc:	d832      	bhi.n	82244 <ctrl_vccint_cb+0x70>
{
   821de:	b510      	push	{r4, lr}
    vccint_status = USB_STATUS_NONE;
   821e0:	4b1a      	ldr	r3, [pc, #104]	; (8224c <ctrl_vccint_cb+0x78>)
   821e2:	2200      	movs	r2, #0
   821e4:	701a      	strb	r2, [r3, #0]
    if ((udd_g_ctrlreq.payload[0] ^ udd_g_ctrlreq.payload[1] ^ 0xAE) != (udd_g_ctrlreq.payload[2])){
   821e6:	4b18      	ldr	r3, [pc, #96]	; (82248 <ctrl_vccint_cb+0x74>)
   821e8:	689a      	ldr	r2, [r3, #8]
   821ea:	7810      	ldrb	r0, [r2, #0]
   821ec:	7854      	ldrb	r4, [r2, #1]
   821ee:	ea80 0304 	eor.w	r3, r0, r4
   821f2:	f083 03ae 	eor.w	r3, r3, #174	; 0xae
   821f6:	7892      	ldrb	r2, [r2, #2]
   821f8:	4293      	cmp	r3, r2
   821fa:	d003      	beq.n	82204 <ctrl_vccint_cb+0x30>
        vccint_status = USB_STATUS_PARAMWRONG;
   821fc:	4b13      	ldr	r3, [pc, #76]	; (8224c <ctrl_vccint_cb+0x78>)
   821fe:	2201      	movs	r2, #1
   82200:	701a      	strb	r2, [r3, #0]
}
   82202:	bd10      	pop	{r4, pc}
    if (udd_g_ctrlreq.req.wLength < 3){
   82204:	2902      	cmp	r1, #2
   82206:	d90b      	bls.n	82220 <ctrl_vccint_cb+0x4c>
    uint16_t vcctemp = (udd_g_ctrlreq.payload[0]) | (udd_g_ctrlreq.payload[1] << 8);
   82208:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
    if ((vcctemp < 600) || (vcctemp > 1200)){
   8220c:	f5a4 7316 	sub.w	r3, r4, #600	; 0x258
   82210:	b29b      	uxth	r3, r3
   82212:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   82216:	d907      	bls.n	82228 <ctrl_vccint_cb+0x54>
        vccint_status = USB_STATUS_PARAMWRONG;
   82218:	4b0c      	ldr	r3, [pc, #48]	; (8224c <ctrl_vccint_cb+0x78>)
   8221a:	2201      	movs	r2, #1
   8221c:	701a      	strb	r2, [r3, #0]
        return;
   8221e:	e7f0      	b.n	82202 <ctrl_vccint_cb+0x2e>
        vccint_status = USB_STATUS_CSFAIL;
   82220:	4b0a      	ldr	r3, [pc, #40]	; (8224c <ctrl_vccint_cb+0x78>)
   82222:	2204      	movs	r2, #4
   82224:	701a      	strb	r2, [r3, #0]
        return;
   82226:	e7ec      	b.n	82202 <ctrl_vccint_cb+0x2e>
    vccint_status = USB_STATUS_COMMERR;
   82228:	4b08      	ldr	r3, [pc, #32]	; (8224c <ctrl_vccint_cb+0x78>)
   8222a:	2203      	movs	r2, #3
   8222c:	701a      	strb	r2, [r3, #0]
    if (tps56520_set(vcctemp)){
   8222e:	4620      	mov	r0, r4
   82230:	4b07      	ldr	r3, [pc, #28]	; (82250 <ctrl_vccint_cb+0x7c>)
   82232:	4798      	blx	r3
   82234:	2800      	cmp	r0, #0
   82236:	d0e4      	beq.n	82202 <ctrl_vccint_cb+0x2e>
        vccint_setting = vcctemp;
   82238:	4b06      	ldr	r3, [pc, #24]	; (82254 <ctrl_vccint_cb+0x80>)
   8223a:	801c      	strh	r4, [r3, #0]
        vccint_status = USB_STATUS_OK;
   8223c:	4b03      	ldr	r3, [pc, #12]	; (8224c <ctrl_vccint_cb+0x78>)
   8223e:	2202      	movs	r2, #2
   82240:	701a      	strb	r2, [r3, #0]
   82242:	e7de      	b.n	82202 <ctrl_vccint_cb+0x2e>
   82244:	4770      	bx	lr
   82246:	bf00      	nop
   82248:	20001930 	.word	0x20001930
   8224c:	20001874 	.word	0x20001874
   82250:	00080b0d 	.word	0x00080b0d
   82254:	20000206 	.word	0x20000206

00082258 <ctrl_cdce906_cb>:
{
   82258:	b508      	push	{r3, lr}
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   8225a:	4b17      	ldr	r3, [pc, #92]	; (822b8 <ctrl_cdce906_cb+0x60>)
   8225c:	88da      	ldrh	r2, [r3, #6]
   8225e:	899b      	ldrh	r3, [r3, #12]
   82260:	429a      	cmp	r2, r3
   82262:	d813      	bhi.n	8228c <ctrl_cdce906_cb+0x34>
    cdce906_status = USB_STATUS_NONE;
   82264:	4b15      	ldr	r3, [pc, #84]	; (822bc <ctrl_cdce906_cb+0x64>)
   82266:	2100      	movs	r1, #0
   82268:	7019      	strb	r1, [r3, #0]
    if (udd_g_ctrlreq.req.wLength < 3){
   8226a:	2a02      	cmp	r2, #2
   8226c:	d90c      	bls.n	82288 <ctrl_cdce906_cb+0x30>
    cdce906_status = USB_STATUS_COMMERR;
   8226e:	4b13      	ldr	r3, [pc, #76]	; (822bc <ctrl_cdce906_cb+0x64>)
   82270:	2203      	movs	r2, #3
   82272:	701a      	strb	r2, [r3, #0]
    if (udd_g_ctrlreq.payload[0] == 0x00){
   82274:	4b10      	ldr	r3, [pc, #64]	; (822b8 <ctrl_cdce906_cb+0x60>)
   82276:	689b      	ldr	r3, [r3, #8]
   82278:	781a      	ldrb	r2, [r3, #0]
   8227a:	b142      	cbz	r2, 8228e <ctrl_cdce906_cb+0x36>
    } else if (udd_g_ctrlreq.payload[0] == 0x01){
   8227c:	2a01      	cmp	r2, #1
   8227e:	d010      	beq.n	822a2 <ctrl_cdce906_cb+0x4a>
        cdce906_status = USB_STATUS_PARAMWRONG;
   82280:	4b0e      	ldr	r3, [pc, #56]	; (822bc <ctrl_cdce906_cb+0x64>)
   82282:	2201      	movs	r2, #1
   82284:	701a      	strb	r2, [r3, #0]
        return;
   82286:	e001      	b.n	8228c <ctrl_cdce906_cb+0x34>
        cdce906_status = USB_STATUS_PARAMWRONG;
   82288:	2201      	movs	r2, #1
   8228a:	701a      	strb	r2, [r3, #0]
}
   8228c:	bd08      	pop	{r3, pc}
        if (cdce906_read(udd_g_ctrlreq.payload[1], &cdce906_data)){
   8228e:	490c      	ldr	r1, [pc, #48]	; (822c0 <ctrl_cdce906_cb+0x68>)
   82290:	7858      	ldrb	r0, [r3, #1]
   82292:	4b0c      	ldr	r3, [pc, #48]	; (822c4 <ctrl_cdce906_cb+0x6c>)
   82294:	4798      	blx	r3
   82296:	2800      	cmp	r0, #0
   82298:	d0f8      	beq.n	8228c <ctrl_cdce906_cb+0x34>
            cdce906_status = USB_STATUS_OK;
   8229a:	4b08      	ldr	r3, [pc, #32]	; (822bc <ctrl_cdce906_cb+0x64>)
   8229c:	2202      	movs	r2, #2
   8229e:	701a      	strb	r2, [r3, #0]
   822a0:	e7f4      	b.n	8228c <ctrl_cdce906_cb+0x34>
        if (cdce906_write(udd_g_ctrlreq.payload[1], udd_g_ctrlreq.payload[2])){
   822a2:	7899      	ldrb	r1, [r3, #2]
   822a4:	7858      	ldrb	r0, [r3, #1]
   822a6:	4b08      	ldr	r3, [pc, #32]	; (822c8 <ctrl_cdce906_cb+0x70>)
   822a8:	4798      	blx	r3
   822aa:	2800      	cmp	r0, #0
   822ac:	d0ee      	beq.n	8228c <ctrl_cdce906_cb+0x34>
            cdce906_status = USB_STATUS_OK;
   822ae:	4b03      	ldr	r3, [pc, #12]	; (822bc <ctrl_cdce906_cb+0x64>)
   822b0:	2202      	movs	r2, #2
   822b2:	701a      	strb	r2, [r3, #0]
   822b4:	e7ea      	b.n	8228c <ctrl_cdce906_cb+0x34>
   822b6:	bf00      	nop
   822b8:	20001930 	.word	0x20001930
   822bc:	200013e1 	.word	0x200013e1
   822c0:	200013e0 	.word	0x200013e0
   822c4:	00080875 	.word	0x00080875
   822c8:	00080829 	.word	0x00080829

000822cc <fpga_target_register_handlers>:

void fpga_target_register_handlers(void)
{
   822cc:	b508      	push	{r3, lr}
    naeusb_add_in_handler(fpga_target_setup_in_received);
   822ce:	4803      	ldr	r0, [pc, #12]	; (822dc <fpga_target_register_handlers+0x10>)
   822d0:	4b03      	ldr	r3, [pc, #12]	; (822e0 <fpga_target_register_handlers+0x14>)
   822d2:	4798      	blx	r3
    naeusb_add_out_handler(fpga_target_setup_out_received);
   822d4:	4803      	ldr	r0, [pc, #12]	; (822e4 <fpga_target_register_handlers+0x18>)
   822d6:	4b04      	ldr	r3, [pc, #16]	; (822e8 <fpga_target_register_handlers+0x1c>)
   822d8:	4798      	blx	r3
   822da:	bd08      	pop	{r3, pc}
   822dc:	00081e1d 	.word	0x00081e1d
   822e0:	000817b9 	.word	0x000817b9
   822e4:	00081a7d 	.word	0x00081a7d
   822e8:	000817dd 	.word	0x000817dd

000822ec <udc_get_string_serial_name>:
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
	}
   822ec:	4800      	ldr	r0, [pc, #0]	; (822f0 <udc_get_string_serial_name+0x4>)
   822ee:	4770      	bx	lr
   822f0:	200001bc 	.word	0x200001bc

000822f4 <udc_get_eof_conf>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   822f4:	4b02      	ldr	r3, [pc, #8]	; (82300 <udc_get_eof_conf+0xc>)
   822f6:	681b      	ldr	r3, [r3, #0]
   822f8:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   822fa:	8858      	ldrh	r0, [r3, #2]
}
   822fc:	4418      	add	r0, r3
   822fe:	4770      	bx	lr
   82300:	2000187c 	.word	0x2000187c

00082304 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   82304:	b538      	push	{r3, r4, r5, lr}
   82306:	4604      	mov	r4, r0
   82308:	460d      	mov	r5, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   8230a:	4b0a      	ldr	r3, [pc, #40]	; (82334 <udc_next_desc_in_iface+0x30>)
   8230c:	4798      	blx	r3
   8230e:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   82310:	7820      	ldrb	r0, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82312:	4420      	add	r0, r4
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   82314:	e001      	b.n	8231a <udc_next_desc_in_iface+0x16>
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   82316:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82318:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   8231a:	4290      	cmp	r0, r2
   8231c:	d205      	bcs.n	8232a <udc_next_desc_in_iface+0x26>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8231e:	7843      	ldrb	r3, [r0, #1]
   82320:	2b04      	cmp	r3, #4
   82322:	d004      	beq.n	8232e <udc_next_desc_in_iface+0x2a>
		if (desc_id == desc->bDescriptorType) {
   82324:	42ab      	cmp	r3, r5
   82326:	d1f6      	bne.n	82316 <udc_next_desc_in_iface+0x12>
   82328:	e000      	b.n	8232c <udc_next_desc_in_iface+0x28>
	}
	return NULL; // No specific descriptor found
   8232a:	2000      	movs	r0, #0
}
   8232c:	bd38      	pop	{r3, r4, r5, pc}
	return NULL; // No specific descriptor found
   8232e:	2000      	movs	r0, #0
   82330:	e7fc      	b.n	8232c <udc_next_desc_in_iface+0x28>
   82332:	bf00      	nop
   82334:	000822f5 	.word	0x000822f5

00082338 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   82338:	b538      	push	{r3, r4, r5, lr}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   8233a:	4b14      	ldr	r3, [pc, #80]	; (8238c <udc_update_iface_desc+0x54>)
   8233c:	781b      	ldrb	r3, [r3, #0]
   8233e:	b30b      	cbz	r3, 82384 <udc_update_iface_desc+0x4c>
   82340:	4604      	mov	r4, r0
   82342:	460d      	mov	r5, r1
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82344:	4b12      	ldr	r3, [pc, #72]	; (82390 <udc_update_iface_desc+0x58>)
   82346:	681b      	ldr	r3, [r3, #0]
   82348:	681b      	ldr	r3, [r3, #0]
   8234a:	791a      	ldrb	r2, [r3, #4]
   8234c:	4282      	cmp	r2, r0
   8234e:	d91b      	bls.n	82388 <udc_update_iface_desc+0x50>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   82350:	4a10      	ldr	r2, [pc, #64]	; (82394 <udc_update_iface_desc+0x5c>)
   82352:	6013      	str	r3, [r2, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   82354:	4b10      	ldr	r3, [pc, #64]	; (82398 <udc_update_iface_desc+0x60>)
   82356:	4798      	blx	r3
	while (ptr_end_desc >
   82358:	e003      	b.n	82362 <udc_update_iface_desc+0x2a>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   8235a:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8235c:	4413      	add	r3, r2
   8235e:	4a0d      	ldr	r2, [pc, #52]	; (82394 <udc_update_iface_desc+0x5c>)
   82360:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   82362:	4b0c      	ldr	r3, [pc, #48]	; (82394 <udc_update_iface_desc+0x5c>)
   82364:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   82366:	4283      	cmp	r3, r0
   82368:	d20a      	bcs.n	82380 <udc_update_iface_desc+0x48>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8236a:	785a      	ldrb	r2, [r3, #1]
   8236c:	2a04      	cmp	r2, #4
   8236e:	d1f4      	bne.n	8235a <udc_update_iface_desc+0x22>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82370:	789a      	ldrb	r2, [r3, #2]
   82372:	42a2      	cmp	r2, r4
   82374:	d1f1      	bne.n	8235a <udc_update_iface_desc+0x22>
					udc_ptr_iface->bAlternateSetting)) {
   82376:	78da      	ldrb	r2, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82378:	42aa      	cmp	r2, r5
   8237a:	d1ee      	bne.n	8235a <udc_update_iface_desc+0x22>
				return true; // Interface found
   8237c:	2001      	movs	r0, #1
   8237e:	e000      	b.n	82382 <udc_update_iface_desc+0x4a>
	}
	return false; // Interface not found
   82380:	2000      	movs	r0, #0
}
   82382:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   82384:	2000      	movs	r0, #0
   82386:	e7fc      	b.n	82382 <udc_update_iface_desc+0x4a>
		return false;
   82388:	2000      	movs	r0, #0
   8238a:	e7fa      	b.n	82382 <udc_update_iface_desc+0x4a>
   8238c:	2000187b 	.word	0x2000187b
   82390:	2000187c 	.word	0x2000187c
   82394:	20001880 	.word	0x20001880
   82398:	000822f5 	.word	0x000822f5

0008239c <udc_req_std_dev_clear_feature>:
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   8239c:	4b08      	ldr	r3, [pc, #32]	; (823c0 <udc_req_std_dev_clear_feature+0x24>)
   8239e:	88db      	ldrh	r3, [r3, #6]
   823a0:	b963      	cbnz	r3, 823bc <udc_req_std_dev_clear_feature+0x20>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   823a2:	4b07      	ldr	r3, [pc, #28]	; (823c0 <udc_req_std_dev_clear_feature+0x24>)
   823a4:	885b      	ldrh	r3, [r3, #2]
   823a6:	2b01      	cmp	r3, #1
   823a8:	d001      	beq.n	823ae <udc_req_std_dev_clear_feature+0x12>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   823aa:	2000      	movs	r0, #0
}
   823ac:	4770      	bx	lr
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   823ae:	4a05      	ldr	r2, [pc, #20]	; (823c4 <udc_req_std_dev_clear_feature+0x28>)
   823b0:	8813      	ldrh	r3, [r2, #0]
   823b2:	f023 0302 	bic.w	r3, r3, #2
   823b6:	8013      	strh	r3, [r2, #0]
		return true;
   823b8:	2001      	movs	r0, #1
   823ba:	4770      	bx	lr
		return false;
   823bc:	2000      	movs	r0, #0
   823be:	4770      	bx	lr
   823c0:	20001930 	.word	0x20001930
   823c4:	20001876 	.word	0x20001876

000823c8 <udc_req_std_dev_set_address>:
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   823c8:	4b04      	ldr	r3, [pc, #16]	; (823dc <udc_req_std_dev_set_address+0x14>)
   823ca:	88db      	ldrh	r3, [r3, #6]
   823cc:	b923      	cbnz	r3, 823d8 <udc_req_std_dev_set_address+0x10>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   823ce:	4b03      	ldr	r3, [pc, #12]	; (823dc <udc_req_std_dev_set_address+0x14>)
   823d0:	4a03      	ldr	r2, [pc, #12]	; (823e0 <udc_req_std_dev_set_address+0x18>)
   823d2:	611a      	str	r2, [r3, #16]
	return true;
   823d4:	2001      	movs	r0, #1
   823d6:	4770      	bx	lr
		return false;
   823d8:	2000      	movs	r0, #0
}
   823da:	4770      	bx	lr
   823dc:	20001930 	.word	0x20001930
   823e0:	0008278d 	.word	0x0008278d

000823e4 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   823e4:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   823e6:	4b11      	ldr	r3, [pc, #68]	; (8242c <udc_req_iface+0x48>)
   823e8:	781b      	ldrb	r3, [r3, #0]
   823ea:	b1eb      	cbz	r3, 82428 <udc_req_iface+0x44>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   823ec:	4b10      	ldr	r3, [pc, #64]	; (82430 <udc_req_iface+0x4c>)
   823ee:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   823f0:	4b10      	ldr	r3, [pc, #64]	; (82434 <udc_req_iface+0x50>)
   823f2:	681b      	ldr	r3, [r3, #0]
   823f4:	681b      	ldr	r3, [r3, #0]
   823f6:	791b      	ldrb	r3, [r3, #4]
   823f8:	42a3      	cmp	r3, r4
   823fa:	d801      	bhi.n	82400 <udc_req_iface+0x1c>
		return false;
   823fc:	2000      	movs	r0, #0
   823fe:	e014      	b.n	8242a <udc_req_iface+0x46>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   82400:	2100      	movs	r1, #0
   82402:	4620      	mov	r0, r4
   82404:	4b0c      	ldr	r3, [pc, #48]	; (82438 <udc_req_iface+0x54>)
   82406:	4798      	blx	r3
   82408:	b178      	cbz	r0, 8242a <udc_req_iface+0x46>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8240a:	4b0a      	ldr	r3, [pc, #40]	; (82434 <udc_req_iface+0x50>)
   8240c:	681b      	ldr	r3, [r3, #0]
   8240e:	685b      	ldr	r3, [r3, #4]
   82410:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82414:	68eb      	ldr	r3, [r5, #12]
   82416:	4798      	blx	r3
   82418:	4601      	mov	r1, r0
   8241a:	4620      	mov	r0, r4
   8241c:	4b06      	ldr	r3, [pc, #24]	; (82438 <udc_req_iface+0x54>)
   8241e:	4798      	blx	r3
   82420:	b118      	cbz	r0, 8242a <udc_req_iface+0x46>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   82422:	68ab      	ldr	r3, [r5, #8]
   82424:	4798      	blx	r3
   82426:	e000      	b.n	8242a <udc_req_iface+0x46>
		return false; // The device is not is configured state yet
   82428:	2000      	movs	r0, #0
}
   8242a:	bd38      	pop	{r3, r4, r5, pc}
   8242c:	2000187b 	.word	0x2000187b
   82430:	20001930 	.word	0x20001930
   82434:	2000187c 	.word	0x2000187c
   82438:	00082339 	.word	0x00082339

0008243c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   8243c:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8243e:	4b11      	ldr	r3, [pc, #68]	; (82484 <udc_req_ep+0x48>)
   82440:	781b      	ldrb	r3, [r3, #0]
   82442:	b1e3      	cbz	r3, 8247e <udc_req_ep+0x42>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82444:	2400      	movs	r4, #0
   82446:	e001      	b.n	8244c <udc_req_ep+0x10>
			iface_num++) {
   82448:	3401      	adds	r4, #1
   8244a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8244c:	4b0e      	ldr	r3, [pc, #56]	; (82488 <udc_req_ep+0x4c>)
   8244e:	681b      	ldr	r3, [r3, #0]
   82450:	681a      	ldr	r2, [r3, #0]
   82452:	7912      	ldrb	r2, [r2, #4]
   82454:	42a2      	cmp	r2, r4
   82456:	d910      	bls.n	8247a <udc_req_ep+0x3e>
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   82458:	685b      	ldr	r3, [r3, #4]
   8245a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8245e:	68eb      	ldr	r3, [r5, #12]
   82460:	4798      	blx	r3
   82462:	4601      	mov	r1, r0
   82464:	4620      	mov	r0, r4
   82466:	4b09      	ldr	r3, [pc, #36]	; (8248c <udc_req_ep+0x50>)
   82468:	4798      	blx	r3
   8246a:	4603      	mov	r3, r0
   8246c:	b140      	cbz	r0, 82480 <udc_req_ep+0x44>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8246e:	68ab      	ldr	r3, [r5, #8]
   82470:	4798      	blx	r3
   82472:	4603      	mov	r3, r0
   82474:	2800      	cmp	r0, #0
   82476:	d0e7      	beq.n	82448 <udc_req_ep+0xc>
   82478:	e002      	b.n	82480 <udc_req_ep+0x44>
			return true;
		}
	}
	return false;
   8247a:	2300      	movs	r3, #0
   8247c:	e000      	b.n	82480 <udc_req_ep+0x44>
		return false; // The device is not is configured state yet
   8247e:	2300      	movs	r3, #0
}
   82480:	4618      	mov	r0, r3
   82482:	bd38      	pop	{r3, r4, r5, pc}
   82484:	2000187b 	.word	0x2000187b
   82488:	2000187c 	.word	0x2000187c
   8248c:	00082339 	.word	0x00082339

00082490 <udc_iface_disable>:
{
   82490:	b570      	push	{r4, r5, r6, lr}
   82492:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   82494:	2100      	movs	r1, #0
   82496:	4b11      	ldr	r3, [pc, #68]	; (824dc <udc_iface_disable+0x4c>)
   82498:	4798      	blx	r3
   8249a:	4605      	mov	r5, r0
   8249c:	b1d8      	cbz	r0, 824d6 <udc_iface_disable+0x46>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8249e:	4b10      	ldr	r3, [pc, #64]	; (824e0 <udc_iface_disable+0x50>)
   824a0:	681b      	ldr	r3, [r3, #0]
   824a2:	685b      	ldr	r3, [r3, #4]
   824a4:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   824a8:	68f3      	ldr	r3, [r6, #12]
   824aa:	4798      	blx	r3
   824ac:	4601      	mov	r1, r0
   824ae:	4620      	mov	r0, r4
   824b0:	4b0a      	ldr	r3, [pc, #40]	; (824dc <udc_iface_disable+0x4c>)
   824b2:	4798      	blx	r3
   824b4:	4605      	mov	r5, r0
   824b6:	b170      	cbz	r0, 824d6 <udc_iface_disable+0x46>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   824b8:	4b0a      	ldr	r3, [pc, #40]	; (824e4 <udc_iface_disable+0x54>)
   824ba:	681c      	ldr	r4, [r3, #0]
   824bc:	e002      	b.n	824c4 <udc_iface_disable+0x34>
			udd_ep_free(ep_desc->bEndpointAddress);
   824be:	7880      	ldrb	r0, [r0, #2]
   824c0:	4b09      	ldr	r3, [pc, #36]	; (824e8 <udc_iface_disable+0x58>)
   824c2:	4798      	blx	r3
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   824c4:	2105      	movs	r1, #5
   824c6:	4620      	mov	r0, r4
   824c8:	4b08      	ldr	r3, [pc, #32]	; (824ec <udc_iface_disable+0x5c>)
   824ca:	4798      	blx	r3
			if (NULL == ep_desc) {
   824cc:	4604      	mov	r4, r0
   824ce:	2800      	cmp	r0, #0
   824d0:	d1f5      	bne.n	824be <udc_iface_disable+0x2e>
	udi_api->disable();
   824d2:	6873      	ldr	r3, [r6, #4]
   824d4:	4798      	blx	r3
}
   824d6:	4628      	mov	r0, r5
   824d8:	bd70      	pop	{r4, r5, r6, pc}
   824da:	bf00      	nop
   824dc:	00082339 	.word	0x00082339
   824e0:	2000187c 	.word	0x2000187c
   824e4:	20001880 	.word	0x20001880
   824e8:	00083cc5 	.word	0x00083cc5
   824ec:	00082305 	.word	0x00082305

000824f0 <udc_req_std_dev_get_status>:
{
   824f0:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   824f2:	4b06      	ldr	r3, [pc, #24]	; (8250c <udc_req_std_dev_get_status+0x1c>)
   824f4:	88db      	ldrh	r3, [r3, #6]
   824f6:	2b02      	cmp	r3, #2
   824f8:	d001      	beq.n	824fe <udc_req_std_dev_get_status+0xe>
		return false;
   824fa:	2000      	movs	r0, #0
}
   824fc:	bd08      	pop	{r3, pc}
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   824fe:	2102      	movs	r1, #2
   82500:	4803      	ldr	r0, [pc, #12]	; (82510 <udc_req_std_dev_get_status+0x20>)
   82502:	4b04      	ldr	r3, [pc, #16]	; (82514 <udc_req_std_dev_get_status+0x24>)
   82504:	4798      	blx	r3
	return true;
   82506:	2001      	movs	r0, #1
   82508:	e7f8      	b.n	824fc <udc_req_std_dev_get_status+0xc>
   8250a:	bf00      	nop
   8250c:	20001930 	.word	0x20001930
   82510:	20001876 	.word	0x20001876
   82514:	00083cb9 	.word	0x00083cb9

00082518 <udc_req_std_dev_get_str_desc>:
{
   82518:	b508      	push	{r3, lr}
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8251a:	4b17      	ldr	r3, [pc, #92]	; (82578 <udc_req_std_dev_get_str_desc+0x60>)
   8251c:	789b      	ldrb	r3, [r3, #2]
   8251e:	2b03      	cmp	r3, #3
   82520:	d828      	bhi.n	82574 <udc_req_std_dev_get_str_desc+0x5c>
   82522:	e8df f003 	tbb	[pc, r3]
   82526:	2002      	.short	0x2002
   82528:	0824      	.short	0x0824
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   8252a:	2104      	movs	r1, #4
   8252c:	4813      	ldr	r0, [pc, #76]	; (8257c <udc_req_std_dev_get_str_desc+0x64>)
   8252e:	4b14      	ldr	r3, [pc, #80]	; (82580 <udc_req_std_dev_get_str_desc+0x68>)
   82530:	4798      	blx	r3
	return true;
   82532:	2001      	movs	r0, #1
   82534:	e016      	b.n	82564 <udc_req_std_dev_get_str_desc+0x4c>
		str = udc_get_string_serial_name();
   82536:	4b13      	ldr	r3, [pc, #76]	; (82584 <udc_req_std_dev_get_str_desc+0x6c>)
   82538:	4798      	blx	r3
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   8253a:	2120      	movs	r1, #32
   8253c:	e015      	b.n	8256a <udc_req_std_dev_get_str_desc+0x52>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8253e:	f810 c003 	ldrb.w	ip, [r0, r3]
   82542:	4a11      	ldr	r2, [pc, #68]	; (82588 <udc_req_std_dev_get_str_desc+0x70>)
   82544:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   82548:	f8a2 c002 	strh.w	ip, [r2, #2]
		for(i = 0; i < str_length; i++) {
   8254c:	3301      	adds	r3, #1
   8254e:	b2db      	uxtb	r3, r3
   82550:	428b      	cmp	r3, r1
   82552:	d3f4      	bcc.n	8253e <udc_req_std_dev_get_str_desc+0x26>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   82554:	3101      	adds	r1, #1
   82556:	0049      	lsls	r1, r1, #1
   82558:	b2c9      	uxtb	r1, r1
   8255a:	480b      	ldr	r0, [pc, #44]	; (82588 <udc_req_std_dev_get_str_desc+0x70>)
   8255c:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   8255e:	4b08      	ldr	r3, [pc, #32]	; (82580 <udc_req_std_dev_get_str_desc+0x68>)
   82560:	4798      	blx	r3
	return true;
   82562:	2001      	movs	r0, #1
}
   82564:	bd08      	pop	{r3, pc}
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   82566:	2115      	movs	r1, #21
   82568:	4808      	ldr	r0, [pc, #32]	; (8258c <udc_req_std_dev_get_str_desc+0x74>)
   8256a:	2300      	movs	r3, #0
   8256c:	e7f0      	b.n	82550 <udc_req_std_dev_get_str_desc+0x38>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   8256e:	2113      	movs	r1, #19
		str = udc_string_product_name;
   82570:	4807      	ldr	r0, [pc, #28]	; (82590 <udc_req_std_dev_get_str_desc+0x78>)
   82572:	e7fa      	b.n	8256a <udc_req_std_dev_get_str_desc+0x52>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   82574:	2000      	movs	r0, #0
   82576:	e7f5      	b.n	82564 <udc_req_std_dev_get_str_desc+0x4c>
   82578:	20001930 	.word	0x20001930
   8257c:	20000310 	.word	0x20000310
   82580:	00083cb9 	.word	0x00083cb9
   82584:	000822ed 	.word	0x000822ed
   82588:	200002cc 	.word	0x200002cc
   8258c:	20000314 	.word	0x20000314
   82590:	2000032c 	.word	0x2000032c

00082594 <udc_req_std_dev_get_configuration>:
{
   82594:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength != 1) {
   82596:	4b06      	ldr	r3, [pc, #24]	; (825b0 <udc_req_std_dev_get_configuration+0x1c>)
   82598:	88db      	ldrh	r3, [r3, #6]
   8259a:	2b01      	cmp	r3, #1
   8259c:	d001      	beq.n	825a2 <udc_req_std_dev_get_configuration+0xe>
		return false;
   8259e:	2000      	movs	r0, #0
}
   825a0:	bd08      	pop	{r3, pc}
	udd_set_setup_payload(&udc_num_configuration,1);
   825a2:	2101      	movs	r1, #1
   825a4:	4803      	ldr	r0, [pc, #12]	; (825b4 <udc_req_std_dev_get_configuration+0x20>)
   825a6:	4b04      	ldr	r3, [pc, #16]	; (825b8 <udc_req_std_dev_get_configuration+0x24>)
   825a8:	4798      	blx	r3
	return true;
   825aa:	2001      	movs	r0, #1
   825ac:	e7f8      	b.n	825a0 <udc_req_std_dev_get_configuration+0xc>
   825ae:	bf00      	nop
   825b0:	20001930 	.word	0x20001930
   825b4:	2000187b 	.word	0x2000187b
   825b8:	00083cb9 	.word	0x00083cb9

000825bc <udc_req_std_iface_get_setting>:
{
   825bc:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength != 1) {
   825be:	4b15      	ldr	r3, [pc, #84]	; (82614 <udc_req_std_iface_get_setting+0x58>)
   825c0:	88db      	ldrh	r3, [r3, #6]
   825c2:	2b01      	cmp	r3, #1
   825c4:	d120      	bne.n	82608 <udc_req_std_iface_get_setting+0x4c>
	if (!udc_num_configuration) {
   825c6:	4b14      	ldr	r3, [pc, #80]	; (82618 <udc_req_std_iface_get_setting+0x5c>)
   825c8:	781b      	ldrb	r3, [r3, #0]
   825ca:	b303      	cbz	r3, 8260e <udc_req_std_iface_get_setting+0x52>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   825cc:	4b11      	ldr	r3, [pc, #68]	; (82614 <udc_req_std_iface_get_setting+0x58>)
   825ce:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   825d0:	4b12      	ldr	r3, [pc, #72]	; (8261c <udc_req_std_iface_get_setting+0x60>)
   825d2:	681b      	ldr	r3, [r3, #0]
   825d4:	681b      	ldr	r3, [r3, #0]
   825d6:	791b      	ldrb	r3, [r3, #4]
   825d8:	42ab      	cmp	r3, r5
   825da:	d801      	bhi.n	825e0 <udc_req_std_iface_get_setting+0x24>
		return false;
   825dc:	2400      	movs	r4, #0
   825de:	e014      	b.n	8260a <udc_req_std_iface_get_setting+0x4e>
	if (!udc_update_iface_desc(iface_num, 0)) {
   825e0:	2100      	movs	r1, #0
   825e2:	4628      	mov	r0, r5
   825e4:	4b0e      	ldr	r3, [pc, #56]	; (82620 <udc_req_std_iface_get_setting+0x64>)
   825e6:	4798      	blx	r3
   825e8:	4604      	mov	r4, r0
   825ea:	b170      	cbz	r0, 8260a <udc_req_std_iface_get_setting+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   825ec:	4b0b      	ldr	r3, [pc, #44]	; (8261c <udc_req_std_iface_get_setting+0x60>)
   825ee:	681b      	ldr	r3, [r3, #0]
   825f0:	685b      	ldr	r3, [r3, #4]
   825f2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	udc_iface_setting = udi_api->getsetting();
   825f6:	68db      	ldr	r3, [r3, #12]
   825f8:	4798      	blx	r3
   825fa:	4b0a      	ldr	r3, [pc, #40]	; (82624 <udc_req_std_iface_get_setting+0x68>)
   825fc:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   825fe:	2101      	movs	r1, #1
   82600:	4618      	mov	r0, r3
   82602:	4b09      	ldr	r3, [pc, #36]	; (82628 <udc_req_std_iface_get_setting+0x6c>)
   82604:	4798      	blx	r3
	return true;
   82606:	e000      	b.n	8260a <udc_req_std_iface_get_setting+0x4e>
		return false; // Error in request
   82608:	2400      	movs	r4, #0
}
   8260a:	4620      	mov	r0, r4
   8260c:	bd38      	pop	{r3, r4, r5, pc}
		return false; // The device is not is configured state yet
   8260e:	2400      	movs	r4, #0
   82610:	e7fb      	b.n	8260a <udc_req_std_iface_get_setting+0x4e>
   82612:	bf00      	nop
   82614:	20001930 	.word	0x20001930
   82618:	2000187b 	.word	0x2000187b
   8261c:	2000187c 	.word	0x2000187c
   82620:	00082339 	.word	0x00082339
   82624:	2000187a 	.word	0x2000187a
   82628:	00083cb9 	.word	0x00083cb9

0008262c <udc_req_std_dev_get_descriptor>:
{
   8262c:	b510      	push	{r4, lr}
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8262e:	4b43      	ldr	r3, [pc, #268]	; (8273c <udc_req_std_dev_get_descriptor+0x110>)
   82630:	885b      	ldrh	r3, [r3, #2]
   82632:	b2dc      	uxtb	r4, r3
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82634:	0a1b      	lsrs	r3, r3, #8
   82636:	3b01      	subs	r3, #1
   82638:	2b0e      	cmp	r3, #14
   8263a:	d87b      	bhi.n	82734 <udc_req_std_dev_get_descriptor+0x108>
   8263c:	e8df f003 	tbb	[pc, r3]
   82640:	7a751c08 	.word	0x7a751c08
   82644:	7a4d3f7a 	.word	0x7a4d3f7a
   82648:	7a7a7a7a 	.word	0x7a7a7a7a
   8264c:	7a7a      	.short	0x7a7a
   8264e:	70          	.byte	0x70
   8264f:	00          	.byte	0x00
		if (!udd_is_high_speed()) {
   82650:	4b3b      	ldr	r3, [pc, #236]	; (82740 <udc_req_std_dev_get_descriptor+0x114>)
   82652:	4798      	blx	r3
   82654:	b928      	cbnz	r0, 82662 <udc_req_std_dev_get_descriptor+0x36>
				(uint8_t *) udc_config.confdev_hs,
   82656:	4b3b      	ldr	r3, [pc, #236]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   82658:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   8265a:	7801      	ldrb	r1, [r0, #0]
   8265c:	4b3a      	ldr	r3, [pc, #232]	; (82748 <udc_req_std_dev_get_descriptor+0x11c>)
   8265e:	4798      	blx	r3
   82660:	e032      	b.n	826c8 <udc_req_std_dev_get_descriptor+0x9c>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   82662:	4b38      	ldr	r3, [pc, #224]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   82664:	681a      	ldr	r2, [r3, #0]
   82666:	2110      	movs	r1, #16
   82668:	7091      	strb	r1, [r2, #2]
   8266a:	2102      	movs	r1, #2
   8266c:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   8266e:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   82670:	7801      	ldrb	r1, [r0, #0]
   82672:	4b35      	ldr	r3, [pc, #212]	; (82748 <udc_req_std_dev_get_descriptor+0x11c>)
   82674:	4798      	blx	r3
   82676:	e027      	b.n	826c8 <udc_req_std_dev_get_descriptor+0x9c>
		if (udd_is_high_speed()) {
   82678:	4b31      	ldr	r3, [pc, #196]	; (82740 <udc_req_std_dev_get_descriptor+0x114>)
   8267a:	4798      	blx	r3
   8267c:	b190      	cbz	r0, 826a4 <udc_req_std_dev_get_descriptor+0x78>
			if (conf_num >= udc_config.confdev_hs->
   8267e:	4b31      	ldr	r3, [pc, #196]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   82680:	689b      	ldr	r3, [r3, #8]
   82682:	7c5b      	ldrb	r3, [r3, #17]
   82684:	42a3      	cmp	r3, r4
   82686:	d801      	bhi.n	8268c <udc_req_std_dev_get_descriptor+0x60>
				return false;
   82688:	2000      	movs	r0, #0
   8268a:	e054      	b.n	82736 <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8268c:	4b2d      	ldr	r3, [pc, #180]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   8268e:	691b      	ldr	r3, [r3, #16]
   82690:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82694:	8841      	ldrh	r1, [r0, #2]
   82696:	4b2c      	ldr	r3, [pc, #176]	; (82748 <udc_req_std_dev_get_descriptor+0x11c>)
   82698:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8269a:	4b28      	ldr	r3, [pc, #160]	; (8273c <udc_req_std_dev_get_descriptor+0x110>)
   8269c:	689b      	ldr	r3, [r3, #8]
   8269e:	2202      	movs	r2, #2
   826a0:	705a      	strb	r2, [r3, #1]
		break;
   826a2:	e011      	b.n	826c8 <udc_req_std_dev_get_descriptor+0x9c>
			if (conf_num >= udc_config.confdev_lsfs->
   826a4:	4b27      	ldr	r3, [pc, #156]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   826a6:	681b      	ldr	r3, [r3, #0]
   826a8:	7c5b      	ldrb	r3, [r3, #17]
   826aa:	42a3      	cmp	r3, r4
   826ac:	d943      	bls.n	82736 <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   826ae:	4b25      	ldr	r3, [pc, #148]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   826b0:	685b      	ldr	r3, [r3, #4]
   826b2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   826b6:	8841      	ldrh	r1, [r0, #2]
   826b8:	4b23      	ldr	r3, [pc, #140]	; (82748 <udc_req_std_dev_get_descriptor+0x11c>)
   826ba:	4798      	blx	r3
   826bc:	e7ed      	b.n	8269a <udc_req_std_dev_get_descriptor+0x6e>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   826be:	4b21      	ldr	r3, [pc, #132]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   826c0:	68d8      	ldr	r0, [r3, #12]
   826c2:	7801      	ldrb	r1, [r0, #0]
   826c4:	4b20      	ldr	r3, [pc, #128]	; (82748 <udc_req_std_dev_get_descriptor+0x11c>)
   826c6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   826c8:	4b1c      	ldr	r3, [pc, #112]	; (8273c <udc_req_std_dev_get_descriptor+0x110>)
   826ca:	88da      	ldrh	r2, [r3, #6]
   826cc:	899b      	ldrh	r3, [r3, #12]
   826ce:	429a      	cmp	r2, r3
   826d0:	d232      	bcs.n	82738 <udc_req_std_dev_get_descriptor+0x10c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   826d2:	4b1a      	ldr	r3, [pc, #104]	; (8273c <udc_req_std_dev_get_descriptor+0x110>)
   826d4:	819a      	strh	r2, [r3, #12]
	return true;
   826d6:	2001      	movs	r0, #1
   826d8:	e02d      	b.n	82736 <udc_req_std_dev_get_descriptor+0x10a>
		if (!udd_is_high_speed()) {
   826da:	4b19      	ldr	r3, [pc, #100]	; (82740 <udc_req_std_dev_get_descriptor+0x114>)
   826dc:	4798      	blx	r3
   826de:	b980      	cbnz	r0, 82702 <udc_req_std_dev_get_descriptor+0xd6>
			if (conf_num >= udc_config.confdev_hs->
   826e0:	4b18      	ldr	r3, [pc, #96]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   826e2:	689b      	ldr	r3, [r3, #8]
   826e4:	7c5b      	ldrb	r3, [r3, #17]
   826e6:	42a3      	cmp	r3, r4
   826e8:	d925      	bls.n	82736 <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   826ea:	4b16      	ldr	r3, [pc, #88]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   826ec:	691b      	ldr	r3, [r3, #16]
   826ee:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   826f2:	8841      	ldrh	r1, [r0, #2]
   826f4:	4b14      	ldr	r3, [pc, #80]	; (82748 <udc_req_std_dev_get_descriptor+0x11c>)
   826f6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   826f8:	4b10      	ldr	r3, [pc, #64]	; (8273c <udc_req_std_dev_get_descriptor+0x110>)
   826fa:	689b      	ldr	r3, [r3, #8]
   826fc:	2207      	movs	r2, #7
   826fe:	705a      	strb	r2, [r3, #1]
		break;
   82700:	e7e2      	b.n	826c8 <udc_req_std_dev_get_descriptor+0x9c>
			if (conf_num >= udc_config.confdev_lsfs->
   82702:	4b10      	ldr	r3, [pc, #64]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   82704:	681b      	ldr	r3, [r3, #0]
   82706:	7c5b      	ldrb	r3, [r3, #17]
   82708:	42a3      	cmp	r3, r4
   8270a:	d801      	bhi.n	82710 <udc_req_std_dev_get_descriptor+0xe4>
				return false;
   8270c:	2000      	movs	r0, #0
   8270e:	e012      	b.n	82736 <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82710:	4b0c      	ldr	r3, [pc, #48]	; (82744 <udc_req_std_dev_get_descriptor+0x118>)
   82712:	685b      	ldr	r3, [r3, #4]
   82714:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82718:	8841      	ldrh	r1, [r0, #2]
   8271a:	4b0b      	ldr	r3, [pc, #44]	; (82748 <udc_req_std_dev_get_descriptor+0x11c>)
   8271c:	4798      	blx	r3
   8271e:	e7eb      	b.n	826f8 <udc_req_std_dev_get_descriptor+0xcc>
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   82720:	2121      	movs	r1, #33	; 0x21
   82722:	480a      	ldr	r0, [pc, #40]	; (8274c <udc_req_std_dev_get_descriptor+0x120>)
   82724:	4b08      	ldr	r3, [pc, #32]	; (82748 <udc_req_std_dev_get_descriptor+0x11c>)
   82726:	4798      	blx	r3
		break;
   82728:	e7ce      	b.n	826c8 <udc_req_std_dev_get_descriptor+0x9c>
		if (!udc_req_std_dev_get_str_desc()) {
   8272a:	4b09      	ldr	r3, [pc, #36]	; (82750 <udc_req_std_dev_get_descriptor+0x124>)
   8272c:	4798      	blx	r3
   8272e:	2800      	cmp	r0, #0
   82730:	d1ca      	bne.n	826c8 <udc_req_std_dev_get_descriptor+0x9c>
   82732:	e000      	b.n	82736 <udc_req_std_dev_get_descriptor+0x10a>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82734:	2000      	movs	r0, #0
}
   82736:	bd10      	pop	{r4, pc}
	return true;
   82738:	2001      	movs	r0, #1
   8273a:	e7fc      	b.n	82736 <udc_req_std_dev_get_descriptor+0x10a>
   8273c:	20001930 	.word	0x20001930
   82740:	00083c61 	.word	0x00083c61
   82744:	20000358 	.word	0x20000358
   82748:	00083cb9 	.word	0x00083cb9
   8274c:	20000208 	.word	0x20000208
   82750:	00082519 	.word	0x00082519

00082754 <udc_req_std_ep_get_status>:
{
   82754:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   82756:	4b09      	ldr	r3, [pc, #36]	; (8277c <udc_req_std_ep_get_status+0x28>)
   82758:	88db      	ldrh	r3, [r3, #6]
   8275a:	2b02      	cmp	r3, #2
   8275c:	d001      	beq.n	82762 <udc_req_std_ep_get_status+0xe>
		return false;
   8275e:	2000      	movs	r0, #0
}
   82760:	bd08      	pop	{r3, pc}
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   82762:	4b06      	ldr	r3, [pc, #24]	; (8277c <udc_req_std_ep_get_status+0x28>)
   82764:	7918      	ldrb	r0, [r3, #4]
   82766:	4b06      	ldr	r3, [pc, #24]	; (82780 <udc_req_std_ep_get_status+0x2c>)
   82768:	4798      	blx	r3
   8276a:	4b06      	ldr	r3, [pc, #24]	; (82784 <udc_req_std_ep_get_status+0x30>)
   8276c:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8276e:	2102      	movs	r1, #2
   82770:	4618      	mov	r0, r3
   82772:	4b05      	ldr	r3, [pc, #20]	; (82788 <udc_req_std_ep_get_status+0x34>)
   82774:	4798      	blx	r3
	return true;
   82776:	2001      	movs	r0, #1
   82778:	e7f2      	b.n	82760 <udc_req_std_ep_get_status+0xc>
   8277a:	bf00      	nop
   8277c:	20001930 	.word	0x20001930
   82780:	00083d11 	.word	0x00083d11
   82784:	20001878 	.word	0x20001878
   82788:	00083cb9 	.word	0x00083cb9

0008278c <udc_valid_address>:
{
   8278c:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8278e:	4b03      	ldr	r3, [pc, #12]	; (8279c <udc_valid_address+0x10>)
   82790:	7898      	ldrb	r0, [r3, #2]
   82792:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82796:	4b02      	ldr	r3, [pc, #8]	; (827a0 <udc_valid_address+0x14>)
   82798:	4798      	blx	r3
}
   8279a:	bd08      	pop	{r3, pc}
   8279c:	20001930 	.word	0x20001930
   827a0:	00083c71 	.word	0x00083c71

000827a4 <udc_iface_enable>:
{
   827a4:	b538      	push	{r3, r4, r5, lr}
   827a6:	4605      	mov	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   827a8:	4b0f      	ldr	r3, [pc, #60]	; (827e8 <udc_iface_enable+0x44>)
   827aa:	4798      	blx	r3
   827ac:	4603      	mov	r3, r0
   827ae:	b1c0      	cbz	r0, 827e2 <udc_iface_enable+0x3e>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   827b0:	4b0e      	ldr	r3, [pc, #56]	; (827ec <udc_iface_enable+0x48>)
   827b2:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   827b4:	2105      	movs	r1, #5
   827b6:	4620      	mov	r0, r4
   827b8:	4b0d      	ldr	r3, [pc, #52]	; (827f0 <udc_iface_enable+0x4c>)
   827ba:	4798      	blx	r3
		if (NULL == ep_desc)
   827bc:	4604      	mov	r4, r0
   827be:	b140      	cbz	r0, 827d2 <udc_iface_enable+0x2e>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   827c0:	8882      	ldrh	r2, [r0, #4]
   827c2:	78c1      	ldrb	r1, [r0, #3]
   827c4:	7880      	ldrb	r0, [r0, #2]
   827c6:	4b0b      	ldr	r3, [pc, #44]	; (827f4 <udc_iface_enable+0x50>)
   827c8:	4798      	blx	r3
   827ca:	4603      	mov	r3, r0
   827cc:	2800      	cmp	r0, #0
   827ce:	d1f1      	bne.n	827b4 <udc_iface_enable+0x10>
   827d0:	e007      	b.n	827e2 <udc_iface_enable+0x3e>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   827d2:	4b09      	ldr	r3, [pc, #36]	; (827f8 <udc_iface_enable+0x54>)
   827d4:	681b      	ldr	r3, [r3, #0]
   827d6:	685b      	ldr	r3, [r3, #4]
   827d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   827dc:	681b      	ldr	r3, [r3, #0]
   827de:	4798      	blx	r3
   827e0:	4603      	mov	r3, r0
}
   827e2:	4618      	mov	r0, r3
   827e4:	bd38      	pop	{r3, r4, r5, pc}
   827e6:	bf00      	nop
   827e8:	00082339 	.word	0x00082339
   827ec:	20001880 	.word	0x20001880
   827f0:	00082305 	.word	0x00082305
   827f4:	0008400d 	.word	0x0008400d
   827f8:	2000187c 	.word	0x2000187c

000827fc <udc_req_std_iface_set_setting>:
{
   827fc:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength) {
   827fe:	4b0b      	ldr	r3, [pc, #44]	; (8282c <udc_req_std_iface_set_setting+0x30>)
   82800:	88db      	ldrh	r3, [r3, #6]
   82802:	b983      	cbnz	r3, 82826 <udc_req_std_iface_set_setting+0x2a>
	if (!udc_num_configuration) {
   82804:	4b0a      	ldr	r3, [pc, #40]	; (82830 <udc_req_std_iface_set_setting+0x34>)
   82806:	781b      	ldrb	r3, [r3, #0]
   82808:	b90b      	cbnz	r3, 8280e <udc_req_std_iface_set_setting+0x12>
		return false; // The device is not is configured state yet
   8280a:	2000      	movs	r0, #0
   8280c:	e00c      	b.n	82828 <udc_req_std_iface_set_setting+0x2c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8280e:	4b07      	ldr	r3, [pc, #28]	; (8282c <udc_req_std_iface_set_setting+0x30>)
   82810:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   82812:	789d      	ldrb	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   82814:	4620      	mov	r0, r4
   82816:	4b07      	ldr	r3, [pc, #28]	; (82834 <udc_req_std_iface_set_setting+0x38>)
   82818:	4798      	blx	r3
   8281a:	b128      	cbz	r0, 82828 <udc_req_std_iface_set_setting+0x2c>
	return udc_iface_enable(iface_num, setting_num);
   8281c:	4629      	mov	r1, r5
   8281e:	4620      	mov	r0, r4
   82820:	4b05      	ldr	r3, [pc, #20]	; (82838 <udc_req_std_iface_set_setting+0x3c>)
   82822:	4798      	blx	r3
   82824:	e000      	b.n	82828 <udc_req_std_iface_set_setting+0x2c>
		return false; // Error in request
   82826:	2000      	movs	r0, #0
}
   82828:	bd38      	pop	{r3, r4, r5, pc}
   8282a:	bf00      	nop
   8282c:	20001930 	.word	0x20001930
   82830:	2000187b 	.word	0x2000187b
   82834:	00082491 	.word	0x00082491
   82838:	000827a5 	.word	0x000827a5

0008283c <udc_req_std_ep_clear_feature>:
{
   8283c:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength) {
   8283e:	4b07      	ldr	r3, [pc, #28]	; (8285c <udc_req_std_ep_clear_feature+0x20>)
   82840:	88db      	ldrh	r3, [r3, #6]
   82842:	b94b      	cbnz	r3, 82858 <udc_req_std_ep_clear_feature+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   82844:	4b05      	ldr	r3, [pc, #20]	; (8285c <udc_req_std_ep_clear_feature+0x20>)
   82846:	885b      	ldrh	r3, [r3, #2]
   82848:	b10b      	cbz	r3, 8284e <udc_req_std_ep_clear_feature+0x12>
	return false;
   8284a:	2000      	movs	r0, #0
}
   8284c:	bd08      	pop	{r3, pc}
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8284e:	4b03      	ldr	r3, [pc, #12]	; (8285c <udc_req_std_ep_clear_feature+0x20>)
   82850:	7918      	ldrb	r0, [r3, #4]
   82852:	4b03      	ldr	r3, [pc, #12]	; (82860 <udc_req_std_ep_clear_feature+0x24>)
   82854:	4798      	blx	r3
   82856:	e7f9      	b.n	8284c <udc_req_std_ep_clear_feature+0x10>
		return false;
   82858:	2000      	movs	r0, #0
   8285a:	e7f7      	b.n	8284c <udc_req_std_ep_clear_feature+0x10>
   8285c:	20001930 	.word	0x20001930
   82860:	00083e15 	.word	0x00083e15

00082864 <udc_req_std_ep_set_feature>:
	if (udd_g_ctrlreq.req.wLength) {
   82864:	4b09      	ldr	r3, [pc, #36]	; (8288c <udc_req_std_ep_set_feature+0x28>)
   82866:	88db      	ldrh	r3, [r3, #6]
   82868:	b96b      	cbnz	r3, 82886 <udc_req_std_ep_set_feature+0x22>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8286a:	4b08      	ldr	r3, [pc, #32]	; (8288c <udc_req_std_ep_set_feature+0x28>)
   8286c:	885b      	ldrh	r3, [r3, #2]
   8286e:	b10b      	cbz	r3, 82874 <udc_req_std_ep_set_feature+0x10>
	return false;
   82870:	2000      	movs	r0, #0
}
   82872:	4770      	bx	lr
{
   82874:	b510      	push	{r4, lr}
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   82876:	4c05      	ldr	r4, [pc, #20]	; (8288c <udc_req_std_ep_set_feature+0x28>)
   82878:	7920      	ldrb	r0, [r4, #4]
   8287a:	4b05      	ldr	r3, [pc, #20]	; (82890 <udc_req_std_ep_set_feature+0x2c>)
   8287c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8287e:	7920      	ldrb	r0, [r4, #4]
   82880:	4b04      	ldr	r3, [pc, #16]	; (82894 <udc_req_std_ep_set_feature+0x30>)
   82882:	4798      	blx	r3
}
   82884:	bd10      	pop	{r4, pc}
		return false;
   82886:	2000      	movs	r0, #0
   82888:	4770      	bx	lr
   8288a:	bf00      	nop
   8288c:	20001930 	.word	0x20001930
   82890:	000842b1 	.word	0x000842b1
   82894:	00083d4d 	.word	0x00083d4d

00082898 <udc_get_interface_desc>:
}
   82898:	4b01      	ldr	r3, [pc, #4]	; (828a0 <udc_get_interface_desc+0x8>)
   8289a:	6818      	ldr	r0, [r3, #0]
   8289c:	4770      	bx	lr
   8289e:	bf00      	nop
   828a0:	20001880 	.word	0x20001880

000828a4 <udc_start>:
{
   828a4:	b508      	push	{r3, lr}
	udd_enable();
   828a6:	4b01      	ldr	r3, [pc, #4]	; (828ac <udc_start+0x8>)
   828a8:	4798      	blx	r3
}
   828aa:	bd08      	pop	{r3, pc}
   828ac:	00083b7d 	.word	0x00083b7d

000828b0 <udc_reset>:
{
   828b0:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
   828b2:	4b0b      	ldr	r3, [pc, #44]	; (828e0 <udc_reset+0x30>)
   828b4:	781b      	ldrb	r3, [r3, #0]
   828b6:	b98b      	cbnz	r3, 828dc <udc_reset+0x2c>
	udc_num_configuration = 0;
   828b8:	2300      	movs	r3, #0
   828ba:	4a09      	ldr	r2, [pc, #36]	; (828e0 <udc_reset+0x30>)
   828bc:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   828be:	4a09      	ldr	r2, [pc, #36]	; (828e4 <udc_reset+0x34>)
   828c0:	8013      	strh	r3, [r2, #0]
}
   828c2:	bd10      	pop	{r4, pc}
			udc_iface_disable(iface_num);
   828c4:	4620      	mov	r0, r4
   828c6:	4b08      	ldr	r3, [pc, #32]	; (828e8 <udc_reset+0x38>)
   828c8:	4798      	blx	r3
				iface_num++) {
   828ca:	3401      	adds	r4, #1
   828cc:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   828ce:	4b07      	ldr	r3, [pc, #28]	; (828ec <udc_reset+0x3c>)
   828d0:	681b      	ldr	r3, [r3, #0]
   828d2:	681b      	ldr	r3, [r3, #0]
   828d4:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   828d6:	42a3      	cmp	r3, r4
   828d8:	d8f4      	bhi.n	828c4 <udc_reset+0x14>
   828da:	e7ed      	b.n	828b8 <udc_reset+0x8>
   828dc:	2400      	movs	r4, #0
   828de:	e7f6      	b.n	828ce <udc_reset+0x1e>
   828e0:	2000187b 	.word	0x2000187b
   828e4:	20001876 	.word	0x20001876
   828e8:	00082491 	.word	0x00082491
   828ec:	2000187c 	.word	0x2000187c

000828f0 <udc_req_std_dev_set_feature>:
{
   828f0:	b510      	push	{r4, lr}
	if (udd_g_ctrlreq.req.wLength) {
   828f2:	4b1a      	ldr	r3, [pc, #104]	; (8295c <udc_req_std_dev_set_feature+0x6c>)
   828f4:	88db      	ldrh	r3, [r3, #6]
   828f6:	2b00      	cmp	r3, #0
   828f8:	d12c      	bne.n	82954 <udc_req_std_dev_set_feature+0x64>
	switch (udd_g_ctrlreq.req.wValue) {
   828fa:	4b18      	ldr	r3, [pc, #96]	; (8295c <udc_req_std_dev_set_feature+0x6c>)
   828fc:	885b      	ldrh	r3, [r3, #2]
   828fe:	2b02      	cmp	r3, #2
   82900:	d002      	beq.n	82908 <udc_req_std_dev_set_feature+0x18>
		return false;
   82902:	2400      	movs	r4, #0
}
   82904:	4620      	mov	r0, r4
   82906:	bd10      	pop	{r4, pc}
		if (!udd_is_high_speed()) {
   82908:	4b15      	ldr	r3, [pc, #84]	; (82960 <udc_req_std_dev_set_feature+0x70>)
   8290a:	4798      	blx	r3
   8290c:	4604      	mov	r4, r0
   8290e:	2800      	cmp	r0, #0
   82910:	d0f8      	beq.n	82904 <udc_req_std_dev_set_feature+0x14>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   82912:	4b12      	ldr	r3, [pc, #72]	; (8295c <udc_req_std_dev_set_feature+0x6c>)
   82914:	791b      	ldrb	r3, [r3, #4]
   82916:	b10b      	cbz	r3, 8291c <udc_req_std_dev_set_feature+0x2c>
	return false;
   82918:	2400      	movs	r4, #0
   8291a:	e7f3      	b.n	82904 <udc_req_std_dev_set_feature+0x14>
		udc_reset();
   8291c:	4b11      	ldr	r3, [pc, #68]	; (82964 <udc_req_std_dev_set_feature+0x74>)
   8291e:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   82920:	4b0e      	ldr	r3, [pc, #56]	; (8295c <udc_req_std_dev_set_feature+0x6c>)
   82922:	889b      	ldrh	r3, [r3, #4]
   82924:	0a1b      	lsrs	r3, r3, #8
   82926:	3b01      	subs	r3, #1
   82928:	2b03      	cmp	r3, #3
   8292a:	d815      	bhi.n	82958 <udc_req_std_dev_set_feature+0x68>
   8292c:	e8df f003 	tbb	[pc, r3]
   82930:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   82934:	4b09      	ldr	r3, [pc, #36]	; (8295c <udc_req_std_dev_set_feature+0x6c>)
   82936:	4a0c      	ldr	r2, [pc, #48]	; (82968 <udc_req_std_dev_set_feature+0x78>)
   82938:	611a      	str	r2, [r3, #16]
			return true;
   8293a:	e7e3      	b.n	82904 <udc_req_std_dev_set_feature+0x14>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   8293c:	4b07      	ldr	r3, [pc, #28]	; (8295c <udc_req_std_dev_set_feature+0x6c>)
   8293e:	4a0b      	ldr	r2, [pc, #44]	; (8296c <udc_req_std_dev_set_feature+0x7c>)
   82940:	611a      	str	r2, [r3, #16]
			return true;
   82942:	e7df      	b.n	82904 <udc_req_std_dev_set_feature+0x14>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   82944:	4b05      	ldr	r3, [pc, #20]	; (8295c <udc_req_std_dev_set_feature+0x6c>)
   82946:	4a0a      	ldr	r2, [pc, #40]	; (82970 <udc_req_std_dev_set_feature+0x80>)
   82948:	611a      	str	r2, [r3, #16]
			return true;
   8294a:	e7db      	b.n	82904 <udc_req_std_dev_set_feature+0x14>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8294c:	4b03      	ldr	r3, [pc, #12]	; (8295c <udc_req_std_dev_set_feature+0x6c>)
   8294e:	4a09      	ldr	r2, [pc, #36]	; (82974 <udc_req_std_dev_set_feature+0x84>)
   82950:	611a      	str	r2, [r3, #16]
			return true;
   82952:	e7d7      	b.n	82904 <udc_req_std_dev_set_feature+0x14>
		return false;
   82954:	2400      	movs	r4, #0
   82956:	e7d5      	b.n	82904 <udc_req_std_dev_set_feature+0x14>
   82958:	2400      	movs	r4, #0
   8295a:	e7d3      	b.n	82904 <udc_req_std_dev_set_feature+0x14>
   8295c:	20001930 	.word	0x20001930
   82960:	00083c61 	.word	0x00083c61
   82964:	000828b1 	.word	0x000828b1
   82968:	00084311 	.word	0x00084311
   8296c:	00084335 	.word	0x00084335
   82970:	00084359 	.word	0x00084359
   82974:	00084371 	.word	0x00084371

00082978 <udc_req_std_dev_set_configuration>:
	if (udd_g_ctrlreq.req.wLength) {
   82978:	4b29      	ldr	r3, [pc, #164]	; (82a20 <udc_req_std_dev_set_configuration+0xa8>)
   8297a:	88db      	ldrh	r3, [r3, #6]
   8297c:	b10b      	cbz	r3, 82982 <udc_req_std_dev_set_configuration+0xa>
		return false;
   8297e:	2000      	movs	r0, #0
}
   82980:	4770      	bx	lr
{
   82982:	b510      	push	{r4, lr}
	if (!udd_getaddress()) {
   82984:	4b27      	ldr	r3, [pc, #156]	; (82a24 <udc_req_std_dev_set_configuration+0xac>)
   82986:	4798      	blx	r3
   82988:	b908      	cbnz	r0, 8298e <udc_req_std_dev_set_configuration+0x16>
		return false;
   8298a:	2000      	movs	r0, #0
}
   8298c:	bd10      	pop	{r4, pc}
	if (udd_is_high_speed()) {
   8298e:	4b26      	ldr	r3, [pc, #152]	; (82a28 <udc_req_std_dev_set_configuration+0xb0>)
   82990:	4798      	blx	r3
   82992:	b178      	cbz	r0, 829b4 <udc_req_std_dev_set_configuration+0x3c>
				udc_config.confdev_hs->bNumConfigurations) {
   82994:	4b25      	ldr	r3, [pc, #148]	; (82a2c <udc_req_std_dev_set_configuration+0xb4>)
   82996:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82998:	4a21      	ldr	r2, [pc, #132]	; (82a20 <udc_req_std_dev_set_configuration+0xa8>)
   8299a:	7892      	ldrb	r2, [r2, #2]
   8299c:	7c5b      	ldrb	r3, [r3, #17]
   8299e:	429a      	cmp	r2, r3
   829a0:	d83c      	bhi.n	82a1c <udc_req_std_dev_set_configuration+0xa4>
	udc_reset();
   829a2:	4b23      	ldr	r3, [pc, #140]	; (82a30 <udc_req_std_dev_set_configuration+0xb8>)
   829a4:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   829a6:	4b1e      	ldr	r3, [pc, #120]	; (82a20 <udc_req_std_dev_set_configuration+0xa8>)
   829a8:	789b      	ldrb	r3, [r3, #2]
   829aa:	4a22      	ldr	r2, [pc, #136]	; (82a34 <udc_req_std_dev_set_configuration+0xbc>)
   829ac:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   829ae:	b94b      	cbnz	r3, 829c4 <udc_req_std_dev_set_configuration+0x4c>
		return true; // Default empty configuration requested
   829b0:	2001      	movs	r0, #1
   829b2:	e7eb      	b.n	8298c <udc_req_std_dev_set_configuration+0x14>
				udc_config.confdev_lsfs->bNumConfigurations) {
   829b4:	4b1d      	ldr	r3, [pc, #116]	; (82a2c <udc_req_std_dev_set_configuration+0xb4>)
   829b6:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   829b8:	4a19      	ldr	r2, [pc, #100]	; (82a20 <udc_req_std_dev_set_configuration+0xa8>)
   829ba:	7892      	ldrb	r2, [r2, #2]
   829bc:	7c5b      	ldrb	r3, [r3, #17]
   829be:	429a      	cmp	r2, r3
   829c0:	d9ef      	bls.n	829a2 <udc_req_std_dev_set_configuration+0x2a>
   829c2:	e7e3      	b.n	8298c <udc_req_std_dev_set_configuration+0x14>
	if (udd_is_high_speed()) {
   829c4:	4b18      	ldr	r3, [pc, #96]	; (82a28 <udc_req_std_dev_set_configuration+0xb0>)
   829c6:	4798      	blx	r3
   829c8:	b1d0      	cbz	r0, 82a00 <udc_req_std_dev_set_configuration+0x88>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   829ca:	4b18      	ldr	r3, [pc, #96]	; (82a2c <udc_req_std_dev_set_configuration+0xb4>)
   829cc:	691a      	ldr	r2, [r3, #16]
   829ce:	4b19      	ldr	r3, [pc, #100]	; (82a34 <udc_req_std_dev_set_configuration+0xbc>)
   829d0:	781b      	ldrb	r3, [r3, #0]
   829d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   829d6:	3b01      	subs	r3, #1
   829d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   829dc:	4a16      	ldr	r2, [pc, #88]	; (82a38 <udc_req_std_dev_set_configuration+0xc0>)
   829de:	6013      	str	r3, [r2, #0]
{
   829e0:	2400      	movs	r4, #0
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   829e2:	4b15      	ldr	r3, [pc, #84]	; (82a38 <udc_req_std_dev_set_configuration+0xc0>)
   829e4:	681b      	ldr	r3, [r3, #0]
   829e6:	681b      	ldr	r3, [r3, #0]
   829e8:	791b      	ldrb	r3, [r3, #4]
   829ea:	42a3      	cmp	r3, r4
   829ec:	d914      	bls.n	82a18 <udc_req_std_dev_set_configuration+0xa0>
		if (!udc_iface_enable(iface_num, 0)) {
   829ee:	2100      	movs	r1, #0
   829f0:	4620      	mov	r0, r4
   829f2:	4b12      	ldr	r3, [pc, #72]	; (82a3c <udc_req_std_dev_set_configuration+0xc4>)
   829f4:	4798      	blx	r3
   829f6:	2800      	cmp	r0, #0
   829f8:	d0c8      	beq.n	8298c <udc_req_std_dev_set_configuration+0x14>
			iface_num++) {
   829fa:	3401      	adds	r4, #1
   829fc:	b2e4      	uxtb	r4, r4
   829fe:	e7f0      	b.n	829e2 <udc_req_std_dev_set_configuration+0x6a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   82a00:	4b0a      	ldr	r3, [pc, #40]	; (82a2c <udc_req_std_dev_set_configuration+0xb4>)
   82a02:	685a      	ldr	r2, [r3, #4]
   82a04:	4b0b      	ldr	r3, [pc, #44]	; (82a34 <udc_req_std_dev_set_configuration+0xbc>)
   82a06:	781b      	ldrb	r3, [r3, #0]
   82a08:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   82a0c:	3b01      	subs	r3, #1
   82a0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   82a12:	4a09      	ldr	r2, [pc, #36]	; (82a38 <udc_req_std_dev_set_configuration+0xc0>)
   82a14:	6013      	str	r3, [r2, #0]
   82a16:	e7e3      	b.n	829e0 <udc_req_std_dev_set_configuration+0x68>
	return true;
   82a18:	2001      	movs	r0, #1
   82a1a:	e7b7      	b.n	8298c <udc_req_std_dev_set_configuration+0x14>
			return false;
   82a1c:	2000      	movs	r0, #0
   82a1e:	e7b5      	b.n	8298c <udc_req_std_dev_set_configuration+0x14>
   82a20:	20001930 	.word	0x20001930
   82a24:	00083c99 	.word	0x00083c99
   82a28:	00083c61 	.word	0x00083c61
   82a2c:	20000358 	.word	0x20000358
   82a30:	000828b1 	.word	0x000828b1
   82a34:	2000187b 	.word	0x2000187b
   82a38:	2000187c 	.word	0x2000187c
   82a3c:	000827a5 	.word	0x000827a5

00082a40 <udc_reqstd>:
{
   82a40:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   82a42:	4a35      	ldr	r2, [pc, #212]	; (82b18 <udc_reqstd+0xd8>)
   82a44:	7813      	ldrb	r3, [r2, #0]
   82a46:	f992 2000 	ldrsb.w	r2, [r2]
   82a4a:	2a00      	cmp	r2, #0
   82a4c:	db0e      	blt.n	82a6c <udc_reqstd+0x2c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82a4e:	f013 031f 	ands.w	r3, r3, #31
   82a52:	d143      	bne.n	82adc <udc_reqstd+0x9c>
			switch (udd_g_ctrlreq.req.bRequest) {
   82a54:	4a30      	ldr	r2, [pc, #192]	; (82b18 <udc_reqstd+0xd8>)
   82a56:	7852      	ldrb	r2, [r2, #1]
   82a58:	3a01      	subs	r2, #1
   82a5a:	2a08      	cmp	r2, #8
   82a5c:	d83e      	bhi.n	82adc <udc_reqstd+0x9c>
   82a5e:	e8df f002 	tbb	[pc, r2]
   82a62:	3d34      	.short	0x3d34
   82a64:	3d313d37 	.word	0x3d313d37
   82a68:	3d3d      	.short	0x3d3d
   82a6a:	3a          	.byte	0x3a
   82a6b:	00          	.byte	0x00
		if (udd_g_ctrlreq.req.wLength == 0) {
   82a6c:	4a2a      	ldr	r2, [pc, #168]	; (82b18 <udc_reqstd+0xd8>)
   82a6e:	88d2      	ldrh	r2, [r2, #6]
   82a70:	2a00      	cmp	r2, #0
   82a72:	d04e      	beq.n	82b12 <udc_reqstd+0xd2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82a74:	f013 031f 	ands.w	r3, r3, #31
   82a78:	d106      	bne.n	82a88 <udc_reqstd+0x48>
			switch (udd_g_ctrlreq.req.bRequest) {
   82a7a:	4a27      	ldr	r2, [pc, #156]	; (82b18 <udc_reqstd+0xd8>)
   82a7c:	7852      	ldrb	r2, [r2, #1]
   82a7e:	2a06      	cmp	r2, #6
   82a80:	d00b      	beq.n	82a9a <udc_reqstd+0x5a>
   82a82:	2a08      	cmp	r2, #8
   82a84:	d00c      	beq.n	82aa0 <udc_reqstd+0x60>
   82a86:	b12a      	cbz	r2, 82a94 <udc_reqstd+0x54>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82a88:	2b01      	cmp	r3, #1
   82a8a:	d00c      	beq.n	82aa6 <udc_reqstd+0x66>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82a8c:	2b02      	cmp	r3, #2
   82a8e:	d011      	beq.n	82ab4 <udc_reqstd+0x74>
	return false;
   82a90:	2000      	movs	r0, #0
   82a92:	e028      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_dev_get_status();
   82a94:	4b21      	ldr	r3, [pc, #132]	; (82b1c <udc_reqstd+0xdc>)
   82a96:	4798      	blx	r3
   82a98:	e025      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_dev_get_descriptor();
   82a9a:	4b21      	ldr	r3, [pc, #132]	; (82b20 <udc_reqstd+0xe0>)
   82a9c:	4798      	blx	r3
   82a9e:	e022      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_dev_get_configuration();
   82aa0:	4b20      	ldr	r3, [pc, #128]	; (82b24 <udc_reqstd+0xe4>)
   82aa2:	4798      	blx	r3
   82aa4:	e01f      	b.n	82ae6 <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
   82aa6:	4a1c      	ldr	r2, [pc, #112]	; (82b18 <udc_reqstd+0xd8>)
   82aa8:	7852      	ldrb	r2, [r2, #1]
   82aaa:	2a0a      	cmp	r2, #10
   82aac:	d1ee      	bne.n	82a8c <udc_reqstd+0x4c>
				return udc_req_std_iface_get_setting();
   82aae:	4b1e      	ldr	r3, [pc, #120]	; (82b28 <udc_reqstd+0xe8>)
   82ab0:	4798      	blx	r3
   82ab2:	e018      	b.n	82ae6 <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
   82ab4:	4b18      	ldr	r3, [pc, #96]	; (82b18 <udc_reqstd+0xd8>)
   82ab6:	785b      	ldrb	r3, [r3, #1]
   82ab8:	b10b      	cbz	r3, 82abe <udc_reqstd+0x7e>
	return false;
   82aba:	2000      	movs	r0, #0
   82abc:	e013      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_ep_get_status();
   82abe:	4b1b      	ldr	r3, [pc, #108]	; (82b2c <udc_reqstd+0xec>)
   82ac0:	4798      	blx	r3
   82ac2:	e010      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_dev_set_address();
   82ac4:	4b1a      	ldr	r3, [pc, #104]	; (82b30 <udc_reqstd+0xf0>)
   82ac6:	4798      	blx	r3
   82ac8:	e00d      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_dev_clear_feature();
   82aca:	4b1a      	ldr	r3, [pc, #104]	; (82b34 <udc_reqstd+0xf4>)
   82acc:	4798      	blx	r3
   82ace:	e00a      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_dev_set_feature();
   82ad0:	4b19      	ldr	r3, [pc, #100]	; (82b38 <udc_reqstd+0xf8>)
   82ad2:	4798      	blx	r3
   82ad4:	e007      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_dev_set_configuration();
   82ad6:	4b19      	ldr	r3, [pc, #100]	; (82b3c <udc_reqstd+0xfc>)
   82ad8:	4798      	blx	r3
   82ada:	e004      	b.n	82ae6 <udc_reqstd+0xa6>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82adc:	2b01      	cmp	r3, #1
   82ade:	d003      	beq.n	82ae8 <udc_reqstd+0xa8>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82ae0:	2b02      	cmp	r3, #2
   82ae2:	d008      	beq.n	82af6 <udc_reqstd+0xb6>
	return false;
   82ae4:	2000      	movs	r0, #0
}
   82ae6:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
   82ae8:	4a0b      	ldr	r2, [pc, #44]	; (82b18 <udc_reqstd+0xd8>)
   82aea:	7852      	ldrb	r2, [r2, #1]
   82aec:	2a0b      	cmp	r2, #11
   82aee:	d1f7      	bne.n	82ae0 <udc_reqstd+0xa0>
				return udc_req_std_iface_set_setting();
   82af0:	4b13      	ldr	r3, [pc, #76]	; (82b40 <udc_reqstd+0x100>)
   82af2:	4798      	blx	r3
   82af4:	e7f7      	b.n	82ae6 <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
   82af6:	4b08      	ldr	r3, [pc, #32]	; (82b18 <udc_reqstd+0xd8>)
   82af8:	785b      	ldrb	r3, [r3, #1]
   82afa:	2b01      	cmp	r3, #1
   82afc:	d003      	beq.n	82b06 <udc_reqstd+0xc6>
   82afe:	2b03      	cmp	r3, #3
   82b00:	d004      	beq.n	82b0c <udc_reqstd+0xcc>
   82b02:	2000      	movs	r0, #0
   82b04:	e7ef      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_ep_clear_feature();
   82b06:	4b0f      	ldr	r3, [pc, #60]	; (82b44 <udc_reqstd+0x104>)
   82b08:	4798      	blx	r3
   82b0a:	e7ec      	b.n	82ae6 <udc_reqstd+0xa6>
				return udc_req_std_ep_set_feature();
   82b0c:	4b0e      	ldr	r3, [pc, #56]	; (82b48 <udc_reqstd+0x108>)
   82b0e:	4798      	blx	r3
   82b10:	e7e9      	b.n	82ae6 <udc_reqstd+0xa6>
			return false; // Error for USB host
   82b12:	2000      	movs	r0, #0
   82b14:	e7e7      	b.n	82ae6 <udc_reqstd+0xa6>
   82b16:	bf00      	nop
   82b18:	20001930 	.word	0x20001930
   82b1c:	000824f1 	.word	0x000824f1
   82b20:	0008262d 	.word	0x0008262d
   82b24:	00082595 	.word	0x00082595
   82b28:	000825bd 	.word	0x000825bd
   82b2c:	00082755 	.word	0x00082755
   82b30:	000823c9 	.word	0x000823c9
   82b34:	0008239d 	.word	0x0008239d
   82b38:	000828f1 	.word	0x000828f1
   82b3c:	00082979 	.word	0x00082979
   82b40:	000827fd 	.word	0x000827fd
   82b44:	0008283d 	.word	0x0008283d
   82b48:	00082865 	.word	0x00082865

00082b4c <udc_sof_notify>:
	if (udc_num_configuration) {
   82b4c:	4b0b      	ldr	r3, [pc, #44]	; (82b7c <udc_sof_notify+0x30>)
   82b4e:	781b      	ldrb	r3, [r3, #0]
   82b50:	b983      	cbnz	r3, 82b74 <udc_sof_notify+0x28>
   82b52:	4770      	bx	lr
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   82b54:	4798      	blx	r3
				iface_num++) {
   82b56:	3401      	adds	r4, #1
   82b58:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82b5a:	4b09      	ldr	r3, [pc, #36]	; (82b80 <udc_sof_notify+0x34>)
   82b5c:	681b      	ldr	r3, [r3, #0]
   82b5e:	681a      	ldr	r2, [r3, #0]
   82b60:	7912      	ldrb	r2, [r2, #4]
		for (iface_num = 0;
   82b62:	42a2      	cmp	r2, r4
   82b64:	d909      	bls.n	82b7a <udc_sof_notify+0x2e>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   82b66:	685b      	ldr	r3, [r3, #4]
   82b68:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   82b6c:	691b      	ldr	r3, [r3, #16]
   82b6e:	2b00      	cmp	r3, #0
   82b70:	d1f0      	bne.n	82b54 <udc_sof_notify+0x8>
   82b72:	e7f0      	b.n	82b56 <udc_sof_notify+0xa>
{
   82b74:	b510      	push	{r4, lr}
		for (iface_num = 0;
   82b76:	2400      	movs	r4, #0
   82b78:	e7ef      	b.n	82b5a <udc_sof_notify+0xe>
}
   82b7a:	bd10      	pop	{r4, pc}
   82b7c:	2000187b 	.word	0x2000187b
   82b80:	2000187c 	.word	0x2000187c

00082b84 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   82b84:	b508      	push	{r3, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   82b86:	4b1c      	ldr	r3, [pc, #112]	; (82bf8 <udc_process_setup+0x74>)
   82b88:	2200      	movs	r2, #0
   82b8a:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   82b8c:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82b8e:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   82b90:	881b      	ldrh	r3, [r3, #0]
   82b92:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   82b96:	d016      	beq.n	82bc6 <udc_process_setup+0x42>
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   82b98:	4b17      	ldr	r3, [pc, #92]	; (82bf8 <udc_process_setup+0x74>)
   82b9a:	781a      	ldrb	r2, [r3, #0]
   82b9c:	f993 3000 	ldrsb.w	r3, [r3]
   82ba0:	2b00      	cmp	r3, #0
   82ba2:	db16      	blt.n	82bd2 <udc_process_setup+0x4e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82ba4:	f012 0f60 	tst.w	r2, #96	; 0x60
   82ba8:	d019      	beq.n	82bde <udc_process_setup+0x5a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   82baa:	4b13      	ldr	r3, [pc, #76]	; (82bf8 <udc_process_setup+0x74>)
   82bac:	781b      	ldrb	r3, [r3, #0]
   82bae:	f003 031f 	and.w	r3, r3, #31
   82bb2:	2b01      	cmp	r3, #1
   82bb4:	d018      	beq.n	82be8 <udc_process_setup+0x64>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   82bb6:	4b10      	ldr	r3, [pc, #64]	; (82bf8 <udc_process_setup+0x74>)
   82bb8:	781b      	ldrb	r3, [r3, #0]
   82bba:	f003 031f 	and.w	r3, r3, #31
   82bbe:	2b02      	cmp	r3, #2
   82bc0:	d017      	beq.n	82bf2 <udc_process_setup+0x6e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   82bc2:	2000      	movs	r0, #0
#endif
}
   82bc4:	bd08      	pop	{r3, pc}
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   82bc6:	219e      	movs	r1, #158	; 0x9e
   82bc8:	480c      	ldr	r0, [pc, #48]	; (82bfc <udc_process_setup+0x78>)
   82bca:	4b0d      	ldr	r3, [pc, #52]	; (82c00 <udc_process_setup+0x7c>)
   82bcc:	4798      	blx	r3
		return true;
   82bce:	2001      	movs	r0, #1
   82bd0:	e7f8      	b.n	82bc4 <udc_process_setup+0x40>
		if (udd_g_ctrlreq.req.wLength == 0) {
   82bd2:	4b09      	ldr	r3, [pc, #36]	; (82bf8 <udc_process_setup+0x74>)
   82bd4:	88db      	ldrh	r3, [r3, #6]
   82bd6:	2b00      	cmp	r3, #0
   82bd8:	d1e4      	bne.n	82ba4 <udc_process_setup+0x20>
			return false; // Error from USB host
   82bda:	2000      	movs	r0, #0
   82bdc:	e7f2      	b.n	82bc4 <udc_process_setup+0x40>
		if (udc_reqstd()) {
   82bde:	4b09      	ldr	r3, [pc, #36]	; (82c04 <udc_process_setup+0x80>)
   82be0:	4798      	blx	r3
   82be2:	2800      	cmp	r0, #0
   82be4:	d0e1      	beq.n	82baa <udc_process_setup+0x26>
   82be6:	e7ed      	b.n	82bc4 <udc_process_setup+0x40>
		if (udc_req_iface()) {
   82be8:	4b07      	ldr	r3, [pc, #28]	; (82c08 <udc_process_setup+0x84>)
   82bea:	4798      	blx	r3
   82bec:	2800      	cmp	r0, #0
   82bee:	d0e2      	beq.n	82bb6 <udc_process_setup+0x32>
   82bf0:	e7e8      	b.n	82bc4 <udc_process_setup+0x40>
		if (udc_req_ep()) {
   82bf2:	4b06      	ldr	r3, [pc, #24]	; (82c0c <udc_process_setup+0x88>)
   82bf4:	4798      	blx	r3
   82bf6:	e7e5      	b.n	82bc4 <udc_process_setup+0x40>
   82bf8:	20001930 	.word	0x20001930
   82bfc:	2000022c 	.word	0x2000022c
   82c00:	00083cb9 	.word	0x00083cb9
   82c04:	00082a41 	.word	0x00082a41
   82c08:	000823e5 	.word	0x000823e5
   82c0c:	0008243d 	.word	0x0008243d

00082c10 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82c10:	b570      	push	{r4, r5, r6, lr}
   82c12:	b086      	sub	sp, #24
   82c14:	4605      	mov	r5, r0
   82c16:	460c      	mov	r4, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82c18:	2304      	movs	r3, #4
   82c1a:	9300      	str	r3, [sp, #0]
   82c1c:	ab02      	add	r3, sp, #8
   82c1e:	220f      	movs	r2, #15
   82c20:	210e      	movs	r1, #14
   82c22:	480c      	ldr	r0, [pc, #48]	; (82c54 <flash_read_unique_id+0x44>)
   82c24:	4e0c      	ldr	r6, [pc, #48]	; (82c58 <flash_read_unique_id+0x48>)
   82c26:	47b0      	blx	r6
   82c28:	b990      	cbnz	r0, 82c50 <flash_read_unique_id+0x40>
   82c2a:	4601      	mov	r1, r0
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82c2c:	2c04      	cmp	r4, #4
   82c2e:	d900      	bls.n	82c32 <flash_read_unique_id+0x22>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   82c30:	2404      	movs	r4, #4
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82c32:	460b      	mov	r3, r1
   82c34:	e007      	b.n	82c46 <flash_read_unique_id+0x36>
		pul_data[ul_idx] = uid_buf[ul_idx];
   82c36:	aa06      	add	r2, sp, #24
   82c38:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   82c3c:	f852 2c10 	ldr.w	r2, [r2, #-16]
   82c40:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82c44:	3301      	adds	r3, #1
   82c46:	429c      	cmp	r4, r3
   82c48:	d8f5      	bhi.n	82c36 <flash_read_unique_id+0x26>
	}

	return FLASH_RC_OK;
}
   82c4a:	4608      	mov	r0, r1
   82c4c:	b006      	add	sp, #24
   82c4e:	bd70      	pop	{r4, r5, r6, pc}
		return FLASH_RC_ERROR;
   82c50:	2110      	movs	r1, #16
   82c52:	e7fa      	b.n	82c4a <flash_read_unique_id+0x3a>
   82c54:	400e0800 	.word	0x400e0800
   82c58:	20000001 	.word	0x20000001

00082c5c <usart_set_sync_master_baudrate>:
		uint32_t baudrate, uint32_t ul_mck)
{
	uint32_t cd;

	/* Calculate clock divider according to the formula in synchronous mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   82c5c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   82c60:	fbb2 f2f1 	udiv	r2, r2, r1

	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82c64:	1e51      	subs	r1, r2, #1
   82c66:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   82c6a:	4299      	cmp	r1, r3
   82c6c:	d808      	bhi.n	82c80 <usart_set_sync_master_baudrate+0x24>
		return 1;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   82c6e:	6202      	str	r2, [r0, #32]

	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   82c70:	6843      	ldr	r3, [r0, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   82c72:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   82c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   82c7a:	6043      	str	r3, [r0, #4]
	return 0;
   82c7c:	2000      	movs	r0, #0
   82c7e:	4770      	bx	lr
		return 1;
   82c80:	2001      	movs	r0, #1
}
   82c82:	4770      	bx	lr

00082c84 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   82c84:	2340      	movs	r3, #64	; 0x40
   82c86:	6003      	str	r3, [r0, #0]
}
   82c88:	4770      	bx	lr

00082c8a <usart_disable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXDIS;
   82c8a:	2380      	movs	r3, #128	; 0x80
   82c8c:	6003      	str	r3, [r0, #0]
}
   82c8e:	4770      	bx	lr

00082c90 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82c90:	2388      	movs	r3, #136	; 0x88
   82c92:	6003      	str	r3, [r0, #0]
}
   82c94:	4770      	bx	lr

00082c96 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   82c96:	2310      	movs	r3, #16
   82c98:	6003      	str	r3, [r0, #0]
}
   82c9a:	4770      	bx	lr

00082c9c <usart_disable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXDIS;
   82c9c:	2320      	movs	r3, #32
   82c9e:	6003      	str	r3, [r0, #0]
}
   82ca0:	4770      	bx	lr

00082ca2 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82ca2:	2324      	movs	r3, #36	; 0x24
   82ca4:	6003      	str	r3, [r0, #0]
}
   82ca6:	4770      	bx	lr

00082ca8 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   82ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
   82cac:	6003      	str	r3, [r0, #0]
}
   82cae:	4770      	bx	lr

00082cb0 <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
   82cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   82cb4:	6003      	str	r3, [r0, #0]
}
   82cb6:	4770      	bx	lr

00082cb8 <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   82cb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   82cbc:	6003      	str	r3, [r0, #0]
}
   82cbe:	4770      	bx	lr

00082cc0 <usart_is_tx_empty>:
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   82cc0:	6940      	ldr	r0, [r0, #20]
}
   82cc2:	f3c0 2040 	ubfx	r0, r0, #9, #1
   82cc6:	4770      	bx	lr

00082cc8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82cc8:	6943      	ldr	r3, [r0, #20]
   82cca:	f013 0f02 	tst.w	r3, #2
   82cce:	d004      	beq.n	82cda <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82cd0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   82cd4:	61c1      	str	r1, [r0, #28]
	return 0;
   82cd6:	2000      	movs	r0, #0
   82cd8:	4770      	bx	lr
		return 1;
   82cda:	2001      	movs	r0, #1
}
   82cdc:	4770      	bx	lr

00082cde <usart_putchar>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82cde:	6943      	ldr	r3, [r0, #20]
   82ce0:	f013 0f02 	tst.w	r3, #2
   82ce4:	d0fb      	beq.n	82cde <usart_putchar>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82ce6:	f3c1 0108 	ubfx	r1, r1, #0, #9
   82cea:	61c1      	str	r1, [r0, #28]

	return 0;
}
   82cec:	2000      	movs	r0, #0
   82cee:	4770      	bx	lr

00082cf0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82cf0:	6943      	ldr	r3, [r0, #20]
   82cf2:	f013 0f01 	tst.w	r3, #1
   82cf6:	d005      	beq.n	82d04 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82cf8:	6983      	ldr	r3, [r0, #24]
   82cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   82cfe:	600b      	str	r3, [r1, #0]

	return 0;
   82d00:	2000      	movs	r0, #0
   82d02:	4770      	bx	lr
		return 1;
   82d04:	2001      	movs	r0, #1
}
   82d06:	4770      	bx	lr

00082d08 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82d08:	4b01      	ldr	r3, [pc, #4]	; (82d10 <usart_disable_writeprotect+0x8>)
   82d0a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
}
   82d0e:	4770      	bx	lr
   82d10:	55534100 	.word	0x55534100

00082d14 <usart_reset>:
{
   82d14:	b510      	push	{r4, lr}
   82d16:	4604      	mov	r4, r0
	usart_disable_writeprotect(p_usart);
   82d18:	4b0a      	ldr	r3, [pc, #40]	; (82d44 <usart_reset+0x30>)
   82d1a:	4798      	blx	r3
	p_usart->US_MR = 0;
   82d1c:	2300      	movs	r3, #0
   82d1e:	6063      	str	r3, [r4, #4]
	p_usart->US_RTOR = 0;
   82d20:	6263      	str	r3, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82d22:	62a3      	str	r3, [r4, #40]	; 0x28
	usart_reset_tx(p_usart);
   82d24:	4620      	mov	r0, r4
   82d26:	4b08      	ldr	r3, [pc, #32]	; (82d48 <usart_reset+0x34>)
   82d28:	4798      	blx	r3
	usart_reset_rx(p_usart);
   82d2a:	4620      	mov	r0, r4
   82d2c:	4b07      	ldr	r3, [pc, #28]	; (82d4c <usart_reset+0x38>)
   82d2e:	4798      	blx	r3
	usart_reset_status(p_usart);
   82d30:	4620      	mov	r0, r4
   82d32:	4b07      	ldr	r3, [pc, #28]	; (82d50 <usart_reset+0x3c>)
   82d34:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   82d36:	4620      	mov	r0, r4
   82d38:	4b06      	ldr	r3, [pc, #24]	; (82d54 <usart_reset+0x40>)
   82d3a:	4798      	blx	r3
	usart_drive_DTR_pin_high(p_usart);
   82d3c:	4620      	mov	r0, r4
   82d3e:	4b06      	ldr	r3, [pc, #24]	; (82d58 <usart_reset+0x44>)
   82d40:	4798      	blx	r3
}
   82d42:	bd10      	pop	{r4, pc}
   82d44:	00082d09 	.word	0x00082d09
   82d48:	00082c91 	.word	0x00082c91
   82d4c:	00082ca3 	.word	0x00082ca3
   82d50:	00082ca9 	.word	0x00082ca9
   82d54:	00082cb9 	.word	0x00082cb9
   82d58:	00082cb1 	.word	0x00082cb1

00082d5c <usart_init_sync_master>:
{
   82d5c:	b570      	push	{r4, r5, r6, lr}
   82d5e:	4604      	mov	r4, r0
   82d60:	460d      	mov	r5, r1
   82d62:	4616      	mov	r6, r2
	usart_reset(p_usart);
   82d64:	4b0f      	ldr	r3, [pc, #60]	; (82da4 <usart_init_sync_master+0x48>)
   82d66:	4798      	blx	r3
	ul_reg_val = 0;
   82d68:	4b0f      	ldr	r3, [pc, #60]	; (82da8 <usart_init_sync_master+0x4c>)
   82d6a:	2200      	movs	r2, #0
   82d6c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   82d6e:	b1bd      	cbz	r5, 82da0 <usart_init_sync_master+0x44>
   82d70:	4632      	mov	r2, r6
   82d72:	6829      	ldr	r1, [r5, #0]
   82d74:	4620      	mov	r0, r4
   82d76:	4b0d      	ldr	r3, [pc, #52]	; (82dac <usart_init_sync_master+0x50>)
   82d78:	4798      	blx	r3
   82d7a:	b988      	cbnz	r0, 82da0 <usart_init_sync_master+0x44>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82d7c:	686b      	ldr	r3, [r5, #4]
   82d7e:	68aa      	ldr	r2, [r5, #8]
   82d80:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82d82:	692a      	ldr	r2, [r5, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82d84:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82d86:	68ea      	ldr	r2, [r5, #12]
   82d88:	4313      	orrs	r3, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82d8a:	4a07      	ldr	r2, [pc, #28]	; (82da8 <usart_init_sync_master+0x4c>)
   82d8c:	6811      	ldr	r1, [r2, #0]
   82d8e:	430b      	orrs	r3, r1
   82d90:	6013      	str	r3, [r2, #0]
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   82d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   82d96:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   82d98:	6862      	ldr	r2, [r4, #4]
   82d9a:	4313      	orrs	r3, r2
   82d9c:	6063      	str	r3, [r4, #4]
	return 0;
   82d9e:	e000      	b.n	82da2 <usart_init_sync_master+0x46>
		return 1;
   82da0:	2001      	movs	r0, #1
}
   82da2:	bd70      	pop	{r4, r5, r6, pc}
   82da4:	00082d15 	.word	0x00082d15
   82da8:	20001884 	.word	0x20001884
   82dac:	00082c5d 	.word	0x00082c5d

00082db0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   82db0:	b508      	push	{r3, lr}
   82db2:	2014      	movs	r0, #20
   82db4:	4b01      	ldr	r3, [pc, #4]	; (82dbc <spi_enable_clock+0xc>)
   82db6:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   82db8:	bd08      	pop	{r3, pc}
   82dba:	bf00      	nop
   82dbc:	000847d5 	.word	0x000847d5

00082dc0 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   82dc0:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
   82dc2:	f643 2498 	movw	r4, #15000	; 0x3a98
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   82dc6:	6905      	ldr	r5, [r0, #16]
   82dc8:	f015 0f02 	tst.w	r5, #2
   82dcc:	d103      	bne.n	82dd6 <spi_write+0x16>
		if (!timeout--) {
   82dce:	1e65      	subs	r5, r4, #1
   82dd0:	b184      	cbz	r4, 82df4 <spi_write+0x34>
   82dd2:	462c      	mov	r4, r5
   82dd4:	e7f7      	b.n	82dc6 <spi_write+0x6>
	if (p_spi->SPI_MR & SPI_MR_PS) {
   82dd6:	6844      	ldr	r4, [r0, #4]
   82dd8:	f014 0f02 	tst.w	r4, #2
   82ddc:	d006      	beq.n	82dec <spi_write+0x2c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   82dde:	0412      	lsls	r2, r2, #16
   82de0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   82de4:	4311      	orrs	r1, r2
		if (uc_last) {
   82de6:	b10b      	cbz	r3, 82dec <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   82de8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   82dec:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   82dee:	2000      	movs	r0, #0
}
   82df0:	bc30      	pop	{r4, r5}
   82df2:	4770      	bx	lr
			return SPI_ERROR_TIMEOUT;
   82df4:	2001      	movs	r0, #1
   82df6:	e7fb      	b.n	82df0 <spi_write+0x30>

00082df8 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   82df8:	b13a      	cbz	r2, 82e0a <spi_set_clock_polarity+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   82dfa:	310c      	adds	r1, #12
   82dfc:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82e00:	f043 0301 	orr.w	r3, r3, #1
   82e04:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   82e08:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   82e0a:	310c      	adds	r1, #12
   82e0c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82e10:	f023 0301 	bic.w	r3, r3, #1
   82e14:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
   82e18:	4770      	bx	lr

00082e1a <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   82e1a:	b13a      	cbz	r2, 82e2c <spi_set_clock_phase+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   82e1c:	310c      	adds	r1, #12
   82e1e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82e22:	f043 0302 	orr.w	r3, r3, #2
   82e26:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   82e2a:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   82e2c:	310c      	adds	r1, #12
   82e2e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82e32:	f023 0302 	bic.w	r3, r3, #2
   82e36:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
   82e3a:	4770      	bx	lr

00082e3c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   82e3c:	4401      	add	r1, r0
   82e3e:	3901      	subs	r1, #1
   82e40:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   82e44:	1e43      	subs	r3, r0, #1
   82e46:	2bfe      	cmp	r3, #254	; 0xfe
   82e48:	d801      	bhi.n	82e4e <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
   82e4a:	b200      	sxth	r0, r0
   82e4c:	4770      	bx	lr
		return -1;
   82e4e:	f04f 30ff 	mov.w	r0, #4294967295
}
   82e52:	4770      	bx	lr

00082e54 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   82e54:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   82e56:	310c      	adds	r1, #12
   82e58:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   82e5c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
   82e60:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   82e64:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82e68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   82e6c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   82e70:	bc10      	pop	{r4}
   82e72:	4770      	bx	lr

00082e74 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82e74:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82e78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82e7c:	670a      	str	r2, [r1, #112]	; 0x70
}
   82e7e:	4770      	bx	lr

00082e80 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   82e80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82e84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82e88:	674a      	str	r2, [r1, #116]	; 0x74
}
   82e8a:	4770      	bx	lr

00082e8c <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   82e8c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82e90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82e94:	678a      	str	r2, [r1, #120]	; 0x78
}
   82e96:	4770      	bx	lr

00082e98 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   82e98:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82e9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82ea0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   82ea4:	4770      	bx	lr
   82ea6:	0000      	movs	r0, r0

00082ea8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82eaa:	4604      	mov	r4, r0
   82eac:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82eae:	4b10      	ldr	r3, [pc, #64]	; (82ef0 <pio_handler_process+0x48>)
   82eb0:	4798      	blx	r3
   82eb2:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82eb4:	4620      	mov	r0, r4
   82eb6:	4b0f      	ldr	r3, [pc, #60]	; (82ef4 <pio_handler_process+0x4c>)
   82eb8:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82eba:	4005      	ands	r5, r0
   82ebc:	d116      	bne.n	82eec <pio_handler_process+0x44>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i++;
   82ec0:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
   82ec2:	2c06      	cmp	r4, #6
   82ec4:	d8fb      	bhi.n	82ebe <pio_handler_process+0x16>
		while (status != 0) {
   82ec6:	2d00      	cmp	r5, #0
   82ec8:	d0f9      	beq.n	82ebe <pio_handler_process+0x16>
			if (gs_interrupt_sources[i].id == ul_id) {
   82eca:	0123      	lsls	r3, r4, #4
   82ecc:	4a0a      	ldr	r2, [pc, #40]	; (82ef8 <pio_handler_process+0x50>)
   82ece:	58d0      	ldr	r0, [r2, r3]
   82ed0:	42b0      	cmp	r0, r6
   82ed2:	d1f5      	bne.n	82ec0 <pio_handler_process+0x18>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82ed4:	eb02 1304 	add.w	r3, r2, r4, lsl #4
   82ed8:	6859      	ldr	r1, [r3, #4]
   82eda:	4229      	tst	r1, r5
   82edc:	d0f0      	beq.n	82ec0 <pio_handler_process+0x18>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82ede:	461f      	mov	r7, r3
   82ee0:	68db      	ldr	r3, [r3, #12]
   82ee2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82ee4:	687b      	ldr	r3, [r7, #4]
   82ee6:	ea25 0503 	bic.w	r5, r5, r3
   82eea:	e7e9      	b.n	82ec0 <pio_handler_process+0x18>
		i = 0;
   82eec:	2400      	movs	r4, #0
   82eee:	e7ea      	b.n	82ec6 <pio_handler_process+0x1e>
   82ef0:	00084a45 	.word	0x00084a45
   82ef4:	00084a49 	.word	0x00084a49
   82ef8:	20001888 	.word	0x20001888

00082efc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82efc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82efe:	210a      	movs	r1, #10
   82f00:	4801      	ldr	r0, [pc, #4]	; (82f08 <PIOA_Handler+0xc>)
   82f02:	4b02      	ldr	r3, [pc, #8]	; (82f0c <PIOA_Handler+0x10>)
   82f04:	4798      	blx	r3
}
   82f06:	bd08      	pop	{r3, pc}
   82f08:	400e0c00 	.word	0x400e0c00
   82f0c:	00082ea9 	.word	0x00082ea9

00082f10 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82f10:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82f12:	210b      	movs	r1, #11
   82f14:	4801      	ldr	r0, [pc, #4]	; (82f1c <PIOB_Handler+0xc>)
   82f16:	4b02      	ldr	r3, [pc, #8]	; (82f20 <PIOB_Handler+0x10>)
   82f18:	4798      	blx	r3
}
   82f1a:	bd08      	pop	{r3, pc}
   82f1c:	400e0e00 	.word	0x400e0e00
   82f20:	00082ea9 	.word	0x00082ea9

00082f24 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82f24:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82f26:	210c      	movs	r1, #12
   82f28:	4801      	ldr	r0, [pc, #4]	; (82f30 <PIOC_Handler+0xc>)
   82f2a:	4b02      	ldr	r3, [pc, #8]	; (82f34 <PIOC_Handler+0x10>)
   82f2c:	4798      	blx	r3
}
   82f2e:	bd08      	pop	{r3, pc}
   82f30:	400e1000 	.word	0x400e1000
   82f34:	00082ea9 	.word	0x00082ea9

00082f38 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   82f38:	4603      	mov	r3, r0
   82f3a:	b910      	cbnz	r0, 82f42 <udd_sleep_mode+0xa>
   82f3c:	4a19      	ldr	r2, [pc, #100]	; (82fa4 <udd_sleep_mode+0x6c>)
   82f3e:	7812      	ldrb	r2, [r2, #0]
   82f40:	b932      	cbnz	r2, 82f50 <udd_sleep_mode+0x18>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   82f42:	b113      	cbz	r3, 82f4a <udd_sleep_mode+0x12>
   82f44:	4a17      	ldr	r2, [pc, #92]	; (82fa4 <udd_sleep_mode+0x6c>)
   82f46:	7812      	ldrb	r2, [r2, #0]
   82f48:	b1ba      	cbz	r2, 82f7a <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   82f4a:	4a16      	ldr	r2, [pc, #88]	; (82fa4 <udd_sleep_mode+0x6c>)
   82f4c:	7013      	strb	r3, [r2, #0]
}
   82f4e:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82f50:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   82f54:	b672      	cpsid	i
   82f56:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   82f5a:	4a13      	ldr	r2, [pc, #76]	; (82fa8 <udd_sleep_mode+0x70>)
   82f5c:	2100      	movs	r1, #0
   82f5e:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   82f60:	4912      	ldr	r1, [pc, #72]	; (82fac <udd_sleep_mode+0x74>)
   82f62:	788a      	ldrb	r2, [r1, #2]
   82f64:	3a01      	subs	r2, #1
   82f66:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82f68:	2800      	cmp	r0, #0
   82f6a:	d1ea      	bne.n	82f42 <udd_sleep_mode+0xa>
		cpu_irq_enable();
   82f6c:	4a0e      	ldr	r2, [pc, #56]	; (82fa8 <udd_sleep_mode+0x70>)
   82f6e:	2101      	movs	r1, #1
   82f70:	7011      	strb	r1, [r2, #0]
   82f72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82f76:	b662      	cpsie	i
	// Leave the critical section
	cpu_irq_restore(flags);
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   82f78:	e7e3      	b.n	82f42 <udd_sleep_mode+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82f7a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   82f7e:	b672      	cpsid	i
   82f80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82f84:	4a08      	ldr	r2, [pc, #32]	; (82fa8 <udd_sleep_mode+0x70>)
   82f86:	2100      	movs	r1, #0
   82f88:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   82f8a:	4908      	ldr	r1, [pc, #32]	; (82fac <udd_sleep_mode+0x74>)
   82f8c:	788a      	ldrb	r2, [r1, #2]
   82f8e:	3201      	adds	r2, #1
   82f90:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   82f92:	2800      	cmp	r0, #0
   82f94:	d1d9      	bne.n	82f4a <udd_sleep_mode+0x12>
		cpu_irq_enable();
   82f96:	4a04      	ldr	r2, [pc, #16]	; (82fa8 <udd_sleep_mode+0x70>)
   82f98:	2101      	movs	r1, #1
   82f9a:	7011      	strb	r1, [r2, #0]
   82f9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82fa0:	b662      	cpsie	i
}
   82fa2:	e7d2      	b.n	82f4a <udd_sleep_mode+0x12>
   82fa4:	200018f9 	.word	0x200018f9
   82fa8:	20000354 	.word	0x20000354
   82fac:	20001964 	.word	0x20001964

00082fb0 <udd_reset_ep_ctrl>:
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   82fb0:	4b18      	ldr	r3, [pc, #96]	; (83014 <udd_reset_ep_ctrl+0x64>)
   82fb2:	681a      	ldr	r2, [r3, #0]
   82fb4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82fb8:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   82fba:	681a      	ldr	r2, [r3, #0]
   82fbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82fc0:	601a      	str	r2, [r3, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   82fc2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   82fc6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   82fca:	f022 0203 	bic.w	r2, r2, #3
   82fce:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   82fd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   82fd6:	2201      	movs	r2, #1
   82fd8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82fdc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   82fe0:	b672      	cpsid	i
   82fe2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82fe6:	4a0c      	ldr	r2, [pc, #48]	; (83018 <udd_reset_ep_ctrl+0x68>)
   82fe8:	2000      	movs	r0, #0
   82fea:	7010      	strb	r0, [r2, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   82fec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82ff0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   82ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ff8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   82ffc:	691a      	ldr	r2, [r3, #16]
   82ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   83002:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   83004:	b929      	cbnz	r1, 83012 <udd_reset_ep_ctrl+0x62>
		cpu_irq_enable();
   83006:	4b04      	ldr	r3, [pc, #16]	; (83018 <udd_reset_ep_ctrl+0x68>)
   83008:	2201      	movs	r2, #1
   8300a:	701a      	strb	r2, [r3, #0]
   8300c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83010:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   83012:	4770      	bx	lr
   83014:	400a4000 	.word	0x400a4000
   83018:	20000354 	.word	0x20000354

0008301c <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8301c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   83020:	b672      	cpsid	i
   83022:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83026:	4a0e      	ldr	r2, [pc, #56]	; (83060 <udd_ctrl_init+0x44>)
   83028:	2100      	movs	r1, #0
   8302a:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   8302c:	4a0d      	ldr	r2, [pc, #52]	; (83064 <udd_ctrl_init+0x48>)
   8302e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83032:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   83036:	b92b      	cbnz	r3, 83044 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   83038:	4b09      	ldr	r3, [pc, #36]	; (83060 <udd_ctrl_init+0x44>)
   8303a:	2201      	movs	r2, #1
   8303c:	701a      	strb	r2, [r3, #0]
   8303e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83042:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   83044:	4b07      	ldr	r3, [pc, #28]	; (83064 <udd_ctrl_init+0x48>)
   83046:	f44f 7200 	mov.w	r2, #512	; 0x200
   8304a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   8304e:	4a06      	ldr	r2, [pc, #24]	; (83068 <udd_ctrl_init+0x4c>)
   83050:	2300      	movs	r3, #0
   83052:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   83054:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   83056:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83058:	4a04      	ldr	r2, [pc, #16]	; (8306c <udd_ctrl_init+0x50>)
   8305a:	7013      	strb	r3, [r2, #0]
}
   8305c:	4770      	bx	lr
   8305e:	bf00      	nop
   83060:	20000354 	.word	0x20000354
   83064:	400a4000 	.word	0x400a4000
   83068:	20001930 	.word	0x20001930
   8306c:	200018fe 	.word	0x200018fe

00083070 <udd_ctrl_overflow>:
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   83070:	4b07      	ldr	r3, [pc, #28]	; (83090 <udd_ctrl_overflow+0x20>)
   83072:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83076:	f413 6f80 	tst.w	r3, #1024	; 0x400
   8307a:	d103      	bne.n	83084 <udd_ctrl_overflow+0x14>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8307c:	4b05      	ldr	r3, [pc, #20]	; (83094 <udd_ctrl_overflow+0x24>)
   8307e:	781b      	ldrb	r3, [r3, #0]
   83080:	2b03      	cmp	r3, #3
   83082:	d000      	beq.n	83086 <udd_ctrl_overflow+0x16>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
   83084:	4770      	bx	lr
		udd_enable_stall_handshake(0);
   83086:	4b02      	ldr	r3, [pc, #8]	; (83090 <udd_ctrl_overflow+0x20>)
   83088:	2220      	movs	r2, #32
   8308a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   8308e:	e7f9      	b.n	83084 <udd_ctrl_overflow+0x14>
   83090:	400a4000 	.word	0x400a4000
   83094:	200018fe 	.word	0x200018fe

00083098 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   83098:	4b03      	ldr	r3, [pc, #12]	; (830a8 <udd_ctrl_stall_data+0x10>)
   8309a:	2205      	movs	r2, #5
   8309c:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8309e:	4b03      	ldr	r3, [pc, #12]	; (830ac <udd_ctrl_stall_data+0x14>)
   830a0:	2220      	movs	r2, #32
   830a2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   830a6:	4770      	bx	lr
   830a8:	200018fe 	.word	0x200018fe
   830ac:	400a4000 	.word	0x400a4000

000830b0 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   830b0:	4b11      	ldr	r3, [pc, #68]	; (830f8 <udd_ctrl_send_zlp_in+0x48>)
   830b2:	2203      	movs	r2, #3
   830b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   830b6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   830ba:	b672      	cpsid	i
   830bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   830c0:	4b0e      	ldr	r3, [pc, #56]	; (830fc <udd_ctrl_send_zlp_in+0x4c>)
   830c2:	2200      	movs	r2, #0
   830c4:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   830c6:	4b0e      	ldr	r3, [pc, #56]	; (83100 <udd_ctrl_send_zlp_in+0x50>)
   830c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   830cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   830d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
   830d4:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   830d8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   830dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   830e0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   830e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   830e8:	b929      	cbnz	r1, 830f6 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   830ea:	4b04      	ldr	r3, [pc, #16]	; (830fc <udd_ctrl_send_zlp_in+0x4c>)
   830ec:	2201      	movs	r2, #1
   830ee:	701a      	strb	r2, [r3, #0]
   830f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   830f4:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   830f6:	4770      	bx	lr
   830f8:	200018fe 	.word	0x200018fe
   830fc:	20000354 	.word	0x20000354
   83100:	400a4000 	.word	0x400a4000

00083104 <udd_ctrl_underflow>:
{
   83104:	b508      	push	{r3, lr}
	if (Is_udd_out_received(0))
   83106:	4b0a      	ldr	r3, [pc, #40]	; (83130 <udd_ctrl_underflow+0x2c>)
   83108:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8310c:	f413 7f00 	tst.w	r3, #512	; 0x200
   83110:	d105      	bne.n	8311e <udd_ctrl_underflow+0x1a>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   83112:	4b08      	ldr	r3, [pc, #32]	; (83134 <udd_ctrl_underflow+0x30>)
   83114:	781b      	ldrb	r3, [r3, #0]
   83116:	2b01      	cmp	r3, #1
   83118:	d002      	beq.n	83120 <udd_ctrl_underflow+0x1c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   8311a:	2b04      	cmp	r3, #4
   8311c:	d003      	beq.n	83126 <udd_ctrl_underflow+0x22>
}
   8311e:	bd08      	pop	{r3, pc}
		udd_ctrl_send_zlp_in();
   83120:	4b05      	ldr	r3, [pc, #20]	; (83138 <udd_ctrl_underflow+0x34>)
   83122:	4798      	blx	r3
   83124:	e7fb      	b.n	8311e <udd_ctrl_underflow+0x1a>
		udd_enable_stall_handshake(0);
   83126:	4b02      	ldr	r3, [pc, #8]	; (83130 <udd_ctrl_underflow+0x2c>)
   83128:	2220      	movs	r2, #32
   8312a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   8312e:	e7f6      	b.n	8311e <udd_ctrl_underflow+0x1a>
   83130:	400a4000 	.word	0x400a4000
   83134:	200018fe 	.word	0x200018fe
   83138:	000830b1 	.word	0x000830b1

0008313c <udd_ctrl_send_zlp_out>:

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8313c:	4b0c      	ldr	r3, [pc, #48]	; (83170 <udd_ctrl_send_zlp_out+0x34>)
   8313e:	2204      	movs	r2, #4
   83140:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83142:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83146:	b672      	cpsid	i
   83148:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8314c:	4b09      	ldr	r3, [pc, #36]	; (83174 <udd_ctrl_send_zlp_out+0x38>)
   8314e:	2200      	movs	r2, #0
   83150:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   83152:	4b09      	ldr	r3, [pc, #36]	; (83178 <udd_ctrl_send_zlp_out+0x3c>)
   83154:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83158:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   8315c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83160:	b929      	cbnz	r1, 8316e <udd_ctrl_send_zlp_out+0x32>
		cpu_irq_enable();
   83162:	4b04      	ldr	r3, [pc, #16]	; (83174 <udd_ctrl_send_zlp_out+0x38>)
   83164:	2201      	movs	r2, #1
   83166:	701a      	strb	r2, [r3, #0]
   83168:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8316c:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   8316e:	4770      	bx	lr
   83170:	200018fe 	.word	0x200018fe
   83174:	20000354 	.word	0x20000354
   83178:	400a4000 	.word	0x400a4000

0008317c <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   8317c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   8317e:	4b02      	ldr	r3, [pc, #8]	; (83188 <udd_ctrl_endofrequest+0xc>)
   83180:	691b      	ldr	r3, [r3, #16]
   83182:	b103      	cbz	r3, 83186 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   83184:	4798      	blx	r3
	}
}
   83186:	bd08      	pop	{r3, pc}
   83188:	20001930 	.word	0x20001930

0008318c <udd_ctrl_in_sent>:
{
   8318c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8318e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   83192:	b672      	cpsid	i
   83194:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83198:	4a41      	ldr	r2, [pc, #260]	; (832a0 <udd_ctrl_in_sent+0x114>)
   8319a:	2100      	movs	r1, #0
   8319c:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   8319e:	4a41      	ldr	r2, [pc, #260]	; (832a4 <udd_ctrl_in_sent+0x118>)
   831a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   831a4:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   831a8:	b92b      	cbnz	r3, 831b6 <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   831aa:	4b3d      	ldr	r3, [pc, #244]	; (832a0 <udd_ctrl_in_sent+0x114>)
   831ac:	2201      	movs	r2, #1
   831ae:	701a      	strb	r2, [r3, #0]
   831b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   831b4:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   831b6:	4b3c      	ldr	r3, [pc, #240]	; (832a8 <udd_ctrl_in_sent+0x11c>)
   831b8:	781b      	ldrb	r3, [r3, #0]
   831ba:	2b03      	cmp	r3, #3
   831bc:	d038      	beq.n	83230 <udd_ctrl_in_sent+0xa4>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   831be:	4b3b      	ldr	r3, [pc, #236]	; (832ac <udd_ctrl_in_sent+0x120>)
   831c0:	899c      	ldrh	r4, [r3, #12]
   831c2:	4b3b      	ldr	r3, [pc, #236]	; (832b0 <udd_ctrl_in_sent+0x124>)
   831c4:	881b      	ldrh	r3, [r3, #0]
   831c6:	1ae4      	subs	r4, r4, r3
   831c8:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   831ca:	b9ac      	cbnz	r4, 831f8 <udd_ctrl_in_sent+0x6c>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   831cc:	4a39      	ldr	r2, [pc, #228]	; (832b4 <udd_ctrl_in_sent+0x128>)
   831ce:	8811      	ldrh	r1, [r2, #0]
   831d0:	440b      	add	r3, r1
   831d2:	b29b      	uxth	r3, r3
   831d4:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   831d6:	4a35      	ldr	r2, [pc, #212]	; (832ac <udd_ctrl_in_sent+0x120>)
   831d8:	88d2      	ldrh	r2, [r2, #6]
   831da:	4293      	cmp	r3, r2
   831dc:	d02d      	beq.n	8323a <udd_ctrl_in_sent+0xae>
				|| b_shortpacket) {
   831de:	4b36      	ldr	r3, [pc, #216]	; (832b8 <udd_ctrl_in_sent+0x12c>)
   831e0:	781b      	ldrb	r3, [r3, #0]
   831e2:	bb53      	cbnz	r3, 8323a <udd_ctrl_in_sent+0xae>
		if ((!udd_g_ctrlreq.over_under_run)
   831e4:	4b31      	ldr	r3, [pc, #196]	; (832ac <udd_ctrl_in_sent+0x120>)
   831e6:	695b      	ldr	r3, [r3, #20]
   831e8:	b133      	cbz	r3, 831f8 <udd_ctrl_in_sent+0x6c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   831ea:	4798      	blx	r3
   831ec:	b120      	cbz	r0, 831f8 <udd_ctrl_in_sent+0x6c>
			udd_ctrl_payload_buf_cnt = 0;
   831ee:	4b30      	ldr	r3, [pc, #192]	; (832b0 <udd_ctrl_in_sent+0x124>)
   831f0:	2200      	movs	r2, #0
   831f2:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   831f4:	4b2d      	ldr	r3, [pc, #180]	; (832ac <udd_ctrl_in_sent+0x120>)
   831f6:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   831f8:	2c3f      	cmp	r4, #63	; 0x3f
   831fa:	d921      	bls.n	83240 <udd_ctrl_in_sent+0xb4>
		b_shortpacket = false;
   831fc:	4b2e      	ldr	r3, [pc, #184]	; (832b8 <udd_ctrl_in_sent+0x12c>)
   831fe:	2200      	movs	r2, #0
   83200:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   83202:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83204:	4b29      	ldr	r3, [pc, #164]	; (832ac <udd_ctrl_in_sent+0x120>)
   83206:	689b      	ldr	r3, [r3, #8]
   83208:	4a29      	ldr	r2, [pc, #164]	; (832b0 <udd_ctrl_in_sent+0x124>)
   8320a:	8812      	ldrh	r2, [r2, #0]
   8320c:	4413      	add	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8320e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   83212:	b672      	cpsid	i
   83214:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83218:	4a21      	ldr	r2, [pc, #132]	; (832a0 <udd_ctrl_in_sent+0x114>)
   8321a:	2100      	movs	r1, #0
   8321c:	7011      	strb	r1, [r2, #0]
	if (Is_udd_out_received(0)) {
   8321e:	4a21      	ldr	r2, [pc, #132]	; (832a4 <udd_ctrl_in_sent+0x118>)
   83220:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83224:	f412 7f00 	tst.w	r2, #512	; 0x200
   83228:	d10e      	bne.n	83248 <udd_ctrl_in_sent+0xbc>
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8322a:	4a24      	ldr	r2, [pc, #144]	; (832bc <udd_ctrl_in_sent+0x130>)
	for (i = 0; i < nb_remain; i++) {
   8322c:	2100      	movs	r1, #0
   8322e:	e01c      	b.n	8326a <udd_ctrl_in_sent+0xde>
		udd_ctrl_endofrequest();
   83230:	4b23      	ldr	r3, [pc, #140]	; (832c0 <udd_ctrl_in_sent+0x134>)
   83232:	4798      	blx	r3
		udd_ctrl_init();
   83234:	4b23      	ldr	r3, [pc, #140]	; (832c4 <udd_ctrl_in_sent+0x138>)
   83236:	4798      	blx	r3
		return;
   83238:	e010      	b.n	8325c <udd_ctrl_in_sent+0xd0>
			udd_ctrl_send_zlp_out();
   8323a:	4b23      	ldr	r3, [pc, #140]	; (832c8 <udd_ctrl_in_sent+0x13c>)
   8323c:	4798      	blx	r3
			return;
   8323e:	e00d      	b.n	8325c <udd_ctrl_in_sent+0xd0>
		b_shortpacket = true;
   83240:	4b1d      	ldr	r3, [pc, #116]	; (832b8 <udd_ctrl_in_sent+0x12c>)
   83242:	2201      	movs	r2, #1
   83244:	701a      	strb	r2, [r3, #0]
   83246:	e7dd      	b.n	83204 <udd_ctrl_in_sent+0x78>
	if (cpu_irq_is_enabled_flags(flags))
   83248:	b92d      	cbnz	r5, 83256 <udd_ctrl_in_sent+0xca>
		cpu_irq_enable();
   8324a:	4b15      	ldr	r3, [pc, #84]	; (832a0 <udd_ctrl_in_sent+0x114>)
   8324c:	2201      	movs	r2, #1
   8324e:	701a      	strb	r2, [r3, #0]
   83250:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83254:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83256:	4b14      	ldr	r3, [pc, #80]	; (832a8 <udd_ctrl_in_sent+0x11c>)
   83258:	2204      	movs	r2, #4
   8325a:	701a      	strb	r2, [r3, #0]
}
   8325c:	bd38      	pop	{r3, r4, r5, pc}
		*ptr_dest++ = *ptr_src++;
   8325e:	f813 0b01 	ldrb.w	r0, [r3], #1
   83262:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   83266:	3101      	adds	r1, #1
   83268:	b2c9      	uxtb	r1, r1
   8326a:	b288      	uxth	r0, r1
   8326c:	42a0      	cmp	r0, r4
   8326e:	d3f6      	bcc.n	8325e <udd_ctrl_in_sent+0xd2>
	udd_ctrl_payload_buf_cnt += nb_remain;
   83270:	4b0f      	ldr	r3, [pc, #60]	; (832b0 <udd_ctrl_in_sent+0x124>)
   83272:	881a      	ldrh	r2, [r3, #0]
   83274:	4414      	add	r4, r2
   83276:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   83278:	4b0a      	ldr	r3, [pc, #40]	; (832a4 <udd_ctrl_in_sent+0x118>)
   8327a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8327e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83282:	f44f 6100 	mov.w	r1, #2048	; 0x800
   83286:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8328a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8328e:	2d00      	cmp	r5, #0
   83290:	d1e4      	bne.n	8325c <udd_ctrl_in_sent+0xd0>
		cpu_irq_enable();
   83292:	4b03      	ldr	r3, [pc, #12]	; (832a0 <udd_ctrl_in_sent+0x114>)
   83294:	2201      	movs	r2, #1
   83296:	701a      	strb	r2, [r3, #0]
   83298:	f3bf 8f5f 	dmb	sy
   8329c:	b662      	cpsie	i
}
   8329e:	e7dd      	b.n	8325c <udd_ctrl_in_sent+0xd0>
   832a0:	20000354 	.word	0x20000354
   832a4:	400a4000 	.word	0x400a4000
   832a8:	200018fe 	.word	0x200018fe
   832ac:	20001930 	.word	0x20001930
   832b0:	200018fa 	.word	0x200018fa
   832b4:	200018fc 	.word	0x200018fc
   832b8:	200018f8 	.word	0x200018f8
   832bc:	20180000 	.word	0x20180000
   832c0:	0008317d 	.word	0x0008317d
   832c4:	0008301d 	.word	0x0008301d
   832c8:	0008313d 	.word	0x0008313d

000832cc <udd_ctrl_out_received>:
{
   832cc:	b508      	push	{r3, lr}
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   832ce:	4b4b      	ldr	r3, [pc, #300]	; (833fc <udd_ctrl_out_received+0x130>)
   832d0:	781b      	ldrb	r3, [r3, #0]
   832d2:	2b01      	cmp	r3, #1
   832d4:	d00b      	beq.n	832ee <udd_ctrl_out_received+0x22>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   832d6:	2b02      	cmp	r3, #2
   832d8:	d001      	beq.n	832de <udd_ctrl_out_received+0x12>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   832da:	2b04      	cmp	r3, #4
   832dc:	d104      	bne.n	832e8 <udd_ctrl_out_received+0x1c>
			udd_ctrl_endofrequest();
   832de:	4b48      	ldr	r3, [pc, #288]	; (83400 <udd_ctrl_out_received+0x134>)
   832e0:	4798      	blx	r3
		udd_ctrl_init();
   832e2:	4b48      	ldr	r3, [pc, #288]	; (83404 <udd_ctrl_out_received+0x138>)
   832e4:	4798      	blx	r3
}
   832e6:	bd08      	pop	{r3, pc}
			udd_ctrl_stall_data();
   832e8:	4b47      	ldr	r3, [pc, #284]	; (83408 <udd_ctrl_out_received+0x13c>)
   832ea:	4798      	blx	r3
   832ec:	e7f9      	b.n	832e2 <udd_ctrl_out_received+0x16>
	nb_data = udd_byte_count(0);
   832ee:	4b47      	ldr	r3, [pc, #284]	; (8340c <udd_ctrl_out_received+0x140>)
   832f0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   832f4:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   832f8:	4b45      	ldr	r3, [pc, #276]	; (83410 <udd_ctrl_out_received+0x144>)
   832fa:	899b      	ldrh	r3, [r3, #12]
   832fc:	4a45      	ldr	r2, [pc, #276]	; (83414 <udd_ctrl_out_received+0x148>)
   832fe:	f8b2 e000 	ldrh.w	lr, [r2]
   83302:	eb0e 020c 	add.w	r2, lr, ip
   83306:	4293      	cmp	r3, r2
   83308:	da03      	bge.n	83312 <udd_ctrl_out_received+0x46>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8330a:	eba3 030e 	sub.w	r3, r3, lr
   8330e:	fa1f fc83 	uxth.w	ip, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83312:	4b3f      	ldr	r3, [pc, #252]	; (83410 <udd_ctrl_out_received+0x144>)
   83314:	689b      	ldr	r3, [r3, #8]
   83316:	4473      	add	r3, lr
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83318:	4a3f      	ldr	r2, [pc, #252]	; (83418 <udd_ctrl_out_received+0x14c>)
	for (i = 0; i < nb_data; i++) {
   8331a:	2100      	movs	r1, #0
   8331c:	e005      	b.n	8332a <udd_ctrl_out_received+0x5e>
		*ptr_dest++ = *ptr_src++;
   8331e:	f812 0b01 	ldrb.w	r0, [r2], #1
   83322:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < nb_data; i++) {
   83326:	3101      	adds	r1, #1
   83328:	b2c9      	uxtb	r1, r1
   8332a:	b288      	uxth	r0, r1
   8332c:	4560      	cmp	r0, ip
   8332e:	d3f6      	bcc.n	8331e <udd_ctrl_out_received+0x52>
	udd_ctrl_payload_buf_cnt += nb_data;
   83330:	44e6      	add	lr, ip
   83332:	fa1f fe8e 	uxth.w	lr, lr
   83336:	4b37      	ldr	r3, [pc, #220]	; (83414 <udd_ctrl_out_received+0x148>)
   83338:	f8a3 e000 	strh.w	lr, [r3]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8333c:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   83340:	d00e      	beq.n	83360 <udd_ctrl_out_received+0x94>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   83342:	4b33      	ldr	r3, [pc, #204]	; (83410 <udd_ctrl_out_received+0x144>)
   83344:	f8a3 e00c 	strh.w	lr, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   83348:	695b      	ldr	r3, [r3, #20]
   8334a:	b10b      	cbz	r3, 83350 <udd_ctrl_out_received+0x84>
			if (!udd_g_ctrlreq.over_under_run()) {
   8334c:	4798      	blx	r3
   8334e:	b378      	cbz	r0, 833b0 <udd_ctrl_out_received+0xe4>
		udd_ack_out_received(0);
   83350:	4b2e      	ldr	r3, [pc, #184]	; (8340c <udd_ctrl_out_received+0x140>)
   83352:	f44f 7200 	mov.w	r2, #512	; 0x200
   83356:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   8335a:	4b30      	ldr	r3, [pc, #192]	; (8341c <udd_ctrl_out_received+0x150>)
   8335c:	4798      	blx	r3
		return;
   8335e:	e7c2      	b.n	832e6 <udd_ctrl_out_received+0x1a>
			|| (udd_g_ctrlreq.req.wLength <=
   83360:	4b2b      	ldr	r3, [pc, #172]	; (83410 <udd_ctrl_out_received+0x144>)
   83362:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   83364:	4b2e      	ldr	r3, [pc, #184]	; (83420 <udd_ctrl_out_received+0x154>)
   83366:	881b      	ldrh	r3, [r3, #0]
   83368:	4473      	add	r3, lr
			|| (udd_g_ctrlreq.req.wLength <=
   8336a:	429a      	cmp	r2, r3
   8336c:	dde9      	ble.n	83342 <udd_ctrl_out_received+0x76>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   8336e:	4b28      	ldr	r3, [pc, #160]	; (83410 <udd_ctrl_out_received+0x144>)
   83370:	899b      	ldrh	r3, [r3, #12]
   83372:	459e      	cmp	lr, r3
   83374:	d024      	beq.n	833c0 <udd_ctrl_out_received+0xf4>
	udd_ack_out_received(0);
   83376:	4b25      	ldr	r3, [pc, #148]	; (8340c <udd_ctrl_out_received+0x140>)
   83378:	f44f 7200 	mov.w	r2, #512	; 0x200
   8337c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   83380:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83384:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83388:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   8338c:	b672      	cpsid	i
   8338e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83392:	4824      	ldr	r0, [pc, #144]	; (83424 <udd_ctrl_out_received+0x158>)
   83394:	f04f 0c00 	mov.w	ip, #0
   83398:	f880 c000 	strb.w	ip, [r0]
	udd_enable_nak_in_interrupt(0);
   8339c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   833a0:	2900      	cmp	r1, #0
   833a2:	d1a0      	bne.n	832e6 <udd_ctrl_out_received+0x1a>
		cpu_irq_enable();
   833a4:	2201      	movs	r2, #1
   833a6:	7002      	strb	r2, [r0, #0]
   833a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   833ac:	b662      	cpsie	i
}
   833ae:	e79a      	b.n	832e6 <udd_ctrl_out_received+0x1a>
				udd_ctrl_stall_data();
   833b0:	4b15      	ldr	r3, [pc, #84]	; (83408 <udd_ctrl_out_received+0x13c>)
   833b2:	4798      	blx	r3
				udd_ack_out_received(0);
   833b4:	4b15      	ldr	r3, [pc, #84]	; (8340c <udd_ctrl_out_received+0x140>)
   833b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   833ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   833be:	e792      	b.n	832e6 <udd_ctrl_out_received+0x1a>
		if (!udd_g_ctrlreq.over_under_run) {
   833c0:	4b13      	ldr	r3, [pc, #76]	; (83410 <udd_ctrl_out_received+0x144>)
   833c2:	695b      	ldr	r3, [r3, #20]
   833c4:	b153      	cbz	r3, 833dc <udd_ctrl_out_received+0x110>
		if (!udd_g_ctrlreq.over_under_run()) {
   833c6:	4798      	blx	r3
   833c8:	b180      	cbz	r0, 833ec <udd_ctrl_out_received+0x120>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   833ca:	4915      	ldr	r1, [pc, #84]	; (83420 <udd_ctrl_out_received+0x154>)
   833cc:	4a11      	ldr	r2, [pc, #68]	; (83414 <udd_ctrl_out_received+0x148>)
   833ce:	880b      	ldrh	r3, [r1, #0]
   833d0:	8810      	ldrh	r0, [r2, #0]
   833d2:	4403      	add	r3, r0
   833d4:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   833d6:	2300      	movs	r3, #0
   833d8:	8013      	strh	r3, [r2, #0]
   833da:	e7cc      	b.n	83376 <udd_ctrl_out_received+0xaa>
			udd_ctrl_stall_data();
   833dc:	4b0a      	ldr	r3, [pc, #40]	; (83408 <udd_ctrl_out_received+0x13c>)
   833de:	4798      	blx	r3
			udd_ack_out_received(0);
   833e0:	4b0a      	ldr	r3, [pc, #40]	; (8340c <udd_ctrl_out_received+0x140>)
   833e2:	f44f 7200 	mov.w	r2, #512	; 0x200
   833e6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   833ea:	e77c      	b.n	832e6 <udd_ctrl_out_received+0x1a>
			udd_ctrl_stall_data();
   833ec:	4b06      	ldr	r3, [pc, #24]	; (83408 <udd_ctrl_out_received+0x13c>)
   833ee:	4798      	blx	r3
			udd_ack_out_received(0);
   833f0:	4b06      	ldr	r3, [pc, #24]	; (8340c <udd_ctrl_out_received+0x140>)
   833f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   833f6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   833fa:	e774      	b.n	832e6 <udd_ctrl_out_received+0x1a>
   833fc:	200018fe 	.word	0x200018fe
   83400:	0008317d 	.word	0x0008317d
   83404:	0008301d 	.word	0x0008301d
   83408:	00083099 	.word	0x00083099
   8340c:	400a4000 	.word	0x400a4000
   83410:	20001930 	.word	0x20001930
   83414:	200018fa 	.word	0x200018fa
   83418:	20180000 	.word	0x20180000
   8341c:	000830b1 	.word	0x000830b1
   83420:	200018fc 	.word	0x200018fc
   83424:	20000354 	.word	0x20000354

00083428 <udd_ep_job_table_reset>:
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83428:	2300      	movs	r3, #0
   8342a:	e012      	b.n	83452 <udd_ep_job_table_reset+0x2a>
		udd_ep_job[i].busy = false;
   8342c:	4a0a      	ldr	r2, [pc, #40]	; (83458 <udd_ep_job_table_reset+0x30>)
   8342e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   83432:	00c1      	lsls	r1, r0, #3
   83434:	4411      	add	r1, r2
   83436:	7d08      	ldrb	r0, [r1, #20]
   83438:	f36f 0000 	bfc	r0, #0, #1
   8343c:	7508      	strb	r0, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   8343e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   83442:	00c1      	lsls	r1, r0, #3
   83444:	440a      	add	r2, r1
   83446:	7d11      	ldrb	r1, [r2, #20]
   83448:	f36f 0182 	bfc	r1, #2, #1
   8344c:	7511      	strb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8344e:	3301      	adds	r3, #1
   83450:	b2db      	uxtb	r3, r3
   83452:	2b01      	cmp	r3, #1
   83454:	d9ea      	bls.n	8342c <udd_ep_job_table_reset+0x4>
	}
}
   83456:	4770      	bx	lr
   83458:	20001900 	.word	0x20001900

0008345c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   8345c:	b538      	push	{r3, r4, r5, lr}
   8345e:	4603      	mov	r3, r0
   83460:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   83462:	7d19      	ldrb	r1, [r3, #20]
   83464:	f011 0f01 	tst.w	r1, #1
   83468:	d011      	beq.n	8348e <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   8346a:	7d19      	ldrb	r1, [r3, #20]
   8346c:	f36f 0100 	bfc	r1, #0, #1
   83470:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   83472:	681c      	ldr	r4, [r3, #0]
   83474:	b15c      	cbz	r4, 8348e <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   83476:	f102 0108 	add.w	r1, r2, #8
   8347a:	0149      	lsls	r1, r1, #5
   8347c:	4d04      	ldr	r5, [pc, #16]	; (83490 <udd_ep_finish_job+0x34>)
   8347e:	5869      	ldr	r1, [r5, r1]
   83480:	f011 0f08 	tst.w	r1, #8
   83484:	d001      	beq.n	8348a <udd_ep_finish_job+0x2e>
		ep_num |= USB_EP_DIR_IN;
   83486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8348a:	6899      	ldr	r1, [r3, #8]
   8348c:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   8348e:	bd38      	pop	{r3, r4, r5, pc}
   83490:	400a4000 	.word	0x400a4000

00083494 <udd_ep_job_table_kill>:
{
   83494:	b510      	push	{r4, lr}
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83496:	2400      	movs	r4, #0
   83498:	e00b      	b.n	834b2 <udd_ep_job_table_kill+0x1e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   8349a:	4623      	mov	r3, r4
   8349c:	3401      	adds	r4, #1
   8349e:	b2e4      	uxtb	r4, r4
   834a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   834a4:	00d8      	lsls	r0, r3, #3
   834a6:	4622      	mov	r2, r4
   834a8:	2101      	movs	r1, #1
   834aa:	4b03      	ldr	r3, [pc, #12]	; (834b8 <udd_ep_job_table_kill+0x24>)
   834ac:	4418      	add	r0, r3
   834ae:	4b03      	ldr	r3, [pc, #12]	; (834bc <udd_ep_job_table_kill+0x28>)
   834b0:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   834b2:	2c01      	cmp	r4, #1
   834b4:	d9f1      	bls.n	8349a <udd_ep_job_table_kill+0x6>
}
   834b6:	bd10      	pop	{r4, pc}
   834b8:	20001900 	.word	0x20001900
   834bc:	0008345d 	.word	0x0008345d

000834c0 <udd_ep_abort_job>:
{
   834c0:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   834c2:	f000 020f 	and.w	r2, r0, #15
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   834c6:	1e50      	subs	r0, r2, #1
   834c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   834cc:	2101      	movs	r1, #1
   834ce:	4b03      	ldr	r3, [pc, #12]	; (834dc <udd_ep_abort_job+0x1c>)
   834d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   834d4:	4b02      	ldr	r3, [pc, #8]	; (834e0 <udd_ep_abort_job+0x20>)
   834d6:	4798      	blx	r3
}
   834d8:	bd08      	pop	{r3, pc}
   834da:	bf00      	nop
   834dc:	20001900 	.word	0x20001900
   834e0:	0008345d 	.word	0x0008345d

000834e4 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   834e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   834e6:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   834e8:	1e43      	subs	r3, r0, #1
   834ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   834ee:	4859      	ldr	r0, [pc, #356]	; (83654 <udd_ep_trans_done+0x170>)
   834f0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3

	if (!ptr_job->busy) {
   834f4:	7d01      	ldrb	r1, [r0, #20]
   834f6:	f011 0f01 	tst.w	r1, #1
   834fa:	d075      	beq.n	835e8 <udd_ep_trans_done+0x104>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   834fc:	68c4      	ldr	r4, [r0, #12]
   834fe:	6881      	ldr	r1, [r0, #8]
   83500:	428c      	cmp	r4, r1
   83502:	d05d      	beq.n	835c0 <udd_ep_trans_done+0xdc>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   83504:	1b09      	subs	r1, r1, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   83506:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   8350a:	d802      	bhi.n	83512 <udd_ep_trans_done+0x2e>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   8350c:	ea4f 4c01 	mov.w	ip, r1, lsl #16
   83510:	e003      	b.n	8351a <udd_ep_trans_done+0x36>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83512:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   83516:	f04f 0c00 	mov.w	ip, #0
		}
		if (Is_udd_endpoint_in(ep)) {
   8351a:	f102 0508 	add.w	r5, r2, #8
   8351e:	016d      	lsls	r5, r5, #5
   83520:	4e4d      	ldr	r6, [pc, #308]	; (83658 <udd_ep_trans_done+0x174>)
   83522:	5975      	ldr	r5, [r6, r5]
   83524:	f015 0f08 	tst.w	r5, #8
   83528:	d016      	beq.n	83558 <udd_ep_trans_done+0x74>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8352a:	f102 0508 	add.w	r5, r2, #8
   8352e:	016d      	lsls	r5, r5, #5
   83530:	5976      	ldr	r6, [r6, r5]
   83532:	f006 0607 	and.w	r6, r6, #7
   83536:	2508      	movs	r5, #8
   83538:	40b5      	lsls	r5, r6
   8353a:	3d01      	subs	r5, #1
   8353c:	420d      	tst	r5, r1
   8353e:	d016      	beq.n	8356e <udd_ep_trans_done+0x8a>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   83540:	f04c 0c08 	orr.w	ip, ip, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83544:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   83548:	4e42      	ldr	r6, [pc, #264]	; (83654 <udd_ep_trans_done+0x170>)
   8354a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   8354e:	7d2e      	ldrb	r6, [r5, #20]
   83550:	f36f 0641 	bfc	r6, #1, #1
   83554:	752e      	strb	r6, [r5, #20]
   83556:	e00a      	b.n	8356e <udd_ep_trans_done+0x8a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83558:	f102 0508 	add.w	r5, r2, #8
   8355c:	016d      	lsls	r5, r5, #5
   8355e:	4e3e      	ldr	r6, [pc, #248]	; (83658 <udd_ep_trans_done+0x174>)
   83560:	5975      	ldr	r5, [r6, r5]
   83562:	f3c5 1501 	ubfx	r5, r5, #4, #2
   83566:	2d01      	cmp	r5, #1
   83568:	d03f      	beq.n	835ea <udd_ep_trans_done+0x106>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   8356a:	f04c 0c14 	orr.w	ip, ip, #20
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8356e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   83572:	4e38      	ldr	r6, [pc, #224]	; (83654 <udd_ep_trans_done+0x170>)
   83574:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   83578:	686d      	ldr	r5, [r5, #4]
   8357a:	4425      	add	r5, r4
   8357c:	4c37      	ldr	r4, [pc, #220]	; (8365c <udd_ep_trans_done+0x178>)
   8357e:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   83582:	6065      	str	r5, [r4, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   83584:	f04c 0521 	orr.w	r5, ip, #33	; 0x21
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83588:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   8358c:	b672      	cpsid	i
   8358e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83592:	4f33      	ldr	r7, [pc, #204]	; (83660 <udd_ep_trans_done+0x17c>)
   83594:	f04f 0c00 	mov.w	ip, #0
   83598:	f887 c000 	strb.w	ip, [r7]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   8359c:	68e7      	ldr	r7, [r4, #12]
   8359e:	f017 0f10 	tst.w	r7, #16
   835a2:	d02d      	beq.n	83600 <udd_ep_trans_done+0x11c>
	if (cpu_irq_is_enabled_flags(flags))
   835a4:	b92e      	cbnz	r6, 835b2 <udd_ep_trans_done+0xce>
		cpu_irq_enable();
   835a6:	492e      	ldr	r1, [pc, #184]	; (83660 <udd_ep_trans_done+0x17c>)
   835a8:	2401      	movs	r4, #1
   835aa:	700c      	strb	r4, [r1, #0]
   835ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   835b0:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   835b2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   835b6:	4c27      	ldr	r4, [pc, #156]	; (83654 <udd_ep_trans_done+0x170>)
   835b8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   835bc:	68cc      	ldr	r4, [r1, #12]
   835be:	608c      	str	r4, [r1, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   835c0:	f102 0108 	add.w	r1, r2, #8
   835c4:	0149      	lsls	r1, r1, #5
   835c6:	4c24      	ldr	r4, [pc, #144]	; (83658 <udd_ep_trans_done+0x174>)
   835c8:	5861      	ldr	r1, [r4, r1]
   835ca:	f011 0f08 	tst.w	r1, #8
   835ce:	d008      	beq.n	835e2 <udd_ep_trans_done+0xfe>
		if (ptr_job->b_shortpacket) {
   835d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   835d4:	491f      	ldr	r1, [pc, #124]	; (83654 <udd_ep_trans_done+0x170>)
   835d6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   835da:	7d1b      	ldrb	r3, [r3, #20]
   835dc:	f013 0f02 	tst.w	r3, #2
   835e0:	d129      	bne.n	83636 <udd_ep_trans_done+0x152>
			udd_enable_endpoint_interrupt(ep);
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   835e2:	2100      	movs	r1, #0
   835e4:	4b1f      	ldr	r3, [pc, #124]	; (83664 <udd_ep_trans_done+0x180>)
   835e6:	4798      	blx	r3
}
   835e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   835ea:	f102 0508 	add.w	r5, r2, #8
   835ee:	016d      	lsls	r5, r5, #5
   835f0:	5976      	ldr	r6, [r6, r5]
   835f2:	f006 0607 	and.w	r6, r6, #7
   835f6:	2508      	movs	r5, #8
   835f8:	40b5      	lsls	r5, r6
   835fa:	428d      	cmp	r5, r1
   835fc:	d3b7      	bcc.n	8356e <udd_ep_trans_done+0x8a>
   835fe:	e7b4      	b.n	8356a <udd_ep_trans_done+0x86>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   83600:	60a5      	str	r5, [r4, #8]
			ptr_job->buf_cnt += next_trans;
   83602:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   83606:	4a13      	ldr	r2, [pc, #76]	; (83654 <udd_ep_trans_done+0x170>)
   83608:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   8360c:	68d0      	ldr	r0, [r2, #12]
   8360e:	4408      	add	r0, r1
   83610:	60d0      	str	r0, [r2, #12]
			ptr_job->buf_load = next_trans;
   83612:	6111      	str	r1, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   83614:	4810      	ldr	r0, [pc, #64]	; (83658 <udd_ep_trans_done+0x174>)
   83616:	6902      	ldr	r2, [r0, #16]
   83618:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8361c:	fa01 f303 	lsl.w	r3, r1, r3
   83620:	4313      	orrs	r3, r2
   83622:	6103      	str	r3, [r0, #16]
	if (cpu_irq_is_enabled_flags(flags))
   83624:	2e00      	cmp	r6, #0
   83626:	d1df      	bne.n	835e8 <udd_ep_trans_done+0x104>
		cpu_irq_enable();
   83628:	4b0d      	ldr	r3, [pc, #52]	; (83660 <udd_ep_trans_done+0x17c>)
   8362a:	2201      	movs	r2, #1
   8362c:	701a      	strb	r2, [r3, #0]
   8362e:	f3bf 8f5f 	dmb	sy
   83632:	b662      	cpsie	i
			return;
   83634:	e7d8      	b.n	835e8 <udd_ep_trans_done+0x104>
			udd_enable_tx_pkt_ready_interrupt(ep);
   83636:	f102 0108 	add.w	r1, r2, #8
   8363a:	eb04 1141 	add.w	r1, r4, r1, lsl #5
   8363e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83642:	6048      	str	r0, [r1, #4]
			udd_enable_endpoint_interrupt(ep);
   83644:	6921      	ldr	r1, [r4, #16]
   83646:	f44f 7080 	mov.w	r0, #256	; 0x100
   8364a:	fa00 f202 	lsl.w	r2, r0, r2
   8364e:	4311      	orrs	r1, r2
   83650:	6121      	str	r1, [r4, #16]
			return;
   83652:	e7c9      	b.n	835e8 <udd_ep_trans_done+0x104>
   83654:	20001900 	.word	0x20001900
   83658:	400a4000 	.word	0x400a4000
   8365c:	400a4300 	.word	0x400a4300
   83660:	20000354 	.word	0x20000354
   83664:	0008345d 	.word	0x0008345d

00083668 <udd_ep_interrupt>:
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   83668:	2201      	movs	r2, #1
   8366a:	2a02      	cmp	r2, #2
   8366c:	f200 8099 	bhi.w	837a2 <udd_ep_interrupt+0x13a>
{
   83670:	b538      	push	{r3, r4, r5, lr}
   83672:	e030      	b.n	836d6 <udd_ep_interrupt+0x6e>

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   83674:	484c      	ldr	r0, [pc, #304]	; (837a8 <udd_ep_interrupt+0x140>)
   83676:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   8367a:	68c4      	ldr	r4, [r0, #12]
   8367c:	f014 0f01 	tst.w	r4, #1
   83680:	f040 808d 	bne.w	8379e <udd_ep_interrupt+0x136>
					& UDPHS_DMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   83684:	4d49      	ldr	r5, [pc, #292]	; (837ac <udd_ep_interrupt+0x144>)
   83686:	692c      	ldr	r4, [r5, #16]
   83688:	ea24 0303 	bic.w	r3, r4, r3
   8368c:	612b      	str	r3, [r5, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8368e:	68c3      	ldr	r3, [r0, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   83690:	0c1b      	lsrs	r3, r3, #16
   83692:	d00c      	beq.n	836ae <udd_ep_interrupt+0x46>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   83694:	4c46      	ldr	r4, [pc, #280]	; (837b0 <udd_ep_interrupt+0x148>)
   83696:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
   8369a:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8369e:	4420      	add	r0, r4
   836a0:	68c5      	ldr	r5, [r0, #12]
   836a2:	1aeb      	subs	r3, r5, r3
   836a4:	60c3      	str	r3, [r0, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   836a6:	4661      	mov	r1, ip
   836a8:	00c8      	lsls	r0, r1, #3
   836aa:	4404      	add	r4, r0
   836ac:	60a3      	str	r3, [r4, #8]
			}
			udd_ep_trans_done(ep);
   836ae:	4610      	mov	r0, r2
   836b0:	4b40      	ldr	r3, [pc, #256]	; (837b4 <udd_ep_interrupt+0x14c>)
   836b2:	4798      	blx	r3
			return true;
   836b4:	2001      	movs	r0, #1
   836b6:	e071      	b.n	8379c <udd_ep_interrupt+0x134>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   836b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   836bc:	f8ce 1108 	str.w	r1, [lr, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   836c0:	f8ce 1114 	str.w	r1, [lr, #276]	; 0x114
				udd_ep_finish_job(ptr_job, false, ep);
   836c4:	2100      	movs	r1, #0
   836c6:	4b3c      	ldr	r3, [pc, #240]	; (837b8 <udd_ep_interrupt+0x150>)
   836c8:	4798      	blx	r3
				return true;
   836ca:	2001      	movs	r0, #1
   836cc:	e066      	b.n	8379c <udd_ep_interrupt+0x134>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   836ce:	3201      	adds	r2, #1
   836d0:	b2d2      	uxtb	r2, r2
   836d2:	2a02      	cmp	r2, #2
   836d4:	d861      	bhi.n	8379a <udd_ep_interrupt+0x132>
		ptr_job = &udd_ep_job[ep - 1];
   836d6:	4694      	mov	ip, r2
   836d8:	1e51      	subs	r1, r2, #1
   836da:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   836de:	00d8      	lsls	r0, r3, #3
   836e0:	4b33      	ldr	r3, [pc, #204]	; (837b0 <udd_ep_interrupt+0x148>)
   836e2:	4418      	add	r0, r3
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   836e4:	4b31      	ldr	r3, [pc, #196]	; (837ac <udd_ep_interrupt+0x144>)
   836e6:	691c      	ldr	r4, [r3, #16]
   836e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   836ec:	408b      	lsls	r3, r1
   836ee:	421c      	tst	r4, r3
   836f0:	d003      	beq.n	836fa <udd_ep_interrupt+0x92>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   836f2:	4c2e      	ldr	r4, [pc, #184]	; (837ac <udd_ep_interrupt+0x144>)
   836f4:	6964      	ldr	r4, [r4, #20]
   836f6:	4223      	tst	r3, r4
   836f8:	d1bc      	bne.n	83674 <udd_ep_interrupt+0xc>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   836fa:	4b2c      	ldr	r3, [pc, #176]	; (837ac <udd_ep_interrupt+0x144>)
   836fc:	691c      	ldr	r4, [r3, #16]
   836fe:	f44f 7380 	mov.w	r3, #256	; 0x100
   83702:	fa03 f30c 	lsl.w	r3, r3, ip
   83706:	421c      	tst	r4, r3
   83708:	d0e1      	beq.n	836ce <udd_ep_interrupt+0x66>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   8370a:	ea4f 1e4c 	mov.w	lr, ip, lsl #5
   8370e:	f10e 2e40 	add.w	lr, lr, #1073758208	; 0x40004000
   83712:	f50e 2e20 	add.w	lr, lr, #655360	; 0xa0000
   83716:	f8de 410c 	ldr.w	r4, [lr, #268]	; 0x10c
   8371a:	f414 6f00 	tst.w	r4, #2048	; 0x800
   8371e:	d004      	beq.n	8372a <udd_ep_interrupt+0xc2>
					&& !Is_udd_tx_pkt_ready(ep)) {
   83720:	f8de 411c 	ldr.w	r4, [lr, #284]	; 0x11c
   83724:	f414 6f00 	tst.w	r4, #2048	; 0x800
   83728:	d0c6      	beq.n	836b8 <udd_ep_interrupt+0x50>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8372a:	ea4f 104c 	mov.w	r0, ip, lsl #5
   8372e:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   83732:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   83736:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   8373a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   8373e:	d0c6      	beq.n	836ce <udd_ep_interrupt+0x66>
					&& (0 == udd_nb_busy_bank(ep))) {
   83740:	ea4f 104c 	mov.w	r0, ip, lsl #5
   83744:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   83748:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   8374c:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   83750:	f410 2f40 	tst.w	r0, #786432	; 0xc0000
   83754:	d1bb      	bne.n	836ce <udd_ep_interrupt+0x66>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   83756:	4a15      	ldr	r2, [pc, #84]	; (837ac <udd_ep_interrupt+0x144>)
   83758:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
   8375c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   83760:	f8cc 0108 	str.w	r0, [ip, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   83764:	6910      	ldr	r0, [r2, #16]
   83766:	ea20 0303 	bic.w	r3, r0, r3
   8376a:	6113      	str	r3, [r2, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8376c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   83770:	00ca      	lsls	r2, r1, #3
   83772:	4b0f      	ldr	r3, [pc, #60]	; (837b0 <udd_ep_interrupt+0x148>)
   83774:	4413      	add	r3, r2
   83776:	7d1a      	ldrb	r2, [r3, #20]
   83778:	f36f 0282 	bfc	r2, #2, #1
   8377c:	751a      	strb	r2, [r3, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   8377e:	f8dc 3108 	ldr.w	r3, [ip, #264]	; 0x108
   83782:	f023 0302 	bic.w	r3, r3, #2
   83786:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   8378a:	2320      	movs	r3, #32
   8378c:	f8cc 3114 	str.w	r3, [ip, #276]	; 0x114
				udd_reset_data_toggle(ep);
   83790:	2340      	movs	r3, #64	; 0x40
   83792:	f8cc 3118 	str.w	r3, [ip, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   83796:	2001      	movs	r0, #1
   83798:	e000      	b.n	8379c <udd_ep_interrupt+0x134>
			}
		}
	}
	return false;
   8379a:	2000      	movs	r0, #0
}
   8379c:	bd38      	pop	{r3, r4, r5, pc}
				return true; // Ignore EOT_STA interrupt
   8379e:	2001      	movs	r0, #1
   837a0:	e7fc      	b.n	8379c <udd_ep_interrupt+0x134>
	return false;
   837a2:	2000      	movs	r0, #0
}
   837a4:	4770      	bx	lr
   837a6:	bf00      	nop
   837a8:	400a4300 	.word	0x400a4300
   837ac:	400a4000 	.word	0x400a4000
   837b0:	20001900 	.word	0x20001900
   837b4:	000834e5 	.word	0x000834e5
   837b8:	0008345d 	.word	0x0008345d

000837bc <udd_ctrl_setup_received>:
{
   837bc:	b510      	push	{r4, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   837be:	4b33      	ldr	r3, [pc, #204]	; (8388c <udd_ctrl_setup_received+0xd0>)
   837c0:	781b      	ldrb	r3, [r3, #0]
   837c2:	b94b      	cbnz	r3, 837d8 <udd_ctrl_setup_received+0x1c>
	if (8 != udd_byte_count(0)) {
   837c4:	4b32      	ldr	r3, [pc, #200]	; (83890 <udd_ctrl_setup_received+0xd4>)
   837c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   837ca:	f3c3 530a 	ubfx	r3, r3, #20, #11
   837ce:	2b08      	cmp	r3, #8
   837d0:	d107      	bne.n	837e2 <udd_ctrl_setup_received+0x26>
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   837d2:	4a30      	ldr	r2, [pc, #192]	; (83894 <udd_ctrl_setup_received+0xd8>)
	for (i = 0; i < 8; i++) {
   837d4:	2300      	movs	r3, #0
   837d6:	e012      	b.n	837fe <udd_ctrl_setup_received+0x42>
		udd_ctrl_endofrequest();
   837d8:	4b2f      	ldr	r3, [pc, #188]	; (83898 <udd_ctrl_setup_received+0xdc>)
   837da:	4798      	blx	r3
		udd_ctrl_init();
   837dc:	4b2f      	ldr	r3, [pc, #188]	; (8389c <udd_ctrl_setup_received+0xe0>)
   837de:	4798      	blx	r3
   837e0:	e7f0      	b.n	837c4 <udd_ctrl_setup_received+0x8>
		udd_ctrl_stall_data();
   837e2:	4b2f      	ldr	r3, [pc, #188]	; (838a0 <udd_ctrl_setup_received+0xe4>)
   837e4:	4798      	blx	r3
		udd_ack_setup_received(0);
   837e6:	4b2a      	ldr	r3, [pc, #168]	; (83890 <udd_ctrl_setup_received+0xd4>)
   837e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   837ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
   837f0:	bd10      	pop	{r4, pc}
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   837f2:	f812 0b01 	ldrb.w	r0, [r2], #1
   837f6:	492b      	ldr	r1, [pc, #172]	; (838a4 <udd_ctrl_setup_received+0xe8>)
   837f8:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < 8; i++) {
   837fa:	3301      	adds	r3, #1
   837fc:	b2db      	uxtb	r3, r3
   837fe:	2b07      	cmp	r3, #7
   83800:	d9f7      	bls.n	837f2 <udd_ctrl_setup_received+0x36>
	if (udc_process_setup() == false) {
   83802:	4b29      	ldr	r3, [pc, #164]	; (838a8 <udd_ctrl_setup_received+0xec>)
   83804:	4798      	blx	r3
   83806:	b358      	cbz	r0, 83860 <udd_ctrl_setup_received+0xa4>
	udd_ack_setup_received(0);
   83808:	4b21      	ldr	r3, [pc, #132]	; (83890 <udd_ctrl_setup_received+0xd4>)
   8380a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8380e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   83812:	4b24      	ldr	r3, [pc, #144]	; (838a4 <udd_ctrl_setup_received+0xe8>)
   83814:	f993 3000 	ldrsb.w	r3, [r3]
   83818:	2b00      	cmp	r3, #0
   8381a:	db29      	blt.n	83870 <udd_ctrl_setup_received+0xb4>
		if (0 == udd_g_ctrlreq.req.wLength) {
   8381c:	4b21      	ldr	r3, [pc, #132]	; (838a4 <udd_ctrl_setup_received+0xe8>)
   8381e:	88db      	ldrh	r3, [r3, #6]
   83820:	2b00      	cmp	r3, #0
   83822:	d030      	beq.n	83886 <udd_ctrl_setup_received+0xca>
		udd_ctrl_prev_payload_buf_cnt = 0;
   83824:	2300      	movs	r3, #0
   83826:	4a21      	ldr	r2, [pc, #132]	; (838ac <udd_ctrl_setup_received+0xf0>)
   83828:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8382a:	4a21      	ldr	r2, [pc, #132]	; (838b0 <udd_ctrl_setup_received+0xf4>)
   8382c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8382e:	4a17      	ldr	r2, [pc, #92]	; (8388c <udd_ctrl_setup_received+0xd0>)
   83830:	2101      	movs	r1, #1
   83832:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   83834:	4a16      	ldr	r2, [pc, #88]	; (83890 <udd_ctrl_setup_received+0xd4>)
   83836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8383a:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8383e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   83842:	b672      	cpsid	i
   83844:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83848:	4c1a      	ldr	r4, [pc, #104]	; (838b4 <udd_ctrl_setup_received+0xf8>)
   8384a:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   8384c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83850:	2800      	cmp	r0, #0
   83852:	d1cd      	bne.n	837f0 <udd_ctrl_setup_received+0x34>
		cpu_irq_enable();
   83854:	2201      	movs	r2, #1
   83856:	7022      	strb	r2, [r4, #0]
   83858:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8385c:	b662      	cpsie	i
}
   8385e:	e7c7      	b.n	837f0 <udd_ctrl_setup_received+0x34>
		udd_ctrl_stall_data();
   83860:	4b0f      	ldr	r3, [pc, #60]	; (838a0 <udd_ctrl_setup_received+0xe4>)
   83862:	4798      	blx	r3
		udd_ack_setup_received(0);
   83864:	4b0a      	ldr	r3, [pc, #40]	; (83890 <udd_ctrl_setup_received+0xd4>)
   83866:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8386a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   8386e:	e7bf      	b.n	837f0 <udd_ctrl_setup_received+0x34>
		udd_ctrl_prev_payload_buf_cnt = 0;
   83870:	2300      	movs	r3, #0
   83872:	4a0e      	ldr	r2, [pc, #56]	; (838ac <udd_ctrl_setup_received+0xf0>)
   83874:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   83876:	4a0e      	ldr	r2, [pc, #56]	; (838b0 <udd_ctrl_setup_received+0xf4>)
   83878:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8387a:	4b04      	ldr	r3, [pc, #16]	; (8388c <udd_ctrl_setup_received+0xd0>)
   8387c:	2202      	movs	r2, #2
   8387e:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   83880:	4b0d      	ldr	r3, [pc, #52]	; (838b8 <udd_ctrl_setup_received+0xfc>)
   83882:	4798      	blx	r3
   83884:	e7b4      	b.n	837f0 <udd_ctrl_setup_received+0x34>
			udd_ctrl_send_zlp_in();
   83886:	4b0d      	ldr	r3, [pc, #52]	; (838bc <udd_ctrl_setup_received+0x100>)
   83888:	4798      	blx	r3
			return;
   8388a:	e7b1      	b.n	837f0 <udd_ctrl_setup_received+0x34>
   8388c:	200018fe 	.word	0x200018fe
   83890:	400a4000 	.word	0x400a4000
   83894:	20180000 	.word	0x20180000
   83898:	0008317d 	.word	0x0008317d
   8389c:	0008301d 	.word	0x0008301d
   838a0:	00083099 	.word	0x00083099
   838a4:	20001930 	.word	0x20001930
   838a8:	00082b85 	.word	0x00082b85
   838ac:	200018fc 	.word	0x200018fc
   838b0:	200018fa 	.word	0x200018fa
   838b4:	20000354 	.word	0x20000354
   838b8:	0008318d 	.word	0x0008318d
   838bc:	000830b1 	.word	0x000830b1

000838c0 <udd_ctrl_interrupt>:
{
   838c0:	b508      	push	{r3, lr}
	uint32_t status = udd_get_endpoint_status(0);
   838c2:	4a27      	ldr	r2, [pc, #156]	; (83960 <udd_ctrl_interrupt+0xa0>)
   838c4:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   838c8:	6952      	ldr	r2, [r2, #20]
   838ca:	f412 7f80 	tst.w	r2, #256	; 0x100
   838ce:	d045      	beq.n	8395c <udd_ctrl_interrupt+0x9c>
	udd_disable_nak_in_interrupt(0);
   838d0:	4a23      	ldr	r2, [pc, #140]	; (83960 <udd_ctrl_interrupt+0xa0>)
   838d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   838d6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   838da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   838de:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   838e2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   838e6:	d11b      	bne.n	83920 <udd_ctrl_interrupt+0x60>
	if (Is_udd_endpoint_status_in_sent(status)
   838e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
   838ec:	d005      	beq.n	838fa <udd_ctrl_interrupt+0x3a>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   838ee:	4a1c      	ldr	r2, [pc, #112]	; (83960 <udd_ctrl_interrupt+0xa0>)
   838f0:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   838f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
   838f8:	d116      	bne.n	83928 <udd_ctrl_interrupt+0x68>
	if (Is_udd_endpoint_status_out_received(status)) {
   838fa:	f413 7f00 	tst.w	r3, #512	; 0x200
   838fe:	d117      	bne.n	83930 <udd_ctrl_interrupt+0x70>
	if (Is_udd_endpoint_status_stall(status)) {
   83900:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   83904:	d004      	beq.n	83910 <udd_ctrl_interrupt+0x50>
		udd_ack_stall(0);
   83906:	4a16      	ldr	r2, [pc, #88]	; (83960 <udd_ctrl_interrupt+0xa0>)
   83908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8390c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   83910:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   83914:	d110      	bne.n	83938 <udd_ctrl_interrupt+0x78>
	if (Is_udd_endpoint_status_nak_in(status)) {
   83916:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   8391a:	d116      	bne.n	8394a <udd_ctrl_interrupt+0x8a>
	return false;
   8391c:	2000      	movs	r0, #0
   8391e:	e01e      	b.n	8395e <udd_ctrl_interrupt+0x9e>
		udd_ctrl_setup_received();
   83920:	4b10      	ldr	r3, [pc, #64]	; (83964 <udd_ctrl_interrupt+0xa4>)
   83922:	4798      	blx	r3
		return true;
   83924:	2001      	movs	r0, #1
   83926:	e01a      	b.n	8395e <udd_ctrl_interrupt+0x9e>
		udd_ctrl_in_sent();
   83928:	4b0f      	ldr	r3, [pc, #60]	; (83968 <udd_ctrl_interrupt+0xa8>)
   8392a:	4798      	blx	r3
		return true;
   8392c:	2001      	movs	r0, #1
   8392e:	e016      	b.n	8395e <udd_ctrl_interrupt+0x9e>
		udd_ctrl_out_received();
   83930:	4b0e      	ldr	r3, [pc, #56]	; (8396c <udd_ctrl_interrupt+0xac>)
   83932:	4798      	blx	r3
		return true;
   83934:	2001      	movs	r0, #1
   83936:	e012      	b.n	8395e <udd_ctrl_interrupt+0x9e>
		udd_ack_nak_out(0);
   83938:	4b09      	ldr	r3, [pc, #36]	; (83960 <udd_ctrl_interrupt+0xa0>)
   8393a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8393e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   83942:	4b0b      	ldr	r3, [pc, #44]	; (83970 <udd_ctrl_interrupt+0xb0>)
   83944:	4798      	blx	r3
		return true;
   83946:	2001      	movs	r0, #1
   83948:	e009      	b.n	8395e <udd_ctrl_interrupt+0x9e>
		udd_ack_nak_in(0);
   8394a:	4b05      	ldr	r3, [pc, #20]	; (83960 <udd_ctrl_interrupt+0xa0>)
   8394c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83950:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   83954:	4b07      	ldr	r3, [pc, #28]	; (83974 <udd_ctrl_interrupt+0xb4>)
   83956:	4798      	blx	r3
		return true;
   83958:	2001      	movs	r0, #1
   8395a:	e000      	b.n	8395e <udd_ctrl_interrupt+0x9e>
		return false; // No interrupt events on control endpoint
   8395c:	2000      	movs	r0, #0
}
   8395e:	bd08      	pop	{r3, pc}
   83960:	400a4000 	.word	0x400a4000
   83964:	000837bd 	.word	0x000837bd
   83968:	0008318d 	.word	0x0008318d
   8396c:	000832cd 	.word	0x000832cd
   83970:	00083071 	.word	0x00083071
   83974:	00083105 	.word	0x00083105

00083978 <UDPHS_Handler>:
{
   83978:	b510      	push	{r4, lr}
	udd_enable_periph_ck();
   8397a:	201d      	movs	r0, #29
   8397c:	4b49      	ldr	r3, [pc, #292]	; (83aa4 <UDPHS_Handler+0x12c>)
   8397e:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   83980:	4b49      	ldr	r3, [pc, #292]	; (83aa8 <UDPHS_Handler+0x130>)
   83982:	4798      	blx	r3
   83984:	b920      	cbnz	r0, 83990 <UDPHS_Handler+0x18>
   83986:	4b49      	ldr	r3, [pc, #292]	; (83aac <UDPHS_Handler+0x134>)
   83988:	695b      	ldr	r3, [r3, #20]
   8398a:	f013 0f02 	tst.w	r3, #2
   8398e:	d040      	beq.n	83a12 <UDPHS_Handler+0x9a>
	if (Is_udd_sof()) {
   83990:	4b46      	ldr	r3, [pc, #280]	; (83aac <UDPHS_Handler+0x134>)
   83992:	695b      	ldr	r3, [r3, #20]
   83994:	f013 0f08 	tst.w	r3, #8
   83998:	d142      	bne.n	83a20 <UDPHS_Handler+0xa8>
	if (Is_udd_msof()) {
   8399a:	4b44      	ldr	r3, [pc, #272]	; (83aac <UDPHS_Handler+0x134>)
   8399c:	695b      	ldr	r3, [r3, #20]
   8399e:	f013 0f04 	tst.w	r3, #4
   839a2:	d14a      	bne.n	83a3a <UDPHS_Handler+0xc2>
	if (udd_ctrl_interrupt()) {
   839a4:	4b42      	ldr	r3, [pc, #264]	; (83ab0 <UDPHS_Handler+0x138>)
   839a6:	4798      	blx	r3
   839a8:	2800      	cmp	r0, #0
   839aa:	d142      	bne.n	83a32 <UDPHS_Handler+0xba>
	if (udd_ep_interrupt()) {
   839ac:	4b41      	ldr	r3, [pc, #260]	; (83ab4 <UDPHS_Handler+0x13c>)
   839ae:	4798      	blx	r3
   839b0:	2800      	cmp	r0, #0
   839b2:	d13e      	bne.n	83a32 <UDPHS_Handler+0xba>
	if (Is_udd_reset()) {
   839b4:	4b3d      	ldr	r3, [pc, #244]	; (83aac <UDPHS_Handler+0x134>)
   839b6:	695b      	ldr	r3, [r3, #20]
   839b8:	f013 0f10 	tst.w	r3, #16
   839bc:	d143      	bne.n	83a46 <UDPHS_Handler+0xce>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   839be:	4b3b      	ldr	r3, [pc, #236]	; (83aac <UDPHS_Handler+0x134>)
   839c0:	691b      	ldr	r3, [r3, #16]
   839c2:	f013 0f02 	tst.w	r3, #2
   839c6:	d004      	beq.n	839d2 <UDPHS_Handler+0x5a>
   839c8:	4b38      	ldr	r3, [pc, #224]	; (83aac <UDPHS_Handler+0x134>)
   839ca:	695b      	ldr	r3, [r3, #20]
   839cc:	f013 0f02 	tst.w	r3, #2
   839d0:	d151      	bne.n	83a76 <UDPHS_Handler+0xfe>
	if (Is_udd_wake_up()) {
   839d2:	4b36      	ldr	r3, [pc, #216]	; (83aac <UDPHS_Handler+0x134>)
   839d4:	695b      	ldr	r3, [r3, #20]
   839d6:	f013 0f20 	tst.w	r3, #32
   839da:	d02a      	beq.n	83a32 <UDPHS_Handler+0xba>
		udd_sleep_mode(true); // Enter in IDLE mode
   839dc:	2001      	movs	r0, #1
   839de:	4b36      	ldr	r3, [pc, #216]	; (83ab8 <UDPHS_Handler+0x140>)
   839e0:	4798      	blx	r3
		udd_ack_suspend();
   839e2:	4b32      	ldr	r3, [pc, #200]	; (83aac <UDPHS_Handler+0x134>)
   839e4:	2202      	movs	r2, #2
   839e6:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   839e8:	2220      	movs	r2, #32
   839ea:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   839ec:	691a      	ldr	r2, [r3, #16]
   839ee:	f022 0220 	bic.w	r2, r2, #32
   839f2:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   839f4:	691a      	ldr	r2, [r3, #16]
   839f6:	f042 0202 	orr.w	r2, r2, #2
   839fa:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   839fc:	691a      	ldr	r2, [r3, #16]
   839fe:	f042 0208 	orr.w	r2, r2, #8
   83a02:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   83a04:	691a      	ldr	r2, [r3, #16]
   83a06:	f042 0204 	orr.w	r2, r2, #4
   83a0a:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   83a0c:	4b2b      	ldr	r3, [pc, #172]	; (83abc <UDPHS_Handler+0x144>)
   83a0e:	4798      	blx	r3
		goto udd_interrupt_end;
   83a10:	e00f      	b.n	83a32 <UDPHS_Handler+0xba>
  __ASM volatile ("cpsid i");
   83a12:	b672      	cpsid	i
   83a14:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   83a18:	4b29      	ldr	r3, [pc, #164]	; (83ac0 <UDPHS_Handler+0x148>)
   83a1a:	2200      	movs	r2, #0
   83a1c:	701a      	strb	r2, [r3, #0]
		return;
   83a1e:	e008      	b.n	83a32 <UDPHS_Handler+0xba>
		udd_ack_sof();
   83a20:	4b22      	ldr	r3, [pc, #136]	; (83aac <UDPHS_Handler+0x134>)
   83a22:	2208      	movs	r2, #8
   83a24:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   83a26:	695b      	ldr	r3, [r3, #20]
   83a28:	f013 0f01 	tst.w	r3, #1
   83a2c:	d002      	beq.n	83a34 <UDPHS_Handler+0xbc>
		UDC_SOF_EVENT();
   83a2e:	4b25      	ldr	r3, [pc, #148]	; (83ac4 <UDPHS_Handler+0x14c>)
   83a30:	4798      	blx	r3
}
   83a32:	bd10      	pop	{r4, pc}
			udc_sof_notify();
   83a34:	4b24      	ldr	r3, [pc, #144]	; (83ac8 <UDPHS_Handler+0x150>)
   83a36:	4798      	blx	r3
   83a38:	e7f9      	b.n	83a2e <UDPHS_Handler+0xb6>
		udd_ack_msof();
   83a3a:	4b1c      	ldr	r3, [pc, #112]	; (83aac <UDPHS_Handler+0x134>)
   83a3c:	2204      	movs	r2, #4
   83a3e:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   83a40:	4b21      	ldr	r3, [pc, #132]	; (83ac8 <UDPHS_Handler+0x150>)
   83a42:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   83a44:	e7f5      	b.n	83a32 <UDPHS_Handler+0xba>
		udd_ack_reset();
   83a46:	4c19      	ldr	r4, [pc, #100]	; (83aac <UDPHS_Handler+0x134>)
   83a48:	2310      	movs	r3, #16
   83a4a:	61a3      	str	r3, [r4, #24]
		udd_ep_job_table_kill();
   83a4c:	4b1f      	ldr	r3, [pc, #124]	; (83acc <UDPHS_Handler+0x154>)
   83a4e:	4798      	blx	r3
		udc_reset();
   83a50:	4b1f      	ldr	r3, [pc, #124]	; (83ad0 <UDPHS_Handler+0x158>)
   83a52:	4798      	blx	r3
		udd_reset_ep_ctrl();
   83a54:	4b1f      	ldr	r3, [pc, #124]	; (83ad4 <UDPHS_Handler+0x15c>)
   83a56:	4798      	blx	r3
		udd_ctrl_init();
   83a58:	4b1f      	ldr	r3, [pc, #124]	; (83ad8 <UDPHS_Handler+0x160>)
   83a5a:	4798      	blx	r3
		udd_enable_sof_interrupt();
   83a5c:	6923      	ldr	r3, [r4, #16]
   83a5e:	f043 0308 	orr.w	r3, r3, #8
   83a62:	6123      	str	r3, [r4, #16]
		udd_enable_msof_interrupt();
   83a64:	6923      	ldr	r3, [r4, #16]
   83a66:	f043 0304 	orr.w	r3, r3, #4
   83a6a:	6123      	str	r3, [r4, #16]
		udd_enable_suspend_interrupt();
   83a6c:	6923      	ldr	r3, [r4, #16]
   83a6e:	f043 0302 	orr.w	r3, r3, #2
   83a72:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
   83a74:	e7dd      	b.n	83a32 <UDPHS_Handler+0xba>
		udd_ack_wake_up();
   83a76:	4b0d      	ldr	r3, [pc, #52]	; (83aac <UDPHS_Handler+0x134>)
   83a78:	2220      	movs	r2, #32
   83a7a:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   83a7c:	691a      	ldr	r2, [r3, #16]
   83a7e:	f022 0202 	bic.w	r2, r2, #2
   83a82:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   83a84:	691a      	ldr	r2, [r3, #16]
   83a86:	f042 0220 	orr.w	r2, r2, #32
   83a8a:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   83a8c:	2202      	movs	r2, #2
   83a8e:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   83a90:	201d      	movs	r0, #29
   83a92:	4b12      	ldr	r3, [pc, #72]	; (83adc <UDPHS_Handler+0x164>)
   83a94:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   83a96:	4b12      	ldr	r3, [pc, #72]	; (83ae0 <UDPHS_Handler+0x168>)
   83a98:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   83a9a:	2000      	movs	r0, #0
   83a9c:	4b06      	ldr	r3, [pc, #24]	; (83ab8 <UDPHS_Handler+0x140>)
   83a9e:	4798      	blx	r3
		goto udd_interrupt_end;
   83aa0:	e7c7      	b.n	83a32 <UDPHS_Handler+0xba>
   83aa2:	bf00      	nop
   83aa4:	000847d5 	.word	0x000847d5
   83aa8:	00084e09 	.word	0x00084e09
   83aac:	400a4000 	.word	0x400a4000
   83ab0:	000838c1 	.word	0x000838c1
   83ab4:	00083669 	.word	0x00083669
   83ab8:	00082f39 	.word	0x00082f39
   83abc:	00081819 	.word	0x00081819
   83ac0:	20000354 	.word	0x20000354
   83ac4:	00081825 	.word	0x00081825
   83ac8:	00082b4d 	.word	0x00082b4d
   83acc:	00083495 	.word	0x00083495
   83ad0:	000828b1 	.word	0x000828b1
   83ad4:	00082fb1 	.word	0x00082fb1
   83ad8:	0008301d 	.word	0x0008301d
   83adc:	00084809 	.word	0x00084809
   83ae0:	00081801 	.word	0x00081801

00083ae4 <udd_attach>:
{
   83ae4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83ae6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   83aea:	b672      	cpsid	i
   83aec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83af0:	4b1d      	ldr	r3, [pc, #116]	; (83b68 <udd_attach+0x84>)
   83af2:	2200      	movs	r2, #0
   83af4:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   83af6:	2001      	movs	r0, #1
   83af8:	4b1c      	ldr	r3, [pc, #112]	; (83b6c <udd_attach+0x88>)
   83afa:	4798      	blx	r3
	udd_enable_periph_ck();
   83afc:	201d      	movs	r0, #29
   83afe:	4b1c      	ldr	r3, [pc, #112]	; (83b70 <udd_attach+0x8c>)
   83b00:	4798      	blx	r3
	udd_attach_device();
   83b02:	4b1c      	ldr	r3, [pc, #112]	; (83b74 <udd_attach+0x90>)
   83b04:	681a      	ldr	r2, [r3, #0]
   83b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   83b0a:	601a      	str	r2, [r3, #0]
   83b0c:	681a      	ldr	r2, [r3, #0]
   83b0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   83b12:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   83b14:	691a      	ldr	r2, [r3, #16]
   83b16:	f042 0210 	orr.w	r2, r2, #16
   83b1a:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   83b1c:	691a      	ldr	r2, [r3, #16]
   83b1e:	f042 0202 	orr.w	r2, r2, #2
   83b22:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   83b24:	691a      	ldr	r2, [r3, #16]
   83b26:	f042 0220 	orr.w	r2, r2, #32
   83b2a:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   83b2c:	691a      	ldr	r2, [r3, #16]
   83b2e:	f042 0208 	orr.w	r2, r2, #8
   83b32:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   83b34:	691a      	ldr	r2, [r3, #16]
   83b36:	f042 0204 	orr.w	r2, r2, #4
   83b3a:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   83b3c:	2208      	movs	r2, #8
   83b3e:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   83b40:	2204      	movs	r2, #4
   83b42:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   83b44:	2210      	movs	r2, #16
   83b46:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   83b48:	2202      	movs	r2, #2
   83b4a:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   83b4c:	2220      	movs	r2, #32
   83b4e:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   83b50:	201d      	movs	r0, #29
   83b52:	4b09      	ldr	r3, [pc, #36]	; (83b78 <udd_attach+0x94>)
   83b54:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   83b56:	b92c      	cbnz	r4, 83b64 <udd_attach+0x80>
		cpu_irq_enable();
   83b58:	4b03      	ldr	r3, [pc, #12]	; (83b68 <udd_attach+0x84>)
   83b5a:	2201      	movs	r2, #1
   83b5c:	701a      	strb	r2, [r3, #0]
   83b5e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83b62:	b662      	cpsie	i
}
   83b64:	bd10      	pop	{r4, pc}
   83b66:	bf00      	nop
   83b68:	20000354 	.word	0x20000354
   83b6c:	00082f39 	.word	0x00082f39
   83b70:	000847d5 	.word	0x000847d5
   83b74:	400a4000 	.word	0x400a4000
   83b78:	00084809 	.word	0x00084809

00083b7c <udd_enable>:
{
   83b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sysclk_enable_usb();
   83b7e:	4b20      	ldr	r3, [pc, #128]	; (83c00 <udd_enable+0x84>)
   83b80:	4798      	blx	r3
	udd_enable_periph_ck();
   83b82:	201d      	movs	r0, #29
   83b84:	4b1f      	ldr	r3, [pc, #124]	; (83c04 <udd_enable+0x88>)
   83b86:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83b88:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   83b8c:	b672      	cpsid	i
   83b8e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83b92:	4f1d      	ldr	r7, [pc, #116]	; (83c08 <udd_enable+0x8c>)
   83b94:	2500      	movs	r5, #0
   83b96:	703d      	strb	r5, [r7, #0]
	udd_enable_periph();
   83b98:	4c1c      	ldr	r4, [pc, #112]	; (83c0c <udd_enable+0x90>)
   83b9a:	6823      	ldr	r3, [r4, #0]
   83b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   83ba0:	6023      	str	r3, [r4, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83ba2:	4b1b      	ldr	r3, [pc, #108]	; (83c10 <udd_enable+0x94>)
   83ba4:	2250      	movs	r2, #80	; 0x50
   83ba6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83baa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83bae:	601a      	str	r2, [r3, #0]
	udd_ep_job_table_reset();
   83bb0:	4b18      	ldr	r3, [pc, #96]	; (83c14 <udd_enable+0x98>)
   83bb2:	4798      	blx	r3
	udd_high_speed_enable();
   83bb4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   83bb8:	f023 0303 	bic.w	r3, r3, #3
   83bbc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   83bc0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   83bc4:	4b14      	ldr	r3, [pc, #80]	; (83c18 <udd_enable+0x9c>)
   83bc6:	4798      	blx	r3
	udd_b_idle = false;
   83bc8:	4b14      	ldr	r3, [pc, #80]	; (83c1c <udd_enable+0xa0>)
   83bca:	701d      	strb	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83bcc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83bd0:	b672      	cpsid	i
   83bd2:	f3bf 8f5f 	dmb	sy
   83bd6:	703d      	strb	r5, [r7, #0]
	++sleepmgr_locks[mode];
   83bd8:	4a11      	ldr	r2, [pc, #68]	; (83c20 <udd_enable+0xa4>)
   83bda:	78d3      	ldrb	r3, [r2, #3]
   83bdc:	3301      	adds	r3, #1
   83bde:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   83be0:	b921      	cbnz	r1, 83bec <udd_enable+0x70>
		cpu_irq_enable();
   83be2:	2201      	movs	r2, #1
   83be4:	703a      	strb	r2, [r7, #0]
   83be6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83bea:	b662      	cpsie	i
	udd_attach();
   83bec:	4b0d      	ldr	r3, [pc, #52]	; (83c24 <udd_enable+0xa8>)
   83bee:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   83bf0:	b92e      	cbnz	r6, 83bfe <udd_enable+0x82>
		cpu_irq_enable();
   83bf2:	4b05      	ldr	r3, [pc, #20]	; (83c08 <udd_enable+0x8c>)
   83bf4:	2201      	movs	r2, #1
   83bf6:	701a      	strb	r2, [r3, #0]
   83bf8:	f3bf 8f5f 	dmb	sy
   83bfc:	b662      	cpsie	i
}
   83bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c00:	0008454d 	.word	0x0008454d
   83c04:	000847d5 	.word	0x000847d5
   83c08:	20000354 	.word	0x20000354
   83c0c:	400a4000 	.word	0x400a4000
   83c10:	e000e100 	.word	0xe000e100
   83c14:	00083429 	.word	0x00083429
   83c18:	0008484d 	.word	0x0008484d
   83c1c:	200018f9 	.word	0x200018f9
   83c20:	20001964 	.word	0x20001964
   83c24:	00083ae5 	.word	0x00083ae5

00083c28 <udd_detach>:
{
   83c28:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   83c2a:	201d      	movs	r0, #29
   83c2c:	4b08      	ldr	r3, [pc, #32]	; (83c50 <udd_detach+0x28>)
   83c2e:	4798      	blx	r3
	udd_detach_device();
   83c30:	4b08      	ldr	r3, [pc, #32]	; (83c54 <udd_detach+0x2c>)
   83c32:	681a      	ldr	r2, [r3, #0]
   83c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   83c38:	601a      	str	r2, [r3, #0]
   83c3a:	681a      	ldr	r2, [r3, #0]
   83c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83c40:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   83c42:	201d      	movs	r0, #29
   83c44:	4b04      	ldr	r3, [pc, #16]	; (83c58 <udd_detach+0x30>)
   83c46:	4798      	blx	r3
	udd_sleep_mode(false);
   83c48:	2000      	movs	r0, #0
   83c4a:	4b04      	ldr	r3, [pc, #16]	; (83c5c <udd_detach+0x34>)
   83c4c:	4798      	blx	r3
}
   83c4e:	bd08      	pop	{r3, pc}
   83c50:	000847d5 	.word	0x000847d5
   83c54:	400a4000 	.word	0x400a4000
   83c58:	00084809 	.word	0x00084809
   83c5c:	00082f39 	.word	0x00082f39

00083c60 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   83c60:	4b02      	ldr	r3, [pc, #8]	; (83c6c <udd_is_high_speed+0xc>)
   83c62:	6958      	ldr	r0, [r3, #20]
   83c64:	f000 0001 	and.w	r0, r0, #1
}
   83c68:	4770      	bx	lr
   83c6a:	bf00      	nop
   83c6c:	400a4000 	.word	0x400a4000

00083c70 <udd_set_address>:
	udd_disable_address();
   83c70:	4b08      	ldr	r3, [pc, #32]	; (83c94 <udd_set_address+0x24>)
   83c72:	681a      	ldr	r2, [r3, #0]
   83c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   83c78:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   83c7a:	681a      	ldr	r2, [r3, #0]
   83c7c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83c80:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   83c84:	4302      	orrs	r2, r0
   83c86:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   83c88:	681a      	ldr	r2, [r3, #0]
   83c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83c8e:	601a      	str	r2, [r3, #0]
}
   83c90:	4770      	bx	lr
   83c92:	bf00      	nop
   83c94:	400a4000 	.word	0x400a4000

00083c98 <udd_getaddress>:
	return udd_get_configured_address();
   83c98:	4b02      	ldr	r3, [pc, #8]	; (83ca4 <udd_getaddress+0xc>)
   83c9a:	6818      	ldr	r0, [r3, #0]
}
   83c9c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   83ca0:	4770      	bx	lr
   83ca2:	bf00      	nop
   83ca4:	400a4000 	.word	0x400a4000

00083ca8 <udd_get_frame_number>:
	return udd_frame_number();
   83ca8:	4b02      	ldr	r3, [pc, #8]	; (83cb4 <udd_get_frame_number+0xc>)
   83caa:	6858      	ldr	r0, [r3, #4]
}
   83cac:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   83cb0:	4770      	bx	lr
   83cb2:	bf00      	nop
   83cb4:	400a4000 	.word	0x400a4000

00083cb8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   83cb8:	4b01      	ldr	r3, [pc, #4]	; (83cc0 <udd_set_setup_payload+0x8>)
   83cba:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   83cbc:	8199      	strh	r1, [r3, #12]
}
   83cbe:	4770      	bx	lr
   83cc0:	20001930 	.word	0x20001930

00083cc4 <udd_ep_free>:
{
   83cc4:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83cc6:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   83cca:	2c02      	cmp	r4, #2
   83ccc:	d900      	bls.n	83cd0 <udd_ep_free+0xc>
}
   83cce:	bd10      	pop	{r4, pc}
	udd_disable_endpoint(ep_index);
   83cd0:	4a0c      	ldr	r2, [pc, #48]	; (83d04 <udd_ep_free+0x40>)
   83cd2:	eb02 1344 	add.w	r3, r2, r4, lsl #5
   83cd6:	2101      	movs	r1, #1
   83cd8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   83cdc:	f104 0308 	add.w	r3, r4, #8
   83ce0:	015b      	lsls	r3, r3, #5
   83ce2:	58d1      	ldr	r1, [r2, r3]
   83ce4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   83ce8:	50d1      	str	r1, [r2, r3]
	udd_ep_abort_job(ep);
   83cea:	4b07      	ldr	r3, [pc, #28]	; (83d08 <udd_ep_free+0x44>)
   83cec:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   83cee:	3c01      	subs	r4, #1
   83cf0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   83cf4:	4b05      	ldr	r3, [pc, #20]	; (83d0c <udd_ep_free+0x48>)
   83cf6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   83cfa:	7d23      	ldrb	r3, [r4, #20]
   83cfc:	f36f 0382 	bfc	r3, #2, #1
   83d00:	7523      	strb	r3, [r4, #20]
   83d02:	e7e4      	b.n	83cce <udd_ep_free+0xa>
   83d04:	400a4000 	.word	0x400a4000
   83d08:	000834c1 	.word	0x000834c1
   83d0c:	20001900 	.word	0x20001900

00083d10 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83d10:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   83d14:	1e43      	subs	r3, r0, #1
	return (Is_udd_endpoint_stall_requested(ep_index)
   83d16:	0140      	lsls	r0, r0, #5
   83d18:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   83d1c:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   83d20:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
			|| ptr_job->stall_requested);
   83d24:	f012 0f20 	tst.w	r2, #32
   83d28:	d10a      	bne.n	83d40 <udd_ep_is_halted+0x30>
   83d2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   83d2e:	4a06      	ldr	r2, [pc, #24]	; (83d48 <udd_ep_is_halted+0x38>)
   83d30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   83d34:	7d1b      	ldrb	r3, [r3, #20]
   83d36:	f013 0f04 	tst.w	r3, #4
   83d3a:	d003      	beq.n	83d44 <udd_ep_is_halted+0x34>
   83d3c:	2001      	movs	r0, #1
   83d3e:	4770      	bx	lr
   83d40:	2001      	movs	r0, #1
   83d42:	4770      	bx	lr
   83d44:	2000      	movs	r0, #0
}
   83d46:	4770      	bx	lr
   83d48:	20001900 	.word	0x20001900

00083d4c <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83d4c:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   83d50:	2b02      	cmp	r3, #2
   83d52:	d853      	bhi.n	83dfc <udd_ep_set_halt+0xb0>
	ptr_job = &udd_ep_job[ep_index - 1];
   83d54:	f103 3cff 	add.w	ip, r3, #4294967295
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   83d58:	015a      	lsls	r2, r3, #5
   83d5a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83d5e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83d62:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83d66:	f012 0f20 	tst.w	r2, #32
   83d6a:	d149      	bne.n	83e00 <udd_ep_set_halt+0xb4>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   83d6c:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
   83d70:	4926      	ldr	r1, [pc, #152]	; (83e0c <udd_ep_set_halt+0xc0>)
   83d72:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   83d76:	7d12      	ldrb	r2, [r2, #20]
   83d78:	f012 0f04 	tst.w	r2, #4
   83d7c:	d142      	bne.n	83e04 <udd_ep_set_halt+0xb8>
	if (ptr_job->busy == true) {
   83d7e:	f012 0f01 	tst.w	r2, #1
   83d82:	d141      	bne.n	83e08 <udd_ep_set_halt+0xbc>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   83d84:	f010 0f80 	tst.w	r0, #128	; 0x80
   83d88:	d113      	bne.n	83db2 <udd_ep_set_halt+0x66>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   83d8a:	015b      	lsls	r3, r3, #5
   83d8c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   83d90:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   83d94:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83d98:	f022 0202 	bic.w	r2, r2, #2
   83d9c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   83da0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83da4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   83da8:	2220      	movs	r2, #32
   83daa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   83dae:	2001      	movs	r0, #1
   83db0:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   83db2:	015a      	lsls	r2, r3, #5
   83db4:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83db8:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83dbc:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83dc0:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   83dc4:	d0e1      	beq.n	83d8a <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   83dc6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   83dca:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
   83dce:	f89c 2014 	ldrb.w	r2, [ip, #20]
   83dd2:	f042 0204 	orr.w	r2, r2, #4
   83dd6:	f88c 2014 	strb.w	r2, [ip, #20]
			udd_enable_bank_interrupt(ep_index);
   83dda:	4a0d      	ldr	r2, [pc, #52]	; (83e10 <udd_ep_set_halt+0xc4>)
   83ddc:	f103 0108 	add.w	r1, r3, #8
   83de0:	eb02 1141 	add.w	r1, r2, r1, lsl #5
   83de4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   83de8:	6048      	str	r0, [r1, #4]
			udd_enable_endpoint_interrupt(ep_index);
   83dea:	6911      	ldr	r1, [r2, #16]
   83dec:	f44f 7080 	mov.w	r0, #256	; 0x100
   83df0:	fa00 f303 	lsl.w	r3, r0, r3
   83df4:	430b      	orrs	r3, r1
   83df6:	6113      	str	r3, [r2, #16]
			return true;
   83df8:	2001      	movs	r0, #1
   83dfa:	4770      	bx	lr
		return false;
   83dfc:	2000      	movs	r0, #0
   83dfe:	4770      	bx	lr
		return true; // Already STALL
   83e00:	2001      	movs	r0, #1
   83e02:	4770      	bx	lr
   83e04:	2001      	movs	r0, #1
   83e06:	4770      	bx	lr
		return false; // Job on going, stall impossible
   83e08:	2000      	movs	r0, #0
}
   83e0a:	4770      	bx	lr
   83e0c:	20001900 	.word	0x20001900
   83e10:	400a4000 	.word	0x400a4000

00083e14 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   83e14:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   83e18:	2802      	cmp	r0, #2
   83e1a:	d86d      	bhi.n	83ef8 <udd_ep_clear_halt+0xe4>
{
   83e1c:	b510      	push	{r4, lr}
	ptr_job = &udd_ep_job[ep - 1];
   83e1e:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
   83e20:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   83e24:	4a36      	ldr	r2, [pc, #216]	; (83f00 <udd_ep_clear_halt+0xec>)
   83e26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   83e2a:	7d12      	ldrb	r2, [r2, #20]
   83e2c:	f012 0f04 	tst.w	r2, #4
   83e30:	d018      	beq.n	83e64 <udd_ep_clear_halt+0x50>
		ptr_job->stall_requested = false;
   83e32:	460a      	mov	r2, r1
   83e34:	4932      	ldr	r1, [pc, #200]	; (83f00 <udd_ep_clear_halt+0xec>)
   83e36:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   83e3a:	7d11      	ldrb	r1, [r2, #20]
   83e3c:	f36f 0182 	bfc	r1, #2, #1
   83e40:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep);
   83e42:	4a30      	ldr	r2, [pc, #192]	; (83f04 <udd_ep_clear_halt+0xf0>)
   83e44:	eb02 1140 	add.w	r1, r2, r0, lsl #5
   83e48:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   83e4c:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   83e50:	6911      	ldr	r1, [r2, #16]
   83e52:	f44f 7c80 	mov.w	ip, #256	; 0x100
   83e56:	fa0c fc00 	lsl.w	ip, ip, r0
   83e5a:	ea21 010c 	bic.w	r1, r1, ip
   83e5e:	6111      	str	r1, [r2, #16]
		b_stall_cleared = true;
   83e60:	2101      	movs	r1, #1
   83e62:	e000      	b.n	83e66 <udd_ep_clear_halt+0x52>
	bool b_stall_cleared = false;
   83e64:	2100      	movs	r1, #0
	if (Is_udd_endpoint_stall_requested(ep)) {
   83e66:	0142      	lsls	r2, r0, #5
   83e68:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83e6c:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83e70:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83e74:	f012 0f20 	tst.w	r2, #32
   83e78:	d03a      	beq.n	83ef0 <udd_ep_clear_halt+0xdc>
		if (Is_udd_stall(ep)) {
   83e7a:	0142      	lsls	r2, r0, #5
   83e7c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83e80:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83e84:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83e88:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   83e8c:	d00b      	beq.n	83ea6 <udd_ep_clear_halt+0x92>
			udd_ack_stall(ep);
   83e8e:	0142      	lsls	r2, r0, #5
   83e90:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83e94:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   83e9c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
			udd_reset_data_toggle(ep);
   83ea0:	2140      	movs	r1, #64	; 0x40
   83ea2:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   83ea6:	4a17      	ldr	r2, [pc, #92]	; (83f04 <udd_ep_clear_halt+0xf0>)
   83ea8:	eb02 1140 	add.w	r1, r2, r0, lsl #5
   83eac:	2420      	movs	r4, #32
   83eae:	f8c1 4118 	str.w	r4, [r1, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   83eb2:	3008      	adds	r0, #8
   83eb4:	eb02 1040 	add.w	r0, r2, r0, lsl #5
   83eb8:	6842      	ldr	r2, [r0, #4]
   83eba:	f042 0202 	orr.w	r2, r2, #2
   83ebe:	6042      	str	r2, [r0, #4]
		if (ptr_job->busy == true) {
   83ec0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   83ec4:	490e      	ldr	r1, [pc, #56]	; (83f00 <udd_ep_clear_halt+0xec>)
   83ec6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   83eca:	7d12      	ldrb	r2, [r2, #20]
   83ecc:	f012 0f01 	tst.w	r2, #1
   83ed0:	d014      	beq.n	83efc <udd_ep_clear_halt+0xe8>
			ptr_job->busy = false;
   83ed2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   83ed6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   83eda:	7d10      	ldrb	r0, [r2, #20]
   83edc:	f36f 0000 	bfc	r0, #0, #1
   83ee0:	7510      	strb	r0, [r2, #20]
			ptr_job->call_nohalt();
   83ee2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   83ee6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   83eea:	4798      	blx	r3
	return true;
   83eec:	2001      	movs	r0, #1
}
   83eee:	bd10      	pop	{r4, pc}
	if (b_stall_cleared) {
   83ef0:	2900      	cmp	r1, #0
   83ef2:	d1e5      	bne.n	83ec0 <udd_ep_clear_halt+0xac>
	return true;
   83ef4:	2001      	movs	r0, #1
   83ef6:	e7fa      	b.n	83eee <udd_ep_clear_halt+0xda>
		return false;
   83ef8:	2000      	movs	r0, #0
}
   83efa:	4770      	bx	lr
	return true;
   83efc:	2001      	movs	r0, #1
   83efe:	e7f6      	b.n	83eee <udd_ep_clear_halt+0xda>
   83f00:	20001900 	.word	0x20001900
   83f04:	400a4000 	.word	0x400a4000

00083f08 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   83f08:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   83f0c:	2802      	cmp	r0, #2
   83f0e:	d86e      	bhi.n	83fee <udd_ep_run+0xe6>
{
   83f10:	b570      	push	{r4, r5, r6, lr}
	ptr_job = &udd_ep_job[ep - 1];
   83f12:	f100 3eff 	add.w	lr, r0, #4294967295
	if ((!Is_udd_endpoint_enabled(ep))
   83f16:	ea4f 1c40 	mov.w	ip, r0, lsl #5
   83f1a:	f10c 2c40 	add.w	ip, ip, #1073758208	; 0x40004000
   83f1e:	f50c 2c20 	add.w	ip, ip, #655360	; 0xa0000
   83f22:	f8dc 410c 	ldr.w	r4, [ip, #268]	; 0x10c
   83f26:	f014 0f01 	tst.w	r4, #1
   83f2a:	d062      	beq.n	83ff2 <udd_ep_run+0xea>
			|| Is_udd_endpoint_stall_requested(ep)
   83f2c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
   83f30:	f10c 2c40 	add.w	ip, ip, #1073758208	; 0x40004000
   83f34:	f50c 2c20 	add.w	ip, ip, #655360	; 0xa0000
   83f38:	f8dc 411c 	ldr.w	r4, [ip, #284]	; 0x11c
   83f3c:	f014 0f20 	tst.w	r4, #32
   83f40:	d159      	bne.n	83ff6 <udd_ep_run+0xee>
			|| ptr_job->stall_requested) {
   83f42:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   83f46:	4d2e      	ldr	r5, [pc, #184]	; (84000 <udd_ep_run+0xf8>)
   83f48:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   83f4c:	7d24      	ldrb	r4, [r4, #20]
   83f4e:	f014 0f04 	tst.w	r4, #4
   83f52:	d152      	bne.n	83ffa <udd_ep_run+0xf2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83f54:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   83f58:	b672      	cpsid	i
   83f5a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83f5e:	4c29      	ldr	r4, [pc, #164]	; (84004 <udd_ep_run+0xfc>)
   83f60:	2500      	movs	r5, #0
   83f62:	7025      	strb	r5, [r4, #0]
	if (ptr_job->busy == true) {
   83f64:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   83f68:	4d25      	ldr	r5, [pc, #148]	; (84000 <udd_ep_run+0xf8>)
   83f6a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   83f6e:	7d24      	ldrb	r4, [r4, #20]
   83f70:	f014 0f01 	tst.w	r4, #1
   83f74:	d120      	bne.n	83fb8 <udd_ep_run+0xb0>
	ptr_job->busy = true;
   83f76:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   83f7a:	4d21      	ldr	r5, [pc, #132]	; (84000 <udd_ep_run+0xf8>)
   83f7c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   83f80:	7d25      	ldrb	r5, [r4, #20]
   83f82:	f045 0501 	orr.w	r5, r5, #1
   83f86:	7525      	strb	r5, [r4, #20]
	if (cpu_irq_is_enabled_flags(flags))
   83f88:	b92e      	cbnz	r6, 83f96 <udd_ep_run+0x8e>
		cpu_irq_enable();
   83f8a:	4c1e      	ldr	r4, [pc, #120]	; (84004 <udd_ep_run+0xfc>)
   83f8c:	2501      	movs	r5, #1
   83f8e:	7025      	strb	r5, [r4, #0]
   83f90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83f94:	b662      	cpsie	i
	ptr_job->buf = buf;
   83f96:	4d1a      	ldr	r5, [pc, #104]	; (84000 <udd_ep_run+0xf8>)
   83f98:	eb0e 064e 	add.w	r6, lr, lr, lsl #1
   83f9c:	eb05 04c6 	add.w	r4, r5, r6, lsl #3
   83fa0:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   83fa2:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   83fa4:	2200      	movs	r2, #0
   83fa6:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   83fa8:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   83faa:	9a04      	ldr	r2, [sp, #16]
   83fac:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83fb0:	b959      	cbnz	r1, 83fca <udd_ep_run+0xc2>
   83fb2:	b9d3      	cbnz	r3, 83fea <udd_ep_run+0xe2>
   83fb4:	2201      	movs	r2, #1
   83fb6:	e009      	b.n	83fcc <udd_ep_run+0xc4>
	if (cpu_irq_is_enabled_flags(flags))
   83fb8:	b92e      	cbnz	r6, 83fc6 <udd_ep_run+0xbe>
		cpu_irq_enable();
   83fba:	4b12      	ldr	r3, [pc, #72]	; (84004 <udd_ep_run+0xfc>)
   83fbc:	2201      	movs	r2, #1
   83fbe:	701a      	strb	r2, [r3, #0]
   83fc0:	f3bf 8f5f 	dmb	sy
   83fc4:	b662      	cpsie	i
		return false; // Job already on going
   83fc6:	2000      	movs	r0, #0
   83fc8:	e014      	b.n	83ff4 <udd_ep_run+0xec>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83fca:	2201      	movs	r2, #1
   83fcc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   83fd0:	4b0b      	ldr	r3, [pc, #44]	; (84000 <udd_ep_run+0xf8>)
   83fd2:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   83fd6:	f89e 3014 	ldrb.w	r3, [lr, #20]
   83fda:	f362 0341 	bfi	r3, r2, #1, #1
   83fde:	f88e 3014 	strb.w	r3, [lr, #20]
	udd_ep_trans_done(ep);
   83fe2:	4b09      	ldr	r3, [pc, #36]	; (84008 <udd_ep_run+0x100>)
   83fe4:	4798      	blx	r3
	return true;
   83fe6:	2001      	movs	r0, #1
   83fe8:	e004      	b.n	83ff4 <udd_ep_run+0xec>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83fea:	2200      	movs	r2, #0
   83fec:	e7ee      	b.n	83fcc <udd_ep_run+0xc4>
		return false;
   83fee:	2000      	movs	r0, #0
}
   83ff0:	4770      	bx	lr
		return false; // Endpoint is halted
   83ff2:	2000      	movs	r0, #0
}
   83ff4:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Endpoint is halted
   83ff6:	2000      	movs	r0, #0
   83ff8:	e7fc      	b.n	83ff4 <udd_ep_run+0xec>
   83ffa:	2000      	movs	r0, #0
   83ffc:	e7fa      	b.n	83ff4 <udd_ep_run+0xec>
   83ffe:	bf00      	nop
   84000:	20001900 	.word	0x20001900
   84004:	20000354 	.word	0x20000354
   84008:	000834e5 	.word	0x000834e5

0008400c <udd_ep_alloc>:
{
   8400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84010:	b082      	sub	sp, #8
	ep = ep & USB_EP_ADDR_MASK;
   84012:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   84016:	2c02      	cmp	r4, #2
   84018:	f200 8139 	bhi.w	8428e <udd_ep_alloc+0x282>
   8401c:	fa4f fc80 	sxtb.w	ip, r0
	if (Is_udd_endpoint_enabled(ep)) {
   84020:	4625      	mov	r5, r4
   84022:	0163      	lsls	r3, r4, #5
   84024:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84028:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8402c:	f8d3 610c 	ldr.w	r6, [r3, #268]	; 0x10c
   84030:	f016 0601 	ands.w	r6, r6, #1
   84034:	f040 812f 	bne.w	84296 <udd_ep_alloc+0x28a>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   84038:	f001 0803 	and.w	r8, r1, #3
   8403c:	f1b8 0f02 	cmp.w	r8, #2
   84040:	d014      	beq.n	8406c <udd_ep_alloc+0x60>
   84042:	f1b8 0f03 	cmp.w	r8, #3
   84046:	d02c      	beq.n	840a2 <udd_ep_alloc+0x96>
   84048:	f1b8 0f01 	cmp.w	r8, #1
   8404c:	d001      	beq.n	84052 <udd_ep_alloc+0x46>
   8404e:	2000      	movs	r0, #0
   84050:	e11e      	b.n	84290 <udd_ep_alloc+0x284>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   84052:	b13c      	cbz	r4, 84064 <udd_ep_alloc+0x58>
   84054:	2c03      	cmp	r4, #3
   84056:	d007      	beq.n	84068 <udd_ep_alloc+0x5c>
   84058:	2c04      	cmp	r4, #4
   8405a:	d001      	beq.n	84060 <udd_ep_alloc+0x54>
   8405c:	2001      	movs	r0, #1
	switch (nb_bank) {
   8405e:	e023      	b.n	840a8 <udd_ep_alloc+0x9c>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   84060:	2000      	movs	r0, #0
   84062:	e021      	b.n	840a8 <udd_ep_alloc+0x9c>
   84064:	2000      	movs	r0, #0
   84066:	e01f      	b.n	840a8 <udd_ep_alloc+0x9c>
   84068:	2000      	movs	r0, #0
   8406a:	e01d      	b.n	840a8 <udd_ep_alloc+0x9c>
		nb_bank = UDD_BULK_NB_BANK(ep);
   8406c:	2c05      	cmp	r4, #5
   8406e:	d006      	beq.n	8407e <udd_ep_alloc+0x72>
   84070:	2c85      	cmp	r4, #133	; 0x85
   84072:	d011      	beq.n	84098 <udd_ep_alloc+0x8c>
   84074:	2c06      	cmp	r4, #6
   84076:	d004      	beq.n	84082 <udd_ep_alloc+0x76>
   84078:	f04f 0801 	mov.w	r8, #1
   8407c:	e001      	b.n	84082 <udd_ep_alloc+0x76>
   8407e:	f04f 0803 	mov.w	r8, #3
	switch (nb_bank) {
   84082:	f1b8 0f02 	cmp.w	r8, #2
   84086:	d037      	beq.n	840f8 <udd_ep_alloc+0xec>
   84088:	f1b8 0f03 	cmp.w	r8, #3
   8408c:	d036      	beq.n	840fc <udd_ep_alloc+0xf0>
   8408e:	f1b8 0f01 	cmp.w	r8, #1
   84092:	d004      	beq.n	8409e <udd_ep_alloc+0x92>
   84094:	2000      	movs	r0, #0
   84096:	e0fb      	b.n	84290 <udd_ep_alloc+0x284>
		nb_bank = UDD_BULK_NB_BANK(ep);
   84098:	f04f 0803 	mov.w	r8, #3
   8409c:	e7f1      	b.n	84082 <udd_ep_alloc+0x76>
	switch (nb_bank) {
   8409e:	2000      	movs	r0, #0
   840a0:	e002      	b.n	840a8 <udd_ep_alloc+0x9c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   840a2:	2000      	movs	r0, #0
   840a4:	f04f 0801 	mov.w	r8, #1
	if (b_iso_hbw) {
   840a8:	b380      	cbz	r0, 8410c <udd_ep_alloc+0x100>
		switch(MaxEndpointSize & (0x3u << 11)) {
   840aa:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   840ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   840b2:	d025      	beq.n	84100 <udd_ep_alloc+0xf4>
   840b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   840b8:	d125      	bne.n	84106 <udd_ep_alloc+0xfa>
			nb_tran = 3;
   840ba:	f04f 0e03 	mov.w	lr, #3
		MaxEndpointSize &= ~(0x3u << 11);
   840be:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   840c2:	b292      	uxth	r2, r2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   840c4:	f105 0308 	add.w	r3, r5, #8
   840c8:	015b      	lsls	r3, r3, #5
   840ca:	4f76      	ldr	r7, [pc, #472]	; (842a4 <udd_ep_alloc+0x298>)
   840cc:	58ff      	ldr	r7, [r7, r3]
   840ce:	f427 777f 	bic.w	r7, r7, #1020	; 0x3fc
   840d2:	f027 0703 	bic.w	r7, r7, #3
   840d6:	010b      	lsls	r3, r1, #4
   840d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
   840dc:	f1bc 0f00 	cmp.w	ip, #0
   840e0:	db1b      	blt.n	8411a <udd_ep_alloc+0x10e>
   840e2:	4631      	mov	r1, r6
   840e4:	430b      	orrs	r3, r1
   840e6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   840ea:	d218      	bcs.n	8411e <udd_ep_alloc+0x112>
   840ec:	2a08      	cmp	r2, #8
   840ee:	bf38      	it	cc
   840f0:	2208      	movcc	r2, #8
   840f2:	0052      	lsls	r2, r2, #1
   840f4:	3a01      	subs	r2, #1
   840f6:	e014      	b.n	84122 <udd_ep_alloc+0x116>
	bool b_iso_hbw = false;
   840f8:	2000      	movs	r0, #0
   840fa:	e7d5      	b.n	840a8 <udd_ep_alloc+0x9c>
   840fc:	2000      	movs	r0, #0
   840fe:	e7d3      	b.n	840a8 <udd_ep_alloc+0x9c>
		switch(MaxEndpointSize & (0x3u << 11)) {
   84100:	f04f 0e02 	mov.w	lr, #2
   84104:	e7db      	b.n	840be <udd_ep_alloc+0xb2>
			nb_tran = 1;
   84106:	f04f 0e01 	mov.w	lr, #1
   8410a:	e7d8      	b.n	840be <udd_ep_alloc+0xb2>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   8410c:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   84110:	f040 80be 	bne.w	84290 <udd_ep_alloc+0x284>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   84114:	f04f 0e00 	mov.w	lr, #0
   84118:	e7d4      	b.n	840c4 <udd_ep_alloc+0xb8>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8411a:	2108      	movs	r1, #8
   8411c:	e7e2      	b.n	840e4 <udd_ep_alloc+0xd8>
   8411e:	f240 72ff 	movw	r2, #2047	; 0x7ff
   84122:	fab2 f282 	clz	r2, r2
   84126:	f1c2 021c 	rsb	r2, r2, #28
   8412a:	4313      	orrs	r3, r2
   8412c:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   84130:	b108      	cbz	r0, 84136 <udd_ep_alloc+0x12a>
   84132:	ea4f 260e 	mov.w	r6, lr, lsl #8
   84136:	4333      	orrs	r3, r6
   84138:	f3c3 0309 	ubfx	r3, r3, #0, #10
   8413c:	433b      	orrs	r3, r7
   8413e:	4959      	ldr	r1, [pc, #356]	; (842a4 <udd_ep_alloc+0x298>)
   84140:	f105 0208 	add.w	r2, r5, #8
   84144:	0152      	lsls	r2, r2, #5
   84146:	508b      	str	r3, [r1, r2]
	if (!Is_udd_endpoint_mapped(ep)) {
   84148:	588b      	ldr	r3, [r1, r2]
   8414a:	2b00      	cmp	r3, #0
   8414c:	f280 80a5 	bge.w	8429a <udd_ep_alloc+0x28e>
	udd_enable_endpoint(ep);
   84150:	f102 2540 	add.w	r5, r2, #1073758208	; 0x40004000
   84154:	f505 2520 	add.w	r5, r5, #655360	; 0xa0000
   84158:	2301      	movs	r3, #1
   8415a:	606b      	str	r3, [r5, #4]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8415c:	2302      	movs	r3, #2
	ep_allocated = 0;
   8415e:	2500      	movs	r5, #0
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84160:	e001      	b.n	84166 <udd_ep_alloc+0x15a>
   84162:	3b01      	subs	r3, #1
   84164:	b2db      	uxtb	r3, r3
   84166:	42a3      	cmp	r3, r4
   84168:	d339      	bcc.n	841de <udd_ep_alloc+0x1d2>
		if (Is_udd_endpoint_enabled(i)) {
   8416a:	015a      	lsls	r2, r3, #5
   8416c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84170:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84174:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84178:	f012 0f01 	tst.w	r2, #1
   8417c:	d0f1      	beq.n	84162 <udd_ep_alloc+0x156>
			bank = udd_get_endpoint_bank(i);
   8417e:	4849      	ldr	r0, [pc, #292]	; (842a4 <udd_ep_alloc+0x298>)
   84180:	f103 0108 	add.w	r1, r3, #8
   84184:	0149      	lsls	r1, r1, #5
   84186:	5842      	ldr	r2, [r0, r1]
   84188:	f3c2 1281 	ubfx	r2, r2, #6, #2
			ep_allocated |=  bank << (i * 2);
   8418c:	005e      	lsls	r6, r3, #1
   8418e:	40b2      	lsls	r2, r6
   84190:	4315      	orrs	r5, r2
   84192:	b2ad      	uxth	r5, r5
			udd_disable_endpoint(i);
   84194:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   84198:	2601      	movs	r6, #1
   8419a:	f8c2 6108 	str.w	r6, [r2, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   8419e:	5842      	ldr	r2, [r0, r1]
   841a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   841a4:	5042      	str	r2, [r0, r1]
   841a6:	e7dc      	b.n	84162 <udd_ep_alloc+0x156>
			if (NULL == ptr_job->call_trans) {
   841a8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   841ac:	493e      	ldr	r1, [pc, #248]	; (842a8 <udd_ep_alloc+0x29c>)
   841ae:	f851 5032 	ldr.w	r5, [r1, r2, lsl #3]
   841b2:	2d00      	cmp	r5, #0
   841b4:	d073      	beq.n	8429e <udd_ep_alloc+0x292>
			if (Is_udd_endpoint_in(i)) {
   841b6:	f857 300e 	ldr.w	r3, [r7, lr]
   841ba:	f013 0f08 	tst.w	r3, #8
   841be:	d001      	beq.n	841c4 <udd_ep_alloc+0x1b8>
				i |= USB_EP_DIR_IN;
   841c0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   841c4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   841c8:	4a37      	ldr	r2, [pc, #220]	; (842a8 <udd_ep_alloc+0x29c>)
   841ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   841ce:	4622      	mov	r2, r4
   841d0:	68d9      	ldr	r1, [r3, #12]
   841d2:	2001      	movs	r0, #1
   841d4:	47a8      	blx	r5
			return false;
   841d6:	2000      	movs	r0, #0
   841d8:	e05a      	b.n	84290 <udd_ep_alloc+0x284>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   841da:	3401      	adds	r4, #1
   841dc:	b2e4      	uxtb	r4, r4
   841de:	2c02      	cmp	r4, #2
   841e0:	d853      	bhi.n	8428a <udd_ep_alloc+0x27e>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   841e2:	4623      	mov	r3, r4
   841e4:	1e60      	subs	r0, r4, #1
		bool b_restart = ptr_job->busy;
   841e6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   841ea:	4a2f      	ldr	r2, [pc, #188]	; (842a8 <udd_ep_alloc+0x29c>)
   841ec:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   841f0:	7d16      	ldrb	r6, [r2, #20]
   841f2:	f006 0601 	and.w	r6, r6, #1
		bank = (ep_allocated >> (i * 2)) & 0x03;
   841f6:	0062      	lsls	r2, r4, #1
   841f8:	fa45 f202 	asr.w	r2, r5, r2
		if (bank == 0) {
   841fc:	f012 0203 	ands.w	r2, r2, #3
   84200:	d0eb      	beq.n	841da <udd_ep_alloc+0x1ce>
		ptr_job->busy = false;
   84202:	4f29      	ldr	r7, [pc, #164]	; (842a8 <udd_ep_alloc+0x29c>)
   84204:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   84208:	7d0f      	ldrb	r7, [r1, #20]
   8420a:	f36f 0700 	bfc	r7, #0, #1
   8420e:	750f      	strb	r7, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   84210:	4f24      	ldr	r7, [pc, #144]	; (842a4 <udd_ep_alloc+0x298>)
   84212:	f104 0108 	add.w	r1, r4, #8
   84216:	ea4f 1e41 	mov.w	lr, r1, lsl #5
   8421a:	eb07 1c41 	add.w	ip, r7, r1, lsl #5
   8421e:	f857 100e 	ldr.w	r1, [r7, lr]
   84222:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   84226:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   8422a:	f847 200e 	str.w	r2, [r7, lr]
		udd_enable_endpoint(i);
   8422e:	2201      	movs	r2, #1
   84230:	f8cc 2004 	str.w	r2, [ip, #4]
		if (!Is_udd_endpoint_mapped(i)) {
   84234:	f857 200e 	ldr.w	r2, [r7, lr]
   84238:	2a00      	cmp	r2, #0
   8423a:	dab5      	bge.n	841a8 <udd_ep_alloc+0x19c>
		udd_enable_endpoint_bank_autoswitch(i);
   8423c:	3308      	adds	r3, #8
   8423e:	015b      	lsls	r3, r3, #5
   84240:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84244:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84248:	685a      	ldr	r2, [r3, #4]
   8424a:	f042 0202 	orr.w	r2, r2, #2
   8424e:	605a      	str	r2, [r3, #4]
		if (b_restart) {
   84250:	2e00      	cmp	r6, #0
   84252:	d0c2      	beq.n	841da <udd_ep_alloc+0x1ce>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   84254:	4e14      	ldr	r6, [pc, #80]	; (842a8 <udd_ep_alloc+0x29c>)
   84256:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   8425a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   8425e:	6919      	ldr	r1, [r3, #16]
   84260:	68da      	ldr	r2, [r3, #12]
   84262:	1a52      	subs	r2, r2, r1
   84264:	60da      	str	r2, [r3, #12]
					ptr_job->b_shortpacket,
   84266:	7d19      	ldrb	r1, [r3, #20]
					&ptr_job->buf[ptr_job->buf_cnt],
   84268:	685f      	ldr	r7, [r3, #4]
					ptr_job->buf_size
   8426a:	689b      	ldr	r3, [r3, #8]
			b_restart = udd_ep_run(i,
   8426c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   84270:	f856 0030 	ldr.w	r0, [r6, r0, lsl #3]
   84274:	9000      	str	r0, [sp, #0]
   84276:	1a9b      	subs	r3, r3, r2
   84278:	443a      	add	r2, r7
   8427a:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8427e:	4620      	mov	r0, r4
   84280:	4e0a      	ldr	r6, [pc, #40]	; (842ac <udd_ep_alloc+0x2a0>)
   84282:	47b0      	blx	r6
			if (!b_restart) {
   84284:	2800      	cmp	r0, #0
   84286:	d1a8      	bne.n	841da <udd_ep_alloc+0x1ce>
   84288:	e002      	b.n	84290 <udd_ep_alloc+0x284>
	return true;
   8428a:	2001      	movs	r0, #1
   8428c:	e000      	b.n	84290 <udd_ep_alloc+0x284>
		return false;
   8428e:	2000      	movs	r0, #0
}
   84290:	b002      	add	sp, #8
   84292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   84296:	2000      	movs	r0, #0
   84298:	e7fa      	b.n	84290 <udd_ep_alloc+0x284>
		return false;
   8429a:	2000      	movs	r0, #0
   8429c:	e7f8      	b.n	84290 <udd_ep_alloc+0x284>
				return false;
   8429e:	2000      	movs	r0, #0
   842a0:	e7f6      	b.n	84290 <udd_ep_alloc+0x284>
   842a2:	bf00      	nop
   842a4:	400a4000 	.word	0x400a4000
   842a8:	20001900 	.word	0x20001900
   842ac:	00083f09 	.word	0x00083f09

000842b0 <udd_ep_abort>:
{
   842b0:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   842b2:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   842b6:	4b14      	ldr	r3, [pc, #80]	; (84308 <udd_ep_abort+0x58>)
   842b8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   842bc:	2100      	movs	r1, #0
   842be:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   842c0:	f010 0f80 	tst.w	r0, #128	; 0x80
   842c4:	d115      	bne.n	842f2 <udd_ep_abort+0x42>
	udd_ep_abort_job(ep);
   842c6:	4b11      	ldr	r3, [pc, #68]	; (8430c <udd_ep_abort+0x5c>)
   842c8:	4798      	blx	r3
}
   842ca:	bd08      	pop	{r3, pc}
			udd_kill_last_in_bank(ep_index);
   842cc:	0153      	lsls	r3, r2, #5
   842ce:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   842d2:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   842d6:	f44f 7100 	mov.w	r1, #512	; 0x200
   842da:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
			while(Is_udd_kill_last(ep_index));
   842de:	0153      	lsls	r3, r2, #5
   842e0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   842e4:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   842e8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   842ec:	f413 7f00 	tst.w	r3, #512	; 0x200
   842f0:	d1f5      	bne.n	842de <udd_ep_abort+0x2e>
		for(;udd_nb_busy_bank(ep_index);) {
   842f2:	0153      	lsls	r3, r2, #5
   842f4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   842f8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   842fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84300:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   84304:	d1e2      	bne.n	842cc <udd_ep_abort+0x1c>
   84306:	e7de      	b.n	842c6 <udd_ep_abort+0x16>
   84308:	400a4300 	.word	0x400a4300
   8430c:	000834c1 	.word	0x000834c1

00084310 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   84310:	4a07      	ldr	r2, [pc, #28]	; (84330 <udd_test_mode_j+0x20>)
   84312:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84316:	f023 0303 	bic.w	r3, r3, #3
   8431a:	f043 0302 	orr.w	r3, r3, #2
   8431e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   84322:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84326:	f043 0304 	orr.w	r3, r3, #4
   8432a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8432e:	4770      	bx	lr
   84330:	400a4000 	.word	0x400a4000

00084334 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   84334:	4a07      	ldr	r2, [pc, #28]	; (84354 <udd_test_mode_k+0x20>)
   84336:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8433a:	f023 0303 	bic.w	r3, r3, #3
   8433e:	f043 0302 	orr.w	r3, r3, #2
   84342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   84346:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8434a:	f043 0308 	orr.w	r3, r3, #8
   8434e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84352:	4770      	bx	lr
   84354:	400a4000 	.word	0x400a4000

00084358 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   84358:	4a04      	ldr	r2, [pc, #16]	; (8436c <udd_test_mode_se0_nak+0x14>)
   8435a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8435e:	f023 0303 	bic.w	r3, r3, #3
   84362:	f043 0302 	orr.w	r3, r3, #2
   84366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8436a:	4770      	bx	lr
   8436c:	400a4000 	.word	0x400a4000

00084370 <udd_test_mode_packet>:
{
   84370:	b410      	push	{r4}
   84372:	b08f      	sub	sp, #60	; 0x3c
	const uint8_t test_packet[] = {
   84374:	46ec      	mov	ip, sp
   84376:	4c23      	ldr	r4, [pc, #140]	; (84404 <udd_test_mode_packet+0x94>)
   84378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8437a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   8437e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   84380:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   84384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   84386:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   8438a:	e894 0003 	ldmia.w	r4, {r0, r1}
   8438e:	f84c 0b04 	str.w	r0, [ip], #4
   84392:	f88c 1000 	strb.w	r1, [ip]
	udd_disable_endpoint(0);
   84396:	4b1c      	ldr	r3, [pc, #112]	; (84408 <udd_test_mode_packet+0x98>)
   84398:	2101      	movs	r1, #1
   8439a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   8439e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   843a2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   843a6:	f022 0203 	bic.w	r2, r2, #3
   843aa:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   843ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   843b2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   843b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   843ba:	f022 0203 	bic.w	r2, r2, #3
   843be:	f042 0202 	orr.w	r2, r2, #2
   843c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   843c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   843ca:	f042 0210 	orr.w	r2, r2, #16
   843ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   843d2:	466a      	mov	r2, sp
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   843d4:	4b0d      	ldr	r3, [pc, #52]	; (8440c <udd_test_mode_packet+0x9c>)
	for (i = 0; i < sizeof(test_packet); i++) {
   843d6:	2100      	movs	r1, #0
   843d8:	e005      	b.n	843e6 <udd_test_mode_packet+0x76>
		*ptr_dest++ = *ptr_src++;
   843da:	f812 0b01 	ldrb.w	r0, [r2], #1
   843de:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < sizeof(test_packet); i++) {
   843e2:	3101      	adds	r1, #1
   843e4:	b2c9      	uxtb	r1, r1
   843e6:	2934      	cmp	r1, #52	; 0x34
   843e8:	d9f7      	bls.n	843da <udd_test_mode_packet+0x6a>
	udd_ack_in_send(0);
   843ea:	4b07      	ldr	r3, [pc, #28]	; (84408 <udd_test_mode_packet+0x98>)
   843ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   843f0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   843f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   843f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   843fc:	b00f      	add	sp, #60	; 0x3c
   843fe:	bc10      	pop	{r4}
   84400:	4770      	bx	lr
   84402:	bf00      	nop
   84404:	0008c1b4 	.word	0x0008c1b4
   84408:	400a4000 	.word	0x400a4000
   8440c:	20180000 	.word	0x20180000

00084410 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   84410:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   84412:	3801      	subs	r0, #1
   84414:	2802      	cmp	r0, #2
   84416:	d813      	bhi.n	84440 <_write+0x30>
   84418:	460c      	mov	r4, r1
   8441a:	4615      	mov	r5, r2
	int nChars = 0;
   8441c:	2600      	movs	r6, #0
   8441e:	e001      	b.n	84424 <_write+0x14>

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   84420:	3601      	adds	r6, #1
	for (; len != 0; --len) {
   84422:	3d01      	subs	r5, #1
   84424:	b155      	cbz	r5, 8443c <_write+0x2c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84426:	4b08      	ldr	r3, [pc, #32]	; (84448 <_write+0x38>)
   84428:	6818      	ldr	r0, [r3, #0]
   8442a:	4b08      	ldr	r3, [pc, #32]	; (8444c <_write+0x3c>)
   8442c:	681b      	ldr	r3, [r3, #0]
   8442e:	f814 1b01 	ldrb.w	r1, [r4], #1
   84432:	4798      	blx	r3
   84434:	2800      	cmp	r0, #0
   84436:	daf3      	bge.n	84420 <_write+0x10>
			return -1;
   84438:	f04f 36ff 	mov.w	r6, #4294967295
	}
	return nChars;
}
   8443c:	4630      	mov	r0, r6
   8443e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   84440:	f04f 36ff 	mov.w	r6, #4294967295
   84444:	e7fa      	b.n	8443c <_write+0x2c>
   84446:	bf00      	nop
   84448:	2000194c 	.word	0x2000194c
   8444c:	20001948 	.word	0x20001948

00084450 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   84450:	b538      	push	{r3, r4, r5, lr}
   84452:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84454:	2400      	movs	r4, #0
   84456:	e003      	b.n	84460 <LED_Off+0x10>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   84458:	4628      	mov	r0, r5
   8445a:	4b0a      	ldr	r3, [pc, #40]	; (84484 <LED_Off+0x34>)
   8445c:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8445e:	3401      	adds	r4, #1
   84460:	2c02      	cmp	r4, #2
   84462:	d80e      	bhi.n	84482 <LED_Off+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84464:	4b08      	ldr	r3, [pc, #32]	; (84488 <LED_Off+0x38>)
   84466:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
   8446a:	42ab      	cmp	r3, r5
   8446c:	d1f7      	bne.n	8445e <LED_Off+0xe>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   8446e:	4b06      	ldr	r3, [pc, #24]	; (84488 <LED_Off+0x38>)
   84470:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   84474:	685b      	ldr	r3, [r3, #4]
   84476:	2b01      	cmp	r3, #1
   84478:	d0ee      	beq.n	84458 <LED_Off+0x8>
			} else {
				gpio_set_pin_high(led_gpio);
   8447a:	4628      	mov	r0, r5
   8447c:	4b03      	ldr	r3, [pc, #12]	; (8448c <LED_Off+0x3c>)
   8447e:	4798      	blx	r3
   84480:	e7ed      	b.n	8445e <LED_Off+0xe>
			}
		}
	}
}
   84482:	bd38      	pop	{r3, r4, r5, pc}
   84484:	00084b3d 	.word	0x00084b3d
   84488:	0008c1ec 	.word	0x0008c1ec
   8448c:	00084b21 	.word	0x00084b21

00084490 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   84490:	b538      	push	{r3, r4, r5, lr}
   84492:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84494:	2400      	movs	r4, #0
   84496:	e003      	b.n	844a0 <LED_On+0x10>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   84498:	4628      	mov	r0, r5
   8449a:	4b0a      	ldr	r3, [pc, #40]	; (844c4 <LED_On+0x34>)
   8449c:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8449e:	3401      	adds	r4, #1
   844a0:	2c02      	cmp	r4, #2
   844a2:	d80e      	bhi.n	844c2 <LED_On+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   844a4:	4b08      	ldr	r3, [pc, #32]	; (844c8 <LED_On+0x38>)
   844a6:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
   844aa:	42ab      	cmp	r3, r5
   844ac:	d1f7      	bne.n	8449e <LED_On+0xe>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   844ae:	4b06      	ldr	r3, [pc, #24]	; (844c8 <LED_On+0x38>)
   844b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   844b4:	685b      	ldr	r3, [r3, #4]
   844b6:	2b01      	cmp	r3, #1
   844b8:	d0ee      	beq.n	84498 <LED_On+0x8>
			} else {
				gpio_set_pin_low(led_gpio);
   844ba:	4628      	mov	r0, r5
   844bc:	4b03      	ldr	r3, [pc, #12]	; (844cc <LED_On+0x3c>)
   844be:	4798      	blx	r3
   844c0:	e7ed      	b.n	8449e <LED_On+0xe>
			}
		}
	}
}
   844c2:	bd38      	pop	{r3, r4, r5, pc}
   844c4:	00084b21 	.word	0x00084b21
   844c8:	0008c1ec 	.word	0x0008c1ec
   844cc:	00084b3d 	.word	0x00084b3d

000844d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   844d0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   844d2:	4a15      	ldr	r2, [pc, #84]	; (84528 <Reset_Handler+0x58>)
   844d4:	4b15      	ldr	r3, [pc, #84]	; (8452c <Reset_Handler+0x5c>)
   844d6:	429a      	cmp	r2, r3
   844d8:	d009      	beq.n	844ee <Reset_Handler+0x1e>
	pDest = &_srelocate;
   844da:	4b14      	ldr	r3, [pc, #80]	; (8452c <Reset_Handler+0x5c>)
	pSrc = &_etext;
   844dc:	4a12      	ldr	r2, [pc, #72]	; (84528 <Reset_Handler+0x58>)
   844de:	e003      	b.n	844e8 <Reset_Handler+0x18>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   844e0:	f852 1b04 	ldr.w	r1, [r2], #4
   844e4:	f843 1b04 	str.w	r1, [r3], #4
		for (; pDest < &_erelocate;) {
   844e8:	4911      	ldr	r1, [pc, #68]	; (84530 <Reset_Handler+0x60>)
   844ea:	428b      	cmp	r3, r1
   844ec:	d3f8      	bcc.n	844e0 <Reset_Handler+0x10>
	pSrc = &_etext;
   844ee:	4b11      	ldr	r3, [pc, #68]	; (84534 <Reset_Handler+0x64>)
   844f0:	e002      	b.n	844f8 <Reset_Handler+0x28>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   844f2:	2200      	movs	r2, #0
   844f4:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   844f8:	4a0f      	ldr	r2, [pc, #60]	; (84538 <Reset_Handler+0x68>)
   844fa:	4293      	cmp	r3, r2
   844fc:	d3f9      	bcc.n	844f2 <Reset_Handler+0x22>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   844fe:	4b0f      	ldr	r3, [pc, #60]	; (8453c <Reset_Handler+0x6c>)
   84500:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   84504:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84508:	490d      	ldr	r1, [pc, #52]	; (84540 <Reset_Handler+0x70>)
   8450a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   8450c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   84510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84514:	d203      	bcs.n	8451e <Reset_Handler+0x4e>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84516:	688b      	ldr	r3, [r1, #8]
   84518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8451c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8451e:	4b09      	ldr	r3, [pc, #36]	; (84544 <Reset_Handler+0x74>)
   84520:	4798      	blx	r3

	/* Branch to main function */
	main();
   84522:	4b09      	ldr	r3, [pc, #36]	; (84548 <Reset_Handler+0x78>)
   84524:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   84526:	e7fe      	b.n	84526 <Reset_Handler+0x56>
   84528:	0008c64c 	.word	0x0008c64c
   8452c:	20000000 	.word	0x20000000
   84530:	20000d98 	.word	0x20000d98
   84534:	20000d98 	.word	0x20000d98
   84538:	200019b4 	.word	0x200019b4
   8453c:	00080000 	.word	0x00080000
   84540:	e000ed00 	.word	0xe000ed00
   84544:	0008515d 	.word	0x0008515d
   84548:	00080551 	.word	0x00080551

0008454c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   8454c:	b508      	push	{r3, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8454e:	203e      	movs	r0, #62	; 0x3e
   84550:	4b07      	ldr	r3, [pc, #28]	; (84570 <sysclk_enable_usb+0x24>)
   84552:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   84554:	4b07      	ldr	r3, [pc, #28]	; (84574 <sysclk_enable_usb+0x28>)
   84556:	4798      	blx	r3
   84558:	2800      	cmp	r0, #0
   8455a:	d0fb      	beq.n	84554 <sysclk_enable_usb+0x8>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8455c:	4b06      	ldr	r3, [pc, #24]	; (84578 <sysclk_enable_usb+0x2c>)
   8455e:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   84562:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   84564:	4b05      	ldr	r3, [pc, #20]	; (8457c <sysclk_enable_usb+0x30>)
   84566:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84568:	2800      	cmp	r0, #0
   8456a:	d0fb      	beq.n	84564 <sysclk_enable_usb+0x18>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   8456c:	bd08      	pop	{r3, pc}
   8456e:	bf00      	nop
   84570:	0008473d 	.word	0x0008473d
   84574:	00084765 	.word	0x00084765
   84578:	400e0400 	.word	0x400e0400
   8457c:	000847c5 	.word	0x000847c5

00084580 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   84580:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   84582:	4812      	ldr	r0, [pc, #72]	; (845cc <sysclk_init+0x4c>)
   84584:	4b12      	ldr	r3, [pc, #72]	; (845d0 <sysclk_init+0x50>)
   84586:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   84588:	203e      	movs	r0, #62	; 0x3e
   8458a:	4b12      	ldr	r3, [pc, #72]	; (845d4 <sysclk_init+0x54>)
   8458c:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   8458e:	4b12      	ldr	r3, [pc, #72]	; (845d8 <sysclk_init+0x58>)
   84590:	4798      	blx	r3
   84592:	2800      	cmp	r0, #0
   84594:	d0fb      	beq.n	8458e <sysclk_init+0xe>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   84596:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8459a:	4b10      	ldr	r3, [pc, #64]	; (845dc <sysclk_init+0x5c>)
   8459c:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8459e:	4b10      	ldr	r3, [pc, #64]	; (845e0 <sysclk_init+0x60>)
   845a0:	4798      	blx	r3
   845a2:	2800      	cmp	r0, #0
   845a4:	d0fb      	beq.n	8459e <sysclk_init+0x1e>
		pmc_disable_pllack(); // Always stop PLL first!
   845a6:	4b0f      	ldr	r3, [pc, #60]	; (845e4 <sysclk_init+0x64>)
   845a8:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   845aa:	4b0f      	ldr	r3, [pc, #60]	; (845e8 <sysclk_init+0x68>)
   845ac:	4a0f      	ldr	r2, [pc, #60]	; (845ec <sysclk_init+0x6c>)
   845ae:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   845b0:	4b0f      	ldr	r3, [pc, #60]	; (845f0 <sysclk_init+0x70>)
   845b2:	4798      	blx	r3
   845b4:	2800      	cmp	r0, #0
   845b6:	d0fb      	beq.n	845b0 <sysclk_init+0x30>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   845b8:	2010      	movs	r0, #16
   845ba:	4b0e      	ldr	r3, [pc, #56]	; (845f4 <sysclk_init+0x74>)
   845bc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   845be:	4b0e      	ldr	r3, [pc, #56]	; (845f8 <sysclk_init+0x78>)
   845c0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   845c2:	4802      	ldr	r0, [pc, #8]	; (845cc <sysclk_init+0x4c>)
   845c4:	4b02      	ldr	r3, [pc, #8]	; (845d0 <sysclk_init+0x50>)
   845c6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   845c8:	bd08      	pop	{r3, pc}
   845ca:	bf00      	nop
   845cc:	05b8d800 	.word	0x05b8d800
   845d0:	20000141 	.word	0x20000141
   845d4:	0008473d 	.word	0x0008473d
   845d8:	00084765 	.word	0x00084765
   845dc:	00084785 	.word	0x00084785
   845e0:	00084775 	.word	0x00084775
   845e4:	000847a5 	.word	0x000847a5
   845e8:	400e0400 	.word	0x400e0400
   845ec:	200f3f01 	.word	0x200f3f01
   845f0:	000847b5 	.word	0x000847b5
   845f4:	000846e9 	.word	0x000846e9
   845f8:	00084ff9 	.word	0x00084ff9

000845fc <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   845fc:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   845fe:	204f      	movs	r0, #79	; 0x4f
   84600:	4c03      	ldr	r4, [pc, #12]	; (84610 <ui_init+0x14>)
   84602:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84604:	2050      	movs	r0, #80	; 0x50
   84606:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   84608:	2051      	movs	r0, #81	; 0x51
   8460a:	47a0      	blx	r4
}
   8460c:	bd10      	pop	{r4, pc}
   8460e:	bf00      	nop
   84610:	00084451 	.word	0x00084451

00084614 <ui_powerdown>:

void ui_powerdown(void)
{
   84614:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   84616:	204f      	movs	r0, #79	; 0x4f
   84618:	4c04      	ldr	r4, [pc, #16]	; (8462c <ui_powerdown+0x18>)
   8461a:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   8461c:	2050      	movs	r0, #80	; 0x50
   8461e:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   84620:	2051      	movs	r0, #81	; 0x51
   84622:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   84624:	203f      	movs	r0, #63	; 0x3f
   84626:	4b02      	ldr	r3, [pc, #8]	; (84630 <ui_powerdown+0x1c>)
   84628:	4798      	blx	r3
		
}
   8462a:	bd10      	pop	{r4, pc}
   8462c:	00084451 	.word	0x00084451
   84630:	00084b3d 	.word	0x00084b3d

00084634 <ui_wakeup>:

void ui_wakeup(void)
{
   84634:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   84636:	204f      	movs	r0, #79	; 0x4f
   84638:	4b02      	ldr	r3, [pc, #8]	; (84644 <ui_wakeup+0x10>)
   8463a:	4798      	blx	r3
	board_power(1);
   8463c:	203f      	movs	r0, #63	; 0x3f
   8463e:	4b02      	ldr	r3, [pc, #8]	; (84648 <ui_wakeup+0x14>)
   84640:	4798      	blx	r3
}
   84642:	bd08      	pop	{r3, pc}
   84644:	00084491 	.word	0x00084491
   84648:	00084b21 	.word	0x00084b21

0008464c <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   8464c:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
   8464e:	4c0d      	ldr	r4, [pc, #52]	; (84684 <ui_process+0x38>)
   84650:	fba4 3400 	umull	r3, r4, r4, r0
   84654:	09a4      	lsrs	r4, r4, #6
   84656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8465a:	fb03 0014 	mls	r0, r3, r4, r0
   8465e:	b284      	uxth	r4, r0
   84660:	b13c      	cbz	r4, 84672 <ui_process+0x26>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   84662:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   84666:	d008      	beq.n	8467a <ui_process+0x2e>
		LED_Off(LED0_GPIO);
	}
	
	task_tickCnt++;
   84668:	4a07      	ldr	r2, [pc, #28]	; (84688 <ui_process+0x3c>)
   8466a:	6813      	ldr	r3, [r2, #0]
   8466c:	3301      	adds	r3, #1
   8466e:	6013      	str	r3, [r2, #0]
}
   84670:	bd10      	pop	{r4, pc}
		LED_On(LED0_GPIO);
   84672:	204f      	movs	r0, #79	; 0x4f
   84674:	4b05      	ldr	r3, [pc, #20]	; (8468c <ui_process+0x40>)
   84676:	4798      	blx	r3
   84678:	e7f3      	b.n	84662 <ui_process+0x16>
		LED_Off(LED0_GPIO);
   8467a:	204f      	movs	r0, #79	; 0x4f
   8467c:	4b04      	ldr	r3, [pc, #16]	; (84690 <ui_process+0x44>)
   8467e:	4798      	blx	r3
   84680:	e7f2      	b.n	84668 <ui_process+0x1c>
   84682:	bf00      	nop
   84684:	10624dd3 	.word	0x10624dd3
   84688:	20000ecc 	.word	0x20000ecc
   8468c:	00084491 	.word	0x00084491
   84690:	00084451 	.word	0x00084451

00084694 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84694:	4a13      	ldr	r2, [pc, #76]	; (846e4 <pmc_switch_mck_to_mainck+0x50>)
   84696:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84698:	f023 0303 	bic.w	r3, r3, #3
   8469c:	f043 0301 	orr.w	r3, r3, #1
   846a0:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   846a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   846a6:	4a0f      	ldr	r2, [pc, #60]	; (846e4 <pmc_switch_mck_to_mainck+0x50>)
   846a8:	6e92      	ldr	r2, [r2, #104]	; 0x68
   846aa:	f012 0f08 	tst.w	r2, #8
   846ae:	d102      	bne.n	846b6 <pmc_switch_mck_to_mainck+0x22>
			--ul_timeout) {
		if (ul_timeout == 0) {
   846b0:	b19b      	cbz	r3, 846da <pmc_switch_mck_to_mainck+0x46>
			--ul_timeout) {
   846b2:	3b01      	subs	r3, #1
   846b4:	e7f7      	b.n	846a6 <pmc_switch_mck_to_mainck+0x12>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   846b6:	4a0b      	ldr	r2, [pc, #44]	; (846e4 <pmc_switch_mck_to_mainck+0x50>)
   846b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   846ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   846be:	4303      	orrs	r3, r0
   846c0:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   846c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   846c6:	4a07      	ldr	r2, [pc, #28]	; (846e4 <pmc_switch_mck_to_mainck+0x50>)
   846c8:	6e92      	ldr	r2, [r2, #104]	; 0x68
   846ca:	f012 0f08 	tst.w	r2, #8
   846ce:	d102      	bne.n	846d6 <pmc_switch_mck_to_mainck+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
   846d0:	b12b      	cbz	r3, 846de <pmc_switch_mck_to_mainck+0x4a>
			--ul_timeout) {
   846d2:	3b01      	subs	r3, #1
   846d4:	e7f7      	b.n	846c6 <pmc_switch_mck_to_mainck+0x32>
			return 1;
		}
	}

	return 0;
   846d6:	2000      	movs	r0, #0
   846d8:	4770      	bx	lr
			return 1;
   846da:	2001      	movs	r0, #1
   846dc:	4770      	bx	lr
			return 1;
   846de:	2001      	movs	r0, #1
}
   846e0:	4770      	bx	lr
   846e2:	bf00      	nop
   846e4:	400e0400 	.word	0x400e0400

000846e8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   846e8:	4a13      	ldr	r2, [pc, #76]	; (84738 <pmc_switch_mck_to_pllack+0x50>)
   846ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
   846ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   846f0:	4303      	orrs	r3, r0
   846f2:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   846f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   846f8:	4a0f      	ldr	r2, [pc, #60]	; (84738 <pmc_switch_mck_to_pllack+0x50>)
   846fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
   846fc:	f012 0f08 	tst.w	r2, #8
   84700:	d102      	bne.n	84708 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84702:	b1a3      	cbz	r3, 8472e <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
   84704:	3b01      	subs	r3, #1
   84706:	e7f7      	b.n	846f8 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84708:	4a0b      	ldr	r2, [pc, #44]	; (84738 <pmc_switch_mck_to_pllack+0x50>)
   8470a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8470c:	f023 0303 	bic.w	r3, r3, #3
   84710:	f043 0302 	orr.w	r3, r3, #2
   84714:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84716:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8471a:	4a07      	ldr	r2, [pc, #28]	; (84738 <pmc_switch_mck_to_pllack+0x50>)
   8471c:	6e92      	ldr	r2, [r2, #104]	; 0x68
   8471e:	f012 0f08 	tst.w	r2, #8
   84722:	d102      	bne.n	8472a <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84724:	b12b      	cbz	r3, 84732 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
   84726:	3b01      	subs	r3, #1
   84728:	e7f7      	b.n	8471a <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
   8472a:	2000      	movs	r0, #0
   8472c:	4770      	bx	lr
			return 1;
   8472e:	2001      	movs	r0, #1
   84730:	4770      	bx	lr
			return 1;
   84732:	2001      	movs	r0, #1
}
   84734:	4770      	bx	lr
   84736:	bf00      	nop
   84738:	400e0400 	.word	0x400e0400

0008473c <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   8473c:	4908      	ldr	r1, [pc, #32]	; (84760 <pmc_osc_enable_main_xtal+0x24>)
   8473e:	6a0a      	ldr	r2, [r1, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84740:	f022 0203 	bic.w	r2, r2, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84744:	0203      	lsls	r3, r0, #8
   84746:	b29b      	uxth	r3, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   84748:	4313      	orrs	r3, r2
   8474a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8474e:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   84752:	620b      	str	r3, [r1, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84754:	4b02      	ldr	r3, [pc, #8]	; (84760 <pmc_osc_enable_main_xtal+0x24>)
   84756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84758:	f013 0f01 	tst.w	r3, #1
   8475c:	d0fa      	beq.n	84754 <pmc_osc_enable_main_xtal+0x18>
}
   8475e:	4770      	bx	lr
   84760:	400e0400 	.word	0x400e0400

00084764 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   84764:	4b02      	ldr	r3, [pc, #8]	; (84770 <pmc_osc_is_ready_main_xtal+0xc>)
   84766:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84768:	f000 0001 	and.w	r0, r0, #1
   8476c:	4770      	bx	lr
   8476e:	bf00      	nop
   84770:	400e0400 	.word	0x400e0400

00084774 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84774:	4b02      	ldr	r3, [pc, #8]	; (84780 <pmc_osc_is_ready_mainck+0xc>)
   84776:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84778:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8477c:	4770      	bx	lr
   8477e:	bf00      	nop
   84780:	400e0400 	.word	0x400e0400

00084784 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   84784:	4b06      	ldr	r3, [pc, #24]	; (847a0 <pmc_mainck_osc_select+0x1c>)
   84786:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   84788:	b130      	cbz	r0, 84798 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
   8478a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8478e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84792:	4a03      	ldr	r2, [pc, #12]	; (847a0 <pmc_mainck_osc_select+0x1c>)
   84794:	6213      	str	r3, [r2, #32]
}
   84796:	4770      	bx	lr
		mor &= ~CKGR_MOR_MOSCSEL;
   84798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   8479c:	e7f7      	b.n	8478e <pmc_mainck_osc_select+0xa>
   8479e:	bf00      	nop
   847a0:	400e0400 	.word	0x400e0400

000847a4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   847a4:	4b02      	ldr	r3, [pc, #8]	; (847b0 <pmc_disable_pllack+0xc>)
   847a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   847aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   847ac:	4770      	bx	lr
   847ae:	bf00      	nop
   847b0:	400e0400 	.word	0x400e0400

000847b4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   847b4:	4b02      	ldr	r3, [pc, #8]	; (847c0 <pmc_is_locked_pllack+0xc>)
   847b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   847b8:	f000 0002 	and.w	r0, r0, #2
   847bc:	4770      	bx	lr
   847be:	bf00      	nop
   847c0:	400e0400 	.word	0x400e0400

000847c4 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   847c4:	4b02      	ldr	r3, [pc, #8]	; (847d0 <pmc_is_locked_upll+0xc>)
   847c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   847c8:	f000 0040 	and.w	r0, r0, #64	; 0x40
   847cc:	4770      	bx	lr
   847ce:	bf00      	nop
   847d0:	400e0400 	.word	0x400e0400

000847d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   847d4:	281d      	cmp	r0, #29
   847d6:	d80e      	bhi.n	847f6 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   847d8:	281f      	cmp	r0, #31
   847da:	d80e      	bhi.n	847fa <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   847dc:	4b09      	ldr	r3, [pc, #36]	; (84804 <pmc_enable_periph_clk+0x30>)
   847de:	699a      	ldr	r2, [r3, #24]
   847e0:	2301      	movs	r3, #1
   847e2:	4083      	lsls	r3, r0
   847e4:	4393      	bics	r3, r2
   847e6:	d00a      	beq.n	847fe <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   847e8:	2301      	movs	r3, #1
   847ea:	fa03 f000 	lsl.w	r0, r3, r0
   847ee:	4b05      	ldr	r3, [pc, #20]	; (84804 <pmc_enable_periph_clk+0x30>)
   847f0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   847f2:	2000      	movs	r0, #0
   847f4:	4770      	bx	lr
		return 1;
   847f6:	2001      	movs	r0, #1
   847f8:	4770      	bx	lr
	return 0;
   847fa:	2000      	movs	r0, #0
   847fc:	4770      	bx	lr
   847fe:	2000      	movs	r0, #0
}
   84800:	4770      	bx	lr
   84802:	bf00      	nop
   84804:	400e0400 	.word	0x400e0400

00084808 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   84808:	281d      	cmp	r0, #29
   8480a:	d810      	bhi.n	8482e <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   8480c:	281f      	cmp	r0, #31
   8480e:	d810      	bhi.n	84832 <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   84810:	4b09      	ldr	r3, [pc, #36]	; (84838 <pmc_disable_periph_clk+0x30>)
   84812:	699a      	ldr	r2, [r3, #24]
   84814:	2301      	movs	r3, #1
   84816:	4083      	lsls	r3, r0
   84818:	4393      	bics	r3, r2
   8481a:	d001      	beq.n	84820 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   8481c:	2000      	movs	r0, #0
}
   8481e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   84820:	2301      	movs	r3, #1
   84822:	fa03 f000 	lsl.w	r0, r3, r0
   84826:	4b04      	ldr	r3, [pc, #16]	; (84838 <pmc_disable_periph_clk+0x30>)
   84828:	6158      	str	r0, [r3, #20]
	return 0;
   8482a:	2000      	movs	r0, #0
   8482c:	4770      	bx	lr
		return 1;
   8482e:	2001      	movs	r0, #1
   84830:	4770      	bx	lr
	return 0;
   84832:	2000      	movs	r0, #0
   84834:	4770      	bx	lr
   84836:	bf00      	nop
   84838:	400e0400 	.word	0x400e0400

0008483c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   8483c:	f44f 7380 	mov.w	r3, #256	; 0x100
   84840:	4083      	lsls	r3, r0
   84842:	4a01      	ldr	r2, [pc, #4]	; (84848 <pmc_enable_pck+0xc>)
   84844:	6013      	str	r3, [r2, #0]
}
   84846:	4770      	bx	lr
   84848:	400e0400 	.word	0x400e0400

0008484c <pmc_set_fast_startup_input>:
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   8484c:	f3c0 0312 	ubfx	r3, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   84850:	4a02      	ldr	r2, [pc, #8]	; (8485c <pmc_set_fast_startup_input+0x10>)
   84852:	6f10      	ldr	r0, [r2, #112]	; 0x70
   84854:	4318      	orrs	r0, r3
   84856:	6710      	str	r0, [r2, #112]	; 0x70
}
   84858:	4770      	bx	lr
   8485a:	bf00      	nop
   8485c:	400e0400 	.word	0x400e0400

00084860 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   84860:	4b01      	ldr	r3, [pc, #4]	; (84868 <udi_vendor_getsetting+0x8>)
   84862:	7818      	ldrb	r0, [r3, #0]
   84864:	4770      	bx	lr
   84866:	bf00      	nop
   84868:	20001950 	.word	0x20001950

0008486c <udi_vendor_enable>:
{
   8486c:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   8486e:	4b05      	ldr	r3, [pc, #20]	; (84884 <udi_vendor_enable+0x18>)
   84870:	4798      	blx	r3
   84872:	78c3      	ldrb	r3, [r0, #3]
   84874:	4a04      	ldr	r2, [pc, #16]	; (84888 <udi_vendor_enable+0x1c>)
   84876:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   84878:	b10b      	cbz	r3, 8487e <udi_vendor_enable+0x12>
	return true;
   8487a:	2001      	movs	r0, #1
}
   8487c:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8487e:	4b03      	ldr	r3, [pc, #12]	; (8488c <udi_vendor_enable+0x20>)
   84880:	4798      	blx	r3
   84882:	e7fb      	b.n	8487c <udi_vendor_enable+0x10>
   84884:	00082899 	.word	0x00082899
   84888:	20001950 	.word	0x20001950
   8488c:	00081845 	.word	0x00081845

00084890 <udi_vendor_disable>:
{
   84890:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   84892:	4b03      	ldr	r3, [pc, #12]	; (848a0 <udi_vendor_disable+0x10>)
   84894:	781b      	ldrb	r3, [r3, #0]
   84896:	b103      	cbz	r3, 8489a <udi_vendor_disable+0xa>
}
   84898:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   8489a:	4b02      	ldr	r3, [pc, #8]	; (848a4 <udi_vendor_disable+0x14>)
   8489c:	4798      	blx	r3
}
   8489e:	e7fb      	b.n	84898 <udi_vendor_disable+0x8>
   848a0:	20001950 	.word	0x20001950
   848a4:	00081875 	.word	0x00081875

000848a8 <udi_vendor_setup>:
{
   848a8:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   848aa:	4a0d      	ldr	r2, [pc, #52]	; (848e0 <udi_vendor_setup+0x38>)
   848ac:	7813      	ldrb	r3, [r2, #0]
   848ae:	f992 2000 	ldrsb.w	r2, [r2]
   848b2:	2a00      	cmp	r2, #0
   848b4:	db07      	blt.n	848c6 <udi_vendor_setup+0x1e>
	if (Udd_setup_is_out()) {
   848b6:	2a00      	cmp	r2, #0
   848b8:	db0f      	blt.n	848da <udi_vendor_setup+0x32>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   848ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
   848be:	2b40      	cmp	r3, #64	; 0x40
   848c0:	d008      	beq.n	848d4 <udi_vendor_setup+0x2c>
	return false; // Not supported request
   848c2:	2000      	movs	r0, #0
}
   848c4:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   848c6:	f003 0160 	and.w	r1, r3, #96	; 0x60
   848ca:	2940      	cmp	r1, #64	; 0x40
   848cc:	d1f3      	bne.n	848b6 <udi_vendor_setup+0xe>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   848ce:	4b05      	ldr	r3, [pc, #20]	; (848e4 <udi_vendor_setup+0x3c>)
   848d0:	4798      	blx	r3
   848d2:	e7f7      	b.n	848c4 <udi_vendor_setup+0x1c>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   848d4:	4b04      	ldr	r3, [pc, #16]	; (848e8 <udi_vendor_setup+0x40>)
   848d6:	4798      	blx	r3
   848d8:	e7f4      	b.n	848c4 <udi_vendor_setup+0x1c>
	return false; // Not supported request
   848da:	2000      	movs	r0, #0
   848dc:	e7f2      	b.n	848c4 <udi_vendor_setup+0x1c>
   848de:	bf00      	nop
   848e0:	20001930 	.word	0x20001930
   848e4:	000818c9 	.word	0x000818c9
   848e8:	00081881 	.word	0x00081881

000848ec <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   848ec:	b510      	push	{r4, lr}
   848ee:	b082      	sub	sp, #8
   848f0:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   848f2:	9200      	str	r2, [sp, #0]
   848f4:	4602      	mov	r2, r0
   848f6:	2100      	movs	r1, #0
   848f8:	2081      	movs	r0, #129	; 0x81
   848fa:	4c02      	ldr	r4, [pc, #8]	; (84904 <udi_vendor_bulk_in_run+0x18>)
   848fc:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   848fe:	b002      	add	sp, #8
   84900:	bd10      	pop	{r4, pc}
   84902:	bf00      	nop
   84904:	00083f09 	.word	0x00083f09

00084908 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84908:	b510      	push	{r4, lr}
   8490a:	b082      	sub	sp, #8
   8490c:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   8490e:	9200      	str	r2, [sp, #0]
   84910:	4602      	mov	r2, r0
   84912:	2100      	movs	r1, #0
   84914:	2002      	movs	r0, #2
   84916:	4c02      	ldr	r4, [pc, #8]	; (84920 <udi_vendor_bulk_out_run+0x18>)
   84918:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8491a:	b002      	add	sp, #8
   8491c:	bd10      	pop	{r4, pc}
   8491e:	bf00      	nop
   84920:	00083f09 	.word	0x00083f09

00084924 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   84924:	f1a1 030e 	sub.w	r3, r1, #14
   84928:	2b01      	cmp	r3, #1
   8492a:	d91d      	bls.n	84968 <efc_perform_command+0x44>
{
   8492c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8492e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84932:	b672      	cpsid	i
   84934:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84938:	4b0d      	ldr	r3, [pc, #52]	; (84970 <efc_perform_command+0x4c>)
   8493a:	f04f 0c00 	mov.w	ip, #0
   8493e:	f883 c000 	strb.w	ip, [r3]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84942:	0212      	lsls	r2, r2, #8
   84944:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   84948:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   8494c:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   8494e:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   84950:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   84954:	4b07      	ldr	r3, [pc, #28]	; (84974 <efc_perform_command+0x50>)
   84956:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84958:	b92c      	cbnz	r4, 84966 <efc_perform_command+0x42>
		cpu_irq_enable();
   8495a:	4b05      	ldr	r3, [pc, #20]	; (84970 <efc_perform_command+0x4c>)
   8495c:	2201      	movs	r2, #1
   8495e:	701a      	strb	r2, [r3, #0]
   84960:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84964:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   84966:	bd10      	pop	{r4, pc}
		return EFC_RC_NOT_SUPPORT;
   84968:	f04f 30ff 	mov.w	r0, #4294967295
}
   8496c:	4770      	bx	lr
   8496e:	bf00      	nop
   84970:	20000354 	.word	0x20000354
   84974:	20000071 	.word	0x20000071

00084978 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   84978:	b10a      	cbz	r2, 8497e <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   8497a:	6641      	str	r1, [r0, #100]	; 0x64
   8497c:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8497e:	6601      	str	r1, [r0, #96]	; 0x60
	}
}
   84980:	4770      	bx	lr

00084982 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   84982:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   84984:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   84988:	d016      	beq.n	849b8 <pio_set_peripheral+0x36>
   8498a:	d80a      	bhi.n	849a2 <pio_set_peripheral+0x20>
   8498c:	b199      	cbz	r1, 849b6 <pio_set_peripheral+0x34>
   8498e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   84992:	d10f      	bne.n	849b4 <pio_set_peripheral+0x32>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   84994:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   84996:	6f03      	ldr	r3, [r0, #112]	; 0x70
   84998:	ea21 0102 	bic.w	r1, r1, r2
   8499c:	400b      	ands	r3, r1
   8499e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   849a0:	e008      	b.n	849b4 <pio_set_peripheral+0x32>
	switch (ul_type) {
   849a2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   849a6:	d006      	beq.n	849b6 <pio_set_peripheral+0x34>
   849a8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   849ac:	d003      	beq.n	849b6 <pio_set_peripheral+0x34>
   849ae:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   849b2:	d000      	beq.n	849b6 <pio_set_peripheral+0x34>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   849b4:	6042      	str	r2, [r0, #4]
}
   849b6:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   849b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   849ba:	4313      	orrs	r3, r2
   849bc:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   849be:	e7f9      	b.n	849b4 <pio_set_peripheral+0x32>

000849c0 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   849c0:	6441      	str	r1, [r0, #68]	; 0x44
}
   849c2:	4770      	bx	lr

000849c4 <pio_set_input>:
{
   849c4:	b570      	push	{r4, r5, r6, lr}
   849c6:	4604      	mov	r4, r0
   849c8:	460d      	mov	r5, r1
   849ca:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   849cc:	4b0d      	ldr	r3, [pc, #52]	; (84a04 <pio_set_input+0x40>)
   849ce:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   849d0:	f006 0201 	and.w	r2, r6, #1
   849d4:	4629      	mov	r1, r5
   849d6:	4620      	mov	r0, r4
   849d8:	4b0b      	ldr	r3, [pc, #44]	; (84a08 <pio_set_input+0x44>)
   849da:	4798      	blx	r3
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   849dc:	f016 0f0a 	tst.w	r6, #10
   849e0:	d008      	beq.n	849f4 <pio_set_input+0x30>
		p_pio->PIO_IFER = ul_mask;
   849e2:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
   849e4:	f016 0f02 	tst.w	r6, #2
   849e8:	d006      	beq.n	849f8 <pio_set_input+0x34>
		p_pio->PIO_SCIFSR = ul_mask;
   849ea:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   849ee:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   849f0:	6025      	str	r5, [r4, #0]
}
   849f2:	bd70      	pop	{r4, r5, r6, pc}
		p_pio->PIO_IFDR = ul_mask;
   849f4:	6265      	str	r5, [r4, #36]	; 0x24
   849f6:	e7f5      	b.n	849e4 <pio_set_input+0x20>
		if (ul_attribute & PIO_DEBOUNCE) {
   849f8:	f016 0f08 	tst.w	r6, #8
   849fc:	d0f7      	beq.n	849ee <pio_set_input+0x2a>
			p_pio->PIO_DIFSR = ul_mask;
   849fe:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   84a02:	e7f4      	b.n	849ee <pio_set_input+0x2a>
   84a04:	000849c1 	.word	0x000849c1
   84a08:	00084979 	.word	0x00084979

00084a0c <pio_set_output>:
{
   84a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84a0e:	4604      	mov	r4, r0
   84a10:	460d      	mov	r5, r1
   84a12:	4616      	mov	r6, r2
   84a14:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   84a16:	4b09      	ldr	r3, [pc, #36]	; (84a3c <pio_set_output+0x30>)
   84a18:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   84a1a:	9a06      	ldr	r2, [sp, #24]
   84a1c:	4629      	mov	r1, r5
   84a1e:	4620      	mov	r0, r4
   84a20:	4b07      	ldr	r3, [pc, #28]	; (84a40 <pio_set_output+0x34>)
   84a22:	4798      	blx	r3
	if (ul_multidrive_enable) {
   84a24:	b12f      	cbz	r7, 84a32 <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
   84a26:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
   84a28:	b12e      	cbz	r6, 84a36 <pio_set_output+0x2a>
		p_pio->PIO_SODR = ul_mask;
   84a2a:	6325      	str	r5, [r4, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
   84a2c:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   84a2e:	6025      	str	r5, [r4, #0]
}
   84a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
   84a32:	6565      	str	r5, [r4, #84]	; 0x54
   84a34:	e7f8      	b.n	84a28 <pio_set_output+0x1c>
		p_pio->PIO_CODR = ul_mask;
   84a36:	6365      	str	r5, [r4, #52]	; 0x34
   84a38:	e7f8      	b.n	84a2c <pio_set_output+0x20>
   84a3a:	bf00      	nop
   84a3c:	000849c1 	.word	0x000849c1
   84a40:	00084979 	.word	0x00084979

00084a44 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   84a44:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   84a46:	4770      	bx	lr

00084a48 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   84a48:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   84a4a:	4770      	bx	lr

00084a4c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   84a4c:	b570      	push	{r4, r5, r6, lr}
   84a4e:	b082      	sub	sp, #8
   84a50:	4605      	mov	r5, r0
   84a52:	460e      	mov	r6, r1
   84a54:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   84a56:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   84a5a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84a5e:	d03d      	beq.n	84adc <pio_configure_pin_group+0x90>
   84a60:	d814      	bhi.n	84a8c <pio_configure_pin_group+0x40>
   84a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84a66:	d02b      	beq.n	84ac0 <pio_configure_pin_group+0x74>
   84a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84a6c:	d10c      	bne.n	84a88 <pio_configure_pin_group+0x3c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   84a6e:	460a      	mov	r2, r1
   84a70:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84a74:	4b1b      	ldr	r3, [pc, #108]	; (84ae4 <pio_configure_pin_group+0x98>)
   84a76:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   84a78:	f004 0201 	and.w	r2, r4, #1
   84a7c:	4631      	mov	r1, r6
   84a7e:	4628      	mov	r0, r5
   84a80:	4b19      	ldr	r3, [pc, #100]	; (84ae8 <pio_configure_pin_group+0x9c>)
   84a82:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   84a84:	2001      	movs	r0, #1
		break;
   84a86:	e027      	b.n	84ad8 <pio_configure_pin_group+0x8c>
	switch (ul_flags & PIO_TYPE_Msk) {
   84a88:	2000      	movs	r0, #0
   84a8a:	e025      	b.n	84ad8 <pio_configure_pin_group+0x8c>
   84a8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84a90:	d002      	beq.n	84a98 <pio_configure_pin_group+0x4c>
   84a92:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84a96:	d111      	bne.n	84abc <pio_configure_pin_group+0x70>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84a98:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   84a9c:	f004 0301 	and.w	r3, r4, #1
   84aa0:	9300      	str	r3, [sp, #0]
   84aa2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   84aa6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   84aaa:	bf14      	ite	ne
   84aac:	2200      	movne	r2, #0
   84aae:	2201      	moveq	r2, #1
   84ab0:	4631      	mov	r1, r6
   84ab2:	4628      	mov	r0, r5
   84ab4:	4c0d      	ldr	r4, [pc, #52]	; (84aec <pio_configure_pin_group+0xa0>)
   84ab6:	47a0      	blx	r4
	return 1;
   84ab8:	2001      	movs	r0, #1
		break;
   84aba:	e00d      	b.n	84ad8 <pio_configure_pin_group+0x8c>
	switch (ul_flags & PIO_TYPE_Msk) {
   84abc:	2000      	movs	r0, #0
   84abe:	e00b      	b.n	84ad8 <pio_configure_pin_group+0x8c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   84ac0:	460a      	mov	r2, r1
   84ac2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84ac6:	4b07      	ldr	r3, [pc, #28]	; (84ae4 <pio_configure_pin_group+0x98>)
   84ac8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   84aca:	f004 0201 	and.w	r2, r4, #1
   84ace:	4631      	mov	r1, r6
   84ad0:	4628      	mov	r0, r5
   84ad2:	4b05      	ldr	r3, [pc, #20]	; (84ae8 <pio_configure_pin_group+0x9c>)
   84ad4:	4798      	blx	r3
	return 1;
   84ad6:	2001      	movs	r0, #1
}
   84ad8:	b002      	add	sp, #8
   84ada:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   84adc:	4b04      	ldr	r3, [pc, #16]	; (84af0 <pio_configure_pin_group+0xa4>)
   84ade:	4798      	blx	r3
	return 1;
   84ae0:	2001      	movs	r0, #1
		break;
   84ae2:	e7f9      	b.n	84ad8 <pio_configure_pin_group+0x8c>
   84ae4:	00084983 	.word	0x00084983
   84ae8:	00084979 	.word	0x00084979
   84aec:	00084a0d 	.word	0x00084a0d
   84af0:	000849c5 	.word	0x000849c5

00084af4 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84af4:	0940      	lsrs	r0, r0, #5
   84af6:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   84afa:	f200 7006 	addw	r0, r0, #1798	; 0x706
#endif
	return p_pio;
}
   84afe:	0240      	lsls	r0, r0, #9
   84b00:	4770      	bx	lr
   84b02:	0000      	movs	r0, r0

00084b04 <pio_get_pin_value>:
{
   84b04:	b510      	push	{r4, lr}
   84b06:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84b08:	4b04      	ldr	r3, [pc, #16]	; (84b1c <pio_get_pin_value+0x18>)
   84b0a:	4798      	blx	r3
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   84b0c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   84b0e:	f004 041f 	and.w	r4, r4, #31
   84b12:	40e0      	lsrs	r0, r4
}
   84b14:	f000 0001 	and.w	r0, r0, #1
   84b18:	bd10      	pop	{r4, pc}
   84b1a:	bf00      	nop
   84b1c:	00084af5 	.word	0x00084af5

00084b20 <pio_set_pin_high>:
{
   84b20:	b510      	push	{r4, lr}
   84b22:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84b24:	4b04      	ldr	r3, [pc, #16]	; (84b38 <pio_set_pin_high+0x18>)
   84b26:	4798      	blx	r3
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84b28:	f004 041f 	and.w	r4, r4, #31
   84b2c:	2301      	movs	r3, #1
   84b2e:	fa03 f404 	lsl.w	r4, r3, r4
   84b32:	6304      	str	r4, [r0, #48]	; 0x30
}
   84b34:	bd10      	pop	{r4, pc}
   84b36:	bf00      	nop
   84b38:	00084af5 	.word	0x00084af5

00084b3c <pio_set_pin_low>:
{
   84b3c:	b510      	push	{r4, lr}
   84b3e:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84b40:	4b04      	ldr	r3, [pc, #16]	; (84b54 <pio_set_pin_low+0x18>)
   84b42:	4798      	blx	r3
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84b44:	f004 041f 	and.w	r4, r4, #31
   84b48:	2301      	movs	r3, #1
   84b4a:	fa03 f404 	lsl.w	r4, r3, r4
   84b4e:	6344      	str	r4, [r0, #52]	; 0x34
}
   84b50:	bd10      	pop	{r4, pc}
   84b52:	bf00      	nop
   84b54:	00084af5 	.word	0x00084af5

00084b58 <pio_configure_pin>:
{
   84b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   84b5a:	b083      	sub	sp, #12
   84b5c:	4604      	mov	r4, r0
   84b5e:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84b60:	4b2e      	ldr	r3, [pc, #184]	; (84c1c <pio_configure_pin+0xc4>)
   84b62:	4798      	blx	r3
   84b64:	4606      	mov	r6, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   84b66:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
   84b6a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84b6e:	d04b      	beq.n	84c08 <pio_configure_pin+0xb0>
   84b70:	d819      	bhi.n	84ba6 <pio_configure_pin+0x4e>
   84b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84b76:	d034      	beq.n	84be2 <pio_configure_pin+0x8a>
   84b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84b7c:	d111      	bne.n	84ba2 <pio_configure_pin+0x4a>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   84b7e:	f004 041f 	and.w	r4, r4, #31
   84b82:	2701      	movs	r7, #1
   84b84:	fa07 f404 	lsl.w	r4, r7, r4
   84b88:	4622      	mov	r2, r4
   84b8a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84b8e:	4b24      	ldr	r3, [pc, #144]	; (84c20 <pio_configure_pin+0xc8>)
   84b90:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   84b92:	ea05 0207 	and.w	r2, r5, r7
   84b96:	4621      	mov	r1, r4
   84b98:	4630      	mov	r0, r6
   84b9a:	4b22      	ldr	r3, [pc, #136]	; (84c24 <pio_configure_pin+0xcc>)
   84b9c:	4798      	blx	r3
	return 1;
   84b9e:	4638      	mov	r0, r7
		break;
   84ba0:	e030      	b.n	84c04 <pio_configure_pin+0xac>
	switch (ul_flags & PIO_TYPE_Msk) {
   84ba2:	2000      	movs	r0, #0
   84ba4:	e02e      	b.n	84c04 <pio_configure_pin+0xac>
   84ba6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84baa:	d002      	beq.n	84bb2 <pio_configure_pin+0x5a>
   84bac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84bb0:	d115      	bne.n	84bde <pio_configure_pin+0x86>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84bb2:	f004 041f 	and.w	r4, r4, #31
   84bb6:	2701      	movs	r7, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84bb8:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84bbc:	ea05 0307 	and.w	r3, r5, r7
   84bc0:	9300      	str	r3, [sp, #0]
   84bc2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   84bc6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   84bca:	bf14      	ite	ne
   84bcc:	2200      	movne	r2, #0
   84bce:	2201      	moveq	r2, #1
   84bd0:	fa07 f104 	lsl.w	r1, r7, r4
   84bd4:	4630      	mov	r0, r6
   84bd6:	4c14      	ldr	r4, [pc, #80]	; (84c28 <pio_configure_pin+0xd0>)
   84bd8:	47a0      	blx	r4
	return 1;
   84bda:	4638      	mov	r0, r7
		break;
   84bdc:	e012      	b.n	84c04 <pio_configure_pin+0xac>
	switch (ul_flags & PIO_TYPE_Msk) {
   84bde:	2000      	movs	r0, #0
   84be0:	e010      	b.n	84c04 <pio_configure_pin+0xac>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   84be2:	f004 041f 	and.w	r4, r4, #31
   84be6:	2701      	movs	r7, #1
   84be8:	fa07 f404 	lsl.w	r4, r7, r4
   84bec:	4622      	mov	r2, r4
   84bee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84bf2:	4b0b      	ldr	r3, [pc, #44]	; (84c20 <pio_configure_pin+0xc8>)
   84bf4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   84bf6:	ea05 0207 	and.w	r2, r5, r7
   84bfa:	4621      	mov	r1, r4
   84bfc:	4630      	mov	r0, r6
   84bfe:	4b09      	ldr	r3, [pc, #36]	; (84c24 <pio_configure_pin+0xcc>)
   84c00:	4798      	blx	r3
	return 1;
   84c02:	4638      	mov	r0, r7
}
   84c04:	b003      	add	sp, #12
   84c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   84c08:	f004 041f 	and.w	r4, r4, #31
   84c0c:	2701      	movs	r7, #1
   84c0e:	462a      	mov	r2, r5
   84c10:	fa07 f104 	lsl.w	r1, r7, r4
   84c14:	4b05      	ldr	r3, [pc, #20]	; (84c2c <pio_configure_pin+0xd4>)
   84c16:	4798      	blx	r3
	return 1;
   84c18:	4638      	mov	r0, r7
		break;
   84c1a:	e7f3      	b.n	84c04 <pio_configure_pin+0xac>
   84c1c:	00084af5 	.word	0x00084af5
   84c20:	00084983 	.word	0x00084983
   84c24:	00084979 	.word	0x00084979
   84c28:	00084a0d 	.word	0x00084a0d
   84c2c:	000849c5 	.word	0x000849c5

00084c30 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   84c30:	e7fe      	b.n	84c30 <Dummy_Handler>

00084c32 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   84c32:	4603      	mov	r3, r0
	uint32_t val;

	if (len == 0)
   84c34:	460a      	mov	r2, r1
   84c36:	b159      	cbz	r1, 84c50 <twi_mk_addr+0x1e>
		return 0;

	val = addr[0];
   84c38:	7800      	ldrb	r0, [r0, #0]
	if (len > 1) {
   84c3a:	2901      	cmp	r1, #1
   84c3c:	dd02      	ble.n	84c44 <twi_mk_addr+0x12>
		val <<= 8;
		val |= addr[1];
   84c3e:	7859      	ldrb	r1, [r3, #1]
   84c40:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (len > 2) {
   84c44:	2a02      	cmp	r2, #2
   84c46:	dd04      	ble.n	84c52 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
   84c48:	789b      	ldrb	r3, [r3, #2]
   84c4a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   84c4e:	4770      	bx	lr
		return 0;
   84c50:	2000      	movs	r0, #0
	}
	return val;
}
   84c52:	4770      	bx	lr

00084c54 <twi_enable_master_mode>:
	p_twi->TWI_CR = TWI_CR_MSDIS;
   84c54:	2308      	movs	r3, #8
   84c56:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   84c58:	2320      	movs	r3, #32
   84c5a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   84c5c:	2304      	movs	r3, #4
   84c5e:	6003      	str	r3, [r0, #0]
}
   84c60:	4770      	bx	lr
   84c62:	0000      	movs	r0, r0

00084c64 <twi_set_speed>:
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   84c64:	4b0d      	ldr	r3, [pc, #52]	; (84c9c <twi_set_speed+0x38>)
   84c66:	4299      	cmp	r1, r3
   84c68:	d816      	bhi.n	84c98 <twi_set_speed+0x34>
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   84c6a:	004b      	lsls	r3, r1, #1
   84c6c:	fbb2 f2f3 	udiv	r2, r2, r3
   84c70:	1f13      	subs	r3, r2, #4
	uint32_t ckdiv = 0;
   84c72:	2200      	movs	r2, #0
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   84c74:	2bff      	cmp	r3, #255	; 0xff
   84c76:	d904      	bls.n	84c82 <twi_set_speed+0x1e>
   84c78:	2a06      	cmp	r2, #6
   84c7a:	d802      	bhi.n	84c82 <twi_set_speed+0x1e>
		ckdiv++;
   84c7c:	3201      	adds	r2, #1
		c_lh_div /= TWI_CLK_DIVIDER;
   84c7e:	085b      	lsrs	r3, r3, #1
   84c80:	e7f8      	b.n	84c74 <twi_set_speed+0x10>
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   84c82:	b2d9      	uxtb	r1, r3
   84c84:	021b      	lsls	r3, r3, #8
   84c86:	b29b      	uxth	r3, r3
   84c88:	430b      	orrs	r3, r1
			TWI_CWGR_CKDIV(ckdiv);
   84c8a:	0412      	lsls	r2, r2, #16
   84c8c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   84c90:	431a      	orrs	r2, r3
	p_twi->TWI_CWGR =
   84c92:	6102      	str	r2, [r0, #16]
	return PASS;
   84c94:	2000      	movs	r0, #0
   84c96:	4770      	bx	lr
		return FAIL;
   84c98:	2001      	movs	r0, #1
}
   84c9a:	4770      	bx	lr
   84c9c:	00061a80 	.word	0x00061a80

00084ca0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   84ca0:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
   84ca2:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   84ca4:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   84ca6:	2c00      	cmp	r4, #0
   84ca8:	d042      	beq.n	84d30 <twi_master_read+0x90>
   84caa:	4606      	mov	r6, r0
   84cac:	4608      	mov	r0, r1
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   84cae:	2100      	movs	r1, #0
   84cb0:	6071      	str	r1, [r6, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   84cb2:	7c03      	ldrb	r3, [r0, #16]
   84cb4:	041b      	lsls	r3, r3, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   84cb6:	6842      	ldr	r2, [r0, #4]
   84cb8:	0212      	lsls	r2, r2, #8
   84cba:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   84cbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   84cc2:	4313      	orrs	r3, r2
   84cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   84cc8:	6073      	str	r3, [r6, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   84cca:	60f1      	str	r1, [r6, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   84ccc:	6841      	ldr	r1, [r0, #4]
   84cce:	4b1c      	ldr	r3, [pc, #112]	; (84d40 <twi_master_read+0xa0>)
   84cd0:	4798      	blx	r3
   84cd2:	60f0      	str	r0, [r6, #12]

	/* Send a START condition */
	if (cnt == 1) {
   84cd4:	2c01      	cmp	r4, #1
   84cd6:	d005      	beq.n	84ce4 <twi_master_read+0x44>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
		stop_sent = 1;
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   84cd8:	2301      	movs	r3, #1
   84cda:	6033      	str	r3, [r6, #0]
		stop_sent = 0;
   84cdc:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   84cde:	f643 2398 	movw	r3, #15000	; 0x3a98
   84ce2:	e00e      	b.n	84d02 <twi_master_read+0x62>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   84ce4:	2303      	movs	r3, #3
   84ce6:	6033      	str	r3, [r6, #0]
		stop_sent = 1;
   84ce8:	2001      	movs	r0, #1
   84cea:	e7f8      	b.n	84cde <twi_master_read+0x3e>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
   84cec:	f012 0f02 	tst.w	r2, #2
   84cf0:	d016      	beq.n	84d20 <twi_master_read+0x80>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   84cf2:	6b32      	ldr	r2, [r6, #48]	; 0x30
   84cf4:	462b      	mov	r3, r5
   84cf6:	f803 2b01 	strb.w	r2, [r3], #1

		cnt--;
   84cfa:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
   84cfc:	461d      	mov	r5, r3
		timeout = TWI_TIMEOUT;
   84cfe:	f643 2398 	movw	r3, #15000	; 0x3a98
	while (cnt > 0) {
   84d02:	b17c      	cbz	r4, 84d24 <twi_master_read+0x84>
		status = p_twi->TWI_SR;
   84d04:	6a32      	ldr	r2, [r6, #32]
		if (status & TWI_SR_NACK) {
   84d06:	f412 7f80 	tst.w	r2, #256	; 0x100
   84d0a:	d114      	bne.n	84d36 <twi_master_read+0x96>
		if (!timeout--) {
   84d0c:	1e59      	subs	r1, r3, #1
   84d0e:	b1a3      	cbz	r3, 84d3a <twi_master_read+0x9a>
		if (cnt == 1  && !stop_sent) {
   84d10:	2c01      	cmp	r4, #1
   84d12:	d1eb      	bne.n	84cec <twi_master_read+0x4c>
   84d14:	2800      	cmp	r0, #0
   84d16:	d1e9      	bne.n	84cec <twi_master_read+0x4c>
			p_twi->TWI_CR = TWI_CR_STOP;
   84d18:	2302      	movs	r3, #2
   84d1a:	6033      	str	r3, [r6, #0]
			stop_sent = 1;
   84d1c:	2001      	movs	r0, #1
   84d1e:	e7e5      	b.n	84cec <twi_master_read+0x4c>
		if (!timeout--) {
   84d20:	460b      	mov	r3, r1
   84d22:	e7ee      	b.n	84d02 <twi_master_read+0x62>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   84d24:	6a33      	ldr	r3, [r6, #32]
   84d26:	f013 0f01 	tst.w	r3, #1
   84d2a:	d0fb      	beq.n	84d24 <twi_master_read+0x84>
	}

	p_twi->TWI_SR;
   84d2c:	6a33      	ldr	r3, [r6, #32]

	return TWI_SUCCESS;
   84d2e:	e000      	b.n	84d32 <twi_master_read+0x92>
		return TWI_INVALID_ARGUMENT;
   84d30:	2401      	movs	r4, #1
}
   84d32:	4620      	mov	r0, r4
   84d34:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
   84d36:	2405      	movs	r4, #5
   84d38:	e7fb      	b.n	84d32 <twi_master_read+0x92>
			return TWI_ERROR_TIMEOUT;
   84d3a:	2409      	movs	r4, #9
   84d3c:	e7f9      	b.n	84d32 <twi_master_read+0x92>
   84d3e:	bf00      	nop
   84d40:	00084c33 	.word	0x00084c33

00084d44 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   84d44:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
   84d46:	68ce      	ldr	r6, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   84d48:	688c      	ldr	r4, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   84d4a:	b37e      	cbz	r6, 84dac <twi_master_write+0x68>
   84d4c:	4605      	mov	r5, r0
   84d4e:	4608      	mov	r0, r1
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   84d50:	2100      	movs	r1, #0
   84d52:	6069      	str	r1, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84d54:	7c03      	ldrb	r3, [r0, #16]
   84d56:	041b      	lsls	r3, r3, #16
   84d58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   84d5c:	6842      	ldr	r2, [r0, #4]
   84d5e:	0212      	lsls	r2, r2, #8
   84d60:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84d64:	4313      	orrs	r3, r2
   84d66:	606b      	str	r3, [r5, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   84d68:	60e9      	str	r1, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   84d6a:	6841      	ldr	r1, [r0, #4]
   84d6c:	4b12      	ldr	r3, [pc, #72]	; (84db8 <twi_master_write+0x74>)
   84d6e:	4798      	blx	r3
   84d70:	60e8      	str	r0, [r5, #12]

	/* Send all bytes */
	while (cnt > 0) {
   84d72:	b16e      	cbz	r6, 84d90 <twi_master_write+0x4c>
		status = p_twi->TWI_SR;
   84d74:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   84d76:	f413 7f80 	tst.w	r3, #256	; 0x100
   84d7a:	d119      	bne.n	84db0 <twi_master_write+0x6c>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   84d7c:	f013 0f04 	tst.w	r3, #4
   84d80:	d0f7      	beq.n	84d72 <twi_master_write+0x2e>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   84d82:	4623      	mov	r3, r4
   84d84:	f813 2b01 	ldrb.w	r2, [r3], #1
   84d88:	636a      	str	r2, [r5, #52]	; 0x34

		cnt--;
   84d8a:	3e01      	subs	r6, #1
		p_twi->TWI_THR = *buffer++;
   84d8c:	461c      	mov	r4, r3
   84d8e:	e7f0      	b.n	84d72 <twi_master_write+0x2e>
	}

	while (1) {
		status = p_twi->TWI_SR;
   84d90:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   84d92:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   84d96:	d10d      	bne.n	84db4 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   84d98:	f013 0f04 	tst.w	r3, #4
   84d9c:	d0f8      	beq.n	84d90 <twi_master_write+0x4c>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   84d9e:	2302      	movs	r3, #2
   84da0:	602b      	str	r3, [r5, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   84da2:	6a2b      	ldr	r3, [r5, #32]
   84da4:	f013 0f01 	tst.w	r3, #1
   84da8:	d0fb      	beq.n	84da2 <twi_master_write+0x5e>
   84daa:	e000      	b.n	84dae <twi_master_write+0x6a>
		return TWI_INVALID_ARGUMENT;
   84dac:	2001      	movs	r0, #1
	}

	return TWI_SUCCESS;
}
   84dae:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
   84db0:	2005      	movs	r0, #5
   84db2:	e7fc      	b.n	84dae <twi_master_write+0x6a>
			return TWI_RECEIVE_NACK;
   84db4:	2005      	movs	r0, #5
   84db6:	e7fa      	b.n	84dae <twi_master_write+0x6a>
   84db8:	00084c33 	.word	0x00084c33

00084dbc <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   84dbc:	2380      	movs	r3, #128	; 0x80
   84dbe:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   84dc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
}
   84dc2:	4770      	bx	lr

00084dc4 <twi_master_init>:
{
   84dc4:	b538      	push	{r3, r4, r5, lr}
   84dc6:	4604      	mov	r4, r0
   84dc8:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   84dca:	f04f 33ff 	mov.w	r3, #4294967295
   84dce:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   84dd0:	6a03      	ldr	r3, [r0, #32]
	twi_reset(p_twi);
   84dd2:	4b0a      	ldr	r3, [pc, #40]	; (84dfc <twi_master_init+0x38>)
   84dd4:	4798      	blx	r3
	twi_enable_master_mode(p_twi);
   84dd6:	4620      	mov	r0, r4
   84dd8:	4b09      	ldr	r3, [pc, #36]	; (84e00 <twi_master_init+0x3c>)
   84dda:	4798      	blx	r3
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   84ddc:	682a      	ldr	r2, [r5, #0]
   84dde:	6869      	ldr	r1, [r5, #4]
   84de0:	4620      	mov	r0, r4
   84de2:	4b08      	ldr	r3, [pc, #32]	; (84e04 <twi_master_init+0x40>)
   84de4:	4798      	blx	r3
   84de6:	2801      	cmp	r0, #1
   84de8:	d000      	beq.n	84dec <twi_master_init+0x28>
	uint32_t status = TWI_SUCCESS;
   84dea:	2000      	movs	r0, #0
	if (p_opt->smbus == 1) {
   84dec:	7a6b      	ldrb	r3, [r5, #9]
   84dee:	2b01      	cmp	r3, #1
   84df0:	d000      	beq.n	84df4 <twi_master_init+0x30>
}
   84df2:	bd38      	pop	{r3, r4, r5, pc}
		p_twi->TWI_CR = TWI_CR_QUICK;
   84df4:	2340      	movs	r3, #64	; 0x40
   84df6:	6023      	str	r3, [r4, #0]
	return status;
   84df8:	e7fb      	b.n	84df2 <twi_master_init+0x2e>
   84dfa:	bf00      	nop
   84dfc:	00084dbd 	.word	0x00084dbd
   84e00:	00084c55 	.word	0x00084c55
   84e04:	00084c65 	.word	0x00084c65

00084e08 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   84e08:	4b02      	ldr	r3, [pc, #8]	; (84e14 <pmc_is_wakeup_clocks_restored+0xc>)
   84e0a:	7818      	ldrb	r0, [r3, #0]
}
   84e0c:	f080 0001 	eor.w	r0, r0, #1
   84e10:	4770      	bx	lr
   84e12:	bf00      	nop
   84e14:	20001951 	.word	0x20001951

00084e18 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   84e18:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   84e1a:	4a09      	ldr	r2, [pc, #36]	; (84e40 <_sbrk+0x28>)
   84e1c:	6812      	ldr	r2, [r2, #0]
   84e1e:	b142      	cbz	r2, 84e32 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   84e20:	4a07      	ldr	r2, [pc, #28]	; (84e40 <_sbrk+0x28>)
   84e22:	6810      	ldr	r0, [r2, #0]

	if (((int)prev_heap + incr) > ramend) {
   84e24:	18c1      	adds	r1, r0, r3
   84e26:	4a07      	ldr	r2, [pc, #28]	; (84e44 <_sbrk+0x2c>)
   84e28:	4291      	cmp	r1, r2
   84e2a:	dc06      	bgt.n	84e3a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   84e2c:	4a04      	ldr	r2, [pc, #16]	; (84e40 <_sbrk+0x28>)
   84e2e:	6011      	str	r1, [r2, #0]

	return (caddr_t) prev_heap;
   84e30:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   84e32:	4a03      	ldr	r2, [pc, #12]	; (84e40 <_sbrk+0x28>)
   84e34:	4904      	ldr	r1, [pc, #16]	; (84e48 <_sbrk+0x30>)
   84e36:	6011      	str	r1, [r2, #0]
   84e38:	e7f2      	b.n	84e20 <_sbrk+0x8>
		return (caddr_t) -1;	
   84e3a:	f04f 30ff 	mov.w	r0, #4294967295
}
   84e3e:	4770      	bx	lr
   84e40:	20001954 	.word	0x20001954
   84e44:	20083ffc 	.word	0x20083ffc
   84e48:	20084000 	.word	0x20084000

00084e4c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   84e4c:	f04f 30ff 	mov.w	r0, #4294967295
   84e50:	4770      	bx	lr

00084e52 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   84e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   84e56:	604b      	str	r3, [r1, #4]

	return 0;
}
   84e58:	2000      	movs	r0, #0
   84e5a:	4770      	bx	lr

00084e5c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   84e5c:	2001      	movs	r0, #1
   84e5e:	4770      	bx	lr

00084e60 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   84e60:	2000      	movs	r0, #0
   84e62:	4770      	bx	lr

00084e64 <_exit>:

extern void _exit(int status)
{
   84e64:	b508      	push	{r3, lr}
   84e66:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
   84e68:	4801      	ldr	r0, [pc, #4]	; (84e70 <_exit+0xc>)
   84e6a:	4b02      	ldr	r3, [pc, #8]	; (84e74 <_exit+0x10>)
   84e6c:	4798      	blx	r3

	for (;;);
   84e6e:	e7fe      	b.n	84e6e <_exit+0xa>
   84e70:	0008c204 	.word	0x0008c204
   84e74:	000851a5 	.word	0x000851a5

00084e78 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   84e78:	4770      	bx	lr

00084e7a <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   84e7a:	f04f 30ff 	mov.w	r0, #4294967295
   84e7e:	4770      	bx	lr

00084e80 <uart_init>:
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   84e80:	23ac      	movs	r3, #172	; 0xac
   84e82:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   84e84:	680b      	ldr	r3, [r1, #0]
   84e86:	684a      	ldr	r2, [r1, #4]
   84e88:	fbb3 f3f2 	udiv	r3, r3, r2
   84e8c:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   84e8e:	f103 3cff 	add.w	ip, r3, #4294967295
   84e92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   84e96:	4594      	cmp	ip, r2
   84e98:	d80a      	bhi.n	84eb0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   84e9a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   84e9c:	688b      	ldr	r3, [r1, #8]
   84e9e:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   84ea0:	f240 2302 	movw	r3, #514	; 0x202
   84ea4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   84ea8:	2350      	movs	r3, #80	; 0x50
   84eaa:	6003      	str	r3, [r0, #0]

	return 0;
   84eac:	2000      	movs	r0, #0
   84eae:	4770      	bx	lr
		return 1;
   84eb0:	2001      	movs	r0, #1
}
   84eb2:	4770      	bx	lr

00084eb4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   84eb4:	6943      	ldr	r3, [r0, #20]
   84eb6:	f013 0f02 	tst.w	r3, #2
   84eba:	d002      	beq.n	84ec2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   84ebc:	61c1      	str	r1, [r0, #28]
	return 0;
   84ebe:	2000      	movs	r0, #0
   84ec0:	4770      	bx	lr
		return 1;
   84ec2:	2001      	movs	r0, #1
}
   84ec4:	4770      	bx	lr

00084ec6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   84ec6:	6943      	ldr	r3, [r0, #20]
   84ec8:	f013 0f01 	tst.w	r3, #1
   84ecc:	d003      	beq.n	84ed6 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   84ece:	6983      	ldr	r3, [r0, #24]
   84ed0:	700b      	strb	r3, [r1, #0]
	return 0;
   84ed2:	2000      	movs	r0, #0
   84ed4:	4770      	bx	lr
		return 1;
   84ed6:	2001      	movs	r0, #1
}
   84ed8:	4770      	bx	lr
   84eda:	0000      	movs	r0, r0

00084edc <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   84edc:	b510      	push	{r4, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   84ede:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84ee2:	204f      	movs	r0, #79	; 0x4f
   84ee4:	4c0e      	ldr	r4, [pc, #56]	; (84f20 <iopins_normal+0x44>)
   84ee6:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   84ee8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84eec:	2050      	movs	r0, #80	; 0x50
   84eee:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   84ef0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84ef4:	2051      	movs	r0, #81	; 0x51
   84ef6:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   84ef8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84efc:	203f      	movs	r0, #63	; 0x3f
   84efe:	47a0      	blx	r4
	board_power(0);
   84f00:	203f      	movs	r0, #63	; 0x3f
   84f02:	4b08      	ldr	r3, [pc, #32]	; (84f24 <iopins_normal+0x48>)
   84f04:	4798      	blx	r3

	//Detect state of switch
	gpio_configure_pin(PIN_SWSTATE_GPIO, PIN_SWSTATE_FLAGS);
   84f06:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84f0a:	203e      	movs	r0, #62	; 0x3e
   84f0c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   84f0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   84f12:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   84f16:	4804      	ldr	r0, [pc, #16]	; (84f28 <iopins_normal+0x4c>)
   84f18:	4b04      	ldr	r3, [pc, #16]	; (84f2c <iopins_normal+0x50>)
   84f1a:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   84f1c:	bd10      	pop	{r4, pc}
   84f1e:	bf00      	nop
   84f20:	00084b59 	.word	0x00084b59
   84f24:	00084b3d 	.word	0x00084b3d
   84f28:	400e0c00 	.word	0x400e0c00
   84f2c:	00084a4d 	.word	0x00084a4d

00084f30 <board_init>:

void board_init(void)
{
   84f30:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   84f32:	4b07      	ldr	r3, [pc, #28]	; (84f50 <board_init+0x20>)
   84f34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84f38:	655a      	str	r2, [r3, #84]	; 0x54
   84f3a:	200a      	movs	r0, #10
   84f3c:	4c05      	ldr	r4, [pc, #20]	; (84f54 <board_init+0x24>)
   84f3e:	47a0      	blx	r4
   84f40:	200b      	movs	r0, #11
   84f42:	47a0      	blx	r4
   84f44:	200c      	movs	r0, #12
   84f46:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   84f48:	4b03      	ldr	r3, [pc, #12]	; (84f58 <board_init+0x28>)
   84f4a:	4798      	blx	r3
}
   84f4c:	bd10      	pop	{r4, pc}
   84f4e:	bf00      	nop
   84f50:	400e1200 	.word	0x400e1200
   84f54:	000847d5 	.word	0x000847d5
   84f58:	00084edd 	.word	0x00084edd

00084f5c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84f5c:	4b0b      	ldr	r3, [pc, #44]	; (84f8c <cpu_irq_enter_critical+0x30>)
   84f5e:	681b      	ldr	r3, [r3, #0]
   84f60:	b95b      	cbnz	r3, 84f7a <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84f62:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   84f66:	b96b      	cbnz	r3, 84f84 <cpu_irq_enter_critical+0x28>
  __ASM volatile ("cpsid i");
   84f68:	b672      	cpsid	i
   84f6a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   84f6e:	4b08      	ldr	r3, [pc, #32]	; (84f90 <cpu_irq_enter_critical+0x34>)
   84f70:	2200      	movs	r2, #0
   84f72:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   84f74:	4b07      	ldr	r3, [pc, #28]	; (84f94 <cpu_irq_enter_critical+0x38>)
   84f76:	2201      	movs	r2, #1
   84f78:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
   84f7a:	4a04      	ldr	r2, [pc, #16]	; (84f8c <cpu_irq_enter_critical+0x30>)
   84f7c:	6813      	ldr	r3, [r2, #0]
   84f7e:	3301      	adds	r3, #1
   84f80:	6013      	str	r3, [r2, #0]
}
   84f82:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
   84f84:	4b03      	ldr	r3, [pc, #12]	; (84f94 <cpu_irq_enter_critical+0x38>)
   84f86:	2200      	movs	r2, #0
   84f88:	701a      	strb	r2, [r3, #0]
   84f8a:	e7f6      	b.n	84f7a <cpu_irq_enter_critical+0x1e>
   84f8c:	20001958 	.word	0x20001958
   84f90:	20000354 	.word	0x20000354
   84f94:	2000195c 	.word	0x2000195c

00084f98 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   84f98:	4b07      	ldr	r3, [pc, #28]	; (84fb8 <cpu_irq_leave_critical+0x20>)
   84f9a:	681a      	ldr	r2, [r3, #0]
   84f9c:	3a01      	subs	r2, #1
   84f9e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   84fa0:	681b      	ldr	r3, [r3, #0]
   84fa2:	b943      	cbnz	r3, 84fb6 <cpu_irq_leave_critical+0x1e>
   84fa4:	4b05      	ldr	r3, [pc, #20]	; (84fbc <cpu_irq_leave_critical+0x24>)
   84fa6:	781b      	ldrb	r3, [r3, #0]
   84fa8:	b12b      	cbz	r3, 84fb6 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   84faa:	4b05      	ldr	r3, [pc, #20]	; (84fc0 <cpu_irq_leave_critical+0x28>)
   84fac:	2201      	movs	r2, #1
   84fae:	701a      	strb	r2, [r3, #0]
   84fb0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84fb4:	b662      	cpsie	i
	}
}
   84fb6:	4770      	bx	lr
   84fb8:	20001958 	.word	0x20001958
   84fbc:	2000195c 	.word	0x2000195c
   84fc0:	20000354 	.word	0x20000354

00084fc4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   84fc4:	b570      	push	{r4, r5, r6, lr}
   84fc6:	460d      	mov	r5, r1
   84fc8:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
   84fca:	4606      	mov	r6, r0
   84fcc:	b158      	cbz	r0, 84fe6 <_read+0x22>
		return -1;
   84fce:	f04f 36ff 	mov.w	r6, #4294967295
   84fd2:	e00a      	b.n	84fea <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   84fd4:	4b06      	ldr	r3, [pc, #24]	; (84ff0 <_read+0x2c>)
   84fd6:	6818      	ldr	r0, [r3, #0]
   84fd8:	4b06      	ldr	r3, [pc, #24]	; (84ff4 <_read+0x30>)
   84fda:	681b      	ldr	r3, [r3, #0]
   84fdc:	4629      	mov	r1, r5
   84fde:	4798      	blx	r3
		ptr++;
   84fe0:	3501      	adds	r5, #1
		nChars++;
   84fe2:	3601      	adds	r6, #1
	for (; len > 0; --len) {
   84fe4:	3c01      	subs	r4, #1
   84fe6:	2c00      	cmp	r4, #0
   84fe8:	dcf4      	bgt.n	84fd4 <_read+0x10>
	}
	return nChars;
}
   84fea:	4630      	mov	r0, r6
   84fec:	bd70      	pop	{r4, r5, r6, pc}
   84fee:	bf00      	nop
   84ff0:	2000194c 	.word	0x2000194c
   84ff4:	20001960 	.word	0x20001960

00084ff8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   84ff8:	4b3f      	ldr	r3, [pc, #252]	; (850f8 <SystemCoreClockUpdate+0x100>)
   84ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84ffc:	f003 0303 	and.w	r3, r3, #3
   85000:	2b01      	cmp	r3, #1
   85002:	d033      	beq.n	8506c <SystemCoreClockUpdate+0x74>
   85004:	d80a      	bhi.n	8501c <SystemCoreClockUpdate+0x24>
   85006:	b9eb      	cbnz	r3, 85044 <SystemCoreClockUpdate+0x4c>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   85008:	4b3c      	ldr	r3, [pc, #240]	; (850fc <SystemCoreClockUpdate+0x104>)
   8500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8500c:	f013 0f80 	tst.w	r3, #128	; 0x80
   85010:	d027      	beq.n	85062 <SystemCoreClockUpdate+0x6a>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   85012:	4b3b      	ldr	r3, [pc, #236]	; (85100 <SystemCoreClockUpdate+0x108>)
   85014:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85018:	601a      	str	r2, [r3, #0]
   8501a:	e013      	b.n	85044 <SystemCoreClockUpdate+0x4c>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8501c:	3b02      	subs	r3, #2
   8501e:	2b01      	cmp	r3, #1
   85020:	d810      	bhi.n	85044 <SystemCoreClockUpdate+0x4c>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85022:	4b35      	ldr	r3, [pc, #212]	; (850f8 <SystemCoreClockUpdate+0x100>)
   85024:	6a1b      	ldr	r3, [r3, #32]
   85026:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8502a:	d03b      	beq.n	850a4 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8502c:	4b34      	ldr	r3, [pc, #208]	; (85100 <SystemCoreClockUpdate+0x108>)
   8502e:	4a35      	ldr	r2, [pc, #212]	; (85104 <SystemCoreClockUpdate+0x10c>)
   85030:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85032:	4b31      	ldr	r3, [pc, #196]	; (850f8 <SystemCoreClockUpdate+0x100>)
   85034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85036:	f003 0303 	and.w	r3, r3, #3
   8503a:	2b02      	cmp	r3, #2
   8503c:	d045      	beq.n	850ca <SystemCoreClockUpdate+0xd2>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8503e:	4b30      	ldr	r3, [pc, #192]	; (85100 <SystemCoreClockUpdate+0x108>)
   85040:	4a31      	ldr	r2, [pc, #196]	; (85108 <SystemCoreClockUpdate+0x110>)
   85042:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   85044:	4b2c      	ldr	r3, [pc, #176]	; (850f8 <SystemCoreClockUpdate+0x100>)
   85046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85048:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8504c:	2b70      	cmp	r3, #112	; 0x70
   8504e:	d04b      	beq.n	850e8 <SystemCoreClockUpdate+0xf0>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   85050:	4b29      	ldr	r3, [pc, #164]	; (850f8 <SystemCoreClockUpdate+0x100>)
   85052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   85054:	f3c2 1202 	ubfx	r2, r2, #4, #3
   85058:	4929      	ldr	r1, [pc, #164]	; (85100 <SystemCoreClockUpdate+0x108>)
   8505a:	680b      	ldr	r3, [r1, #0]
   8505c:	40d3      	lsrs	r3, r2
   8505e:	600b      	str	r3, [r1, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   85060:	4770      	bx	lr
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   85062:	4b27      	ldr	r3, [pc, #156]	; (85100 <SystemCoreClockUpdate+0x108>)
   85064:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   85068:	601a      	str	r2, [r3, #0]
   8506a:	e7eb      	b.n	85044 <SystemCoreClockUpdate+0x4c>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8506c:	4b22      	ldr	r3, [pc, #136]	; (850f8 <SystemCoreClockUpdate+0x100>)
   8506e:	6a1b      	ldr	r3, [r3, #32]
   85070:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   85074:	d003      	beq.n	8507e <SystemCoreClockUpdate+0x86>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85076:	4b22      	ldr	r3, [pc, #136]	; (85100 <SystemCoreClockUpdate+0x108>)
   85078:	4a22      	ldr	r2, [pc, #136]	; (85104 <SystemCoreClockUpdate+0x10c>)
   8507a:	601a      	str	r2, [r3, #0]
   8507c:	e7e2      	b.n	85044 <SystemCoreClockUpdate+0x4c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8507e:	4b20      	ldr	r3, [pc, #128]	; (85100 <SystemCoreClockUpdate+0x108>)
   85080:	4a22      	ldr	r2, [pc, #136]	; (8510c <SystemCoreClockUpdate+0x114>)
   85082:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85084:	4b1c      	ldr	r3, [pc, #112]	; (850f8 <SystemCoreClockUpdate+0x100>)
   85086:	6a1b      	ldr	r3, [r3, #32]
   85088:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8508c:	2b10      	cmp	r3, #16
   8508e:	d005      	beq.n	8509c <SystemCoreClockUpdate+0xa4>
   85090:	2b20      	cmp	r3, #32
   85092:	d1d7      	bne.n	85044 <SystemCoreClockUpdate+0x4c>
				SystemCoreClock *= 3U;
   85094:	4b1a      	ldr	r3, [pc, #104]	; (85100 <SystemCoreClockUpdate+0x108>)
   85096:	4a1b      	ldr	r2, [pc, #108]	; (85104 <SystemCoreClockUpdate+0x10c>)
   85098:	601a      	str	r2, [r3, #0]
				break;
   8509a:	e7d3      	b.n	85044 <SystemCoreClockUpdate+0x4c>
				SystemCoreClock *= 2U;
   8509c:	4b18      	ldr	r3, [pc, #96]	; (85100 <SystemCoreClockUpdate+0x108>)
   8509e:	4a1c      	ldr	r2, [pc, #112]	; (85110 <SystemCoreClockUpdate+0x118>)
   850a0:	601a      	str	r2, [r3, #0]
				break;
   850a2:	e7cf      	b.n	85044 <SystemCoreClockUpdate+0x4c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   850a4:	4b16      	ldr	r3, [pc, #88]	; (85100 <SystemCoreClockUpdate+0x108>)
   850a6:	4a19      	ldr	r2, [pc, #100]	; (8510c <SystemCoreClockUpdate+0x114>)
   850a8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   850aa:	4b13      	ldr	r3, [pc, #76]	; (850f8 <SystemCoreClockUpdate+0x100>)
   850ac:	6a1b      	ldr	r3, [r3, #32]
   850ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   850b2:	2b10      	cmp	r3, #16
   850b4:	d005      	beq.n	850c2 <SystemCoreClockUpdate+0xca>
   850b6:	2b20      	cmp	r3, #32
   850b8:	d1bb      	bne.n	85032 <SystemCoreClockUpdate+0x3a>
				SystemCoreClock *= 3U;
   850ba:	4b11      	ldr	r3, [pc, #68]	; (85100 <SystemCoreClockUpdate+0x108>)
   850bc:	4a11      	ldr	r2, [pc, #68]	; (85104 <SystemCoreClockUpdate+0x10c>)
   850be:	601a      	str	r2, [r3, #0]
				break;
   850c0:	e7b7      	b.n	85032 <SystemCoreClockUpdate+0x3a>
				SystemCoreClock *= 2U;
   850c2:	4b0f      	ldr	r3, [pc, #60]	; (85100 <SystemCoreClockUpdate+0x108>)
   850c4:	4a12      	ldr	r2, [pc, #72]	; (85110 <SystemCoreClockUpdate+0x118>)
   850c6:	601a      	str	r2, [r3, #0]
				break;
   850c8:	e7b3      	b.n	85032 <SystemCoreClockUpdate+0x3a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   850ca:	480b      	ldr	r0, [pc, #44]	; (850f8 <SystemCoreClockUpdate+0x100>)
   850cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
   850ce:	f3c1 410a 	ubfx	r1, r1, #16, #11
   850d2:	4a0b      	ldr	r2, [pc, #44]	; (85100 <SystemCoreClockUpdate+0x108>)
   850d4:	6813      	ldr	r3, [r2, #0]
   850d6:	fb01 3303 	mla	r3, r1, r3, r3
   850da:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   850dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
   850de:	b2c9      	uxtb	r1, r1
   850e0:	fbb3 f3f1 	udiv	r3, r3, r1
   850e4:	6013      	str	r3, [r2, #0]
   850e6:	e7ad      	b.n	85044 <SystemCoreClockUpdate+0x4c>
		SystemCoreClock /= 3U;
   850e8:	4a05      	ldr	r2, [pc, #20]	; (85100 <SystemCoreClockUpdate+0x108>)
   850ea:	6813      	ldr	r3, [r2, #0]
   850ec:	4909      	ldr	r1, [pc, #36]	; (85114 <SystemCoreClockUpdate+0x11c>)
   850ee:	fba1 1303 	umull	r1, r3, r1, r3
   850f2:	085b      	lsrs	r3, r3, #1
   850f4:	6013      	str	r3, [r2, #0]
   850f6:	4770      	bx	lr
   850f8:	400e0400 	.word	0x400e0400
   850fc:	400e1200 	.word	0x400e1200
   85100:	200003e4 	.word	0x200003e4
   85104:	00b71b00 	.word	0x00b71b00
   85108:	0e4e1c00 	.word	0x0e4e1c00
   8510c:	003d0900 	.word	0x003d0900
   85110:	007a1200 	.word	0x007a1200
   85114:	aaaaaaab 	.word	0xaaaaaaab

00085118 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   85118:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8511a:	018b      	lsls	r3, r1, #6
   8511c:	eb00 1181 	add.w	r1, r0, r1, lsl #6

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   85120:	2402      	movs	r4, #2
   85122:	50c4      	str	r4, [r0, r3]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   85124:	f04f 33ff 	mov.w	r3, #4294967295
   85128:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8512a:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8512c:	604a      	str	r2, [r1, #4]
}
   8512e:	bc10      	pop	{r4}
   85130:	4770      	bx	lr

00085132 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   85132:	0189      	lsls	r1, r1, #6
   85134:	2305      	movs	r3, #5
   85136:	5043      	str	r3, [r0, r1]
}
   85138:	4770      	bx	lr

0008513a <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8513a:	0189      	lsls	r1, r1, #6
   8513c:	2302      	movs	r3, #2
   8513e:	5043      	str	r3, [r0, r1]
}
   85140:	4770      	bx	lr

00085142 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   85142:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   85146:	61c2      	str	r2, [r0, #28]
}
   85148:	4770      	bx	lr

0008514a <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8514a:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   8514e:	6242      	str	r2, [r0, #36]	; 0x24
}
   85150:	4770      	bx	lr

00085152 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85152:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   85156:	6a00      	ldr	r0, [r0, #32]
}
   85158:	4770      	bx	lr
   8515a:	0000      	movs	r0, r0

0008515c <__libc_init_array>:
   8515c:	b570      	push	{r4, r5, r6, lr}
   8515e:	4e0d      	ldr	r6, [pc, #52]	; (85194 <__libc_init_array+0x38>)
   85160:	4d0d      	ldr	r5, [pc, #52]	; (85198 <__libc_init_array+0x3c>)
   85162:	1b76      	subs	r6, r6, r5
   85164:	10b6      	asrs	r6, r6, #2
   85166:	d006      	beq.n	85176 <__libc_init_array+0x1a>
   85168:	2400      	movs	r4, #0
   8516a:	f855 3b04 	ldr.w	r3, [r5], #4
   8516e:	3401      	adds	r4, #1
   85170:	4798      	blx	r3
   85172:	42a6      	cmp	r6, r4
   85174:	d1f9      	bne.n	8516a <__libc_init_array+0xe>
   85176:	4e09      	ldr	r6, [pc, #36]	; (8519c <__libc_init_array+0x40>)
   85178:	4d09      	ldr	r5, [pc, #36]	; (851a0 <__libc_init_array+0x44>)
   8517a:	f007 fa51 	bl	8c620 <_init>
   8517e:	1b76      	subs	r6, r6, r5
   85180:	10b6      	asrs	r6, r6, #2
   85182:	d006      	beq.n	85192 <__libc_init_array+0x36>
   85184:	2400      	movs	r4, #0
   85186:	f855 3b04 	ldr.w	r3, [r5], #4
   8518a:	3401      	adds	r4, #1
   8518c:	4798      	blx	r3
   8518e:	42a6      	cmp	r6, r4
   85190:	d1f9      	bne.n	85186 <__libc_init_array+0x2a>
   85192:	bd70      	pop	{r4, r5, r6, pc}
   85194:	0008c62c 	.word	0x0008c62c
   85198:	0008c62c 	.word	0x0008c62c
   8519c:	0008c634 	.word	0x0008c634
   851a0:	0008c62c 	.word	0x0008c62c

000851a4 <iprintf>:
   851a4:	b40f      	push	{r0, r1, r2, r3}
   851a6:	b500      	push	{lr}
   851a8:	4a07      	ldr	r2, [pc, #28]	; (851c8 <iprintf+0x24>)
   851aa:	b083      	sub	sp, #12
   851ac:	ab04      	add	r3, sp, #16
   851ae:	6810      	ldr	r0, [r2, #0]
   851b0:	f853 2b04 	ldr.w	r2, [r3], #4
   851b4:	6881      	ldr	r1, [r0, #8]
   851b6:	9301      	str	r3, [sp, #4]
   851b8:	f001 ffc2 	bl	87140 <_vfiprintf_r>
   851bc:	b003      	add	sp, #12
   851be:	f85d eb04 	ldr.w	lr, [sp], #4
   851c2:	b004      	add	sp, #16
   851c4:	4770      	bx	lr
   851c6:	bf00      	nop
   851c8:	200003e8 	.word	0x200003e8

000851cc <memcpy>:
   851cc:	4684      	mov	ip, r0
   851ce:	ea41 0300 	orr.w	r3, r1, r0
   851d2:	f013 0303 	ands.w	r3, r3, #3
   851d6:	d149      	bne.n	8526c <memcpy+0xa0>
   851d8:	3a40      	subs	r2, #64	; 0x40
   851da:	d323      	bcc.n	85224 <memcpy+0x58>
   851dc:	680b      	ldr	r3, [r1, #0]
   851de:	6003      	str	r3, [r0, #0]
   851e0:	684b      	ldr	r3, [r1, #4]
   851e2:	6043      	str	r3, [r0, #4]
   851e4:	688b      	ldr	r3, [r1, #8]
   851e6:	6083      	str	r3, [r0, #8]
   851e8:	68cb      	ldr	r3, [r1, #12]
   851ea:	60c3      	str	r3, [r0, #12]
   851ec:	690b      	ldr	r3, [r1, #16]
   851ee:	6103      	str	r3, [r0, #16]
   851f0:	694b      	ldr	r3, [r1, #20]
   851f2:	6143      	str	r3, [r0, #20]
   851f4:	698b      	ldr	r3, [r1, #24]
   851f6:	6183      	str	r3, [r0, #24]
   851f8:	69cb      	ldr	r3, [r1, #28]
   851fa:	61c3      	str	r3, [r0, #28]
   851fc:	6a0b      	ldr	r3, [r1, #32]
   851fe:	6203      	str	r3, [r0, #32]
   85200:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85202:	6243      	str	r3, [r0, #36]	; 0x24
   85204:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85206:	6283      	str	r3, [r0, #40]	; 0x28
   85208:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8520a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8520c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8520e:	6303      	str	r3, [r0, #48]	; 0x30
   85210:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85212:	6343      	str	r3, [r0, #52]	; 0x34
   85214:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85216:	6383      	str	r3, [r0, #56]	; 0x38
   85218:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8521a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8521c:	3040      	adds	r0, #64	; 0x40
   8521e:	3140      	adds	r1, #64	; 0x40
   85220:	3a40      	subs	r2, #64	; 0x40
   85222:	d2db      	bcs.n	851dc <memcpy+0x10>
   85224:	3230      	adds	r2, #48	; 0x30
   85226:	d30b      	bcc.n	85240 <memcpy+0x74>
   85228:	680b      	ldr	r3, [r1, #0]
   8522a:	6003      	str	r3, [r0, #0]
   8522c:	684b      	ldr	r3, [r1, #4]
   8522e:	6043      	str	r3, [r0, #4]
   85230:	688b      	ldr	r3, [r1, #8]
   85232:	6083      	str	r3, [r0, #8]
   85234:	68cb      	ldr	r3, [r1, #12]
   85236:	60c3      	str	r3, [r0, #12]
   85238:	3010      	adds	r0, #16
   8523a:	3110      	adds	r1, #16
   8523c:	3a10      	subs	r2, #16
   8523e:	d2f3      	bcs.n	85228 <memcpy+0x5c>
   85240:	320c      	adds	r2, #12
   85242:	d305      	bcc.n	85250 <memcpy+0x84>
   85244:	f851 3b04 	ldr.w	r3, [r1], #4
   85248:	f840 3b04 	str.w	r3, [r0], #4
   8524c:	3a04      	subs	r2, #4
   8524e:	d2f9      	bcs.n	85244 <memcpy+0x78>
   85250:	3204      	adds	r2, #4
   85252:	d008      	beq.n	85266 <memcpy+0x9a>
   85254:	07d2      	lsls	r2, r2, #31
   85256:	bf1c      	itt	ne
   85258:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8525c:	f800 3b01 	strbne.w	r3, [r0], #1
   85260:	d301      	bcc.n	85266 <memcpy+0x9a>
   85262:	880b      	ldrh	r3, [r1, #0]
   85264:	8003      	strh	r3, [r0, #0]
   85266:	4660      	mov	r0, ip
   85268:	4770      	bx	lr
   8526a:	bf00      	nop
   8526c:	2a08      	cmp	r2, #8
   8526e:	d313      	bcc.n	85298 <memcpy+0xcc>
   85270:	078b      	lsls	r3, r1, #30
   85272:	d0b1      	beq.n	851d8 <memcpy+0xc>
   85274:	f010 0303 	ands.w	r3, r0, #3
   85278:	d0ae      	beq.n	851d8 <memcpy+0xc>
   8527a:	f1c3 0304 	rsb	r3, r3, #4
   8527e:	1ad2      	subs	r2, r2, r3
   85280:	07db      	lsls	r3, r3, #31
   85282:	bf1c      	itt	ne
   85284:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85288:	f800 3b01 	strbne.w	r3, [r0], #1
   8528c:	d3a4      	bcc.n	851d8 <memcpy+0xc>
   8528e:	f831 3b02 	ldrh.w	r3, [r1], #2
   85292:	f820 3b02 	strh.w	r3, [r0], #2
   85296:	e79f      	b.n	851d8 <memcpy+0xc>
   85298:	3a04      	subs	r2, #4
   8529a:	d3d9      	bcc.n	85250 <memcpy+0x84>
   8529c:	3a01      	subs	r2, #1
   8529e:	f811 3b01 	ldrb.w	r3, [r1], #1
   852a2:	f800 3b01 	strb.w	r3, [r0], #1
   852a6:	d2f9      	bcs.n	8529c <memcpy+0xd0>
   852a8:	780b      	ldrb	r3, [r1, #0]
   852aa:	7003      	strb	r3, [r0, #0]
   852ac:	784b      	ldrb	r3, [r1, #1]
   852ae:	7043      	strb	r3, [r0, #1]
   852b0:	788b      	ldrb	r3, [r1, #2]
   852b2:	7083      	strb	r3, [r0, #2]
   852b4:	4660      	mov	r0, ip
   852b6:	4770      	bx	lr

000852b8 <memset>:
   852b8:	0783      	lsls	r3, r0, #30
   852ba:	b530      	push	{r4, r5, lr}
   852bc:	d048      	beq.n	85350 <memset+0x98>
   852be:	1e54      	subs	r4, r2, #1
   852c0:	2a00      	cmp	r2, #0
   852c2:	d03f      	beq.n	85344 <memset+0x8c>
   852c4:	4603      	mov	r3, r0
   852c6:	b2ca      	uxtb	r2, r1
   852c8:	e001      	b.n	852ce <memset+0x16>
   852ca:	3c01      	subs	r4, #1
   852cc:	d33a      	bcc.n	85344 <memset+0x8c>
   852ce:	f803 2b01 	strb.w	r2, [r3], #1
   852d2:	079d      	lsls	r5, r3, #30
   852d4:	d1f9      	bne.n	852ca <memset+0x12>
   852d6:	2c03      	cmp	r4, #3
   852d8:	d92d      	bls.n	85336 <memset+0x7e>
   852da:	b2cd      	uxtb	r5, r1
   852dc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   852e0:	2c0f      	cmp	r4, #15
   852e2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   852e6:	d936      	bls.n	85356 <memset+0x9e>
   852e8:	f1a4 0210 	sub.w	r2, r4, #16
   852ec:	f022 0c0f 	bic.w	ip, r2, #15
   852f0:	f103 0e20 	add.w	lr, r3, #32
   852f4:	44e6      	add	lr, ip
   852f6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   852fa:	f103 0210 	add.w	r2, r3, #16
   852fe:	e942 5504 	strd	r5, r5, [r2, #-16]
   85302:	e942 5502 	strd	r5, r5, [r2, #-8]
   85306:	3210      	adds	r2, #16
   85308:	4572      	cmp	r2, lr
   8530a:	d1f8      	bne.n	852fe <memset+0x46>
   8530c:	f10c 0201 	add.w	r2, ip, #1
   85310:	f014 0f0c 	tst.w	r4, #12
   85314:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   85318:	f004 0c0f 	and.w	ip, r4, #15
   8531c:	d013      	beq.n	85346 <memset+0x8e>
   8531e:	f1ac 0304 	sub.w	r3, ip, #4
   85322:	f023 0303 	bic.w	r3, r3, #3
   85326:	3304      	adds	r3, #4
   85328:	4413      	add	r3, r2
   8532a:	f842 5b04 	str.w	r5, [r2], #4
   8532e:	4293      	cmp	r3, r2
   85330:	d1fb      	bne.n	8532a <memset+0x72>
   85332:	f00c 0403 	and.w	r4, ip, #3
   85336:	b12c      	cbz	r4, 85344 <memset+0x8c>
   85338:	b2ca      	uxtb	r2, r1
   8533a:	441c      	add	r4, r3
   8533c:	f803 2b01 	strb.w	r2, [r3], #1
   85340:	429c      	cmp	r4, r3
   85342:	d1fb      	bne.n	8533c <memset+0x84>
   85344:	bd30      	pop	{r4, r5, pc}
   85346:	4664      	mov	r4, ip
   85348:	4613      	mov	r3, r2
   8534a:	2c00      	cmp	r4, #0
   8534c:	d1f4      	bne.n	85338 <memset+0x80>
   8534e:	e7f9      	b.n	85344 <memset+0x8c>
   85350:	4603      	mov	r3, r0
   85352:	4614      	mov	r4, r2
   85354:	e7bf      	b.n	852d6 <memset+0x1e>
   85356:	461a      	mov	r2, r3
   85358:	46a4      	mov	ip, r4
   8535a:	e7e0      	b.n	8531e <memset+0x66>

0008535c <setbuf>:
   8535c:	2900      	cmp	r1, #0
   8535e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85362:	bf0c      	ite	eq
   85364:	2202      	moveq	r2, #2
   85366:	2200      	movne	r2, #0
   85368:	f000 b800 	b.w	8536c <setvbuf>

0008536c <setvbuf>:
   8536c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85370:	4c69      	ldr	r4, [pc, #420]	; (85518 <setvbuf+0x1ac>)
   85372:	460e      	mov	r6, r1
   85374:	f8d4 8000 	ldr.w	r8, [r4]
   85378:	4617      	mov	r7, r2
   8537a:	4604      	mov	r4, r0
   8537c:	461d      	mov	r5, r3
   8537e:	b083      	sub	sp, #12
   85380:	f1b8 0f00 	cmp.w	r8, #0
   85384:	d003      	beq.n	8538e <setvbuf+0x22>
   85386:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   8538a:	2b00      	cmp	r3, #0
   8538c:	d077      	beq.n	8547e <setvbuf+0x112>
   8538e:	2f02      	cmp	r7, #2
   85390:	d005      	beq.n	8539e <setvbuf+0x32>
   85392:	2f01      	cmp	r7, #1
   85394:	f200 80ac 	bhi.w	854f0 <setvbuf+0x184>
   85398:	2d00      	cmp	r5, #0
   8539a:	f2c0 80a9 	blt.w	854f0 <setvbuf+0x184>
   8539e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   853a0:	07da      	lsls	r2, r3, #31
   853a2:	d552      	bpl.n	8544a <setvbuf+0xde>
   853a4:	4621      	mov	r1, r4
   853a6:	4640      	mov	r0, r8
   853a8:	f003 fee2 	bl	89170 <_fflush_r>
   853ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
   853ae:	b141      	cbz	r1, 853c2 <setvbuf+0x56>
   853b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   853b4:	4299      	cmp	r1, r3
   853b6:	d002      	beq.n	853be <setvbuf+0x52>
   853b8:	4640      	mov	r0, r8
   853ba:	f004 f889 	bl	894d0 <_free_r>
   853be:	2300      	movs	r3, #0
   853c0:	6323      	str	r3, [r4, #48]	; 0x30
   853c2:	2300      	movs	r3, #0
   853c4:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   853c8:	61a3      	str	r3, [r4, #24]
   853ca:	f01c 0f80 	tst.w	ip, #128	; 0x80
   853ce:	6063      	str	r3, [r4, #4]
   853d0:	d164      	bne.n	8549c <setvbuf+0x130>
   853d2:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
   853d6:	f02c 0c03 	bic.w	ip, ip, #3
   853da:	2f02      	cmp	r7, #2
   853dc:	f8a4 c00c 	strh.w	ip, [r4, #12]
   853e0:	d06a      	beq.n	854b8 <setvbuf+0x14c>
   853e2:	ab01      	add	r3, sp, #4
   853e4:	4621      	mov	r1, r4
   853e6:	4640      	mov	r0, r8
   853e8:	466a      	mov	r2, sp
   853ea:	f004 fb8f 	bl	89b0c <__swhatbuf_r>
   853ee:	89a3      	ldrh	r3, [r4, #12]
   853f0:	4318      	orrs	r0, r3
   853f2:	81a0      	strh	r0, [r4, #12]
   853f4:	2d00      	cmp	r5, #0
   853f6:	d02f      	beq.n	85458 <setvbuf+0xec>
   853f8:	2e00      	cmp	r6, #0
   853fa:	d02e      	beq.n	8545a <setvbuf+0xee>
   853fc:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   85400:	2b00      	cmp	r3, #0
   85402:	d038      	beq.n	85476 <setvbuf+0x10a>
   85404:	9b00      	ldr	r3, [sp, #0]
   85406:	e9c4 6504 	strd	r6, r5, [r4, #16]
   8540a:	42ab      	cmp	r3, r5
   8540c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85410:	6026      	str	r6, [r4, #0]
   85412:	bf1c      	itt	ne
   85414:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   85418:	81a3      	strhne	r3, [r4, #12]
   8541a:	2f01      	cmp	r7, #1
   8541c:	bf04      	itt	eq
   8541e:	f043 0301 	orreq.w	r3, r3, #1
   85422:	81a3      	strheq	r3, [r4, #12]
   85424:	b29a      	uxth	r2, r3
   85426:	f013 0308 	ands.w	r3, r3, #8
   8542a:	d02c      	beq.n	85486 <setvbuf+0x11a>
   8542c:	07d1      	lsls	r1, r2, #31
   8542e:	d55d      	bpl.n	854ec <setvbuf+0x180>
   85430:	2100      	movs	r1, #0
   85432:	426d      	negs	r5, r5
   85434:	61a5      	str	r5, [r4, #24]
   85436:	6e65      	ldr	r5, [r4, #100]	; 0x64
   85438:	60a1      	str	r1, [r4, #8]
   8543a:	f015 0501 	ands.w	r5, r5, #1
   8543e:	d027      	beq.n	85490 <setvbuf+0x124>
   85440:	2500      	movs	r5, #0
   85442:	4628      	mov	r0, r5
   85444:	b003      	add	sp, #12
   85446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8544a:	89a3      	ldrh	r3, [r4, #12]
   8544c:	059b      	lsls	r3, r3, #22
   8544e:	d4a9      	bmi.n	853a4 <setvbuf+0x38>
   85450:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85452:	f004 fae7 	bl	89a24 <__retarget_lock_acquire_recursive>
   85456:	e7a5      	b.n	853a4 <setvbuf+0x38>
   85458:	9d00      	ldr	r5, [sp, #0]
   8545a:	4628      	mov	r0, r5
   8545c:	f004 fb86 	bl	89b6c <malloc>
   85460:	4606      	mov	r6, r0
   85462:	2800      	cmp	r0, #0
   85464:	d047      	beq.n	854f6 <setvbuf+0x18a>
   85466:	89a3      	ldrh	r3, [r4, #12]
   85468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8546c:	81a3      	strh	r3, [r4, #12]
   8546e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   85472:	2b00      	cmp	r3, #0
   85474:	d1c6      	bne.n	85404 <setvbuf+0x98>
   85476:	4640      	mov	r0, r8
   85478:	f003 feae 	bl	891d8 <__sinit>
   8547c:	e7c2      	b.n	85404 <setvbuf+0x98>
   8547e:	4640      	mov	r0, r8
   85480:	f003 feaa 	bl	891d8 <__sinit>
   85484:	e783      	b.n	8538e <setvbuf+0x22>
   85486:	60a3      	str	r3, [r4, #8]
   85488:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8548a:	f015 0501 	ands.w	r5, r5, #1
   8548e:	d1d7      	bne.n	85440 <setvbuf+0xd4>
   85490:	0593      	lsls	r3, r2, #22
   85492:	d524      	bpl.n	854de <setvbuf+0x172>
   85494:	4628      	mov	r0, r5
   85496:	b003      	add	sp, #12
   85498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8549c:	4640      	mov	r0, r8
   8549e:	6921      	ldr	r1, [r4, #16]
   854a0:	f004 f816 	bl	894d0 <_free_r>
   854a4:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   854a8:	2f02      	cmp	r7, #2
   854aa:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
   854ae:	f02c 0c03 	bic.w	ip, ip, #3
   854b2:	f8a4 c00c 	strh.w	ip, [r4, #12]
   854b6:	d194      	bne.n	853e2 <setvbuf+0x76>
   854b8:	2500      	movs	r5, #0
   854ba:	2100      	movs	r1, #0
   854bc:	2201      	movs	r2, #1
   854be:	f104 0343 	add.w	r3, r4, #67	; 0x43
   854c2:	6023      	str	r3, [r4, #0]
   854c4:	6123      	str	r3, [r4, #16]
   854c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   854c8:	f04c 0c02 	orr.w	ip, ip, #2
   854cc:	07d8      	lsls	r0, r3, #31
   854ce:	f8a4 c00c 	strh.w	ip, [r4, #12]
   854d2:	60a1      	str	r1, [r4, #8]
   854d4:	6162      	str	r2, [r4, #20]
   854d6:	d4dd      	bmi.n	85494 <setvbuf+0x128>
   854d8:	f41c 7f00 	tst.w	ip, #512	; 0x200
   854dc:	d1da      	bne.n	85494 <setvbuf+0x128>
   854de:	6da0      	ldr	r0, [r4, #88]	; 0x58
   854e0:	f004 faa2 	bl	89a28 <__retarget_lock_release_recursive>
   854e4:	4628      	mov	r0, r5
   854e6:	b003      	add	sp, #12
   854e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   854ec:	60a5      	str	r5, [r4, #8]
   854ee:	e7cb      	b.n	85488 <setvbuf+0x11c>
   854f0:	f04f 35ff 	mov.w	r5, #4294967295
   854f4:	e7ce      	b.n	85494 <setvbuf+0x128>
   854f6:	f8dd 9000 	ldr.w	r9, [sp]
   854fa:	45a9      	cmp	r9, r5
   854fc:	d004      	beq.n	85508 <setvbuf+0x19c>
   854fe:	4648      	mov	r0, r9
   85500:	f004 fb34 	bl	89b6c <malloc>
   85504:	4606      	mov	r6, r0
   85506:	b920      	cbnz	r0, 85512 <setvbuf+0x1a6>
   85508:	f04f 35ff 	mov.w	r5, #4294967295
   8550c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   85510:	e7d3      	b.n	854ba <setvbuf+0x14e>
   85512:	464d      	mov	r5, r9
   85514:	e7a7      	b.n	85466 <setvbuf+0xfa>
   85516:	bf00      	nop
   85518:	200003e8 	.word	0x200003e8

0008551c <sprintf>:
   8551c:	b40e      	push	{r1, r2, r3}
   8551e:	b530      	push	{r4, r5, lr}
   85520:	4604      	mov	r4, r0
   85522:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   85526:	b09c      	sub	sp, #112	; 0x70
   85528:	4a0b      	ldr	r2, [pc, #44]	; (85558 <sprintf+0x3c>)
   8552a:	ab1f      	add	r3, sp, #124	; 0x7c
   8552c:	490b      	ldr	r1, [pc, #44]	; (8555c <sprintf+0x40>)
   8552e:	9205      	str	r2, [sp, #20]
   85530:	f853 2b04 	ldr.w	r2, [r3], #4
   85534:	6808      	ldr	r0, [r1, #0]
   85536:	a902      	add	r1, sp, #8
   85538:	e9cd 3401 	strd	r3, r4, [sp, #4]
   8553c:	9507      	str	r5, [sp, #28]
   8553e:	9504      	str	r5, [sp, #16]
   85540:	9406      	str	r4, [sp, #24]
   85542:	f000 f86f 	bl	85624 <_svfprintf_r>
   85546:	2200      	movs	r2, #0
   85548:	9b02      	ldr	r3, [sp, #8]
   8554a:	701a      	strb	r2, [r3, #0]
   8554c:	b01c      	add	sp, #112	; 0x70
   8554e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85552:	b003      	add	sp, #12
   85554:	4770      	bx	lr
   85556:	bf00      	nop
   85558:	ffff0208 	.word	0xffff0208
   8555c:	200003e8 	.word	0x200003e8

00085560 <strlen>:
   85560:	f020 0103 	bic.w	r1, r0, #3
   85564:	f010 0003 	ands.w	r0, r0, #3
   85568:	f1c0 0000 	rsb	r0, r0, #0
   8556c:	f851 3b04 	ldr.w	r3, [r1], #4
   85570:	f100 0c04 	add.w	ip, r0, #4
   85574:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85578:	f06f 0200 	mvn.w	r2, #0
   8557c:	bf1c      	itt	ne
   8557e:	fa22 f20c 	lsrne.w	r2, r2, ip
   85582:	4313      	orrne	r3, r2
   85584:	f04f 0c01 	mov.w	ip, #1
   85588:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8558c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85590:	eba3 020c 	sub.w	r2, r3, ip
   85594:	ea22 0203 	bic.w	r2, r2, r3
   85598:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8559c:	bf04      	itt	eq
   8559e:	f851 3b04 	ldreq.w	r3, [r1], #4
   855a2:	3004      	addeq	r0, #4
   855a4:	d0f4      	beq.n	85590 <strlen+0x30>
   855a6:	f1c2 0100 	rsb	r1, r2, #0
   855aa:	ea02 0201 	and.w	r2, r2, r1
   855ae:	fab2 f282 	clz	r2, r2
   855b2:	f1c2 021f 	rsb	r2, r2, #31
   855b6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   855ba:	4770      	bx	lr

000855bc <strncpy>:
   855bc:	b530      	push	{r4, r5, lr}
   855be:	ea40 0401 	orr.w	r4, r0, r1
   855c2:	07a3      	lsls	r3, r4, #30
   855c4:	d122      	bne.n	8560c <strncpy+0x50>
   855c6:	2a03      	cmp	r2, #3
   855c8:	d920      	bls.n	8560c <strncpy+0x50>
   855ca:	460b      	mov	r3, r1
   855cc:	4684      	mov	ip, r0
   855ce:	4619      	mov	r1, r3
   855d0:	f853 5b04 	ldr.w	r5, [r3], #4
   855d4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   855d8:	ea24 0405 	bic.w	r4, r4, r5
   855dc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   855e0:	d115      	bne.n	8560e <strncpy+0x52>
   855e2:	3a04      	subs	r2, #4
   855e4:	2a03      	cmp	r2, #3
   855e6:	4619      	mov	r1, r3
   855e8:	f84c 5b04 	str.w	r5, [ip], #4
   855ec:	d8ef      	bhi.n	855ce <strncpy+0x12>
   855ee:	f101 3eff 	add.w	lr, r1, #4294967295
   855f2:	b152      	cbz	r2, 8560a <strncpy+0x4e>
   855f4:	4663      	mov	r3, ip
   855f6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   855fa:	1e54      	subs	r4, r2, #1
   855fc:	f803 1b01 	strb.w	r1, [r3], #1
   85600:	b141      	cbz	r1, 85614 <strncpy+0x58>
   85602:	4622      	mov	r2, r4
   85604:	469c      	mov	ip, r3
   85606:	2a00      	cmp	r2, #0
   85608:	d1f4      	bne.n	855f4 <strncpy+0x38>
   8560a:	bd30      	pop	{r4, r5, pc}
   8560c:	4684      	mov	ip, r0
   8560e:	f101 3eff 	add.w	lr, r1, #4294967295
   85612:	e7ee      	b.n	855f2 <strncpy+0x36>
   85614:	4462      	add	r2, ip
   85616:	2c00      	cmp	r4, #0
   85618:	d0f7      	beq.n	8560a <strncpy+0x4e>
   8561a:	f803 1b01 	strb.w	r1, [r3], #1
   8561e:	4293      	cmp	r3, r2
   85620:	d1fb      	bne.n	8561a <strncpy+0x5e>
   85622:	bd30      	pop	{r4, r5, pc}

00085624 <_svfprintf_r>:
   85624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85628:	b0d5      	sub	sp, #340	; 0x154
   8562a:	460c      	mov	r4, r1
   8562c:	910c      	str	r1, [sp, #48]	; 0x30
   8562e:	4691      	mov	r9, r2
   85630:	930e      	str	r3, [sp, #56]	; 0x38
   85632:	900a      	str	r0, [sp, #40]	; 0x28
   85634:	f004 f9ee 	bl	89a14 <_localeconv_r>
   85638:	6803      	ldr	r3, [r0, #0]
   8563a:	4618      	mov	r0, r3
   8563c:	9317      	str	r3, [sp, #92]	; 0x5c
   8563e:	f7ff ff8f 	bl	85560 <strlen>
   85642:	89a3      	ldrh	r3, [r4, #12]
   85644:	9016      	str	r0, [sp, #88]	; 0x58
   85646:	0619      	lsls	r1, r3, #24
   85648:	d503      	bpl.n	85652 <_svfprintf_r+0x2e>
   8564a:	6923      	ldr	r3, [r4, #16]
   8564c:	2b00      	cmp	r3, #0
   8564e:	f000 878f 	beq.w	86570 <_svfprintf_r+0xf4c>
   85652:	2400      	movs	r4, #0
   85654:	ab2b      	add	r3, sp, #172	; 0xac
   85656:	4622      	mov	r2, r4
   85658:	4698      	mov	r8, r3
   8565a:	464d      	mov	r5, r9
   8565c:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   85660:	9328      	str	r3, [sp, #160]	; 0xa0
   85662:	9412      	str	r4, [sp, #72]	; 0x48
   85664:	2300      	movs	r3, #0
   85666:	2400      	movs	r4, #0
   85668:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   8566c:	782b      	ldrb	r3, [r5, #0]
   8566e:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   85672:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   85676:	9218      	str	r2, [sp, #96]	; 0x60
   85678:	9208      	str	r2, [sp, #32]
   8567a:	2b00      	cmp	r3, #0
   8567c:	f000 81ce 	beq.w	85a1c <_svfprintf_r+0x3f8>
   85680:	46aa      	mov	sl, r5
   85682:	e004      	b.n	8568e <_svfprintf_r+0x6a>
   85684:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   85688:	2b00      	cmp	r3, #0
   8568a:	f000 8109 	beq.w	858a0 <_svfprintf_r+0x27c>
   8568e:	2b25      	cmp	r3, #37	; 0x25
   85690:	d1f8      	bne.n	85684 <_svfprintf_r+0x60>
   85692:	ebba 0605 	subs.w	r6, sl, r5
   85696:	f040 8107 	bne.w	858a8 <_svfprintf_r+0x284>
   8569a:	f89a 3000 	ldrb.w	r3, [sl]
   8569e:	2b00      	cmp	r3, #0
   856a0:	f000 81bc 	beq.w	85a1c <_svfprintf_r+0x3f8>
   856a4:	2300      	movs	r3, #0
   856a6:	f04f 32ff 	mov.w	r2, #4294967295
   856aa:	f04f 092b 	mov.w	r9, #43	; 0x2b
   856ae:	2420      	movs	r4, #32
   856b0:	461f      	mov	r7, r3
   856b2:	f89a 6001 	ldrb.w	r6, [sl, #1]
   856b6:	9207      	str	r2, [sp, #28]
   856b8:	f10a 0a01 	add.w	sl, sl, #1
   856bc:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   856c0:	9309      	str	r3, [sp, #36]	; 0x24
   856c2:	f10a 0a01 	add.w	sl, sl, #1
   856c6:	f1a6 0320 	sub.w	r3, r6, #32
   856ca:	2b5a      	cmp	r3, #90	; 0x5a
   856cc:	f200 8120 	bhi.w	85910 <_svfprintf_r+0x2ec>
   856d0:	e8df f013 	tbh	[pc, r3, lsl #1]
   856d4:	011e02ca 	.word	0x011e02ca
   856d8:	02c5011e 	.word	0x02c5011e
   856dc:	011e011e 	.word	0x011e011e
   856e0:	02a3011e 	.word	0x02a3011e
   856e4:	011e011e 	.word	0x011e011e
   856e8:	02f3006a 	.word	0x02f3006a
   856ec:	0247011e 	.word	0x0247011e
   856f0:	011e02d9 	.word	0x011e02d9
   856f4:	005b02d4 	.word	0x005b02d4
   856f8:	005b005b 	.word	0x005b005b
   856fc:	005b005b 	.word	0x005b005b
   85700:	005b005b 	.word	0x005b005b
   85704:	005b005b 	.word	0x005b005b
   85708:	011e011e 	.word	0x011e011e
   8570c:	011e011e 	.word	0x011e011e
   85710:	011e011e 	.word	0x011e011e
   85714:	01b0011e 	.word	0x01b0011e
   85718:	020b011e 	.word	0x020b011e
   8571c:	01b0007a 	.word	0x01b0007a
   85720:	01b001b0 	.word	0x01b001b0
   85724:	011e011e 	.word	0x011e011e
   85728:	011e011e 	.word	0x011e011e
   8572c:	011e029e 	.word	0x011e029e
   85730:	00b6011e 	.word	0x00b6011e
   85734:	011e011e 	.word	0x011e011e
   85738:	0219011e 	.word	0x0219011e
   8573c:	024c011e 	.word	0x024c011e
   85740:	011e011e 	.word	0x011e011e
   85744:	011e073f 	.word	0x011e073f
   85748:	011e011e 	.word	0x011e011e
   8574c:	011e011e 	.word	0x011e011e
   85750:	011e011e 	.word	0x011e011e
   85754:	01b0011e 	.word	0x01b0011e
   85758:	020b011e 	.word	0x020b011e
   8575c:	01b0007c 	.word	0x01b0007c
   85760:	01b001b0 	.word	0x01b001b0
   85764:	007c0291 	.word	0x007c0291
   85768:	011e0075 	.word	0x011e0075
   8576c:	011e0284 	.word	0x011e0284
   85770:	00b80270 	.word	0x00b80270
   85774:	0075025e 	.word	0x0075025e
   85778:	0219011e 	.word	0x0219011e
   8577c:	071c0072 	.word	0x071c0072
   85780:	011e011e 	.word	0x011e011e
   85784:	011e071f 	.word	0x011e071f
   85788:	0072      	.short	0x0072
   8578a:	2200      	movs	r2, #0
   8578c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   85790:	f81a 6b01 	ldrb.w	r6, [sl], #1
   85794:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   85798:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8579c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   857a0:	2b09      	cmp	r3, #9
   857a2:	d9f5      	bls.n	85790 <_svfprintf_r+0x16c>
   857a4:	9209      	str	r2, [sp, #36]	; 0x24
   857a6:	e78e      	b.n	856c6 <_svfprintf_r+0xa2>
   857a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   857aa:	f853 2b04 	ldr.w	r2, [r3], #4
   857ae:	2a00      	cmp	r2, #0
   857b0:	9209      	str	r2, [sp, #36]	; 0x24
   857b2:	930e      	str	r3, [sp, #56]	; 0x38
   857b4:	f2c0 81d2 	blt.w	85b5c <_svfprintf_r+0x538>
   857b8:	f89a 6000 	ldrb.w	r6, [sl]
   857bc:	e781      	b.n	856c2 <_svfprintf_r+0x9e>
   857be:	f89a 6000 	ldrb.w	r6, [sl]
   857c2:	f047 0720 	orr.w	r7, r7, #32
   857c6:	e77c      	b.n	856c2 <_svfprintf_r+0x9e>
   857c8:	f047 0710 	orr.w	r7, r7, #16
   857cc:	06ba      	lsls	r2, r7, #26
   857ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   857d0:	f140 817d 	bpl.w	85ace <_svfprintf_r+0x4aa>
   857d4:	3307      	adds	r3, #7
   857d6:	f023 0307 	bic.w	r3, r3, #7
   857da:	461a      	mov	r2, r3
   857dc:	685b      	ldr	r3, [r3, #4]
   857de:	f852 4b08 	ldr.w	r4, [r2], #8
   857e2:	4699      	mov	r9, r3
   857e4:	920e      	str	r2, [sp, #56]	; 0x38
   857e6:	2b00      	cmp	r3, #0
   857e8:	f2c0 857f 	blt.w	862ea <_svfprintf_r+0xcc6>
   857ec:	9b07      	ldr	r3, [sp, #28]
   857ee:	3301      	adds	r3, #1
   857f0:	f001 8039 	beq.w	86866 <_svfprintf_r+0x1242>
   857f4:	ea54 0309 	orrs.w	r3, r4, r9
   857f8:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   857fc:	f000 8505 	beq.w	8620a <_svfprintf_r+0xbe6>
   85800:	2c0a      	cmp	r4, #10
   85802:	f179 0300 	sbcs.w	r3, r9, #0
   85806:	f080 8793 	bcs.w	86730 <_svfprintf_r+0x110c>
   8580a:	2301      	movs	r3, #1
   8580c:	465f      	mov	r7, fp
   8580e:	3430      	adds	r4, #48	; 0x30
   85810:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   85814:	930b      	str	r3, [sp, #44]	; 0x2c
   85816:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   8581a:	9a07      	ldr	r2, [sp, #28]
   8581c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8581e:	2300      	movs	r3, #0
   85820:	428a      	cmp	r2, r1
   85822:	bfb8      	it	lt
   85824:	460a      	movlt	r2, r1
   85826:	9206      	str	r2, [sp, #24]
   85828:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8582c:	930d      	str	r3, [sp, #52]	; 0x34
   8582e:	930f      	str	r3, [sp, #60]	; 0x3c
   85830:	9313      	str	r3, [sp, #76]	; 0x4c
   85832:	9310      	str	r3, [sp, #64]	; 0x40
   85834:	2a00      	cmp	r2, #0
   85836:	d07c      	beq.n	85932 <_svfprintf_r+0x30e>
   85838:	9b06      	ldr	r3, [sp, #24]
   8583a:	3301      	adds	r3, #1
   8583c:	9306      	str	r3, [sp, #24]
   8583e:	e078      	b.n	85932 <_svfprintf_r+0x30e>
   85840:	f047 0710 	orr.w	r7, r7, #16
   85844:	f017 0920 	ands.w	r9, r7, #32
   85848:	f000 8132 	beq.w	85ab0 <_svfprintf_r+0x48c>
   8584c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8584e:	3307      	adds	r3, #7
   85850:	f023 0307 	bic.w	r3, r3, #7
   85854:	f8d3 9004 	ldr.w	r9, [r3, #4]
   85858:	f853 4b08 	ldr.w	r4, [r3], #8
   8585c:	930e      	str	r3, [sp, #56]	; 0x38
   8585e:	2300      	movs	r3, #0
   85860:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   85864:	2200      	movs	r2, #0
   85866:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   8586a:	9a07      	ldr	r2, [sp, #28]
   8586c:	1c51      	adds	r1, r2, #1
   8586e:	f000 822a 	beq.w	85cc6 <_svfprintf_r+0x6a2>
   85872:	ea54 0109 	orrs.w	r1, r4, r9
   85876:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   8587a:	f040 8223 	bne.w	85cc4 <_svfprintf_r+0x6a0>
   8587e:	2a00      	cmp	r2, #0
   85880:	f041 802b 	bne.w	868da <_svfprintf_r+0x12b6>
   85884:	2b00      	cmp	r3, #0
   85886:	f040 84c5 	bne.w	86214 <_svfprintf_r+0xbf0>
   8588a:	f01b 0301 	ands.w	r3, fp, #1
   8588e:	930b      	str	r3, [sp, #44]	; 0x2c
   85890:	f000 8554 	beq.w	8633c <_svfprintf_r+0xd18>
   85894:	2330      	movs	r3, #48	; 0x30
   85896:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   8589a:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   8589e:	e7bc      	b.n	8581a <_svfprintf_r+0x1f6>
   858a0:	ebba 0605 	subs.w	r6, sl, r5
   858a4:	f000 80ba 	beq.w	85a1c <_svfprintf_r+0x3f8>
   858a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   858aa:	e9c8 5600 	strd	r5, r6, [r8]
   858ae:	4433      	add	r3, r6
   858b0:	932a      	str	r3, [sp, #168]	; 0xa8
   858b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   858b4:	3301      	adds	r3, #1
   858b6:	2b07      	cmp	r3, #7
   858b8:	9329      	str	r3, [sp, #164]	; 0xa4
   858ba:	dc05      	bgt.n	858c8 <_svfprintf_r+0x2a4>
   858bc:	f108 0808 	add.w	r8, r8, #8
   858c0:	9b08      	ldr	r3, [sp, #32]
   858c2:	4433      	add	r3, r6
   858c4:	9308      	str	r3, [sp, #32]
   858c6:	e6e8      	b.n	8569a <_svfprintf_r+0x76>
   858c8:	990c      	ldr	r1, [sp, #48]	; 0x30
   858ca:	980a      	ldr	r0, [sp, #40]	; 0x28
   858cc:	aa28      	add	r2, sp, #160	; 0xa0
   858ce:	f005 fb09 	bl	8aee4 <__ssprint_r>
   858d2:	b980      	cbnz	r0, 858f6 <_svfprintf_r+0x2d2>
   858d4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   858d8:	e7f2      	b.n	858c0 <_svfprintf_r+0x29c>
   858da:	990c      	ldr	r1, [sp, #48]	; 0x30
   858dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   858de:	aa28      	add	r2, sp, #160	; 0xa0
   858e0:	f005 fb00 	bl	8aee4 <__ssprint_r>
   858e4:	2800      	cmp	r0, #0
   858e6:	f000 808a 	beq.w	859fe <_svfprintf_r+0x3da>
   858ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   858ec:	b11b      	cbz	r3, 858f6 <_svfprintf_r+0x2d2>
   858ee:	990d      	ldr	r1, [sp, #52]	; 0x34
   858f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   858f2:	f003 fded 	bl	894d0 <_free_r>
   858f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   858f8:	899b      	ldrh	r3, [r3, #12]
   858fa:	f013 0f40 	tst.w	r3, #64	; 0x40
   858fe:	9b08      	ldr	r3, [sp, #32]
   85900:	bf18      	it	ne
   85902:	f04f 33ff 	movne.w	r3, #4294967295
   85906:	9308      	str	r3, [sp, #32]
   85908:	9808      	ldr	r0, [sp, #32]
   8590a:	b055      	add	sp, #340	; 0x154
   8590c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85910:	2e00      	cmp	r6, #0
   85912:	f000 8083 	beq.w	85a1c <_svfprintf_r+0x3f8>
   85916:	2301      	movs	r3, #1
   85918:	2200      	movs	r2, #0
   8591a:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   8591e:	9306      	str	r3, [sp, #24]
   85920:	ad3b      	add	r5, sp, #236	; 0xec
   85922:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   85926:	930b      	str	r3, [sp, #44]	; 0x2c
   85928:	920d      	str	r2, [sp, #52]	; 0x34
   8592a:	9207      	str	r2, [sp, #28]
   8592c:	920f      	str	r2, [sp, #60]	; 0x3c
   8592e:	9213      	str	r2, [sp, #76]	; 0x4c
   85930:	9210      	str	r2, [sp, #64]	; 0x40
   85932:	f017 0302 	ands.w	r3, r7, #2
   85936:	d002      	beq.n	8593e <_svfprintf_r+0x31a>
   85938:	9906      	ldr	r1, [sp, #24]
   8593a:	3102      	adds	r1, #2
   8593c:	9106      	str	r1, [sp, #24]
   8593e:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   85942:	d107      	bne.n	85954 <_svfprintf_r+0x330>
   85944:	9909      	ldr	r1, [sp, #36]	; 0x24
   85946:	9806      	ldr	r0, [sp, #24]
   85948:	eba1 0900 	sub.w	r9, r1, r0
   8594c:	f1b9 0f00 	cmp.w	r9, #0
   85950:	f300 8336 	bgt.w	85fc0 <_svfprintf_r+0x99c>
   85954:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85956:	b182      	cbz	r2, 8597a <_svfprintf_r+0x356>
   85958:	2201      	movs	r2, #1
   8595a:	f8c8 2004 	str.w	r2, [r8, #4]
   8595e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   85960:	3401      	adds	r4, #1
   85962:	3201      	adds	r2, #1
   85964:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   85968:	2a07      	cmp	r2, #7
   8596a:	942a      	str	r4, [sp, #168]	; 0xa8
   8596c:	9229      	str	r2, [sp, #164]	; 0xa4
   8596e:	f8c8 1000 	str.w	r1, [r8]
   85972:	f300 8369 	bgt.w	86048 <_svfprintf_r+0xa24>
   85976:	f108 0808 	add.w	r8, r8, #8
   8597a:	b17b      	cbz	r3, 8599c <_svfprintf_r+0x378>
   8597c:	2302      	movs	r3, #2
   8597e:	f8c8 3004 	str.w	r3, [r8, #4]
   85982:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85984:	3402      	adds	r4, #2
   85986:	3301      	adds	r3, #1
   85988:	aa21      	add	r2, sp, #132	; 0x84
   8598a:	2b07      	cmp	r3, #7
   8598c:	942a      	str	r4, [sp, #168]	; 0xa8
   8598e:	9329      	str	r3, [sp, #164]	; 0xa4
   85990:	f8c8 2000 	str.w	r2, [r8]
   85994:	f300 836c 	bgt.w	86070 <_svfprintf_r+0xa4c>
   85998:	f108 0808 	add.w	r8, r8, #8
   8599c:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   859a0:	f000 822e 	beq.w	85e00 <_svfprintf_r+0x7dc>
   859a4:	9b07      	ldr	r3, [sp, #28]
   859a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   859a8:	eba3 0b02 	sub.w	fp, r3, r2
   859ac:	f1bb 0f00 	cmp.w	fp, #0
   859b0:	f300 8271 	bgt.w	85e96 <_svfprintf_r+0x872>
   859b4:	05fb      	lsls	r3, r7, #23
   859b6:	f100 81c5 	bmi.w	85d44 <_svfprintf_r+0x720>
   859ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   859bc:	f8c8 5000 	str.w	r5, [r8]
   859c0:	441c      	add	r4, r3
   859c2:	f8c8 3004 	str.w	r3, [r8, #4]
   859c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   859c8:	942a      	str	r4, [sp, #168]	; 0xa8
   859ca:	3301      	adds	r3, #1
   859cc:	2b07      	cmp	r3, #7
   859ce:	9329      	str	r3, [sp, #164]	; 0xa4
   859d0:	f300 82ea 	bgt.w	85fa8 <_svfprintf_r+0x984>
   859d4:	f108 0808 	add.w	r8, r8, #8
   859d8:	077b      	lsls	r3, r7, #29
   859da:	d505      	bpl.n	859e8 <_svfprintf_r+0x3c4>
   859dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   859de:	9a06      	ldr	r2, [sp, #24]
   859e0:	1a9d      	subs	r5, r3, r2
   859e2:	2d00      	cmp	r5, #0
   859e4:	f300 8350 	bgt.w	86088 <_svfprintf_r+0xa64>
   859e8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   859ec:	9906      	ldr	r1, [sp, #24]
   859ee:	428a      	cmp	r2, r1
   859f0:	bfac      	ite	ge
   859f2:	189b      	addge	r3, r3, r2
   859f4:	185b      	addlt	r3, r3, r1
   859f6:	9308      	str	r3, [sp, #32]
   859f8:	2c00      	cmp	r4, #0
   859fa:	f47f af6e 	bne.w	858da <_svfprintf_r+0x2b6>
   859fe:	2300      	movs	r3, #0
   85a00:	9329      	str	r3, [sp, #164]	; 0xa4
   85a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85a04:	b11b      	cbz	r3, 85a0e <_svfprintf_r+0x3ea>
   85a06:	990d      	ldr	r1, [sp, #52]	; 0x34
   85a08:	980a      	ldr	r0, [sp, #40]	; 0x28
   85a0a:	f003 fd61 	bl	894d0 <_free_r>
   85a0e:	4655      	mov	r5, sl
   85a10:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85a14:	782b      	ldrb	r3, [r5, #0]
   85a16:	2b00      	cmp	r3, #0
   85a18:	f47f ae32 	bne.w	85680 <_svfprintf_r+0x5c>
   85a1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   85a1e:	2b00      	cmp	r3, #0
   85a20:	f43f af69 	beq.w	858f6 <_svfprintf_r+0x2d2>
   85a24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85a26:	980a      	ldr	r0, [sp, #40]	; 0x28
   85a28:	4621      	mov	r1, r4
   85a2a:	aa28      	add	r2, sp, #160	; 0xa0
   85a2c:	f005 fa5a 	bl	8aee4 <__ssprint_r>
   85a30:	89a3      	ldrh	r3, [r4, #12]
   85a32:	e762      	b.n	858fa <_svfprintf_r+0x2d6>
   85a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85a36:	3307      	adds	r3, #7
   85a38:	f023 0207 	bic.w	r2, r3, #7
   85a3c:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   85a40:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   85a44:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   85a48:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   85a4c:	4699      	mov	r9, r3
   85a4e:	4618      	mov	r0, r3
   85a50:	920e      	str	r2, [sp, #56]	; 0x38
   85a52:	4621      	mov	r1, r4
   85a54:	f04f 32ff 	mov.w	r2, #4294967295
   85a58:	4bb6      	ldr	r3, [pc, #728]	; (85d34 <_svfprintf_r+0x710>)
   85a5a:	f006 f983 	bl	8bd64 <__aeabi_dcmpun>
   85a5e:	2800      	cmp	r0, #0
   85a60:	f040 8496 	bne.w	86390 <_svfprintf_r+0xd6c>
   85a64:	4648      	mov	r0, r9
   85a66:	4621      	mov	r1, r4
   85a68:	f04f 32ff 	mov.w	r2, #4294967295
   85a6c:	4bb1      	ldr	r3, [pc, #708]	; (85d34 <_svfprintf_r+0x710>)
   85a6e:	f006 f95b 	bl	8bd28 <__aeabi_dcmple>
   85a72:	2800      	cmp	r0, #0
   85a74:	f040 848c 	bne.w	86390 <_svfprintf_r+0xd6c>
   85a78:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85a7c:	2200      	movs	r2, #0
   85a7e:	2300      	movs	r3, #0
   85a80:	f006 f948 	bl	8bd14 <__aeabi_dcmplt>
   85a84:	2800      	cmp	r0, #0
   85a86:	f040 87a6 	bne.w	869d6 <_svfprintf_r+0x13b2>
   85a8a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   85a8e:	2100      	movs	r1, #0
   85a90:	2003      	movs	r0, #3
   85a92:	4da9      	ldr	r5, [pc, #676]	; (85d38 <_svfprintf_r+0x714>)
   85a94:	4ba9      	ldr	r3, [pc, #676]	; (85d3c <_svfprintf_r+0x718>)
   85a96:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   85a9a:	910d      	str	r1, [sp, #52]	; 0x34
   85a9c:	9006      	str	r0, [sp, #24]
   85a9e:	2e47      	cmp	r6, #71	; 0x47
   85aa0:	bfc8      	it	gt
   85aa2:	461d      	movgt	r5, r3
   85aa4:	9107      	str	r1, [sp, #28]
   85aa6:	900b      	str	r0, [sp, #44]	; 0x2c
   85aa8:	910f      	str	r1, [sp, #60]	; 0x3c
   85aaa:	9113      	str	r1, [sp, #76]	; 0x4c
   85aac:	9110      	str	r1, [sp, #64]	; 0x40
   85aae:	e6c1      	b.n	85834 <_svfprintf_r+0x210>
   85ab0:	f017 0310 	ands.w	r3, r7, #16
   85ab4:	f040 8462 	bne.w	8637c <_svfprintf_r+0xd58>
   85ab8:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   85abc:	f000 877b 	beq.w	869b6 <_svfprintf_r+0x1392>
   85ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85ac2:	4699      	mov	r9, r3
   85ac4:	f852 4b04 	ldr.w	r4, [r2], #4
   85ac8:	920e      	str	r2, [sp, #56]	; 0x38
   85aca:	b2a4      	uxth	r4, r4
   85acc:	e6c7      	b.n	8585e <_svfprintf_r+0x23a>
   85ace:	f853 4b04 	ldr.w	r4, [r3], #4
   85ad2:	930e      	str	r3, [sp, #56]	; 0x38
   85ad4:	06fb      	lsls	r3, r7, #27
   85ad6:	f100 8441 	bmi.w	8635c <_svfprintf_r+0xd38>
   85ada:	067d      	lsls	r5, r7, #25
   85adc:	f140 843b 	bpl.w	86356 <_svfprintf_r+0xd32>
   85ae0:	f344 39c0 	sbfx	r9, r4, #15, #1
   85ae4:	464b      	mov	r3, r9
   85ae6:	b224      	sxth	r4, r4
   85ae8:	e67d      	b.n	857e6 <_svfprintf_r+0x1c2>
   85aea:	2001      	movs	r0, #1
   85aec:	2200      	movs	r2, #0
   85aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85af0:	9006      	str	r0, [sp, #24]
   85af2:	f853 1b04 	ldr.w	r1, [r3], #4
   85af6:	ad3b      	add	r5, sp, #236	; 0xec
   85af8:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   85afc:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   85b00:	930e      	str	r3, [sp, #56]	; 0x38
   85b02:	900b      	str	r0, [sp, #44]	; 0x2c
   85b04:	e710      	b.n	85928 <_svfprintf_r+0x304>
   85b06:	f04f 0900 	mov.w	r9, #0
   85b0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   85b0c:	9b07      	ldr	r3, [sp, #28]
   85b0e:	f854 5b04 	ldr.w	r5, [r4], #4
   85b12:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   85b16:	2d00      	cmp	r5, #0
   85b18:	f000 86ee 	beq.w	868f8 <_svfprintf_r+0x12d4>
   85b1c:	1c5a      	adds	r2, r3, #1
   85b1e:	f000 8560 	beq.w	865e2 <_svfprintf_r+0xfbe>
   85b22:	461a      	mov	r2, r3
   85b24:	4649      	mov	r1, r9
   85b26:	4628      	mov	r0, r5
   85b28:	f004 faea 	bl	8a100 <memchr>
   85b2c:	900d      	str	r0, [sp, #52]	; 0x34
   85b2e:	2800      	cmp	r0, #0
   85b30:	f001 809e 	beq.w	86c70 <_svfprintf_r+0x164c>
   85b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85b36:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   85b3a:	1b5b      	subs	r3, r3, r5
   85b3c:	930b      	str	r3, [sp, #44]	; 0x2c
   85b3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85b42:	f8cd 901c 	str.w	r9, [sp, #28]
   85b46:	940e      	str	r4, [sp, #56]	; 0x38
   85b48:	9306      	str	r3, [sp, #24]
   85b4a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   85b4e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   85b52:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   85b56:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   85b5a:	e66b      	b.n	85834 <_svfprintf_r+0x210>
   85b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85b5e:	425b      	negs	r3, r3
   85b60:	9309      	str	r3, [sp, #36]	; 0x24
   85b62:	f89a 6000 	ldrb.w	r6, [sl]
   85b66:	f047 0704 	orr.w	r7, r7, #4
   85b6a:	e5aa      	b.n	856c2 <_svfprintf_r+0x9e>
   85b6c:	f047 0b10 	orr.w	fp, r7, #16
   85b70:	f01b 0920 	ands.w	r9, fp, #32
   85b74:	f000 83aa 	beq.w	862cc <_svfprintf_r+0xca8>
   85b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85b7a:	3307      	adds	r3, #7
   85b7c:	f023 0307 	bic.w	r3, r3, #7
   85b80:	461a      	mov	r2, r3
   85b82:	f852 4b08 	ldr.w	r4, [r2], #8
   85b86:	f8d3 9004 	ldr.w	r9, [r3, #4]
   85b8a:	920e      	str	r2, [sp, #56]	; 0x38
   85b8c:	2301      	movs	r3, #1
   85b8e:	e669      	b.n	85864 <_svfprintf_r+0x240>
   85b90:	2230      	movs	r2, #48	; 0x30
   85b92:	2678      	movs	r6, #120	; 0x78
   85b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85b96:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   85b9a:	f853 4b04 	ldr.w	r4, [r3], #4
   85b9e:	4a68      	ldr	r2, [pc, #416]	; (85d40 <_svfprintf_r+0x71c>)
   85ba0:	930e      	str	r3, [sp, #56]	; 0x38
   85ba2:	f04f 0900 	mov.w	r9, #0
   85ba6:	2302      	movs	r3, #2
   85ba8:	f047 0b02 	orr.w	fp, r7, #2
   85bac:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   85bb0:	9218      	str	r2, [sp, #96]	; 0x60
   85bb2:	e657      	b.n	85864 <_svfprintf_r+0x240>
   85bb4:	06bd      	lsls	r5, r7, #26
   85bb6:	f100 83d6 	bmi.w	86366 <_svfprintf_r+0xd42>
   85bba:	06fc      	lsls	r4, r7, #27
   85bbc:	f100 8693 	bmi.w	868e6 <_svfprintf_r+0x12c2>
   85bc0:	0678      	lsls	r0, r7, #25
   85bc2:	f100 875d 	bmi.w	86a80 <_svfprintf_r+0x145c>
   85bc6:	05b9      	lsls	r1, r7, #22
   85bc8:	f140 868d 	bpl.w	868e6 <_svfprintf_r+0x12c2>
   85bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85bce:	9908      	ldr	r1, [sp, #32]
   85bd0:	f853 2b04 	ldr.w	r2, [r3], #4
   85bd4:	4655      	mov	r5, sl
   85bd6:	7011      	strb	r1, [r2, #0]
   85bd8:	930e      	str	r3, [sp, #56]	; 0x38
   85bda:	e71b      	b.n	85a14 <_svfprintf_r+0x3f0>
   85bdc:	f89a 6000 	ldrb.w	r6, [sl]
   85be0:	2e6c      	cmp	r6, #108	; 0x6c
   85be2:	bf03      	ittte	eq
   85be4:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   85be8:	f047 0720 	orreq.w	r7, r7, #32
   85bec:	f10a 0a01 	addeq.w	sl, sl, #1
   85bf0:	f047 0710 	orrne.w	r7, r7, #16
   85bf4:	e565      	b.n	856c2 <_svfprintf_r+0x9e>
   85bf6:	f89a 6000 	ldrb.w	r6, [sl]
   85bfa:	2e68      	cmp	r6, #104	; 0x68
   85bfc:	bf03      	ittte	eq
   85bfe:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   85c02:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   85c06:	f10a 0a01 	addeq.w	sl, sl, #1
   85c0a:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   85c0e:	e558      	b.n	856c2 <_svfprintf_r+0x9e>
   85c10:	f89a 6000 	ldrb.w	r6, [sl]
   85c14:	f047 0708 	orr.w	r7, r7, #8
   85c18:	e553      	b.n	856c2 <_svfprintf_r+0x9e>
   85c1a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   85c1c:	4630      	mov	r0, r6
   85c1e:	f003 fef9 	bl	89a14 <_localeconv_r>
   85c22:	6843      	ldr	r3, [r0, #4]
   85c24:	4618      	mov	r0, r3
   85c26:	931b      	str	r3, [sp, #108]	; 0x6c
   85c28:	f7ff fc9a 	bl	85560 <strlen>
   85c2c:	4603      	mov	r3, r0
   85c2e:	4630      	mov	r0, r6
   85c30:	931c      	str	r3, [sp, #112]	; 0x70
   85c32:	461e      	mov	r6, r3
   85c34:	f003 feee 	bl	89a14 <_localeconv_r>
   85c38:	6883      	ldr	r3, [r0, #8]
   85c3a:	9319      	str	r3, [sp, #100]	; 0x64
   85c3c:	2e00      	cmp	r6, #0
   85c3e:	f43f adbb 	beq.w	857b8 <_svfprintf_r+0x194>
   85c42:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85c44:	2b00      	cmp	r3, #0
   85c46:	f43f adb7 	beq.w	857b8 <_svfprintf_r+0x194>
   85c4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85c4c:	781b      	ldrb	r3, [r3, #0]
   85c4e:	2b00      	cmp	r3, #0
   85c50:	f43f adb2 	beq.w	857b8 <_svfprintf_r+0x194>
   85c54:	f89a 6000 	ldrb.w	r6, [sl]
   85c58:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   85c5c:	e531      	b.n	856c2 <_svfprintf_r+0x9e>
   85c5e:	f89a 6000 	ldrb.w	r6, [sl]
   85c62:	f047 0701 	orr.w	r7, r7, #1
   85c66:	e52c      	b.n	856c2 <_svfprintf_r+0x9e>
   85c68:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   85c6c:	2b00      	cmp	r3, #0
   85c6e:	f47f ada3 	bne.w	857b8 <_svfprintf_r+0x194>
   85c72:	f89a 6000 	ldrb.w	r6, [sl]
   85c76:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   85c7a:	e522      	b.n	856c2 <_svfprintf_r+0x9e>
   85c7c:	f89a 6000 	ldrb.w	r6, [sl]
   85c80:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   85c84:	e51d      	b.n	856c2 <_svfprintf_r+0x9e>
   85c86:	4652      	mov	r2, sl
   85c88:	f812 6b01 	ldrb.w	r6, [r2], #1
   85c8c:	2e2a      	cmp	r6, #42	; 0x2a
   85c8e:	f001 81eb 	beq.w	87068 <_svfprintf_r+0x1a44>
   85c92:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   85c96:	2b09      	cmp	r3, #9
   85c98:	4692      	mov	sl, r2
   85c9a:	bf98      	it	ls
   85c9c:	2200      	movls	r2, #0
   85c9e:	f201 8003 	bhi.w	86ca8 <_svfprintf_r+0x1684>
   85ca2:	f81a 6b01 	ldrb.w	r6, [sl], #1
   85ca6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   85caa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   85cae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   85cb2:	2b09      	cmp	r3, #9
   85cb4:	d9f5      	bls.n	85ca2 <_svfprintf_r+0x67e>
   85cb6:	9207      	str	r2, [sp, #28]
   85cb8:	e505      	b.n	856c6 <_svfprintf_r+0xa2>
   85cba:	f89a 6000 	ldrb.w	r6, [sl]
   85cbe:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   85cc2:	e4fe      	b.n	856c2 <_svfprintf_r+0x9e>
   85cc4:	46bb      	mov	fp, r7
   85cc6:	2b01      	cmp	r3, #1
   85cc8:	f43f ad9a 	beq.w	85800 <_svfprintf_r+0x1dc>
   85ccc:	2b02      	cmp	r3, #2
   85cce:	ad54      	add	r5, sp, #336	; 0x150
   85cd0:	d112      	bne.n	85cf8 <_svfprintf_r+0x6d4>
   85cd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   85cd4:	f004 030f 	and.w	r3, r4, #15
   85cd8:	5cd3      	ldrb	r3, [r2, r3]
   85cda:	0924      	lsrs	r4, r4, #4
   85cdc:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   85ce0:	ea4f 1919 	mov.w	r9, r9, lsr #4
   85ce4:	f805 3d01 	strb.w	r3, [r5, #-1]!
   85ce8:	ea54 0309 	orrs.w	r3, r4, r9
   85cec:	d1f2      	bne.n	85cd4 <_svfprintf_r+0x6b0>
   85cee:	ab54      	add	r3, sp, #336	; 0x150
   85cf0:	1b5b      	subs	r3, r3, r5
   85cf2:	465f      	mov	r7, fp
   85cf4:	930b      	str	r3, [sp, #44]	; 0x2c
   85cf6:	e590      	b.n	8581a <_svfprintf_r+0x1f6>
   85cf8:	f004 0307 	and.w	r3, r4, #7
   85cfc:	08e4      	lsrs	r4, r4, #3
   85cfe:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   85d02:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   85d06:	3330      	adds	r3, #48	; 0x30
   85d08:	ea54 0109 	orrs.w	r1, r4, r9
   85d0c:	462a      	mov	r2, r5
   85d0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
   85d12:	d1f1      	bne.n	85cf8 <_svfprintf_r+0x6d4>
   85d14:	f01b 0f01 	tst.w	fp, #1
   85d18:	d0e9      	beq.n	85cee <_svfprintf_r+0x6ca>
   85d1a:	2b30      	cmp	r3, #48	; 0x30
   85d1c:	d0e7      	beq.n	85cee <_svfprintf_r+0x6ca>
   85d1e:	2330      	movs	r3, #48	; 0x30
   85d20:	3a02      	subs	r2, #2
   85d22:	f805 3c01 	strb.w	r3, [r5, #-1]
   85d26:	ab54      	add	r3, sp, #336	; 0x150
   85d28:	1a9b      	subs	r3, r3, r2
   85d2a:	465f      	mov	r7, fp
   85d2c:	4615      	mov	r5, r2
   85d2e:	930b      	str	r3, [sp, #44]	; 0x2c
   85d30:	e573      	b.n	8581a <_svfprintf_r+0x1f6>
   85d32:	bf00      	nop
   85d34:	7fefffff 	.word	0x7fefffff
   85d38:	0008c224 	.word	0x0008c224
   85d3c:	0008c228 	.word	0x0008c228
   85d40:	0008c234 	.word	0x0008c234
   85d44:	2e65      	cmp	r6, #101	; 0x65
   85d46:	f340 80e9 	ble.w	85f1c <_svfprintf_r+0x8f8>
   85d4a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85d4e:	2200      	movs	r2, #0
   85d50:	2300      	movs	r3, #0
   85d52:	f005 ffd5 	bl	8bd00 <__aeabi_dcmpeq>
   85d56:	2800      	cmp	r0, #0
   85d58:	f000 81d2 	beq.w	86100 <_svfprintf_r+0xadc>
   85d5c:	2301      	movs	r3, #1
   85d5e:	f8c8 3004 	str.w	r3, [r8, #4]
   85d62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85d64:	4abf      	ldr	r2, [pc, #764]	; (86064 <_svfprintf_r+0xa40>)
   85d66:	3301      	adds	r3, #1
   85d68:	3401      	adds	r4, #1
   85d6a:	2b07      	cmp	r3, #7
   85d6c:	942a      	str	r4, [sp, #168]	; 0xa8
   85d6e:	9329      	str	r3, [sp, #164]	; 0xa4
   85d70:	f8c8 2000 	str.w	r2, [r8]
   85d74:	f300 857a 	bgt.w	8686c <_svfprintf_r+0x1248>
   85d78:	f108 0808 	add.w	r8, r8, #8
   85d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   85d7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85d80:	4293      	cmp	r3, r2
   85d82:	f280 82d7 	bge.w	86334 <_svfprintf_r+0xd10>
   85d86:	9b16      	ldr	r3, [sp, #88]	; 0x58
   85d88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   85d8a:	441c      	add	r4, r3
   85d8c:	e9c8 2300 	strd	r2, r3, [r8]
   85d90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85d92:	942a      	str	r4, [sp, #168]	; 0xa8
   85d94:	3301      	adds	r3, #1
   85d96:	2b07      	cmp	r3, #7
   85d98:	9329      	str	r3, [sp, #164]	; 0xa4
   85d9a:	f300 83dd 	bgt.w	86558 <_svfprintf_r+0xf34>
   85d9e:	f108 0808 	add.w	r8, r8, #8
   85da2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85da4:	1e5d      	subs	r5, r3, #1
   85da6:	2d00      	cmp	r5, #0
   85da8:	f77f ae16 	ble.w	859d8 <_svfprintf_r+0x3b4>
   85dac:	2d10      	cmp	r5, #16
   85dae:	f341 8141 	ble.w	87034 <_svfprintf_r+0x1a10>
   85db2:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 86068 <_svfprintf_r+0xa44>
   85db6:	4622      	mov	r2, r4
   85db8:	4649      	mov	r1, r9
   85dba:	2610      	movs	r6, #16
   85dbc:	46b9      	mov	r9, r7
   85dbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85dc0:	460f      	mov	r7, r1
   85dc2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   85dc6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85dc8:	e005      	b.n	85dd6 <_svfprintf_r+0x7b2>
   85dca:	f108 0808 	add.w	r8, r8, #8
   85dce:	3d10      	subs	r5, #16
   85dd0:	2d10      	cmp	r5, #16
   85dd2:	f340 8558 	ble.w	86886 <_svfprintf_r+0x1262>
   85dd6:	3301      	adds	r3, #1
   85dd8:	3210      	adds	r2, #16
   85dda:	2b07      	cmp	r3, #7
   85ddc:	e9c8 7600 	strd	r7, r6, [r8]
   85de0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   85de4:	ddf1      	ble.n	85dca <_svfprintf_r+0x7a6>
   85de6:	4621      	mov	r1, r4
   85de8:	4658      	mov	r0, fp
   85dea:	aa28      	add	r2, sp, #160	; 0xa0
   85dec:	f005 f87a 	bl	8aee4 <__ssprint_r>
   85df0:	2800      	cmp	r0, #0
   85df2:	f47f ad7a 	bne.w	858ea <_svfprintf_r+0x2c6>
   85df6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   85dfa:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85dfe:	e7e6      	b.n	85dce <_svfprintf_r+0x7aa>
   85e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85e02:	9a06      	ldr	r2, [sp, #24]
   85e04:	eba3 0b02 	sub.w	fp, r3, r2
   85e08:	f1bb 0f00 	cmp.w	fp, #0
   85e0c:	f77f adca 	ble.w	859a4 <_svfprintf_r+0x380>
   85e10:	f1bb 0f10 	cmp.w	fp, #16
   85e14:	f341 8005 	ble.w	86e22 <_svfprintf_r+0x17fe>
   85e18:	f8df 924c 	ldr.w	r9, [pc, #588]	; 86068 <_svfprintf_r+0xa44>
   85e1c:	4641      	mov	r1, r8
   85e1e:	4620      	mov	r0, r4
   85e20:	46a8      	mov	r8, r5
   85e22:	464c      	mov	r4, r9
   85e24:	2310      	movs	r3, #16
   85e26:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   85e28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   85e2a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85e2e:	e006      	b.n	85e3e <_svfprintf_r+0x81a>
   85e30:	f1ab 0b10 	sub.w	fp, fp, #16
   85e34:	f1bb 0f10 	cmp.w	fp, #16
   85e38:	f101 0108 	add.w	r1, r1, #8
   85e3c:	dd19      	ble.n	85e72 <_svfprintf_r+0x84e>
   85e3e:	3201      	adds	r2, #1
   85e40:	3010      	adds	r0, #16
   85e42:	2a07      	cmp	r2, #7
   85e44:	e9c1 4300 	strd	r4, r3, [r1]
   85e48:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   85e4c:	ddf0      	ble.n	85e30 <_svfprintf_r+0x80c>
   85e4e:	4629      	mov	r1, r5
   85e50:	4648      	mov	r0, r9
   85e52:	aa28      	add	r2, sp, #160	; 0xa0
   85e54:	f005 f846 	bl	8aee4 <__ssprint_r>
   85e58:	2800      	cmp	r0, #0
   85e5a:	f47f ad46 	bne.w	858ea <_svfprintf_r+0x2c6>
   85e5e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   85e62:	f1ab 0b10 	sub.w	fp, fp, #16
   85e66:	f1bb 0f10 	cmp.w	fp, #16
   85e6a:	f04f 0310 	mov.w	r3, #16
   85e6e:	a92b      	add	r1, sp, #172	; 0xac
   85e70:	dce5      	bgt.n	85e3e <_svfprintf_r+0x81a>
   85e72:	4645      	mov	r5, r8
   85e74:	46a1      	mov	r9, r4
   85e76:	4688      	mov	r8, r1
   85e78:	4604      	mov	r4, r0
   85e7a:	3201      	adds	r2, #1
   85e7c:	445c      	add	r4, fp
   85e7e:	2a07      	cmp	r2, #7
   85e80:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   85e84:	f8c8 9000 	str.w	r9, [r8]
   85e88:	f8c8 b004 	str.w	fp, [r8, #4]
   85e8c:	f300 8518 	bgt.w	868c0 <_svfprintf_r+0x129c>
   85e90:	f108 0808 	add.w	r8, r8, #8
   85e94:	e586      	b.n	859a4 <_svfprintf_r+0x380>
   85e96:	f1bb 0f10 	cmp.w	fp, #16
   85e9a:	f340 8597 	ble.w	869cc <_svfprintf_r+0x13a8>
   85e9e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 86068 <_svfprintf_r+0xa44>
   85ea2:	4641      	mov	r1, r8
   85ea4:	4620      	mov	r0, r4
   85ea6:	46a8      	mov	r8, r5
   85ea8:	464c      	mov	r4, r9
   85eaa:	2310      	movs	r3, #16
   85eac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   85eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   85eb0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85eb4:	e006      	b.n	85ec4 <_svfprintf_r+0x8a0>
   85eb6:	f1ab 0b10 	sub.w	fp, fp, #16
   85eba:	f1bb 0f10 	cmp.w	fp, #16
   85ebe:	f101 0108 	add.w	r1, r1, #8
   85ec2:	dd19      	ble.n	85ef8 <_svfprintf_r+0x8d4>
   85ec4:	3201      	adds	r2, #1
   85ec6:	3010      	adds	r0, #16
   85ec8:	2a07      	cmp	r2, #7
   85eca:	e9c1 4300 	strd	r4, r3, [r1]
   85ece:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   85ed2:	ddf0      	ble.n	85eb6 <_svfprintf_r+0x892>
   85ed4:	4629      	mov	r1, r5
   85ed6:	4648      	mov	r0, r9
   85ed8:	aa28      	add	r2, sp, #160	; 0xa0
   85eda:	f005 f803 	bl	8aee4 <__ssprint_r>
   85ede:	2800      	cmp	r0, #0
   85ee0:	f47f ad03 	bne.w	858ea <_svfprintf_r+0x2c6>
   85ee4:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   85ee8:	f1ab 0b10 	sub.w	fp, fp, #16
   85eec:	f1bb 0f10 	cmp.w	fp, #16
   85ef0:	f04f 0310 	mov.w	r3, #16
   85ef4:	a92b      	add	r1, sp, #172	; 0xac
   85ef6:	dce5      	bgt.n	85ec4 <_svfprintf_r+0x8a0>
   85ef8:	4645      	mov	r5, r8
   85efa:	46a1      	mov	r9, r4
   85efc:	4688      	mov	r8, r1
   85efe:	4604      	mov	r4, r0
   85f00:	3201      	adds	r2, #1
   85f02:	445c      	add	r4, fp
   85f04:	2a07      	cmp	r2, #7
   85f06:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   85f0a:	f8c8 9000 	str.w	r9, [r8]
   85f0e:	f8c8 b004 	str.w	fp, [r8, #4]
   85f12:	f300 81ce 	bgt.w	862b2 <_svfprintf_r+0xc8e>
   85f16:	f108 0808 	add.w	r8, r8, #8
   85f1a:	e54b      	b.n	859b4 <_svfprintf_r+0x390>
   85f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85f1e:	2b01      	cmp	r3, #1
   85f20:	f340 817e 	ble.w	86220 <_svfprintf_r+0xbfc>
   85f24:	2301      	movs	r3, #1
   85f26:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   85f28:	3401      	adds	r4, #1
   85f2a:	441e      	add	r6, r3
   85f2c:	2e07      	cmp	r6, #7
   85f2e:	f8c8 5000 	str.w	r5, [r8]
   85f32:	942a      	str	r4, [sp, #168]	; 0xa8
   85f34:	f8c8 3004 	str.w	r3, [r8, #4]
   85f38:	9629      	str	r6, [sp, #164]	; 0xa4
   85f3a:	f300 81e1 	bgt.w	86300 <_svfprintf_r+0xcdc>
   85f3e:	f108 0808 	add.w	r8, r8, #8
   85f42:	9b16      	ldr	r3, [sp, #88]	; 0x58
   85f44:	3601      	adds	r6, #1
   85f46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   85f48:	441c      	add	r4, r3
   85f4a:	2e07      	cmp	r6, #7
   85f4c:	e9c8 2300 	strd	r2, r3, [r8]
   85f50:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   85f54:	f300 81e1 	bgt.w	8631a <_svfprintf_r+0xcf6>
   85f58:	f108 0808 	add.w	r8, r8, #8
   85f5c:	2200      	movs	r2, #0
   85f5e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85f62:	2300      	movs	r3, #0
   85f64:	f005 fecc 	bl	8bd00 <__aeabi_dcmpeq>
   85f68:	2800      	cmp	r0, #0
   85f6a:	f040 8176 	bne.w	8625a <_svfprintf_r+0xc36>
   85f6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85f70:	3601      	adds	r6, #1
   85f72:	3b01      	subs	r3, #1
   85f74:	3501      	adds	r5, #1
   85f76:	441c      	add	r4, r3
   85f78:	2e07      	cmp	r6, #7
   85f7a:	f8c8 5000 	str.w	r5, [r8]
   85f7e:	9629      	str	r6, [sp, #164]	; 0xa4
   85f80:	f8c8 3004 	str.w	r3, [r8, #4]
   85f84:	942a      	str	r4, [sp, #168]	; 0xa8
   85f86:	f300 815b 	bgt.w	86240 <_svfprintf_r+0xc1c>
   85f8a:	f108 0808 	add.w	r8, r8, #8
   85f8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85f90:	3601      	adds	r6, #1
   85f92:	441c      	add	r4, r3
   85f94:	f8c8 3004 	str.w	r3, [r8, #4]
   85f98:	2e07      	cmp	r6, #7
   85f9a:	ab24      	add	r3, sp, #144	; 0x90
   85f9c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   85fa0:	f8c8 3000 	str.w	r3, [r8]
   85fa4:	f77f ad16 	ble.w	859d4 <_svfprintf_r+0x3b0>
   85fa8:	990c      	ldr	r1, [sp, #48]	; 0x30
   85faa:	980a      	ldr	r0, [sp, #40]	; 0x28
   85fac:	aa28      	add	r2, sp, #160	; 0xa0
   85fae:	f004 ff99 	bl	8aee4 <__ssprint_r>
   85fb2:	2800      	cmp	r0, #0
   85fb4:	f47f ac99 	bne.w	858ea <_svfprintf_r+0x2c6>
   85fb8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85fba:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85fbe:	e50b      	b.n	859d8 <_svfprintf_r+0x3b4>
   85fc0:	f1b9 0f10 	cmp.w	r9, #16
   85fc4:	f340 8650 	ble.w	86c68 <_svfprintf_r+0x1644>
   85fc8:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   85fcc:	4640      	mov	r0, r8
   85fce:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   85fd2:	46b8      	mov	r8, r7
   85fd4:	2410      	movs	r4, #16
   85fd6:	464f      	mov	r7, r9
   85fd8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   85fda:	46a9      	mov	r9, r5
   85fdc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85fde:	e004      	b.n	85fea <_svfprintf_r+0x9c6>
   85fe0:	3f10      	subs	r7, #16
   85fe2:	2f10      	cmp	r7, #16
   85fe4:	f100 0008 	add.w	r0, r0, #8
   85fe8:	dd16      	ble.n	86018 <_svfprintf_r+0x9f4>
   85fea:	3201      	adds	r2, #1
   85fec:	4b1f      	ldr	r3, [pc, #124]	; (8606c <_svfprintf_r+0xa48>)
   85fee:	3110      	adds	r1, #16
   85ff0:	2a07      	cmp	r2, #7
   85ff2:	e9c0 3400 	strd	r3, r4, [r0]
   85ff6:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   85ffa:	ddf1      	ble.n	85fe0 <_svfprintf_r+0x9bc>
   85ffc:	4631      	mov	r1, r6
   85ffe:	4628      	mov	r0, r5
   86000:	aa28      	add	r2, sp, #160	; 0xa0
   86002:	f004 ff6f 	bl	8aee4 <__ssprint_r>
   86006:	2800      	cmp	r0, #0
   86008:	f47f ac6f 	bne.w	858ea <_svfprintf_r+0x2c6>
   8600c:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   86010:	3f10      	subs	r7, #16
   86012:	2f10      	cmp	r7, #16
   86014:	a82b      	add	r0, sp, #172	; 0xac
   86016:	dce8      	bgt.n	85fea <_svfprintf_r+0x9c6>
   86018:	464d      	mov	r5, r9
   8601a:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   8601e:	46b9      	mov	r9, r7
   86020:	4647      	mov	r7, r8
   86022:	4680      	mov	r8, r0
   86024:	eb09 0401 	add.w	r4, r9, r1
   86028:	3201      	adds	r2, #1
   8602a:	4910      	ldr	r1, [pc, #64]	; (8606c <_svfprintf_r+0xa48>)
   8602c:	2a07      	cmp	r2, #7
   8602e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86032:	f8c8 9004 	str.w	r9, [r8, #4]
   86036:	f8c8 1000 	str.w	r1, [r8]
   8603a:	f300 83c3 	bgt.w	867c4 <_svfprintf_r+0x11a0>
   8603e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86042:	f108 0808 	add.w	r8, r8, #8
   86046:	e486      	b.n	85956 <_svfprintf_r+0x332>
   86048:	990c      	ldr	r1, [sp, #48]	; 0x30
   8604a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8604c:	aa28      	add	r2, sp, #160	; 0xa0
   8604e:	931d      	str	r3, [sp, #116]	; 0x74
   86050:	f004 ff48 	bl	8aee4 <__ssprint_r>
   86054:	2800      	cmp	r0, #0
   86056:	f47f ac48 	bne.w	858ea <_svfprintf_r+0x2c6>
   8605a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8605c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   8605e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86062:	e48a      	b.n	8597a <_svfprintf_r+0x356>
   86064:	0008c264 	.word	0x0008c264
   86068:	0008c278 	.word	0x0008c278
   8606c:	0008c268 	.word	0x0008c268
   86070:	990c      	ldr	r1, [sp, #48]	; 0x30
   86072:	980a      	ldr	r0, [sp, #40]	; 0x28
   86074:	aa28      	add	r2, sp, #160	; 0xa0
   86076:	f004 ff35 	bl	8aee4 <__ssprint_r>
   8607a:	2800      	cmp	r0, #0
   8607c:	f47f ac35 	bne.w	858ea <_svfprintf_r+0x2c6>
   86080:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86082:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86086:	e489      	b.n	8599c <_svfprintf_r+0x378>
   86088:	2d10      	cmp	r5, #16
   8608a:	f340 86c4 	ble.w	86e16 <_svfprintf_r+0x17f2>
   8608e:	2610      	movs	r6, #16
   86090:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86092:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   86094:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   86098:	e004      	b.n	860a4 <_svfprintf_r+0xa80>
   8609a:	3d10      	subs	r5, #16
   8609c:	2d10      	cmp	r5, #16
   8609e:	f108 0808 	add.w	r8, r8, #8
   860a2:	dd17      	ble.n	860d4 <_svfprintf_r+0xab0>
   860a4:	3301      	adds	r3, #1
   860a6:	4ab8      	ldr	r2, [pc, #736]	; (86388 <_svfprintf_r+0xd64>)
   860a8:	3410      	adds	r4, #16
   860aa:	2b07      	cmp	r3, #7
   860ac:	e9c8 2600 	strd	r2, r6, [r8]
   860b0:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   860b4:	ddf1      	ble.n	8609a <_svfprintf_r+0xa76>
   860b6:	4649      	mov	r1, r9
   860b8:	4638      	mov	r0, r7
   860ba:	aa28      	add	r2, sp, #160	; 0xa0
   860bc:	f004 ff12 	bl	8aee4 <__ssprint_r>
   860c0:	2800      	cmp	r0, #0
   860c2:	f47f ac12 	bne.w	858ea <_svfprintf_r+0x2c6>
   860c6:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   860ca:	3d10      	subs	r5, #16
   860cc:	2d10      	cmp	r5, #16
   860ce:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   860d2:	dce7      	bgt.n	860a4 <_svfprintf_r+0xa80>
   860d4:	3301      	adds	r3, #1
   860d6:	4aac      	ldr	r2, [pc, #688]	; (86388 <_svfprintf_r+0xd64>)
   860d8:	442c      	add	r4, r5
   860da:	2b07      	cmp	r3, #7
   860dc:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   860e0:	f8c8 5004 	str.w	r5, [r8, #4]
   860e4:	f8c8 2000 	str.w	r2, [r8]
   860e8:	f77f ac7e 	ble.w	859e8 <_svfprintf_r+0x3c4>
   860ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   860ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   860f0:	aa28      	add	r2, sp, #160	; 0xa0
   860f2:	f004 fef7 	bl	8aee4 <__ssprint_r>
   860f6:	2800      	cmp	r0, #0
   860f8:	f47f abf7 	bne.w	858ea <_svfprintf_r+0x2c6>
   860fc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   860fe:	e473      	b.n	859e8 <_svfprintf_r+0x3c4>
   86100:	9922      	ldr	r1, [sp, #136]	; 0x88
   86102:	2900      	cmp	r1, #0
   86104:	f340 836f 	ble.w	867e6 <_svfprintf_r+0x11c2>
   86108:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   8610c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8610e:	4599      	cmp	r9, r3
   86110:	bfa8      	it	ge
   86112:	4699      	movge	r9, r3
   86114:	f1b9 0f00 	cmp.w	r9, #0
   86118:	dd0b      	ble.n	86132 <_svfprintf_r+0xb0e>
   8611a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8611c:	444c      	add	r4, r9
   8611e:	3301      	adds	r3, #1
   86120:	2b07      	cmp	r3, #7
   86122:	e9c8 5900 	strd	r5, r9, [r8]
   86126:	942a      	str	r4, [sp, #168]	; 0xa8
   86128:	9329      	str	r3, [sp, #164]	; 0xa4
   8612a:	f300 851d 	bgt.w	86b68 <_svfprintf_r+0x1544>
   8612e:	f108 0808 	add.w	r8, r8, #8
   86132:	9e10      	ldr	r6, [sp, #64]	; 0x40
   86134:	f1b9 0f00 	cmp.w	r9, #0
   86138:	bfa8      	it	ge
   8613a:	eba6 0609 	subge.w	r6, r6, r9
   8613e:	2e00      	cmp	r6, #0
   86140:	f300 8225 	bgt.w	8658e <_svfprintf_r+0xf6a>
   86144:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   86148:	0578      	lsls	r0, r7, #21
   8614a:	44ab      	add	fp, r5
   8614c:	f100 825f 	bmi.w	8660e <_svfprintf_r+0xfea>
   86150:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86152:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86154:	4293      	cmp	r3, r2
   86156:	db02      	blt.n	8615e <_svfprintf_r+0xb3a>
   86158:	07f9      	lsls	r1, r7, #31
   8615a:	f140 8476 	bpl.w	86a4a <_svfprintf_r+0x1426>
   8615e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86160:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86162:	4414      	add	r4, r2
   86164:	e9c8 1200 	strd	r1, r2, [r8]
   86168:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8616a:	942a      	str	r4, [sp, #168]	; 0xa8
   8616c:	3201      	adds	r2, #1
   8616e:	2a07      	cmp	r2, #7
   86170:	9229      	str	r2, [sp, #164]	; 0xa4
   86172:	f300 8513 	bgt.w	86b9c <_svfprintf_r+0x1578>
   86176:	f108 0808 	add.w	r8, r8, #8
   8617a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8617c:	18ae      	adds	r6, r5, r2
   8617e:	eba6 060b 	sub.w	r6, r6, fp
   86182:	1ad5      	subs	r5, r2, r3
   86184:	42ae      	cmp	r6, r5
   86186:	bfa8      	it	ge
   86188:	462e      	movge	r6, r5
   8618a:	2e00      	cmp	r6, #0
   8618c:	dd0d      	ble.n	861aa <_svfprintf_r+0xb86>
   8618e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86190:	4434      	add	r4, r6
   86192:	3301      	adds	r3, #1
   86194:	2b07      	cmp	r3, #7
   86196:	f8c8 b000 	str.w	fp, [r8]
   8619a:	f8c8 6004 	str.w	r6, [r8, #4]
   8619e:	942a      	str	r4, [sp, #168]	; 0xa8
   861a0:	9329      	str	r3, [sp, #164]	; 0xa4
   861a2:	f300 8571 	bgt.w	86c88 <_svfprintf_r+0x1664>
   861a6:	f108 0808 	add.w	r8, r8, #8
   861aa:	2e00      	cmp	r6, #0
   861ac:	bfa8      	it	ge
   861ae:	1bad      	subge	r5, r5, r6
   861b0:	2d00      	cmp	r5, #0
   861b2:	f77f ac11 	ble.w	859d8 <_svfprintf_r+0x3b4>
   861b6:	2d10      	cmp	r5, #16
   861b8:	f340 873c 	ble.w	87034 <_svfprintf_r+0x1a10>
   861bc:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8638c <_svfprintf_r+0xd68>
   861c0:	4622      	mov	r2, r4
   861c2:	4649      	mov	r1, r9
   861c4:	2610      	movs	r6, #16
   861c6:	46b9      	mov	r9, r7
   861c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   861ca:	460f      	mov	r7, r1
   861cc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   861d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   861d2:	e005      	b.n	861e0 <_svfprintf_r+0xbbc>
   861d4:	f108 0808 	add.w	r8, r8, #8
   861d8:	3d10      	subs	r5, #16
   861da:	2d10      	cmp	r5, #16
   861dc:	f340 8353 	ble.w	86886 <_svfprintf_r+0x1262>
   861e0:	3301      	adds	r3, #1
   861e2:	3210      	adds	r2, #16
   861e4:	2b07      	cmp	r3, #7
   861e6:	e9c8 7600 	strd	r7, r6, [r8]
   861ea:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   861ee:	ddf1      	ble.n	861d4 <_svfprintf_r+0xbb0>
   861f0:	4621      	mov	r1, r4
   861f2:	4658      	mov	r0, fp
   861f4:	aa28      	add	r2, sp, #160	; 0xa0
   861f6:	f004 fe75 	bl	8aee4 <__ssprint_r>
   861fa:	2800      	cmp	r0, #0
   861fc:	f47f ab75 	bne.w	858ea <_svfprintf_r+0x2c6>
   86200:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   86204:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86208:	e7e6      	b.n	861d8 <_svfprintf_r+0xbb4>
   8620a:	9b07      	ldr	r3, [sp, #28]
   8620c:	2b00      	cmp	r3, #0
   8620e:	f47f aafc 	bne.w	8580a <_svfprintf_r+0x1e6>
   86212:	465f      	mov	r7, fp
   86214:	2300      	movs	r3, #0
   86216:	ad54      	add	r5, sp, #336	; 0x150
   86218:	9307      	str	r3, [sp, #28]
   8621a:	930b      	str	r3, [sp, #44]	; 0x2c
   8621c:	f7ff bafd 	b.w	8581a <_svfprintf_r+0x1f6>
   86220:	07fa      	lsls	r2, r7, #31
   86222:	f53f ae7f 	bmi.w	85f24 <_svfprintf_r+0x900>
   86226:	2301      	movs	r3, #1
   86228:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   8622a:	3401      	adds	r4, #1
   8622c:	441e      	add	r6, r3
   8622e:	2e07      	cmp	r6, #7
   86230:	f8c8 5000 	str.w	r5, [r8]
   86234:	942a      	str	r4, [sp, #168]	; 0xa8
   86236:	f8c8 3004 	str.w	r3, [r8, #4]
   8623a:	9629      	str	r6, [sp, #164]	; 0xa4
   8623c:	f77f aea5 	ble.w	85f8a <_svfprintf_r+0x966>
   86240:	990c      	ldr	r1, [sp, #48]	; 0x30
   86242:	980a      	ldr	r0, [sp, #40]	; 0x28
   86244:	aa28      	add	r2, sp, #160	; 0xa0
   86246:	f004 fe4d 	bl	8aee4 <__ssprint_r>
   8624a:	2800      	cmp	r0, #0
   8624c:	f47f ab4d 	bne.w	858ea <_svfprintf_r+0x2c6>
   86250:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86254:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86258:	e699      	b.n	85f8e <_svfprintf_r+0x96a>
   8625a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8625c:	1e5d      	subs	r5, r3, #1
   8625e:	2d00      	cmp	r5, #0
   86260:	f77f ae95 	ble.w	85f8e <_svfprintf_r+0x96a>
   86264:	2d10      	cmp	r5, #16
   86266:	f340 86df 	ble.w	87028 <_svfprintf_r+0x1a04>
   8626a:	4622      	mov	r2, r4
   8626c:	9707      	str	r7, [sp, #28]
   8626e:	f04f 0b10 	mov.w	fp, #16
   86272:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8638c <_svfprintf_r+0xd68>
   86276:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86278:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8627a:	e005      	b.n	86288 <_svfprintf_r+0xc64>
   8627c:	f108 0808 	add.w	r8, r8, #8
   86280:	3d10      	subs	r5, #16
   86282:	2d10      	cmp	r5, #16
   86284:	f340 837f 	ble.w	86986 <_svfprintf_r+0x1362>
   86288:	3601      	adds	r6, #1
   8628a:	3210      	adds	r2, #16
   8628c:	2e07      	cmp	r6, #7
   8628e:	e9c8 9b00 	strd	r9, fp, [r8]
   86292:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   86296:	ddf1      	ble.n	8627c <_svfprintf_r+0xc58>
   86298:	4639      	mov	r1, r7
   8629a:	4620      	mov	r0, r4
   8629c:	aa28      	add	r2, sp, #160	; 0xa0
   8629e:	f004 fe21 	bl	8aee4 <__ssprint_r>
   862a2:	2800      	cmp	r0, #0
   862a4:	f47f ab21 	bne.w	858ea <_svfprintf_r+0x2c6>
   862a8:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   862ac:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   862b0:	e7e6      	b.n	86280 <_svfprintf_r+0xc5c>
   862b2:	990c      	ldr	r1, [sp, #48]	; 0x30
   862b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   862b6:	aa28      	add	r2, sp, #160	; 0xa0
   862b8:	f004 fe14 	bl	8aee4 <__ssprint_r>
   862bc:	2800      	cmp	r0, #0
   862be:	f47f ab14 	bne.w	858ea <_svfprintf_r+0x2c6>
   862c2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   862c4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   862c8:	f7ff bb74 	b.w	859b4 <_svfprintf_r+0x390>
   862cc:	f01b 0310 	ands.w	r3, fp, #16
   862d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   862d2:	d13a      	bne.n	8634a <_svfprintf_r+0xd26>
   862d4:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   862d8:	d033      	beq.n	86342 <_svfprintf_r+0xd1e>
   862da:	f852 4b04 	ldr.w	r4, [r2], #4
   862de:	4699      	mov	r9, r3
   862e0:	920e      	str	r2, [sp, #56]	; 0x38
   862e2:	2301      	movs	r3, #1
   862e4:	b2a4      	uxth	r4, r4
   862e6:	f7ff babd 	b.w	85864 <_svfprintf_r+0x240>
   862ea:	232d      	movs	r3, #45	; 0x2d
   862ec:	4264      	negs	r4, r4
   862ee:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   862f2:	46bb      	mov	fp, r7
   862f4:	f04f 0301 	mov.w	r3, #1
   862f8:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   862fc:	f7ff bab5 	b.w	8586a <_svfprintf_r+0x246>
   86300:	990c      	ldr	r1, [sp, #48]	; 0x30
   86302:	980a      	ldr	r0, [sp, #40]	; 0x28
   86304:	aa28      	add	r2, sp, #160	; 0xa0
   86306:	f004 fded 	bl	8aee4 <__ssprint_r>
   8630a:	2800      	cmp	r0, #0
   8630c:	f47f aaed 	bne.w	858ea <_svfprintf_r+0x2c6>
   86310:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86314:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86318:	e613      	b.n	85f42 <_svfprintf_r+0x91e>
   8631a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8631c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8631e:	aa28      	add	r2, sp, #160	; 0xa0
   86320:	f004 fde0 	bl	8aee4 <__ssprint_r>
   86324:	2800      	cmp	r0, #0
   86326:	f47f aae0 	bne.w	858ea <_svfprintf_r+0x2c6>
   8632a:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   8632e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86332:	e613      	b.n	85f5c <_svfprintf_r+0x938>
   86334:	07fd      	lsls	r5, r7, #31
   86336:	f57f ab4f 	bpl.w	859d8 <_svfprintf_r+0x3b4>
   8633a:	e524      	b.n	85d86 <_svfprintf_r+0x762>
   8633c:	ad54      	add	r5, sp, #336	; 0x150
   8633e:	f7ff ba6c 	b.w	8581a <_svfprintf_r+0x1f6>
   86342:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   86346:	f040 838a 	bne.w	86a5e <_svfprintf_r+0x143a>
   8634a:	f852 4b04 	ldr.w	r4, [r2], #4
   8634e:	2301      	movs	r3, #1
   86350:	920e      	str	r2, [sp, #56]	; 0x38
   86352:	f7ff ba87 	b.w	85864 <_svfprintf_r+0x240>
   86356:	05b8      	lsls	r0, r7, #22
   86358:	f100 839b 	bmi.w	86a92 <_svfprintf_r+0x146e>
   8635c:	ea4f 79e4 	mov.w	r9, r4, asr #31
   86360:	464b      	mov	r3, r9
   86362:	f7ff ba40 	b.w	857e6 <_svfprintf_r+0x1c2>
   86366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86368:	9808      	ldr	r0, [sp, #32]
   8636a:	f853 1b04 	ldr.w	r1, [r3], #4
   8636e:	17c2      	asrs	r2, r0, #31
   86370:	4655      	mov	r5, sl
   86372:	e9c1 0200 	strd	r0, r2, [r1]
   86376:	930e      	str	r3, [sp, #56]	; 0x38
   86378:	f7ff bb4c 	b.w	85a14 <_svfprintf_r+0x3f0>
   8637c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8637e:	f853 4b04 	ldr.w	r4, [r3], #4
   86382:	930e      	str	r3, [sp, #56]	; 0x38
   86384:	f7ff ba6b 	b.w	8585e <_svfprintf_r+0x23a>
   86388:	0008c268 	.word	0x0008c268
   8638c:	0008c278 	.word	0x0008c278
   86390:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86394:	4602      	mov	r2, r0
   86396:	460b      	mov	r3, r1
   86398:	f005 fce4 	bl	8bd64 <__aeabi_dcmpun>
   8639c:	2800      	cmp	r0, #0
   8639e:	f040 85e9 	bne.w	86f74 <_svfprintf_r+0x1950>
   863a2:	2e61      	cmp	r6, #97	; 0x61
   863a4:	f000 857d 	beq.w	86ea2 <_svfprintf_r+0x187e>
   863a8:	2e41      	cmp	r6, #65	; 0x41
   863aa:	f000 848b 	beq.w	86cc4 <_svfprintf_r+0x16a0>
   863ae:	9b07      	ldr	r3, [sp, #28]
   863b0:	3301      	adds	r3, #1
   863b2:	f000 838f 	beq.w	86ad4 <_svfprintf_r+0x14b0>
   863b6:	f026 0320 	bic.w	r3, r6, #32
   863ba:	2b47      	cmp	r3, #71	; 0x47
   863bc:	9306      	str	r3, [sp, #24]
   863be:	f000 858f 	beq.w	86ee0 <_svfprintf_r+0x18bc>
   863c2:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   863c6:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   863ca:	930f      	str	r3, [sp, #60]	; 0x3c
   863cc:	4613      	mov	r3, r2
   863ce:	2b00      	cmp	r3, #0
   863d0:	f2c0 85b0 	blt.w	86f34 <_svfprintf_r+0x1910>
   863d4:	930b      	str	r3, [sp, #44]	; 0x2c
   863d6:	2300      	movs	r3, #0
   863d8:	468b      	mov	fp, r1
   863da:	931d      	str	r3, [sp, #116]	; 0x74
   863dc:	930d      	str	r3, [sp, #52]	; 0x34
   863de:	9b06      	ldr	r3, [sp, #24]
   863e0:	2b46      	cmp	r3, #70	; 0x46
   863e2:	f000 83e9 	beq.w	86bb8 <_svfprintf_r+0x1594>
   863e6:	2b45      	cmp	r3, #69	; 0x45
   863e8:	f000 8546 	beq.w	86e78 <_svfprintf_r+0x1854>
   863ec:	9907      	ldr	r1, [sp, #28]
   863ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   863f0:	9101      	str	r1, [sp, #4]
   863f2:	2102      	movs	r1, #2
   863f4:	9100      	str	r1, [sp, #0]
   863f6:	a926      	add	r1, sp, #152	; 0x98
   863f8:	9104      	str	r1, [sp, #16]
   863fa:	a923      	add	r1, sp, #140	; 0x8c
   863fc:	9103      	str	r1, [sp, #12]
   863fe:	a922      	add	r1, sp, #136	; 0x88
   86400:	465a      	mov	r2, fp
   86402:	980a      	ldr	r0, [sp, #40]	; 0x28
   86404:	9102      	str	r1, [sp, #8]
   86406:	f001 febb 	bl	88180 <_dtoa_r>
   8640a:	9b06      	ldr	r3, [sp, #24]
   8640c:	4605      	mov	r5, r0
   8640e:	2b47      	cmp	r3, #71	; 0x47
   86410:	f040 863a 	bne.w	87088 <_svfprintf_r+0x1a64>
   86414:	f017 0f01 	tst.w	r7, #1
   86418:	46b9      	mov	r9, r7
   8641a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8641c:	f040 84fe 	bne.w	86e1c <_svfprintf_r+0x17f8>
   86420:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86422:	1b5b      	subs	r3, r3, r5
   86424:	9312      	str	r3, [sp, #72]	; 0x48
   86426:	9b06      	ldr	r3, [sp, #24]
   86428:	2b47      	cmp	r3, #71	; 0x47
   8642a:	f000 836e 	beq.w	86b0a <_svfprintf_r+0x14e6>
   8642e:	9b06      	ldr	r3, [sp, #24]
   86430:	2b46      	cmp	r3, #70	; 0x46
   86432:	f000 83f0 	beq.w	86c16 <_svfprintf_r+0x15f2>
   86436:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86438:	9310      	str	r3, [sp, #64]	; 0x40
   8643a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8643c:	9a06      	ldr	r2, [sp, #24]
   8643e:	3b01      	subs	r3, #1
   86440:	2a41      	cmp	r2, #65	; 0x41
   86442:	9322      	str	r3, [sp, #136]	; 0x88
   86444:	f000 85bb 	beq.w	86fbe <_svfprintf_r+0x199a>
   86448:	2100      	movs	r1, #0
   8644a:	b2f2      	uxtb	r2, r6
   8644c:	2b00      	cmp	r3, #0
   8644e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   86452:	bfb6      	itet	lt
   86454:	222d      	movlt	r2, #45	; 0x2d
   86456:	222b      	movge	r2, #43	; 0x2b
   86458:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   8645a:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   8645e:	bfb8      	it	lt
   86460:	f1c3 0301 	rsblt	r3, r3, #1
   86464:	2b09      	cmp	r3, #9
   86466:	f340 859b 	ble.w	86fa0 <_svfprintf_r+0x197c>
   8646a:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   8646e:	4662      	mov	r2, ip
   86470:	4fb6      	ldr	r7, [pc, #728]	; (8674c <_svfprintf_r+0x1128>)
   86472:	461c      	mov	r4, r3
   86474:	4610      	mov	r0, r2
   86476:	fb87 1203 	smull	r1, r2, r7, r3
   8647a:	17d9      	asrs	r1, r3, #31
   8647c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   86480:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   86484:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   86488:	3230      	adds	r2, #48	; 0x30
   8648a:	2c63      	cmp	r4, #99	; 0x63
   8648c:	f800 2c01 	strb.w	r2, [r0, #-1]
   86490:	460b      	mov	r3, r1
   86492:	f100 32ff 	add.w	r2, r0, #4294967295
   86496:	dcec      	bgt.n	86472 <_svfprintf_r+0xe4e>
   86498:	3330      	adds	r3, #48	; 0x30
   8649a:	1e81      	subs	r1, r0, #2
   8649c:	b2db      	uxtb	r3, r3
   8649e:	458c      	cmp	ip, r1
   864a0:	f802 3c01 	strb.w	r3, [r2, #-1]
   864a4:	f240 85f9 	bls.w	8709a <_svfprintf_r+0x1a76>
   864a8:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   864ac:	e001      	b.n	864b2 <_svfprintf_r+0xe8e>
   864ae:	f812 3b01 	ldrb.w	r3, [r2], #1
   864b2:	4594      	cmp	ip, r2
   864b4:	f801 3b01 	strb.w	r3, [r1], #1
   864b8:	d1f9      	bne.n	864ae <_svfprintf_r+0xe8a>
   864ba:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   864be:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   864c2:	1a1b      	subs	r3, r3, r0
   864c4:	4413      	add	r3, r2
   864c6:	aa24      	add	r2, sp, #144	; 0x90
   864c8:	1a9b      	subs	r3, r3, r2
   864ca:	931a      	str	r3, [sp, #104]	; 0x68
   864cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   864ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   864d0:	2b01      	cmp	r3, #1
   864d2:	441a      	add	r2, r3
   864d4:	920b      	str	r2, [sp, #44]	; 0x2c
   864d6:	f340 8581 	ble.w	86fdc <_svfprintf_r+0x19b8>
   864da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   864dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   864de:	4413      	add	r3, r2
   864e0:	930b      	str	r3, [sp, #44]	; 0x2c
   864e2:	2300      	movs	r3, #0
   864e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   864e6:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   864ea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   864ee:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   864f2:	930f      	str	r3, [sp, #60]	; 0x3c
   864f4:	9206      	str	r2, [sp, #24]
   864f6:	9313      	str	r3, [sp, #76]	; 0x4c
   864f8:	9310      	str	r3, [sp, #64]	; 0x40
   864fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   864fc:	2b00      	cmp	r3, #0
   864fe:	f040 832c 	bne.w	86b5a <_svfprintf_r+0x1536>
   86502:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86506:	9307      	str	r3, [sp, #28]
   86508:	f7ff b994 	b.w	85834 <_svfprintf_r+0x210>
   8650c:	46bb      	mov	fp, r7
   8650e:	f7ff bb2f 	b.w	85b70 <_svfprintf_r+0x54c>
   86512:	4b8f      	ldr	r3, [pc, #572]	; (86750 <_svfprintf_r+0x112c>)
   86514:	9318      	str	r3, [sp, #96]	; 0x60
   86516:	f017 0920 	ands.w	r9, r7, #32
   8651a:	f000 80f5 	beq.w	86708 <_svfprintf_r+0x10e4>
   8651e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86520:	3307      	adds	r3, #7
   86522:	f023 0307 	bic.w	r3, r3, #7
   86526:	f8d3 9004 	ldr.w	r9, [r3, #4]
   8652a:	f853 4b08 	ldr.w	r4, [r3], #8
   8652e:	930e      	str	r3, [sp, #56]	; 0x38
   86530:	07f8      	lsls	r0, r7, #31
   86532:	d509      	bpl.n	86548 <_svfprintf_r+0xf24>
   86534:	ea54 0309 	orrs.w	r3, r4, r9
   86538:	d006      	beq.n	86548 <_svfprintf_r+0xf24>
   8653a:	2330      	movs	r3, #48	; 0x30
   8653c:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   86540:	f047 0702 	orr.w	r7, r7, #2
   86544:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86548:	2302      	movs	r3, #2
   8654a:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   8654e:	f7ff b989 	b.w	85864 <_svfprintf_r+0x240>
   86552:	4b80      	ldr	r3, [pc, #512]	; (86754 <_svfprintf_r+0x1130>)
   86554:	9318      	str	r3, [sp, #96]	; 0x60
   86556:	e7de      	b.n	86516 <_svfprintf_r+0xef2>
   86558:	990c      	ldr	r1, [sp, #48]	; 0x30
   8655a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8655c:	aa28      	add	r2, sp, #160	; 0xa0
   8655e:	f004 fcc1 	bl	8aee4 <__ssprint_r>
   86562:	2800      	cmp	r0, #0
   86564:	f47f a9c1 	bne.w	858ea <_svfprintf_r+0x2c6>
   86568:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8656a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8656e:	e418      	b.n	85da2 <_svfprintf_r+0x77e>
   86570:	2140      	movs	r1, #64	; 0x40
   86572:	980a      	ldr	r0, [sp, #40]	; 0x28
   86574:	f003 fb02 	bl	89b7c <_malloc_r>
   86578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8657a:	6018      	str	r0, [r3, #0]
   8657c:	6118      	str	r0, [r3, #16]
   8657e:	2800      	cmp	r0, #0
   86580:	f000 8597 	beq.w	870b2 <_svfprintf_r+0x1a8e>
   86584:	2340      	movs	r3, #64	; 0x40
   86586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86588:	6153      	str	r3, [r2, #20]
   8658a:	f7ff b862 	b.w	85652 <_svfprintf_r+0x2e>
   8658e:	2e10      	cmp	r6, #16
   86590:	f340 8576 	ble.w	87080 <_svfprintf_r+0x1a5c>
   86594:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 86758 <_svfprintf_r+0x1134>
   86598:	4642      	mov	r2, r8
   8659a:	4648      	mov	r0, r9
   8659c:	4621      	mov	r1, r4
   8659e:	46a8      	mov	r8, r5
   865a0:	46b9      	mov	r9, r7
   865a2:	f04f 0b10 	mov.w	fp, #16
   865a6:	4607      	mov	r7, r0
   865a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   865aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   865ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   865ae:	e004      	b.n	865ba <_svfprintf_r+0xf96>
   865b0:	3208      	adds	r2, #8
   865b2:	3e10      	subs	r6, #16
   865b4:	2e10      	cmp	r6, #16
   865b6:	f340 8213 	ble.w	869e0 <_svfprintf_r+0x13bc>
   865ba:	3301      	adds	r3, #1
   865bc:	3110      	adds	r1, #16
   865be:	2b07      	cmp	r3, #7
   865c0:	e9c2 7b00 	strd	r7, fp, [r2]
   865c4:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   865c8:	ddf2      	ble.n	865b0 <_svfprintf_r+0xf8c>
   865ca:	4629      	mov	r1, r5
   865cc:	4620      	mov	r0, r4
   865ce:	aa28      	add	r2, sp, #160	; 0xa0
   865d0:	f004 fc88 	bl	8aee4 <__ssprint_r>
   865d4:	2800      	cmp	r0, #0
   865d6:	f47f a988 	bne.w	858ea <_svfprintf_r+0x2c6>
   865da:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   865de:	aa2b      	add	r2, sp, #172	; 0xac
   865e0:	e7e7      	b.n	865b2 <_svfprintf_r+0xf8e>
   865e2:	4628      	mov	r0, r5
   865e4:	f8cd 901c 	str.w	r9, [sp, #28]
   865e8:	940e      	str	r4, [sp, #56]	; 0x38
   865ea:	f7fe ffb9 	bl	85560 <strlen>
   865ee:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   865f2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   865f6:	900b      	str	r0, [sp, #44]	; 0x2c
   865f8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   865fc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   86600:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   86604:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   86608:	9306      	str	r3, [sp, #24]
   8660a:	f7ff b913 	b.w	85834 <_svfprintf_r+0x210>
   8660e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86610:	4642      	mov	r2, r8
   86612:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   86616:	18eb      	adds	r3, r5, r3
   86618:	465e      	mov	r6, fp
   8661a:	9307      	str	r3, [sp, #28]
   8661c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   86620:	9710      	str	r7, [sp, #64]	; 0x40
   86622:	4621      	mov	r1, r4
   86624:	9f19      	ldr	r7, [sp, #100]	; 0x64
   86626:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   8662a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   8662e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86634:	9513      	str	r5, [sp, #76]	; 0x4c
   86636:	f1b8 0f00 	cmp.w	r8, #0
   8663a:	d02e      	beq.n	8669a <_svfprintf_r+0x1076>
   8663c:	bb83      	cbnz	r3, 866a0 <_svfprintf_r+0x107c>
   8663e:	3f01      	subs	r7, #1
   86640:	f108 38ff 	add.w	r8, r8, #4294967295
   86644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   86646:	4449      	add	r1, r9
   86648:	e9c2 3900 	strd	r3, r9, [r2]
   8664c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8664e:	912a      	str	r1, [sp, #168]	; 0xa8
   86650:	3301      	adds	r3, #1
   86652:	2b07      	cmp	r3, #7
   86654:	9329      	str	r3, [sp, #164]	; 0xa4
   86656:	dc60      	bgt.n	8671a <_svfprintf_r+0x10f6>
   86658:	3208      	adds	r2, #8
   8665a:	9b07      	ldr	r3, [sp, #28]
   8665c:	7838      	ldrb	r0, [r7, #0]
   8665e:	1b9b      	subs	r3, r3, r6
   86660:	4283      	cmp	r3, r0
   86662:	bfa8      	it	ge
   86664:	4603      	movge	r3, r0
   86666:	2b00      	cmp	r3, #0
   86668:	461c      	mov	r4, r3
   8666a:	dd0b      	ble.n	86684 <_svfprintf_r+0x1060>
   8666c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   8666e:	4419      	add	r1, r3
   86670:	3001      	adds	r0, #1
   86672:	2807      	cmp	r0, #7
   86674:	e9c2 6300 	strd	r6, r3, [r2]
   86678:	912a      	str	r1, [sp, #168]	; 0xa8
   8667a:	9029      	str	r0, [sp, #164]	; 0xa4
   8667c:	f300 8114 	bgt.w	868a8 <_svfprintf_r+0x1284>
   86680:	7838      	ldrb	r0, [r7, #0]
   86682:	3208      	adds	r2, #8
   86684:	2c00      	cmp	r4, #0
   86686:	bfb4      	ite	lt
   86688:	4605      	movlt	r5, r0
   8668a:	1b05      	subge	r5, r0, r4
   8668c:	2d00      	cmp	r5, #0
   8668e:	dc0b      	bgt.n	866a8 <_svfprintf_r+0x1084>
   86690:	4406      	add	r6, r0
   86692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86694:	f1b8 0f00 	cmp.w	r8, #0
   86698:	d1d0      	bne.n	8663c <_svfprintf_r+0x1018>
   8669a:	2b00      	cmp	r3, #0
   8669c:	f000 8226 	beq.w	86aec <_svfprintf_r+0x14c8>
   866a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   866a2:	3b01      	subs	r3, #1
   866a4:	930f      	str	r3, [sp, #60]	; 0x3c
   866a6:	e7cd      	b.n	86644 <_svfprintf_r+0x1020>
   866a8:	2d10      	cmp	r5, #16
   866aa:	f340 849d 	ble.w	86fe8 <_svfprintf_r+0x19c4>
   866ae:	2410      	movs	r4, #16
   866b0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   866b2:	e004      	b.n	866be <_svfprintf_r+0x109a>
   866b4:	3d10      	subs	r5, #16
   866b6:	2d10      	cmp	r5, #16
   866b8:	f102 0208 	add.w	r2, r2, #8
   866bc:	dd16      	ble.n	866ec <_svfprintf_r+0x10c8>
   866be:	3001      	adds	r0, #1
   866c0:	4b25      	ldr	r3, [pc, #148]	; (86758 <_svfprintf_r+0x1134>)
   866c2:	3110      	adds	r1, #16
   866c4:	2807      	cmp	r0, #7
   866c6:	e9c2 3400 	strd	r3, r4, [r2]
   866ca:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   866ce:	ddf1      	ble.n	866b4 <_svfprintf_r+0x1090>
   866d0:	4659      	mov	r1, fp
   866d2:	4650      	mov	r0, sl
   866d4:	aa28      	add	r2, sp, #160	; 0xa0
   866d6:	f004 fc05 	bl	8aee4 <__ssprint_r>
   866da:	2800      	cmp	r0, #0
   866dc:	f47f a905 	bne.w	858ea <_svfprintf_r+0x2c6>
   866e0:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   866e4:	3d10      	subs	r5, #16
   866e6:	2d10      	cmp	r5, #16
   866e8:	aa2b      	add	r2, sp, #172	; 0xac
   866ea:	dce8      	bgt.n	866be <_svfprintf_r+0x109a>
   866ec:	3001      	adds	r0, #1
   866ee:	4b1a      	ldr	r3, [pc, #104]	; (86758 <_svfprintf_r+0x1134>)
   866f0:	4429      	add	r1, r5
   866f2:	2807      	cmp	r0, #7
   866f4:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   866f8:	6055      	str	r5, [r2, #4]
   866fa:	6013      	str	r3, [r2, #0]
   866fc:	f300 8241 	bgt.w	86b82 <_svfprintf_r+0x155e>
   86700:	7838      	ldrb	r0, [r7, #0]
   86702:	3208      	adds	r2, #8
   86704:	4406      	add	r6, r0
   86706:	e7c4      	b.n	86692 <_svfprintf_r+0x106e>
   86708:	f017 0310 	ands.w	r3, r7, #16
   8670c:	f000 80a0 	beq.w	86850 <_svfprintf_r+0x122c>
   86710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86712:	f853 4b04 	ldr.w	r4, [r3], #4
   86716:	930e      	str	r3, [sp, #56]	; 0x38
   86718:	e70a      	b.n	86530 <_svfprintf_r+0xf0c>
   8671a:	4659      	mov	r1, fp
   8671c:	4650      	mov	r0, sl
   8671e:	aa28      	add	r2, sp, #160	; 0xa0
   86720:	f004 fbe0 	bl	8aee4 <__ssprint_r>
   86724:	2800      	cmp	r0, #0
   86726:	f47f a8e0 	bne.w	858ea <_svfprintf_r+0x2c6>
   8672a:	992a      	ldr	r1, [sp, #168]	; 0xa8
   8672c:	aa2b      	add	r2, sp, #172	; 0xac
   8672e:	e794      	b.n	8665a <_svfprintf_r+0x1036>
   86730:	2300      	movs	r3, #0
   86732:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   86736:	9606      	str	r6, [sp, #24]
   86738:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   8673c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   86740:	4692      	mov	sl, r2
   86742:	461e      	mov	r6, r3
   86744:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   86748:	af54      	add	r7, sp, #336	; 0x150
   8674a:	e014      	b.n	86776 <_svfprintf_r+0x1152>
   8674c:	66666667 	.word	0x66666667
   86750:	0008c234 	.word	0x0008c234
   86754:	0008c248 	.word	0x0008c248
   86758:	0008c278 	.word	0x0008c278
   8675c:	2300      	movs	r3, #0
   8675e:	4620      	mov	r0, r4
   86760:	4649      	mov	r1, r9
   86762:	220a      	movs	r2, #10
   86764:	f005 fb3c 	bl	8bde0 <__aeabi_uldivmod>
   86768:	2c0a      	cmp	r4, #10
   8676a:	f179 0300 	sbcs.w	r3, r9, #0
   8676e:	d31b      	bcc.n	867a8 <_svfprintf_r+0x1184>
   86770:	4604      	mov	r4, r0
   86772:	4689      	mov	r9, r1
   86774:	462f      	mov	r7, r5
   86776:	4620      	mov	r0, r4
   86778:	220a      	movs	r2, #10
   8677a:	2300      	movs	r3, #0
   8677c:	4649      	mov	r1, r9
   8677e:	f005 fb2f 	bl	8bde0 <__aeabi_uldivmod>
   86782:	3230      	adds	r2, #48	; 0x30
   86784:	1e7d      	subs	r5, r7, #1
   86786:	3601      	adds	r6, #1
   86788:	f807 2c01 	strb.w	r2, [r7, #-1]
   8678c:	f1ba 0f00 	cmp.w	sl, #0
   86790:	d0e4      	beq.n	8675c <_svfprintf_r+0x1138>
   86792:	f898 3000 	ldrb.w	r3, [r8]
   86796:	429e      	cmp	r6, r3
   86798:	d1e0      	bne.n	8675c <_svfprintf_r+0x1138>
   8679a:	2eff      	cmp	r6, #255	; 0xff
   8679c:	d0de      	beq.n	8675c <_svfprintf_r+0x1138>
   8679e:	2c0a      	cmp	r4, #10
   867a0:	f179 0300 	sbcs.w	r3, r9, #0
   867a4:	f080 8130 	bcs.w	86a08 <_svfprintf_r+0x13e4>
   867a8:	ab54      	add	r3, sp, #336	; 0x150
   867aa:	1b5b      	subs	r3, r3, r5
   867ac:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   867b0:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   867b4:	9612      	str	r6, [sp, #72]	; 0x48
   867b6:	465f      	mov	r7, fp
   867b8:	9e06      	ldr	r6, [sp, #24]
   867ba:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   867be:	930b      	str	r3, [sp, #44]	; 0x2c
   867c0:	f7ff b82b 	b.w	8581a <_svfprintf_r+0x1f6>
   867c4:	990c      	ldr	r1, [sp, #48]	; 0x30
   867c6:	980a      	ldr	r0, [sp, #40]	; 0x28
   867c8:	aa28      	add	r2, sp, #160	; 0xa0
   867ca:	931d      	str	r3, [sp, #116]	; 0x74
   867cc:	f004 fb8a 	bl	8aee4 <__ssprint_r>
   867d0:	2800      	cmp	r0, #0
   867d2:	f47f a88a 	bne.w	858ea <_svfprintf_r+0x2c6>
   867d6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   867da:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   867dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   867de:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   867e2:	f7ff b8b8 	b.w	85956 <_svfprintf_r+0x332>
   867e6:	2301      	movs	r3, #1
   867e8:	f8c8 3004 	str.w	r3, [r8, #4]
   867ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   867ee:	4abc      	ldr	r2, [pc, #752]	; (86ae0 <_svfprintf_r+0x14bc>)
   867f0:	3301      	adds	r3, #1
   867f2:	3401      	adds	r4, #1
   867f4:	2b07      	cmp	r3, #7
   867f6:	942a      	str	r4, [sp, #168]	; 0xa8
   867f8:	9329      	str	r3, [sp, #164]	; 0xa4
   867fa:	f8c8 2000 	str.w	r2, [r8]
   867fe:	f300 8117 	bgt.w	86a30 <_svfprintf_r+0x140c>
   86802:	f108 0808 	add.w	r8, r8, #8
   86806:	2900      	cmp	r1, #0
   86808:	f040 8086 	bne.w	86918 <_svfprintf_r+0x12f4>
   8680c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8680e:	f007 0301 	and.w	r3, r7, #1
   86812:	4313      	orrs	r3, r2
   86814:	f43f a8e0 	beq.w	859d8 <_svfprintf_r+0x3b4>
   86818:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8681a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8681c:	191a      	adds	r2, r3, r4
   8681e:	e9c8 1300 	strd	r1, r3, [r8]
   86822:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86824:	922a      	str	r2, [sp, #168]	; 0xa8
   86826:	3301      	adds	r3, #1
   86828:	2b07      	cmp	r3, #7
   8682a:	9329      	str	r3, [sp, #164]	; 0xa4
   8682c:	f300 8137 	bgt.w	86a9e <_svfprintf_r+0x147a>
   86830:	f108 0808 	add.w	r8, r8, #8
   86834:	9912      	ldr	r1, [sp, #72]	; 0x48
   86836:	3301      	adds	r3, #1
   86838:	188c      	adds	r4, r1, r2
   8683a:	2b07      	cmp	r3, #7
   8683c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   86840:	f8c8 5000 	str.w	r5, [r8]
   86844:	f8c8 1004 	str.w	r1, [r8, #4]
   86848:	f77f a8c4 	ble.w	859d4 <_svfprintf_r+0x3b0>
   8684c:	f7ff bbac 	b.w	85fa8 <_svfprintf_r+0x984>
   86850:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   86854:	f000 80a5 	beq.w	869a2 <_svfprintf_r+0x137e>
   86858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8685a:	4699      	mov	r9, r3
   8685c:	f852 4b04 	ldr.w	r4, [r2], #4
   86860:	920e      	str	r2, [sp, #56]	; 0x38
   86862:	b2a4      	uxth	r4, r4
   86864:	e664      	b.n	86530 <_svfprintf_r+0xf0c>
   86866:	46bb      	mov	fp, r7
   86868:	f7fe bfca 	b.w	85800 <_svfprintf_r+0x1dc>
   8686c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8686e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86870:	aa28      	add	r2, sp, #160	; 0xa0
   86872:	f004 fb37 	bl	8aee4 <__ssprint_r>
   86876:	2800      	cmp	r0, #0
   86878:	f47f a837 	bne.w	858ea <_svfprintf_r+0x2c6>
   8687c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8687e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86882:	f7ff ba7b 	b.w	85d7c <_svfprintf_r+0x758>
   86886:	4614      	mov	r4, r2
   86888:	463a      	mov	r2, r7
   8688a:	464f      	mov	r7, r9
   8688c:	4691      	mov	r9, r2
   8688e:	3301      	adds	r3, #1
   86890:	442c      	add	r4, r5
   86892:	2b07      	cmp	r3, #7
   86894:	f8c8 9000 	str.w	r9, [r8]
   86898:	f8c8 5004 	str.w	r5, [r8, #4]
   8689c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   868a0:	f77f a898 	ble.w	859d4 <_svfprintf_r+0x3b0>
   868a4:	f7ff bb80 	b.w	85fa8 <_svfprintf_r+0x984>
   868a8:	4659      	mov	r1, fp
   868aa:	4650      	mov	r0, sl
   868ac:	aa28      	add	r2, sp, #160	; 0xa0
   868ae:	f004 fb19 	bl	8aee4 <__ssprint_r>
   868b2:	2800      	cmp	r0, #0
   868b4:	f47f a819 	bne.w	858ea <_svfprintf_r+0x2c6>
   868b8:	7838      	ldrb	r0, [r7, #0]
   868ba:	992a      	ldr	r1, [sp, #168]	; 0xa8
   868bc:	aa2b      	add	r2, sp, #172	; 0xac
   868be:	e6e1      	b.n	86684 <_svfprintf_r+0x1060>
   868c0:	990c      	ldr	r1, [sp, #48]	; 0x30
   868c2:	980a      	ldr	r0, [sp, #40]	; 0x28
   868c4:	aa28      	add	r2, sp, #160	; 0xa0
   868c6:	f004 fb0d 	bl	8aee4 <__ssprint_r>
   868ca:	2800      	cmp	r0, #0
   868cc:	f47f a80d 	bne.w	858ea <_svfprintf_r+0x2c6>
   868d0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   868d2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   868d6:	f7ff b865 	b.w	859a4 <_svfprintf_r+0x380>
   868da:	2b01      	cmp	r3, #1
   868dc:	46bb      	mov	fp, r7
   868de:	f47f a9f5 	bne.w	85ccc <_svfprintf_r+0x6a8>
   868e2:	f7fe bf92 	b.w	8580a <_svfprintf_r+0x1e6>
   868e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   868e8:	9908      	ldr	r1, [sp, #32]
   868ea:	f853 2b04 	ldr.w	r2, [r3], #4
   868ee:	4655      	mov	r5, sl
   868f0:	6011      	str	r1, [r2, #0]
   868f2:	930e      	str	r3, [sp, #56]	; 0x38
   868f4:	f7ff b88e 	b.w	85a14 <_svfprintf_r+0x3f0>
   868f8:	2b06      	cmp	r3, #6
   868fa:	4629      	mov	r1, r5
   868fc:	bf28      	it	cs
   868fe:	2306      	movcs	r3, #6
   86900:	462a      	mov	r2, r5
   86902:	9507      	str	r5, [sp, #28]
   86904:	950d      	str	r5, [sp, #52]	; 0x34
   86906:	9306      	str	r3, [sp, #24]
   86908:	4d76      	ldr	r5, [pc, #472]	; (86ae4 <_svfprintf_r+0x14c0>)
   8690a:	940e      	str	r4, [sp, #56]	; 0x38
   8690c:	930b      	str	r3, [sp, #44]	; 0x2c
   8690e:	910f      	str	r1, [sp, #60]	; 0x3c
   86910:	9113      	str	r1, [sp, #76]	; 0x4c
   86912:	9110      	str	r1, [sp, #64]	; 0x40
   86914:	f7fe bf8e 	b.w	85834 <_svfprintf_r+0x210>
   86918:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8691a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   8691c:	191a      	adds	r2, r3, r4
   8691e:	e9c8 0300 	strd	r0, r3, [r8]
   86922:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86924:	922a      	str	r2, [sp, #168]	; 0xa8
   86926:	3301      	adds	r3, #1
   86928:	2b07      	cmp	r3, #7
   8692a:	9329      	str	r3, [sp, #164]	; 0xa4
   8692c:	f300 80b7 	bgt.w	86a9e <_svfprintf_r+0x147a>
   86930:	f108 0808 	add.w	r8, r8, #8
   86934:	2900      	cmp	r1, #0
   86936:	f6bf af7d 	bge.w	86834 <_svfprintf_r+0x1210>
   8693a:	424e      	negs	r6, r1
   8693c:	3110      	adds	r1, #16
   8693e:	f280 83a9 	bge.w	87094 <_svfprintf_r+0x1a70>
   86942:	4641      	mov	r1, r8
   86944:	2410      	movs	r4, #16
   86946:	46a8      	mov	r8, r5
   86948:	f8df 919c 	ldr.w	r9, [pc, #412]	; 86ae8 <_svfprintf_r+0x14c4>
   8694c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86950:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   86952:	e004      	b.n	8695e <_svfprintf_r+0x133a>
   86954:	3108      	adds	r1, #8
   86956:	3e10      	subs	r6, #16
   86958:	2e10      	cmp	r6, #16
   8695a:	f340 82a7 	ble.w	86eac <_svfprintf_r+0x1888>
   8695e:	3301      	adds	r3, #1
   86960:	3210      	adds	r2, #16
   86962:	2b07      	cmp	r3, #7
   86964:	e9c1 9400 	strd	r9, r4, [r1]
   86968:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   8696c:	ddf2      	ble.n	86954 <_svfprintf_r+0x1330>
   8696e:	4629      	mov	r1, r5
   86970:	4658      	mov	r0, fp
   86972:	aa28      	add	r2, sp, #160	; 0xa0
   86974:	f004 fab6 	bl	8aee4 <__ssprint_r>
   86978:	2800      	cmp	r0, #0
   8697a:	f47e afb6 	bne.w	858ea <_svfprintf_r+0x2c6>
   8697e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   86982:	a92b      	add	r1, sp, #172	; 0xac
   86984:	e7e7      	b.n	86956 <_svfprintf_r+0x1332>
   86986:	4614      	mov	r4, r2
   86988:	9f07      	ldr	r7, [sp, #28]
   8698a:	3601      	adds	r6, #1
   8698c:	442c      	add	r4, r5
   8698e:	2e07      	cmp	r6, #7
   86990:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   86994:	f8c8 9000 	str.w	r9, [r8]
   86998:	f8c8 5004 	str.w	r5, [r8, #4]
   8699c:	f77f aaf5 	ble.w	85f8a <_svfprintf_r+0x966>
   869a0:	e44e      	b.n	86240 <_svfprintf_r+0xc1c>
   869a2:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   869a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   869a8:	d066      	beq.n	86a78 <_svfprintf_r+0x1454>
   869aa:	f853 4b04 	ldr.w	r4, [r3], #4
   869ae:	4691      	mov	r9, r2
   869b0:	930e      	str	r3, [sp, #56]	; 0x38
   869b2:	b2e4      	uxtb	r4, r4
   869b4:	e5bc      	b.n	86530 <_svfprintf_r+0xf0c>
   869b6:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   869ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   869bc:	d057      	beq.n	86a6e <_svfprintf_r+0x144a>
   869be:	f853 4b04 	ldr.w	r4, [r3], #4
   869c2:	4691      	mov	r9, r2
   869c4:	930e      	str	r3, [sp, #56]	; 0x38
   869c6:	b2e4      	uxtb	r4, r4
   869c8:	f7fe bf49 	b.w	8585e <_svfprintf_r+0x23a>
   869cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   869ce:	f8df 9118 	ldr.w	r9, [pc, #280]	; 86ae8 <_svfprintf_r+0x14c4>
   869d2:	f7ff ba95 	b.w	85f00 <_svfprintf_r+0x8dc>
   869d6:	222d      	movs	r2, #45	; 0x2d
   869d8:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   869dc:	f7ff b857 	b.w	85a8e <_svfprintf_r+0x46a>
   869e0:	4645      	mov	r5, r8
   869e2:	4690      	mov	r8, r2
   869e4:	463a      	mov	r2, r7
   869e6:	460c      	mov	r4, r1
   869e8:	464f      	mov	r7, r9
   869ea:	4691      	mov	r9, r2
   869ec:	3301      	adds	r3, #1
   869ee:	4434      	add	r4, r6
   869f0:	2b07      	cmp	r3, #7
   869f2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   869f6:	f8c8 9000 	str.w	r9, [r8]
   869fa:	f8c8 6004 	str.w	r6, [r8, #4]
   869fe:	dc5c      	bgt.n	86aba <_svfprintf_r+0x1496>
   86a00:	f108 0808 	add.w	r8, r8, #8
   86a04:	f7ff bb9e 	b.w	86144 <_svfprintf_r+0xb20>
   86a08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   86a0a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   86a0c:	1aed      	subs	r5, r5, r3
   86a0e:	461a      	mov	r2, r3
   86a10:	4628      	mov	r0, r5
   86a12:	f7fe fdd3 	bl	855bc <strncpy>
   86a16:	f898 3001 	ldrb.w	r3, [r8, #1]
   86a1a:	b10b      	cbz	r3, 86a20 <_svfprintf_r+0x13fc>
   86a1c:	f108 0801 	add.w	r8, r8, #1
   86a20:	4620      	mov	r0, r4
   86a22:	4649      	mov	r1, r9
   86a24:	220a      	movs	r2, #10
   86a26:	2300      	movs	r3, #0
   86a28:	2600      	movs	r6, #0
   86a2a:	f005 f9d9 	bl	8bde0 <__aeabi_uldivmod>
   86a2e:	e69f      	b.n	86770 <_svfprintf_r+0x114c>
   86a30:	990c      	ldr	r1, [sp, #48]	; 0x30
   86a32:	980a      	ldr	r0, [sp, #40]	; 0x28
   86a34:	aa28      	add	r2, sp, #160	; 0xa0
   86a36:	f004 fa55 	bl	8aee4 <__ssprint_r>
   86a3a:	2800      	cmp	r0, #0
   86a3c:	f47e af55 	bne.w	858ea <_svfprintf_r+0x2c6>
   86a40:	9922      	ldr	r1, [sp, #136]	; 0x88
   86a42:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86a44:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86a48:	e6dd      	b.n	86806 <_svfprintf_r+0x11e2>
   86a4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86a4c:	18ae      	adds	r6, r5, r2
   86a4e:	eba6 060b 	sub.w	r6, r6, fp
   86a52:	1ad5      	subs	r5, r2, r3
   86a54:	42ae      	cmp	r6, r5
   86a56:	bfa8      	it	ge
   86a58:	462e      	movge	r6, r5
   86a5a:	f7ff bba6 	b.w	861aa <_svfprintf_r+0xb86>
   86a5e:	f852 4b04 	ldr.w	r4, [r2], #4
   86a62:	4689      	mov	r9, r1
   86a64:	2301      	movs	r3, #1
   86a66:	920e      	str	r2, [sp, #56]	; 0x38
   86a68:	b2e4      	uxtb	r4, r4
   86a6a:	f7fe befb 	b.w	85864 <_svfprintf_r+0x240>
   86a6e:	f853 4b04 	ldr.w	r4, [r3], #4
   86a72:	930e      	str	r3, [sp, #56]	; 0x38
   86a74:	f7fe bef3 	b.w	8585e <_svfprintf_r+0x23a>
   86a78:	f853 4b04 	ldr.w	r4, [r3], #4
   86a7c:	930e      	str	r3, [sp, #56]	; 0x38
   86a7e:	e557      	b.n	86530 <_svfprintf_r+0xf0c>
   86a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a82:	9908      	ldr	r1, [sp, #32]
   86a84:	f853 2b04 	ldr.w	r2, [r3], #4
   86a88:	4655      	mov	r5, sl
   86a8a:	8011      	strh	r1, [r2, #0]
   86a8c:	930e      	str	r3, [sp, #56]	; 0x38
   86a8e:	f7fe bfc1 	b.w	85a14 <_svfprintf_r+0x3f0>
   86a92:	f344 19c0 	sbfx	r9, r4, #7, #1
   86a96:	464b      	mov	r3, r9
   86a98:	b264      	sxtb	r4, r4
   86a9a:	f7fe bea4 	b.w	857e6 <_svfprintf_r+0x1c2>
   86a9e:	990c      	ldr	r1, [sp, #48]	; 0x30
   86aa0:	980a      	ldr	r0, [sp, #40]	; 0x28
   86aa2:	aa28      	add	r2, sp, #160	; 0xa0
   86aa4:	f004 fa1e 	bl	8aee4 <__ssprint_r>
   86aa8:	2800      	cmp	r0, #0
   86aaa:	f47e af1e 	bne.w	858ea <_svfprintf_r+0x2c6>
   86aae:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   86ab2:	9922      	ldr	r1, [sp, #136]	; 0x88
   86ab4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86ab8:	e73c      	b.n	86934 <_svfprintf_r+0x1310>
   86aba:	990c      	ldr	r1, [sp, #48]	; 0x30
   86abc:	980a      	ldr	r0, [sp, #40]	; 0x28
   86abe:	aa28      	add	r2, sp, #160	; 0xa0
   86ac0:	f004 fa10 	bl	8aee4 <__ssprint_r>
   86ac4:	2800      	cmp	r0, #0
   86ac6:	f47e af10 	bne.w	858ea <_svfprintf_r+0x2c6>
   86aca:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86acc:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86ad0:	f7ff bb38 	b.w	86144 <_svfprintf_r+0xb20>
   86ad4:	2306      	movs	r3, #6
   86ad6:	9307      	str	r3, [sp, #28]
   86ad8:	f026 0320 	bic.w	r3, r6, #32
   86adc:	9306      	str	r3, [sp, #24]
   86ade:	e470      	b.n	863c2 <_svfprintf_r+0xd9e>
   86ae0:	0008c264 	.word	0x0008c264
   86ae4:	0008c25c 	.word	0x0008c25c
   86ae8:	0008c278 	.word	0x0008c278
   86aec:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   86af0:	18eb      	adds	r3, r5, r3
   86af2:	429e      	cmp	r6, r3
   86af4:	46b3      	mov	fp, r6
   86af6:	9719      	str	r7, [sp, #100]	; 0x64
   86af8:	4690      	mov	r8, r2
   86afa:	460c      	mov	r4, r1
   86afc:	bf28      	it	cs
   86afe:	469b      	movcs	fp, r3
   86b00:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   86b04:	9f10      	ldr	r7, [sp, #64]	; 0x40
   86b06:	f7ff bb23 	b.w	86150 <_svfprintf_r+0xb2c>
   86b0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86b0c:	1cda      	adds	r2, r3, #3
   86b0e:	9310      	str	r3, [sp, #64]	; 0x40
   86b10:	db02      	blt.n	86b18 <_svfprintf_r+0x14f4>
   86b12:	9a07      	ldr	r2, [sp, #28]
   86b14:	4293      	cmp	r3, r2
   86b16:	dd04      	ble.n	86b22 <_svfprintf_r+0x14fe>
   86b18:	3e02      	subs	r6, #2
   86b1a:	f026 0320 	bic.w	r3, r6, #32
   86b1e:	9306      	str	r3, [sp, #24]
   86b20:	e48b      	b.n	8643a <_svfprintf_r+0xe16>
   86b22:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86b24:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86b26:	4293      	cmp	r3, r2
   86b28:	f2c0 80c2 	blt.w	86cb0 <_svfprintf_r+0x168c>
   86b2c:	f019 0f01 	tst.w	r9, #1
   86b30:	f000 821d 	beq.w	86f6e <_svfprintf_r+0x194a>
   86b34:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86b36:	4413      	add	r3, r2
   86b38:	930b      	str	r3, [sp, #44]	; 0x2c
   86b3a:	f419 6f80 	tst.w	r9, #1024	; 0x400
   86b3e:	f000 8214 	beq.w	86f6a <_svfprintf_r+0x1946>
   86b42:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86b44:	2667      	movs	r6, #103	; 0x67
   86b46:	2b00      	cmp	r3, #0
   86b48:	dc76      	bgt.n	86c38 <_svfprintf_r+0x1614>
   86b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86b4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86b50:	9306      	str	r3, [sp, #24]
   86b52:	2300      	movs	r3, #0
   86b54:	930f      	str	r3, [sp, #60]	; 0x3c
   86b56:	9313      	str	r3, [sp, #76]	; 0x4c
   86b58:	e4cf      	b.n	864fa <_svfprintf_r+0xed6>
   86b5a:	222d      	movs	r2, #45	; 0x2d
   86b5c:	2300      	movs	r3, #0
   86b5e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86b62:	9307      	str	r3, [sp, #28]
   86b64:	f7fe be68 	b.w	85838 <_svfprintf_r+0x214>
   86b68:	990c      	ldr	r1, [sp, #48]	; 0x30
   86b6a:	980a      	ldr	r0, [sp, #40]	; 0x28
   86b6c:	aa28      	add	r2, sp, #160	; 0xa0
   86b6e:	f004 f9b9 	bl	8aee4 <__ssprint_r>
   86b72:	2800      	cmp	r0, #0
   86b74:	f47e aeb9 	bne.w	858ea <_svfprintf_r+0x2c6>
   86b78:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86b7a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86b7e:	f7ff bad8 	b.w	86132 <_svfprintf_r+0xb0e>
   86b82:	4659      	mov	r1, fp
   86b84:	4650      	mov	r0, sl
   86b86:	aa28      	add	r2, sp, #160	; 0xa0
   86b88:	f004 f9ac 	bl	8aee4 <__ssprint_r>
   86b8c:	2800      	cmp	r0, #0
   86b8e:	f47e aeac 	bne.w	858ea <_svfprintf_r+0x2c6>
   86b92:	7838      	ldrb	r0, [r7, #0]
   86b94:	992a      	ldr	r1, [sp, #168]	; 0xa8
   86b96:	aa2b      	add	r2, sp, #172	; 0xac
   86b98:	4406      	add	r6, r0
   86b9a:	e57a      	b.n	86692 <_svfprintf_r+0x106e>
   86b9c:	990c      	ldr	r1, [sp, #48]	; 0x30
   86b9e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86ba0:	aa28      	add	r2, sp, #160	; 0xa0
   86ba2:	f004 f99f 	bl	8aee4 <__ssprint_r>
   86ba6:	2800      	cmp	r0, #0
   86ba8:	f47e ae9f 	bne.w	858ea <_svfprintf_r+0x2c6>
   86bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86bae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86bb0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86bb4:	f7ff bae1 	b.w	8617a <_svfprintf_r+0xb56>
   86bb8:	9907      	ldr	r1, [sp, #28]
   86bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86bbc:	9101      	str	r1, [sp, #4]
   86bbe:	2103      	movs	r1, #3
   86bc0:	9100      	str	r1, [sp, #0]
   86bc2:	a926      	add	r1, sp, #152	; 0x98
   86bc4:	9104      	str	r1, [sp, #16]
   86bc6:	a923      	add	r1, sp, #140	; 0x8c
   86bc8:	9103      	str	r1, [sp, #12]
   86bca:	a922      	add	r1, sp, #136	; 0x88
   86bcc:	465a      	mov	r2, fp
   86bce:	980a      	ldr	r0, [sp, #40]	; 0x28
   86bd0:	9102      	str	r1, [sp, #8]
   86bd2:	f001 fad5 	bl	88180 <_dtoa_r>
   86bd6:	7803      	ldrb	r3, [r0, #0]
   86bd8:	4605      	mov	r5, r0
   86bda:	2b30      	cmp	r3, #48	; 0x30
   86bdc:	f000 8216 	beq.w	8700c <_svfprintf_r+0x19e8>
   86be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86be2:	9a07      	ldr	r2, [sp, #28]
   86be4:	46b9      	mov	r9, r7
   86be6:	4413      	add	r3, r2
   86be8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86bea:	18ec      	adds	r4, r5, r3
   86bec:	4658      	mov	r0, fp
   86bee:	2200      	movs	r2, #0
   86bf0:	2300      	movs	r3, #0
   86bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86bf4:	f005 f884 	bl	8bd00 <__aeabi_dcmpeq>
   86bf8:	b108      	cbz	r0, 86bfe <_svfprintf_r+0x15da>
   86bfa:	4623      	mov	r3, r4
   86bfc:	e411      	b.n	86422 <_svfprintf_r+0xdfe>
   86bfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86c00:	42a3      	cmp	r3, r4
   86c02:	f4bf ac0e 	bcs.w	86422 <_svfprintf_r+0xdfe>
   86c06:	2130      	movs	r1, #48	; 0x30
   86c08:	1c5a      	adds	r2, r3, #1
   86c0a:	9226      	str	r2, [sp, #152]	; 0x98
   86c0c:	7019      	strb	r1, [r3, #0]
   86c0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86c10:	429c      	cmp	r4, r3
   86c12:	d8f9      	bhi.n	86c08 <_svfprintf_r+0x15e4>
   86c14:	e405      	b.n	86422 <_svfprintf_r+0xdfe>
   86c16:	9a22      	ldr	r2, [sp, #136]	; 0x88
   86c18:	2a00      	cmp	r2, #0
   86c1a:	9210      	str	r2, [sp, #64]	; 0x40
   86c1c:	f340 820e 	ble.w	8703c <_svfprintf_r+0x1a18>
   86c20:	9907      	ldr	r1, [sp, #28]
   86c22:	f009 0301 	and.w	r3, r9, #1
   86c26:	430b      	orrs	r3, r1
   86c28:	f040 817e 	bne.w	86f28 <_svfprintf_r+0x1904>
   86c2c:	2666      	movs	r6, #102	; 0x66
   86c2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86c30:	930b      	str	r3, [sp, #44]	; 0x2c
   86c32:	f419 6f80 	tst.w	r9, #1024	; 0x400
   86c36:	d088      	beq.n	86b4a <_svfprintf_r+0x1526>
   86c38:	9919      	ldr	r1, [sp, #100]	; 0x64
   86c3a:	780b      	ldrb	r3, [r1, #0]
   86c3c:	2bff      	cmp	r3, #255	; 0xff
   86c3e:	f000 8225 	beq.w	8708c <_svfprintf_r+0x1a68>
   86c42:	2400      	movs	r4, #0
   86c44:	9a10      	ldr	r2, [sp, #64]	; 0x40
   86c46:	4620      	mov	r0, r4
   86c48:	e004      	b.n	86c54 <_svfprintf_r+0x1630>
   86c4a:	3001      	adds	r0, #1
   86c4c:	3101      	adds	r1, #1
   86c4e:	2bff      	cmp	r3, #255	; 0xff
   86c50:	f000 8159 	beq.w	86f06 <_svfprintf_r+0x18e2>
   86c54:	4293      	cmp	r3, r2
   86c56:	f280 8156 	bge.w	86f06 <_svfprintf_r+0x18e2>
   86c5a:	1ad2      	subs	r2, r2, r3
   86c5c:	784b      	ldrb	r3, [r1, #1]
   86c5e:	2b00      	cmp	r3, #0
   86c60:	d1f3      	bne.n	86c4a <_svfprintf_r+0x1626>
   86c62:	780b      	ldrb	r3, [r1, #0]
   86c64:	3401      	adds	r4, #1
   86c66:	e7f2      	b.n	86c4e <_svfprintf_r+0x162a>
   86c68:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   86c6c:	f7ff b9da 	b.w	86024 <_svfprintf_r+0xa00>
   86c70:	9b07      	ldr	r3, [sp, #28]
   86c72:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86c76:	940e      	str	r4, [sp, #56]	; 0x38
   86c78:	9306      	str	r3, [sp, #24]
   86c7a:	930b      	str	r3, [sp, #44]	; 0x2c
   86c7c:	9007      	str	r0, [sp, #28]
   86c7e:	900f      	str	r0, [sp, #60]	; 0x3c
   86c80:	9013      	str	r0, [sp, #76]	; 0x4c
   86c82:	9010      	str	r0, [sp, #64]	; 0x40
   86c84:	f7fe bdd6 	b.w	85834 <_svfprintf_r+0x210>
   86c88:	990c      	ldr	r1, [sp, #48]	; 0x30
   86c8a:	980a      	ldr	r0, [sp, #40]	; 0x28
   86c8c:	aa28      	add	r2, sp, #160	; 0xa0
   86c8e:	f004 f929 	bl	8aee4 <__ssprint_r>
   86c92:	2800      	cmp	r0, #0
   86c94:	f47e ae29 	bne.w	858ea <_svfprintf_r+0x2c6>
   86c98:	9d22      	ldr	r5, [sp, #136]	; 0x88
   86c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86c9c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86c9e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86ca2:	1b5d      	subs	r5, r3, r5
   86ca4:	f7ff ba81 	b.w	861aa <_svfprintf_r+0xb86>
   86ca8:	2300      	movs	r3, #0
   86caa:	9307      	str	r3, [sp, #28]
   86cac:	f7fe bd0b 	b.w	856c6 <_svfprintf_r+0xa2>
   86cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86cb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86cb4:	189a      	adds	r2, r3, r2
   86cb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86cb8:	920b      	str	r2, [sp, #44]	; 0x2c
   86cba:	2b00      	cmp	r3, #0
   86cbc:	f340 8185 	ble.w	86fca <_svfprintf_r+0x19a6>
   86cc0:	2667      	movs	r6, #103	; 0x67
   86cc2:	e7b6      	b.n	86c32 <_svfprintf_r+0x160e>
   86cc4:	2330      	movs	r3, #48	; 0x30
   86cc6:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86cca:	2358      	movs	r3, #88	; 0x58
   86ccc:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   86cd0:	9b07      	ldr	r3, [sp, #28]
   86cd2:	f047 0402 	orr.w	r4, r7, #2
   86cd6:	2b63      	cmp	r3, #99	; 0x63
   86cd8:	f300 80c4 	bgt.w	86e64 <_svfprintf_r+0x1840>
   86cdc:	2300      	movs	r3, #0
   86cde:	ad3b      	add	r5, sp, #236	; 0xec
   86ce0:	930d      	str	r3, [sp, #52]	; 0x34
   86ce2:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   86ce6:	930f      	str	r3, [sp, #60]	; 0x3c
   86ce8:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86cec:	4613      	mov	r3, r2
   86cee:	2b00      	cmp	r3, #0
   86cf0:	4627      	mov	r7, r4
   86cf2:	f2c0 8084 	blt.w	86dfe <_svfprintf_r+0x17da>
   86cf6:	930b      	str	r3, [sp, #44]	; 0x2c
   86cf8:	2300      	movs	r3, #0
   86cfa:	468b      	mov	fp, r1
   86cfc:	931d      	str	r3, [sp, #116]	; 0x74
   86cfe:	f026 0320 	bic.w	r3, r6, #32
   86d02:	9306      	str	r3, [sp, #24]
   86d04:	2e61      	cmp	r6, #97	; 0x61
   86d06:	f000 8118 	beq.w	86f3a <_svfprintf_r+0x1916>
   86d0a:	2e41      	cmp	r6, #65	; 0x41
   86d0c:	f47f ab67 	bne.w	863de <_svfprintf_r+0xdba>
   86d10:	aa22      	add	r2, sp, #136	; 0x88
   86d12:	4658      	mov	r0, fp
   86d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86d16:	f004 f855 	bl	8adc4 <frexp>
   86d1a:	2200      	movs	r2, #0
   86d1c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   86d20:	f004 fd86 	bl	8b830 <__aeabi_dmul>
   86d24:	4602      	mov	r2, r0
   86d26:	460b      	mov	r3, r1
   86d28:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   86d2c:	2200      	movs	r2, #0
   86d2e:	2300      	movs	r3, #0
   86d30:	f004 ffe6 	bl	8bd00 <__aeabi_dcmpeq>
   86d34:	b108      	cbz	r0, 86d3a <_svfprintf_r+0x1716>
   86d36:	2301      	movs	r3, #1
   86d38:	9322      	str	r3, [sp, #136]	; 0x88
   86d3a:	4bad      	ldr	r3, [pc, #692]	; (86ff0 <_svfprintf_r+0x19cc>)
   86d3c:	930b      	str	r3, [sp, #44]	; 0x2c
   86d3e:	9b07      	ldr	r3, [sp, #28]
   86d40:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   86d44:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   86d48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   86d4c:	46ab      	mov	fp, r5
   86d4e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   86d52:	f103 39ff 	add.w	r9, r3, #4294967295
   86d56:	9510      	str	r5, [sp, #64]	; 0x40
   86d58:	e006      	b.n	86d68 <_svfprintf_r+0x1744>
   86d5a:	2200      	movs	r2, #0
   86d5c:	2300      	movs	r3, #0
   86d5e:	f109 39ff 	add.w	r9, r9, #4294967295
   86d62:	f004 ffcd 	bl	8bd00 <__aeabi_dcmpeq>
   86d66:	b9e8      	cbnz	r0, 86da4 <_svfprintf_r+0x1780>
   86d68:	2200      	movs	r2, #0
   86d6a:	4ba2      	ldr	r3, [pc, #648]	; (86ff4 <_svfprintf_r+0x19d0>)
   86d6c:	4630      	mov	r0, r6
   86d6e:	4639      	mov	r1, r7
   86d70:	f004 fd5e 	bl	8b830 <__aeabi_dmul>
   86d74:	460f      	mov	r7, r1
   86d76:	4606      	mov	r6, r0
   86d78:	f005 f80a 	bl	8bd90 <__aeabi_d2iz>
   86d7c:	4604      	mov	r4, r0
   86d7e:	f004 fced 	bl	8b75c <__aeabi_i2d>
   86d82:	460b      	mov	r3, r1
   86d84:	4602      	mov	r2, r0
   86d86:	4639      	mov	r1, r7
   86d88:	4630      	mov	r0, r6
   86d8a:	f004 fb99 	bl	8b4c0 <__aeabi_dsub>
   86d8e:	f81a 3004 	ldrb.w	r3, [sl, r4]
   86d92:	f1b9 3fff 	cmp.w	r9, #4294967295
   86d96:	46d8      	mov	r8, fp
   86d98:	464d      	mov	r5, r9
   86d9a:	4606      	mov	r6, r0
   86d9c:	460f      	mov	r7, r1
   86d9e:	f80b 3b01 	strb.w	r3, [fp], #1
   86da2:	d1da      	bne.n	86d5a <_svfprintf_r+0x1736>
   86da4:	4630      	mov	r0, r6
   86da6:	4639      	mov	r1, r7
   86da8:	2200      	movs	r2, #0
   86daa:	4b93      	ldr	r3, [pc, #588]	; (86ff8 <_svfprintf_r+0x19d4>)
   86dac:	46a9      	mov	r9, r5
   86dae:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   86db2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   86db4:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   86db8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   86dbc:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   86dc0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   86dc2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   86dc4:	f004 ffc4 	bl	8bd50 <__aeabi_dcmpgt>
   86dc8:	bb80      	cbnz	r0, 86e2c <_svfprintf_r+0x1808>
   86dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86dce:	2200      	movs	r2, #0
   86dd0:	4b89      	ldr	r3, [pc, #548]	; (86ff8 <_svfprintf_r+0x19d4>)
   86dd2:	f004 ff95 	bl	8bd00 <__aeabi_dcmpeq>
   86dd6:	b108      	cbz	r0, 86ddc <_svfprintf_r+0x17b8>
   86dd8:	07e1      	lsls	r1, r4, #31
   86dda:	d427      	bmi.n	86e2c <_svfprintf_r+0x1808>
   86ddc:	464b      	mov	r3, r9
   86dde:	2b00      	cmp	r3, #0
   86de0:	db06      	blt.n	86df0 <_svfprintf_r+0x17cc>
   86de2:	2230      	movs	r2, #48	; 0x30
   86de4:	3301      	adds	r3, #1
   86de6:	445b      	add	r3, fp
   86de8:	f80b 2b01 	strb.w	r2, [fp], #1
   86dec:	455b      	cmp	r3, fp
   86dee:	d1fb      	bne.n	86de8 <_svfprintf_r+0x17c4>
   86df0:	ebab 0305 	sub.w	r3, fp, r5
   86df4:	46b9      	mov	r9, r7
   86df6:	9312      	str	r3, [sp, #72]	; 0x48
   86df8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86dfa:	f7ff bb14 	b.w	86426 <_svfprintf_r+0xe02>
   86dfe:	f026 0320 	bic.w	r3, r6, #32
   86e02:	9306      	str	r3, [sp, #24]
   86e04:	222d      	movs	r2, #45	; 0x2d
   86e06:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86e0a:	469b      	mov	fp, r3
   86e0c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   86e10:	921d      	str	r2, [sp, #116]	; 0x74
   86e12:	930b      	str	r3, [sp, #44]	; 0x2c
   86e14:	e776      	b.n	86d04 <_svfprintf_r+0x16e0>
   86e16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86e18:	f7ff b95c 	b.w	860d4 <_svfprintf_r+0xab0>
   86e1c:	9b07      	ldr	r3, [sp, #28]
   86e1e:	18ec      	adds	r4, r5, r3
   86e20:	e6e4      	b.n	86bec <_svfprintf_r+0x15c8>
   86e22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86e24:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 86ffc <_svfprintf_r+0x19d8>
   86e28:	f7ff b827 	b.w	85e7a <_svfprintf_r+0x856>
   86e2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86e2e:	9326      	str	r3, [sp, #152]	; 0x98
   86e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86e32:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   86e36:	7bd9      	ldrb	r1, [r3, #15]
   86e38:	465b      	mov	r3, fp
   86e3a:	428a      	cmp	r2, r1
   86e3c:	d109      	bne.n	86e52 <_svfprintf_r+0x182e>
   86e3e:	2030      	movs	r0, #48	; 0x30
   86e40:	f803 0c01 	strb.w	r0, [r3, #-1]
   86e44:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86e46:	1e5a      	subs	r2, r3, #1
   86e48:	9226      	str	r2, [sp, #152]	; 0x98
   86e4a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   86e4e:	4291      	cmp	r1, r2
   86e50:	d0f6      	beq.n	86e40 <_svfprintf_r+0x181c>
   86e52:	2a39      	cmp	r2, #57	; 0x39
   86e54:	bf0b      	itete	eq
   86e56:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   86e58:	3201      	addne	r2, #1
   86e5a:	7a92      	ldrbeq	r2, [r2, #10]
   86e5c:	b2d2      	uxtbne	r2, r2
   86e5e:	f803 2c01 	strb.w	r2, [r3, #-1]
   86e62:	e7c5      	b.n	86df0 <_svfprintf_r+0x17cc>
   86e64:	980a      	ldr	r0, [sp, #40]	; 0x28
   86e66:	1c59      	adds	r1, r3, #1
   86e68:	f002 fe88 	bl	89b7c <_malloc_r>
   86e6c:	4605      	mov	r5, r0
   86e6e:	2800      	cmp	r0, #0
   86e70:	f000 8117 	beq.w	870a2 <_svfprintf_r+0x1a7e>
   86e74:	900d      	str	r0, [sp, #52]	; 0x34
   86e76:	e734      	b.n	86ce2 <_svfprintf_r+0x16be>
   86e78:	2102      	movs	r1, #2
   86e7a:	9100      	str	r1, [sp, #0]
   86e7c:	9907      	ldr	r1, [sp, #28]
   86e7e:	465a      	mov	r2, fp
   86e80:	1c4c      	adds	r4, r1, #1
   86e82:	a926      	add	r1, sp, #152	; 0x98
   86e84:	9104      	str	r1, [sp, #16]
   86e86:	a923      	add	r1, sp, #140	; 0x8c
   86e88:	9103      	str	r1, [sp, #12]
   86e8a:	a922      	add	r1, sp, #136	; 0x88
   86e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86e8e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86e90:	9401      	str	r4, [sp, #4]
   86e92:	9102      	str	r1, [sp, #8]
   86e94:	f001 f974 	bl	88180 <_dtoa_r>
   86e98:	4605      	mov	r5, r0
   86e9a:	46b9      	mov	r9, r7
   86e9c:	442c      	add	r4, r5
   86e9e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86ea0:	e6a4      	b.n	86bec <_svfprintf_r+0x15c8>
   86ea2:	2330      	movs	r3, #48	; 0x30
   86ea4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86ea8:	2378      	movs	r3, #120	; 0x78
   86eaa:	e70f      	b.n	86ccc <_svfprintf_r+0x16a8>
   86eac:	4645      	mov	r5, r8
   86eae:	4688      	mov	r8, r1
   86eb0:	3301      	adds	r3, #1
   86eb2:	4432      	add	r2, r6
   86eb4:	2b07      	cmp	r3, #7
   86eb6:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   86eba:	f8c8 9000 	str.w	r9, [r8]
   86ebe:	f8c8 6004 	str.w	r6, [r8, #4]
   86ec2:	f77f acb5 	ble.w	86830 <_svfprintf_r+0x120c>
   86ec6:	990c      	ldr	r1, [sp, #48]	; 0x30
   86ec8:	980a      	ldr	r0, [sp, #40]	; 0x28
   86eca:	aa28      	add	r2, sp, #160	; 0xa0
   86ecc:	f004 f80a 	bl	8aee4 <__ssprint_r>
   86ed0:	2800      	cmp	r0, #0
   86ed2:	f47e ad0a 	bne.w	858ea <_svfprintf_r+0x2c6>
   86ed6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   86eda:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86ede:	e4a9      	b.n	86834 <_svfprintf_r+0x1210>
   86ee0:	9b07      	ldr	r3, [sp, #28]
   86ee2:	2b00      	cmp	r3, #0
   86ee4:	bf08      	it	eq
   86ee6:	2301      	moveq	r3, #1
   86ee8:	9307      	str	r3, [sp, #28]
   86eea:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   86eee:	930f      	str	r3, [sp, #60]	; 0x3c
   86ef0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86ef2:	2b00      	cmp	r3, #0
   86ef4:	f2c0 80b6 	blt.w	87064 <_svfprintf_r+0x1a40>
   86ef8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   86efc:	900d      	str	r0, [sp, #52]	; 0x34
   86efe:	930b      	str	r3, [sp, #44]	; 0x2c
   86f00:	901d      	str	r0, [sp, #116]	; 0x74
   86f02:	f7ff ba73 	b.w	863ec <_svfprintf_r+0xdc8>
   86f06:	9119      	str	r1, [sp, #100]	; 0x64
   86f08:	9210      	str	r2, [sp, #64]	; 0x40
   86f0a:	9013      	str	r0, [sp, #76]	; 0x4c
   86f0c:	940f      	str	r4, [sp, #60]	; 0x3c
   86f0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86f12:	991c      	ldr	r1, [sp, #112]	; 0x70
   86f14:	4413      	add	r3, r2
   86f16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86f18:	fb01 2303 	mla	r3, r1, r3, r2
   86f1c:	930b      	str	r3, [sp, #44]	; 0x2c
   86f1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86f22:	9306      	str	r3, [sp, #24]
   86f24:	f7ff bae9 	b.w	864fa <_svfprintf_r+0xed6>
   86f28:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86f2a:	2666      	movs	r6, #102	; 0x66
   86f2c:	18d3      	adds	r3, r2, r3
   86f2e:	4419      	add	r1, r3
   86f30:	910b      	str	r1, [sp, #44]	; 0x2c
   86f32:	e67e      	b.n	86c32 <_svfprintf_r+0x160e>
   86f34:	2300      	movs	r3, #0
   86f36:	930d      	str	r3, [sp, #52]	; 0x34
   86f38:	e764      	b.n	86e04 <_svfprintf_r+0x17e0>
   86f3a:	aa22      	add	r2, sp, #136	; 0x88
   86f3c:	4658      	mov	r0, fp
   86f3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86f40:	f003 ff40 	bl	8adc4 <frexp>
   86f44:	2200      	movs	r2, #0
   86f46:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   86f4a:	f004 fc71 	bl	8b830 <__aeabi_dmul>
   86f4e:	4602      	mov	r2, r0
   86f50:	460b      	mov	r3, r1
   86f52:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   86f56:	2200      	movs	r2, #0
   86f58:	2300      	movs	r3, #0
   86f5a:	f004 fed1 	bl	8bd00 <__aeabi_dcmpeq>
   86f5e:	b108      	cbz	r0, 86f64 <_svfprintf_r+0x1940>
   86f60:	2301      	movs	r3, #1
   86f62:	9322      	str	r3, [sp, #136]	; 0x88
   86f64:	4b26      	ldr	r3, [pc, #152]	; (87000 <_svfprintf_r+0x19dc>)
   86f66:	930b      	str	r3, [sp, #44]	; 0x2c
   86f68:	e6e9      	b.n	86d3e <_svfprintf_r+0x171a>
   86f6a:	2667      	movs	r6, #103	; 0x67
   86f6c:	e5ed      	b.n	86b4a <_svfprintf_r+0x1526>
   86f6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86f70:	930b      	str	r3, [sp, #44]	; 0x2c
   86f72:	e5e2      	b.n	86b3a <_svfprintf_r+0x1516>
   86f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86f76:	2003      	movs	r0, #3
   86f78:	2b00      	cmp	r3, #0
   86f7a:	bfb8      	it	lt
   86f7c:	222d      	movlt	r2, #45	; 0x2d
   86f7e:	f04f 0300 	mov.w	r3, #0
   86f82:	bfa8      	it	ge
   86f84:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   86f88:	4619      	mov	r1, r3
   86f8a:	930d      	str	r3, [sp, #52]	; 0x34
   86f8c:	4d1d      	ldr	r5, [pc, #116]	; (87004 <_svfprintf_r+0x19e0>)
   86f8e:	4b1e      	ldr	r3, [pc, #120]	; (87008 <_svfprintf_r+0x19e4>)
   86f90:	bfb8      	it	lt
   86f92:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   86f96:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   86f9a:	9006      	str	r0, [sp, #24]
   86f9c:	f7fe bd7f 	b.w	85a9e <_svfprintf_r+0x47a>
   86fa0:	2900      	cmp	r1, #0
   86fa2:	d144      	bne.n	8702e <_svfprintf_r+0x1a0a>
   86fa4:	2230      	movs	r2, #48	; 0x30
   86fa6:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   86faa:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   86fae:	3330      	adds	r3, #48	; 0x30
   86fb0:	f802 3b01 	strb.w	r3, [r2], #1
   86fb4:	ab24      	add	r3, sp, #144	; 0x90
   86fb6:	1ad3      	subs	r3, r2, r3
   86fb8:	931a      	str	r3, [sp, #104]	; 0x68
   86fba:	f7ff ba87 	b.w	864cc <_svfprintf_r+0xea8>
   86fbe:	f106 020f 	add.w	r2, r6, #15
   86fc2:	2101      	movs	r1, #1
   86fc4:	b2d2      	uxtb	r2, r2
   86fc6:	f7ff ba41 	b.w	8644c <_svfprintf_r+0xe28>
   86fca:	f1c3 0301 	rsb	r3, r3, #1
   86fce:	441a      	add	r2, r3
   86fd0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86fd4:	2667      	movs	r6, #103	; 0x67
   86fd6:	920b      	str	r2, [sp, #44]	; 0x2c
   86fd8:	9306      	str	r3, [sp, #24]
   86fda:	e5ba      	b.n	86b52 <_svfprintf_r+0x152e>
   86fdc:	f019 0f01 	tst.w	r9, #1
   86fe0:	f43f aa7f 	beq.w	864e2 <_svfprintf_r+0xebe>
   86fe4:	f7ff ba79 	b.w	864da <_svfprintf_r+0xeb6>
   86fe8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   86fea:	f7ff bb7f 	b.w	866ec <_svfprintf_r+0x10c8>
   86fee:	bf00      	nop
   86ff0:	0008c248 	.word	0x0008c248
   86ff4:	40300000 	.word	0x40300000
   86ff8:	3fe00000 	.word	0x3fe00000
   86ffc:	0008c278 	.word	0x0008c278
   87000:	0008c234 	.word	0x0008c234
   87004:	0008c22c 	.word	0x0008c22c
   87008:	0008c230 	.word	0x0008c230
   8700c:	4658      	mov	r0, fp
   8700e:	2200      	movs	r2, #0
   87010:	2300      	movs	r3, #0
   87012:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87014:	f004 fe74 	bl	8bd00 <__aeabi_dcmpeq>
   87018:	2800      	cmp	r0, #0
   8701a:	f47f ade1 	bne.w	86be0 <_svfprintf_r+0x15bc>
   8701e:	9b07      	ldr	r3, [sp, #28]
   87020:	f1c3 0301 	rsb	r3, r3, #1
   87024:	9322      	str	r3, [sp, #136]	; 0x88
   87026:	e5dc      	b.n	86be2 <_svfprintf_r+0x15be>
   87028:	f8df 9098 	ldr.w	r9, [pc, #152]	; 870c4 <_svfprintf_r+0x1aa0>
   8702c:	e4ad      	b.n	8698a <_svfprintf_r+0x1366>
   8702e:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   87032:	e7bc      	b.n	86fae <_svfprintf_r+0x198a>
   87034:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87036:	f8df 908c 	ldr.w	r9, [pc, #140]	; 870c4 <_svfprintf_r+0x1aa0>
   8703a:	e428      	b.n	8688e <_svfprintf_r+0x126a>
   8703c:	9a07      	ldr	r2, [sp, #28]
   8703e:	f009 0901 	and.w	r9, r9, #1
   87042:	ea59 0302 	orrs.w	r3, r9, r2
   87046:	d104      	bne.n	87052 <_svfprintf_r+0x1a2e>
   87048:	2301      	movs	r3, #1
   8704a:	2666      	movs	r6, #102	; 0x66
   8704c:	9306      	str	r3, [sp, #24]
   8704e:	930b      	str	r3, [sp, #44]	; 0x2c
   87050:	e57f      	b.n	86b52 <_svfprintf_r+0x152e>
   87052:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87054:	2666      	movs	r6, #102	; 0x66
   87056:	3301      	adds	r3, #1
   87058:	441a      	add	r2, r3
   8705a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8705e:	920b      	str	r2, [sp, #44]	; 0x2c
   87060:	9306      	str	r3, [sp, #24]
   87062:	e576      	b.n	86b52 <_svfprintf_r+0x152e>
   87064:	900d      	str	r0, [sp, #52]	; 0x34
   87066:	e6cd      	b.n	86e04 <_svfprintf_r+0x17e0>
   87068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8706a:	f89a 6001 	ldrb.w	r6, [sl, #1]
   8706e:	4692      	mov	sl, r2
   87070:	f853 2b04 	ldr.w	r2, [r3], #4
   87074:	930e      	str	r3, [sp, #56]	; 0x38
   87076:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   8707a:	9307      	str	r3, [sp, #28]
   8707c:	f7fe bb21 	b.w	856c2 <_svfprintf_r+0x9e>
   87080:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87082:	f8df 9040 	ldr.w	r9, [pc, #64]	; 870c4 <_svfprintf_r+0x1aa0>
   87086:	e4b1      	b.n	869ec <_svfprintf_r+0x13c8>
   87088:	9c07      	ldr	r4, [sp, #28]
   8708a:	e706      	b.n	86e9a <_svfprintf_r+0x1876>
   8708c:	2300      	movs	r3, #0
   8708e:	930f      	str	r3, [sp, #60]	; 0x3c
   87090:	9313      	str	r3, [sp, #76]	; 0x4c
   87092:	e73c      	b.n	86f0e <_svfprintf_r+0x18ea>
   87094:	f8df 902c 	ldr.w	r9, [pc, #44]	; 870c4 <_svfprintf_r+0x1aa0>
   87098:	e70a      	b.n	86eb0 <_svfprintf_r+0x188c>
   8709a:	2302      	movs	r3, #2
   8709c:	931a      	str	r3, [sp, #104]	; 0x68
   8709e:	f7ff ba15 	b.w	864cc <_svfprintf_r+0xea8>
   870a2:	990c      	ldr	r1, [sp, #48]	; 0x30
   870a4:	898b      	ldrh	r3, [r1, #12]
   870a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   870aa:	4613      	mov	r3, r2
   870ac:	818a      	strh	r2, [r1, #12]
   870ae:	f7fe bc24 	b.w	858fa <_svfprintf_r+0x2d6>
   870b2:	f04f 32ff 	mov.w	r2, #4294967295
   870b6:	230c      	movs	r3, #12
   870b8:	9208      	str	r2, [sp, #32]
   870ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   870bc:	6013      	str	r3, [r2, #0]
   870be:	f7fe bc23 	b.w	85908 <_svfprintf_r+0x2e4>
   870c2:	bf00      	nop
   870c4:	0008c278 	.word	0x0008c278

000870c8 <__sprint_r.part.0>:
   870c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   870cc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   870ce:	4690      	mov	r8, r2
   870d0:	049c      	lsls	r4, r3, #18
   870d2:	d52d      	bpl.n	87130 <__sprint_r.part.0+0x68>
   870d4:	6893      	ldr	r3, [r2, #8]
   870d6:	6812      	ldr	r2, [r2, #0]
   870d8:	b343      	cbz	r3, 8712c <__sprint_r.part.0+0x64>
   870da:	468b      	mov	fp, r1
   870dc:	4606      	mov	r6, r0
   870de:	f102 0908 	add.w	r9, r2, #8
   870e2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   870e6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   870ea:	d015      	beq.n	87118 <__sprint_r.part.0+0x50>
   870ec:	2400      	movs	r4, #0
   870ee:	3d04      	subs	r5, #4
   870f0:	e001      	b.n	870f6 <__sprint_r.part.0+0x2e>
   870f2:	42a7      	cmp	r7, r4
   870f4:	d00e      	beq.n	87114 <__sprint_r.part.0+0x4c>
   870f6:	465a      	mov	r2, fp
   870f8:	4630      	mov	r0, r6
   870fa:	f855 1f04 	ldr.w	r1, [r5, #4]!
   870fe:	f002 f963 	bl	893c8 <_fputwc_r>
   87102:	1c43      	adds	r3, r0, #1
   87104:	f104 0401 	add.w	r4, r4, #1
   87108:	d1f3      	bne.n	870f2 <__sprint_r.part.0+0x2a>
   8710a:	2300      	movs	r3, #0
   8710c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   87110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87114:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87118:	f02a 0a03 	bic.w	sl, sl, #3
   8711c:	eba3 030a 	sub.w	r3, r3, sl
   87120:	f8c8 3008 	str.w	r3, [r8, #8]
   87124:	f109 0908 	add.w	r9, r9, #8
   87128:	2b00      	cmp	r3, #0
   8712a:	d1da      	bne.n	870e2 <__sprint_r.part.0+0x1a>
   8712c:	2000      	movs	r0, #0
   8712e:	e7ec      	b.n	8710a <__sprint_r.part.0+0x42>
   87130:	f002 face 	bl	896d0 <__sfvwrite_r>
   87134:	2300      	movs	r3, #0
   87136:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8713a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8713e:	bf00      	nop

00087140 <_vfiprintf_r>:
   87140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87144:	b0bd      	sub	sp, #244	; 0xf4
   87146:	461c      	mov	r4, r3
   87148:	4617      	mov	r7, r2
   8714a:	e9cd 3005 	strd	r3, r0, [sp, #20]
   8714e:	9102      	str	r1, [sp, #8]
   87150:	b118      	cbz	r0, 8715a <_vfiprintf_r+0x1a>
   87152:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87154:	2b00      	cmp	r3, #0
   87156:	f000 8277 	beq.w	87648 <_vfiprintf_r+0x508>
   8715a:	9a02      	ldr	r2, [sp, #8]
   8715c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8715e:	07de      	lsls	r6, r3, #31
   87160:	f140 8184 	bpl.w	8746c <_vfiprintf_r+0x32c>
   87164:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   87168:	b28a      	uxth	r2, r1
   8716a:	0490      	lsls	r0, r2, #18
   8716c:	d408      	bmi.n	87180 <_vfiprintf_r+0x40>
   8716e:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   87172:	9902      	ldr	r1, [sp, #8]
   87174:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87176:	818a      	strh	r2, [r1, #12]
   87178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8717c:	b292      	uxth	r2, r2
   8717e:	664b      	str	r3, [r1, #100]	; 0x64
   87180:	0711      	lsls	r1, r2, #28
   87182:	f140 80ec 	bpl.w	8735e <_vfiprintf_r+0x21e>
   87186:	9b02      	ldr	r3, [sp, #8]
   87188:	691b      	ldr	r3, [r3, #16]
   8718a:	2b00      	cmp	r3, #0
   8718c:	f000 80e7 	beq.w	8735e <_vfiprintf_r+0x21e>
   87190:	f002 031a 	and.w	r3, r2, #26
   87194:	2b0a      	cmp	r3, #10
   87196:	f000 80f0 	beq.w	8737a <_vfiprintf_r+0x23a>
   8719a:	ab13      	add	r3, sp, #76	; 0x4c
   8719c:	9310      	str	r3, [sp, #64]	; 0x40
   8719e:	2300      	movs	r3, #0
   871a0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   871a4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   871a8:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   871ac:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   871b0:	9304      	str	r3, [sp, #16]
   871b2:	783b      	ldrb	r3, [r7, #0]
   871b4:	2b00      	cmp	r3, #0
   871b6:	f000 8146 	beq.w	87446 <_vfiprintf_r+0x306>
   871ba:	463c      	mov	r4, r7
   871bc:	e004      	b.n	871c8 <_vfiprintf_r+0x88>
   871be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   871c2:	2b00      	cmp	r3, #0
   871c4:	f000 8121 	beq.w	8740a <_vfiprintf_r+0x2ca>
   871c8:	2b25      	cmp	r3, #37	; 0x25
   871ca:	d1f8      	bne.n	871be <_vfiprintf_r+0x7e>
   871cc:	1be5      	subs	r5, r4, r7
   871ce:	f040 811e 	bne.w	8740e <_vfiprintf_r+0x2ce>
   871d2:	7823      	ldrb	r3, [r4, #0]
   871d4:	2b00      	cmp	r3, #0
   871d6:	f000 8136 	beq.w	87446 <_vfiprintf_r+0x306>
   871da:	f04f 0300 	mov.w	r3, #0
   871de:	2500      	movs	r5, #0
   871e0:	f04f 3bff 	mov.w	fp, #4294967295
   871e4:	f04f 082b 	mov.w	r8, #43	; 0x2b
   871e8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   871ec:	7863      	ldrb	r3, [r4, #1]
   871ee:	9503      	str	r5, [sp, #12]
   871f0:	1c67      	adds	r7, r4, #1
   871f2:	3701      	adds	r7, #1
   871f4:	f1a3 0220 	sub.w	r2, r3, #32
   871f8:	2a5a      	cmp	r2, #90	; 0x5a
   871fa:	f200 8146 	bhi.w	8748a <_vfiprintf_r+0x34a>
   871fe:	e8df f012 	tbh	[pc, r2, lsl #1]
   87202:	02a1      	.short	0x02a1
   87204:	01440144 	.word	0x01440144
   87208:	0144029d 	.word	0x0144029d
   8720c:	01440144 	.word	0x01440144
   87210:	0144027c 	.word	0x0144027c
   87214:	006a0144 	.word	0x006a0144
   87218:	01440253 	.word	0x01440253
   8721c:	02af0229 	.word	0x02af0229
   87220:	02ab0144 	.word	0x02ab0144
   87224:	005b005b 	.word	0x005b005b
   87228:	005b005b 	.word	0x005b005b
   8722c:	005b005b 	.word	0x005b005b
   87230:	005b005b 	.word	0x005b005b
   87234:	0144005b 	.word	0x0144005b
   87238:	01440144 	.word	0x01440144
   8723c:	01440144 	.word	0x01440144
   87240:	01440144 	.word	0x01440144
   87244:	01440144 	.word	0x01440144
   87248:	00780213 	.word	0x00780213
   8724c:	01440144 	.word	0x01440144
   87250:	01440144 	.word	0x01440144
   87254:	01440144 	.word	0x01440144
   87258:	01440144 	.word	0x01440144
   8725c:	01440144 	.word	0x01440144
   87260:	014400d1 	.word	0x014400d1
   87264:	01440144 	.word	0x01440144
   87268:	014401f7 	.word	0x014401f7
   8726c:	01440241 	.word	0x01440241
   87270:	05210144 	.word	0x05210144
   87274:	01440144 	.word	0x01440144
   87278:	01440144 	.word	0x01440144
   8727c:	01440144 	.word	0x01440144
   87280:	01440144 	.word	0x01440144
   87284:	01440144 	.word	0x01440144
   87288:	007a0213 	.word	0x007a0213
   8728c:	01440144 	.word	0x01440144
   87290:	02370144 	.word	0x02370144
   87294:	0074007a 	.word	0x0074007a
   87298:	022d0144 	.word	0x022d0144
   8729c:	02690144 	.word	0x02690144
   872a0:	025700d3 	.word	0x025700d3
   872a4:	01440074 	.word	0x01440074
   872a8:	007201f7 	.word	0x007201f7
   872ac:	01440541 	.word	0x01440541
   872b0:	05430144 	.word	0x05430144
   872b4:	00720144 	.word	0x00720144
   872b8:	2100      	movs	r1, #0
   872ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   872be:	f817 3b01 	ldrb.w	r3, [r7], #1
   872c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   872c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   872ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   872ce:	2a09      	cmp	r2, #9
   872d0:	d9f5      	bls.n	872be <_vfiprintf_r+0x17e>
   872d2:	9103      	str	r1, [sp, #12]
   872d4:	e78e      	b.n	871f4 <_vfiprintf_r+0xb4>
   872d6:	9b05      	ldr	r3, [sp, #20]
   872d8:	f853 2b04 	ldr.w	r2, [r3], #4
   872dc:	2a00      	cmp	r2, #0
   872de:	9203      	str	r2, [sp, #12]
   872e0:	9305      	str	r3, [sp, #20]
   872e2:	f2c0 81b4 	blt.w	8764e <_vfiprintf_r+0x50e>
   872e6:	783b      	ldrb	r3, [r7, #0]
   872e8:	e783      	b.n	871f2 <_vfiprintf_r+0xb2>
   872ea:	783b      	ldrb	r3, [r7, #0]
   872ec:	f045 0520 	orr.w	r5, r5, #32
   872f0:	e77f      	b.n	871f2 <_vfiprintf_r+0xb2>
   872f2:	f045 0510 	orr.w	r5, r5, #16
   872f6:	06ac      	lsls	r4, r5, #26
   872f8:	9e05      	ldr	r6, [sp, #20]
   872fa:	f140 816b 	bpl.w	875d4 <_vfiprintf_r+0x494>
   872fe:	3607      	adds	r6, #7
   87300:	f026 0607 	bic.w	r6, r6, #7
   87304:	4632      	mov	r2, r6
   87306:	6873      	ldr	r3, [r6, #4]
   87308:	f852 6b08 	ldr.w	r6, [r2], #8
   8730c:	4698      	mov	r8, r3
   8730e:	9205      	str	r2, [sp, #20]
   87310:	2b00      	cmp	r3, #0
   87312:	f2c0 8449 	blt.w	87ba8 <_vfiprintf_r+0xa68>
   87316:	f1bb 3fff 	cmp.w	fp, #4294967295
   8731a:	f000 8531 	beq.w	87d80 <_vfiprintf_r+0xc40>
   8731e:	ea56 0308 	orrs.w	r3, r6, r8
   87322:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   87326:	f000 8425 	beq.w	87b74 <_vfiprintf_r+0xa34>
   8732a:	2e0a      	cmp	r6, #10
   8732c:	f178 0300 	sbcs.w	r3, r8, #0
   87330:	f080 84e1 	bcs.w	87cf6 <_vfiprintf_r+0xbb6>
   87334:	2301      	movs	r3, #1
   87336:	4655      	mov	r5, sl
   87338:	3630      	adds	r6, #48	; 0x30
   8733a:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   8733e:	9301      	str	r3, [sp, #4]
   87340:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   87344:	f8dd 8004 	ldr.w	r8, [sp, #4]
   87348:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8734c:	45d8      	cmp	r8, fp
   8734e:	bfb8      	it	lt
   87350:	46d8      	movlt	r8, fp
   87352:	2b00      	cmp	r3, #0
   87354:	f000 80a8 	beq.w	874a8 <_vfiprintf_r+0x368>
   87358:	f108 0801 	add.w	r8, r8, #1
   8735c:	e0a4      	b.n	874a8 <_vfiprintf_r+0x368>
   8735e:	9d02      	ldr	r5, [sp, #8]
   87360:	9806      	ldr	r0, [sp, #24]
   87362:	4629      	mov	r1, r5
   87364:	f000 fdfa 	bl	87f5c <__swsetup_r>
   87368:	2800      	cmp	r0, #0
   8736a:	f040 8594 	bne.w	87e96 <_vfiprintf_r+0xd56>
   8736e:	89aa      	ldrh	r2, [r5, #12]
   87370:	f002 031a 	and.w	r3, r2, #26
   87374:	2b0a      	cmp	r3, #10
   87376:	f47f af10 	bne.w	8719a <_vfiprintf_r+0x5a>
   8737a:	9902      	ldr	r1, [sp, #8]
   8737c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   87380:	2b00      	cmp	r3, #0
   87382:	f6ff af0a 	blt.w	8719a <_vfiprintf_r+0x5a>
   87386:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87388:	07de      	lsls	r6, r3, #31
   8738a:	d402      	bmi.n	87392 <_vfiprintf_r+0x252>
   8738c:	0595      	lsls	r5, r2, #22
   8738e:	f140 8562 	bpl.w	87e56 <_vfiprintf_r+0xd16>
   87392:	4623      	mov	r3, r4
   87394:	463a      	mov	r2, r7
   87396:	9902      	ldr	r1, [sp, #8]
   87398:	9806      	ldr	r0, [sp, #24]
   8739a:	b03d      	add	sp, #244	; 0xf4
   8739c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   873a0:	f000 bd9a 	b.w	87ed8 <__sbprintf>
   873a4:	f045 0510 	orr.w	r5, r5, #16
   873a8:	f015 0820 	ands.w	r8, r5, #32
   873ac:	f000 8103 	beq.w	875b6 <_vfiprintf_r+0x476>
   873b0:	9e05      	ldr	r6, [sp, #20]
   873b2:	3607      	adds	r6, #7
   873b4:	f026 0607 	bic.w	r6, r6, #7
   873b8:	4633      	mov	r3, r6
   873ba:	f8d6 8004 	ldr.w	r8, [r6, #4]
   873be:	f853 6b08 	ldr.w	r6, [r3], #8
   873c2:	9305      	str	r3, [sp, #20]
   873c4:	2300      	movs	r3, #0
   873c6:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   873ca:	f04f 0200 	mov.w	r2, #0
   873ce:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   873d2:	f1bb 3fff 	cmp.w	fp, #4294967295
   873d6:	f000 81dd 	beq.w	87794 <_vfiprintf_r+0x654>
   873da:	ea56 0208 	orrs.w	r2, r6, r8
   873de:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   873e2:	f040 81d6 	bne.w	87792 <_vfiprintf_r+0x652>
   873e6:	f1bb 0f00 	cmp.w	fp, #0
   873ea:	f040 84cc 	bne.w	87d86 <_vfiprintf_r+0xc46>
   873ee:	2b00      	cmp	r3, #0
   873f0:	f040 83c5 	bne.w	87b7e <_vfiprintf_r+0xa3e>
   873f4:	f01a 0301 	ands.w	r3, sl, #1
   873f8:	9301      	str	r3, [sp, #4]
   873fa:	f000 83ec 	beq.w	87bd6 <_vfiprintf_r+0xa96>
   873fe:	2330      	movs	r3, #48	; 0x30
   87400:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   87404:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   87408:	e79c      	b.n	87344 <_vfiprintf_r+0x204>
   8740a:	1be5      	subs	r5, r4, r7
   8740c:	d01b      	beq.n	87446 <_vfiprintf_r+0x306>
   8740e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87410:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87412:	3301      	adds	r3, #1
   87414:	442a      	add	r2, r5
   87416:	2b07      	cmp	r3, #7
   87418:	e9c9 7500 	strd	r7, r5, [r9]
   8741c:	9212      	str	r2, [sp, #72]	; 0x48
   8741e:	9311      	str	r3, [sp, #68]	; 0x44
   87420:	dc05      	bgt.n	8742e <_vfiprintf_r+0x2ee>
   87422:	f109 0908 	add.w	r9, r9, #8
   87426:	9b04      	ldr	r3, [sp, #16]
   87428:	442b      	add	r3, r5
   8742a:	9304      	str	r3, [sp, #16]
   8742c:	e6d1      	b.n	871d2 <_vfiprintf_r+0x92>
   8742e:	2a00      	cmp	r2, #0
   87430:	f000 839c 	beq.w	87b6c <_vfiprintf_r+0xa2c>
   87434:	9902      	ldr	r1, [sp, #8]
   87436:	9806      	ldr	r0, [sp, #24]
   87438:	aa10      	add	r2, sp, #64	; 0x40
   8743a:	f7ff fe45 	bl	870c8 <__sprint_r.part.0>
   8743e:	b940      	cbnz	r0, 87452 <_vfiprintf_r+0x312>
   87440:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87444:	e7ef      	b.n	87426 <_vfiprintf_r+0x2e6>
   87446:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87448:	2b00      	cmp	r3, #0
   8744a:	f040 8515 	bne.w	87e78 <_vfiprintf_r+0xd38>
   8744e:	2300      	movs	r3, #0
   87450:	9311      	str	r3, [sp, #68]	; 0x44
   87452:	9a02      	ldr	r2, [sp, #8]
   87454:	6e53      	ldr	r3, [r2, #100]	; 0x64
   87456:	07d9      	lsls	r1, r3, #31
   87458:	f140 80a2 	bpl.w	875a0 <_vfiprintf_r+0x460>
   8745c:	8993      	ldrh	r3, [r2, #12]
   8745e:	065b      	lsls	r3, r3, #25
   87460:	f100 8525 	bmi.w	87eae <_vfiprintf_r+0xd6e>
   87464:	9804      	ldr	r0, [sp, #16]
   87466:	b03d      	add	sp, #244	; 0xf4
   87468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8746c:	9b02      	ldr	r3, [sp, #8]
   8746e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   87472:	058d      	lsls	r5, r1, #22
   87474:	b28a      	uxth	r2, r1
   87476:	f53f ae78 	bmi.w	8716a <_vfiprintf_r+0x2a>
   8747a:	461d      	mov	r5, r3
   8747c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8747e:	f002 fad1 	bl	89a24 <__retarget_lock_acquire_recursive>
   87482:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   87486:	b28a      	uxth	r2, r1
   87488:	e66f      	b.n	8716a <_vfiprintf_r+0x2a>
   8748a:	2b00      	cmp	r3, #0
   8748c:	d0db      	beq.n	87446 <_vfiprintf_r+0x306>
   8748e:	f04f 0801 	mov.w	r8, #1
   87492:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87496:	f04f 0300 	mov.w	r3, #0
   8749a:	ac23      	add	r4, sp, #140	; 0x8c
   8749c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   874a0:	f8cd 8004 	str.w	r8, [sp, #4]
   874a4:	f04f 0b00 	mov.w	fp, #0
   874a8:	f015 0302 	ands.w	r3, r5, #2
   874ac:	9307      	str	r3, [sp, #28]
   874ae:	bf18      	it	ne
   874b0:	f108 0802 	addne.w	r8, r8, #2
   874b4:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   874b8:	9308      	str	r3, [sp, #32]
   874ba:	d105      	bne.n	874c8 <_vfiprintf_r+0x388>
   874bc:	9b03      	ldr	r3, [sp, #12]
   874be:	eba3 0608 	sub.w	r6, r3, r8
   874c2:	2e00      	cmp	r6, #0
   874c4:	f300 828a 	bgt.w	879dc <_vfiprintf_r+0x89c>
   874c8:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   874cc:	1c48      	adds	r0, r1, #1
   874ce:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   874d2:	b176      	cbz	r6, 874f2 <_vfiprintf_r+0x3b2>
   874d4:	2101      	movs	r1, #1
   874d6:	3201      	adds	r2, #1
   874d8:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   874dc:	2807      	cmp	r0, #7
   874de:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   874e2:	e9c9 6100 	strd	r6, r1, [r9]
   874e6:	f300 8258 	bgt.w	8799a <_vfiprintf_r+0x85a>
   874ea:	4601      	mov	r1, r0
   874ec:	f109 0908 	add.w	r9, r9, #8
   874f0:	3001      	adds	r0, #1
   874f2:	9b07      	ldr	r3, [sp, #28]
   874f4:	b1d3      	cbz	r3, 8752c <_vfiprintf_r+0x3ec>
   874f6:	2302      	movs	r3, #2
   874f8:	3202      	adds	r2, #2
   874fa:	f8c9 3004 	str.w	r3, [r9, #4]
   874fe:	2807      	cmp	r0, #7
   87500:	ab0f      	add	r3, sp, #60	; 0x3c
   87502:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87506:	f8c9 3000 	str.w	r3, [r9]
   8750a:	f340 8262 	ble.w	879d2 <_vfiprintf_r+0x892>
   8750e:	2a00      	cmp	r2, #0
   87510:	f000 8327 	beq.w	87b62 <_vfiprintf_r+0xa22>
   87514:	9902      	ldr	r1, [sp, #8]
   87516:	9806      	ldr	r0, [sp, #24]
   87518:	aa10      	add	r2, sp, #64	; 0x40
   8751a:	f7ff fdd5 	bl	870c8 <__sprint_r.part.0>
   8751e:	2800      	cmp	r0, #0
   87520:	d197      	bne.n	87452 <_vfiprintf_r+0x312>
   87522:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87526:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8752a:	1c48      	adds	r0, r1, #1
   8752c:	9b08      	ldr	r3, [sp, #32]
   8752e:	2b80      	cmp	r3, #128	; 0x80
   87530:	f000 8171 	beq.w	87816 <_vfiprintf_r+0x6d6>
   87534:	9b01      	ldr	r3, [sp, #4]
   87536:	ebab 0603 	sub.w	r6, fp, r3
   8753a:	2e00      	cmp	r6, #0
   8753c:	f300 81cf 	bgt.w	878de <_vfiprintf_r+0x79e>
   87540:	9b01      	ldr	r3, [sp, #4]
   87542:	2807      	cmp	r0, #7
   87544:	441a      	add	r2, r3
   87546:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8754a:	f8c9 4000 	str.w	r4, [r9]
   8754e:	f8c9 3004 	str.w	r3, [r9, #4]
   87552:	f340 815d 	ble.w	87810 <_vfiprintf_r+0x6d0>
   87556:	2a00      	cmp	r2, #0
   87558:	f000 8293 	beq.w	87a82 <_vfiprintf_r+0x942>
   8755c:	9902      	ldr	r1, [sp, #8]
   8755e:	9806      	ldr	r0, [sp, #24]
   87560:	aa10      	add	r2, sp, #64	; 0x40
   87562:	f7ff fdb1 	bl	870c8 <__sprint_r.part.0>
   87566:	2800      	cmp	r0, #0
   87568:	f47f af73 	bne.w	87452 <_vfiprintf_r+0x312>
   8756c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8756e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87572:	0768      	lsls	r0, r5, #29
   87574:	d505      	bpl.n	87582 <_vfiprintf_r+0x442>
   87576:	9b03      	ldr	r3, [sp, #12]
   87578:	eba3 0408 	sub.w	r4, r3, r8
   8757c:	2c00      	cmp	r4, #0
   8757e:	f300 828a 	bgt.w	87a96 <_vfiprintf_r+0x956>
   87582:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   87586:	4541      	cmp	r1, r8
   87588:	bfac      	ite	ge
   8758a:	185b      	addge	r3, r3, r1
   8758c:	4443      	addlt	r3, r8
   8758e:	9304      	str	r3, [sp, #16]
   87590:	2a00      	cmp	r2, #0
   87592:	f040 81f3 	bne.w	8797c <_vfiprintf_r+0x83c>
   87596:	2300      	movs	r3, #0
   87598:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8759c:	9311      	str	r3, [sp, #68]	; 0x44
   8759e:	e608      	b.n	871b2 <_vfiprintf_r+0x72>
   875a0:	9b02      	ldr	r3, [sp, #8]
   875a2:	899b      	ldrh	r3, [r3, #12]
   875a4:	059a      	lsls	r2, r3, #22
   875a6:	f53f af5a 	bmi.w	8745e <_vfiprintf_r+0x31e>
   875aa:	9c02      	ldr	r4, [sp, #8]
   875ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   875ae:	f002 fa3b 	bl	89a28 <__retarget_lock_release_recursive>
   875b2:	89a3      	ldrh	r3, [r4, #12]
   875b4:	e753      	b.n	8745e <_vfiprintf_r+0x31e>
   875b6:	f015 0310 	ands.w	r3, r5, #16
   875ba:	f040 8318 	bne.w	87bee <_vfiprintf_r+0xaae>
   875be:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   875c2:	f000 8310 	beq.w	87be6 <_vfiprintf_r+0xaa6>
   875c6:	9e05      	ldr	r6, [sp, #20]
   875c8:	4698      	mov	r8, r3
   875ca:	f856 3b04 	ldr.w	r3, [r6], #4
   875ce:	9605      	str	r6, [sp, #20]
   875d0:	b29e      	uxth	r6, r3
   875d2:	e6f7      	b.n	873c4 <_vfiprintf_r+0x284>
   875d4:	f856 3b04 	ldr.w	r3, [r6], #4
   875d8:	06e8      	lsls	r0, r5, #27
   875da:	9605      	str	r6, [sp, #20]
   875dc:	f100 8310 	bmi.w	87c00 <_vfiprintf_r+0xac0>
   875e0:	0669      	lsls	r1, r5, #25
   875e2:	f140 830a 	bpl.w	87bfa <_vfiprintf_r+0xaba>
   875e6:	f343 38c0 	sbfx	r8, r3, #15, #1
   875ea:	b21e      	sxth	r6, r3
   875ec:	4643      	mov	r3, r8
   875ee:	e68f      	b.n	87310 <_vfiprintf_r+0x1d0>
   875f0:	f04f 0300 	mov.w	r3, #0
   875f4:	9e05      	ldr	r6, [sp, #20]
   875f6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   875fa:	f856 4b04 	ldr.w	r4, [r6], #4
   875fe:	2c00      	cmp	r4, #0
   87600:	f000 83cf 	beq.w	87da2 <_vfiprintf_r+0xc62>
   87604:	f1bb 3fff 	cmp.w	fp, #4294967295
   87608:	f000 8341 	beq.w	87c8e <_vfiprintf_r+0xb4e>
   8760c:	465a      	mov	r2, fp
   8760e:	2100      	movs	r1, #0
   87610:	4620      	mov	r0, r4
   87612:	f002 fd75 	bl	8a100 <memchr>
   87616:	2800      	cmp	r0, #0
   87618:	f000 8422 	beq.w	87e60 <_vfiprintf_r+0xd20>
   8761c:	1b03      	subs	r3, r0, r4
   8761e:	f04f 0b00 	mov.w	fp, #0
   87622:	9605      	str	r6, [sp, #20]
   87624:	9301      	str	r3, [sp, #4]
   87626:	e68d      	b.n	87344 <_vfiprintf_r+0x204>
   87628:	f04f 0300 	mov.w	r3, #0
   8762c:	f04f 0801 	mov.w	r8, #1
   87630:	9e05      	ldr	r6, [sp, #20]
   87632:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87636:	f856 3b04 	ldr.w	r3, [r6], #4
   8763a:	ac23      	add	r4, sp, #140	; 0x8c
   8763c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87640:	9605      	str	r6, [sp, #20]
   87642:	f8cd 8004 	str.w	r8, [sp, #4]
   87646:	e72d      	b.n	874a4 <_vfiprintf_r+0x364>
   87648:	f001 fdc6 	bl	891d8 <__sinit>
   8764c:	e585      	b.n	8715a <_vfiprintf_r+0x1a>
   8764e:	9b03      	ldr	r3, [sp, #12]
   87650:	425b      	negs	r3, r3
   87652:	9303      	str	r3, [sp, #12]
   87654:	783b      	ldrb	r3, [r7, #0]
   87656:	f045 0504 	orr.w	r5, r5, #4
   8765a:	e5ca      	b.n	871f2 <_vfiprintf_r+0xb2>
   8765c:	783b      	ldrb	r3, [r7, #0]
   8765e:	2b6c      	cmp	r3, #108	; 0x6c
   87660:	bf03      	ittte	eq
   87662:	787b      	ldrbeq	r3, [r7, #1]
   87664:	f045 0520 	orreq.w	r5, r5, #32
   87668:	3701      	addeq	r7, #1
   8766a:	f045 0510 	orrne.w	r5, r5, #16
   8766e:	e5c0      	b.n	871f2 <_vfiprintf_r+0xb2>
   87670:	783b      	ldrb	r3, [r7, #0]
   87672:	2b68      	cmp	r3, #104	; 0x68
   87674:	bf03      	ittte	eq
   87676:	787b      	ldrbeq	r3, [r7, #1]
   87678:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   8767c:	3701      	addeq	r7, #1
   8767e:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   87682:	e5b6      	b.n	871f2 <_vfiprintf_r+0xb2>
   87684:	f045 0a10 	orr.w	sl, r5, #16
   87688:	f01a 0820 	ands.w	r8, sl, #32
   8768c:	f000 827e 	beq.w	87b8c <_vfiprintf_r+0xa4c>
   87690:	9e05      	ldr	r6, [sp, #20]
   87692:	2301      	movs	r3, #1
   87694:	3607      	adds	r6, #7
   87696:	f026 0607 	bic.w	r6, r6, #7
   8769a:	4632      	mov	r2, r6
   8769c:	f8d6 8004 	ldr.w	r8, [r6, #4]
   876a0:	f852 6b08 	ldr.w	r6, [r2], #8
   876a4:	9205      	str	r2, [sp, #20]
   876a6:	e690      	b.n	873ca <_vfiprintf_r+0x28a>
   876a8:	783b      	ldrb	r3, [r7, #0]
   876aa:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   876ae:	e5a0      	b.n	871f2 <_vfiprintf_r+0xb2>
   876b0:	2230      	movs	r2, #48	; 0x30
   876b2:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   876b6:	2278      	movs	r2, #120	; 0x78
   876b8:	9b05      	ldr	r3, [sp, #20]
   876ba:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   876be:	f853 6b04 	ldr.w	r6, [r3], #4
   876c2:	4abe      	ldr	r2, [pc, #760]	; (879bc <_vfiprintf_r+0x87c>)
   876c4:	9305      	str	r3, [sp, #20]
   876c6:	f04f 0800 	mov.w	r8, #0
   876ca:	2302      	movs	r3, #2
   876cc:	f045 0a02 	orr.w	sl, r5, #2
   876d0:	9209      	str	r2, [sp, #36]	; 0x24
   876d2:	e67a      	b.n	873ca <_vfiprintf_r+0x28a>
   876d4:	06ae      	lsls	r6, r5, #26
   876d6:	f100 82a4 	bmi.w	87c22 <_vfiprintf_r+0xae2>
   876da:	06ec      	lsls	r4, r5, #27
   876dc:	f100 8359 	bmi.w	87d92 <_vfiprintf_r+0xc52>
   876e0:	0668      	lsls	r0, r5, #25
   876e2:	f100 83b0 	bmi.w	87e46 <_vfiprintf_r+0xd06>
   876e6:	05a9      	lsls	r1, r5, #22
   876e8:	f140 8353 	bpl.w	87d92 <_vfiprintf_r+0xc52>
   876ec:	9e05      	ldr	r6, [sp, #20]
   876ee:	9a04      	ldr	r2, [sp, #16]
   876f0:	f856 3b04 	ldr.w	r3, [r6], #4
   876f4:	701a      	strb	r2, [r3, #0]
   876f6:	9605      	str	r6, [sp, #20]
   876f8:	e55b      	b.n	871b2 <_vfiprintf_r+0x72>
   876fa:	9c06      	ldr	r4, [sp, #24]
   876fc:	4620      	mov	r0, r4
   876fe:	f002 f989 	bl	89a14 <_localeconv_r>
   87702:	6843      	ldr	r3, [r0, #4]
   87704:	4618      	mov	r0, r3
   87706:	930b      	str	r3, [sp, #44]	; 0x2c
   87708:	f7fd ff2a 	bl	85560 <strlen>
   8770c:	4603      	mov	r3, r0
   8770e:	4620      	mov	r0, r4
   87710:	930c      	str	r3, [sp, #48]	; 0x30
   87712:	461c      	mov	r4, r3
   87714:	f002 f97e 	bl	89a14 <_localeconv_r>
   87718:	6883      	ldr	r3, [r0, #8]
   8771a:	930a      	str	r3, [sp, #40]	; 0x28
   8771c:	2c00      	cmp	r4, #0
   8771e:	f43f ade2 	beq.w	872e6 <_vfiprintf_r+0x1a6>
   87722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87724:	2b00      	cmp	r3, #0
   87726:	f43f adde 	beq.w	872e6 <_vfiprintf_r+0x1a6>
   8772a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8772c:	781b      	ldrb	r3, [r3, #0]
   8772e:	2b00      	cmp	r3, #0
   87730:	f43f add9 	beq.w	872e6 <_vfiprintf_r+0x1a6>
   87734:	783b      	ldrb	r3, [r7, #0]
   87736:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   8773a:	e55a      	b.n	871f2 <_vfiprintf_r+0xb2>
   8773c:	783b      	ldrb	r3, [r7, #0]
   8773e:	f045 0501 	orr.w	r5, r5, #1
   87742:	e556      	b.n	871f2 <_vfiprintf_r+0xb2>
   87744:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   87748:	2b00      	cmp	r3, #0
   8774a:	f47f adcc 	bne.w	872e6 <_vfiprintf_r+0x1a6>
   8774e:	2320      	movs	r3, #32
   87750:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87754:	783b      	ldrb	r3, [r7, #0]
   87756:	e54c      	b.n	871f2 <_vfiprintf_r+0xb2>
   87758:	783b      	ldrb	r3, [r7, #0]
   8775a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   8775e:	e548      	b.n	871f2 <_vfiprintf_r+0xb2>
   87760:	4639      	mov	r1, r7
   87762:	f811 3b01 	ldrb.w	r3, [r1], #1
   87766:	2b2a      	cmp	r3, #42	; 0x2a
   87768:	f000 83a6 	beq.w	87eb8 <_vfiprintf_r+0xd78>
   8776c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   87770:	2a09      	cmp	r2, #9
   87772:	460f      	mov	r7, r1
   87774:	f04f 0b00 	mov.w	fp, #0
   87778:	f63f ad3c 	bhi.w	871f4 <_vfiprintf_r+0xb4>
   8777c:	f817 3b01 	ldrb.w	r3, [r7], #1
   87780:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   87784:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   87788:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8778c:	2a09      	cmp	r2, #9
   8778e:	d9f5      	bls.n	8777c <_vfiprintf_r+0x63c>
   87790:	e530      	b.n	871f4 <_vfiprintf_r+0xb4>
   87792:	46aa      	mov	sl, r5
   87794:	2b01      	cmp	r3, #1
   87796:	f43f adc8 	beq.w	8732a <_vfiprintf_r+0x1ea>
   8779a:	2b02      	cmp	r3, #2
   8779c:	ac3c      	add	r4, sp, #240	; 0xf0
   8779e:	d112      	bne.n	877c6 <_vfiprintf_r+0x686>
   877a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   877a2:	f006 030f 	and.w	r3, r6, #15
   877a6:	5cd3      	ldrb	r3, [r2, r3]
   877a8:	0936      	lsrs	r6, r6, #4
   877aa:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   877ae:	ea4f 1818 	mov.w	r8, r8, lsr #4
   877b2:	f804 3d01 	strb.w	r3, [r4, #-1]!
   877b6:	ea56 0308 	orrs.w	r3, r6, r8
   877ba:	d1f2      	bne.n	877a2 <_vfiprintf_r+0x662>
   877bc:	ab3c      	add	r3, sp, #240	; 0xf0
   877be:	1b1b      	subs	r3, r3, r4
   877c0:	4655      	mov	r5, sl
   877c2:	9301      	str	r3, [sp, #4]
   877c4:	e5be      	b.n	87344 <_vfiprintf_r+0x204>
   877c6:	f006 0307 	and.w	r3, r6, #7
   877ca:	08f6      	lsrs	r6, r6, #3
   877cc:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   877d0:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   877d4:	3330      	adds	r3, #48	; 0x30
   877d6:	ea56 0108 	orrs.w	r1, r6, r8
   877da:	4622      	mov	r2, r4
   877dc:	f804 3d01 	strb.w	r3, [r4, #-1]!
   877e0:	d1f1      	bne.n	877c6 <_vfiprintf_r+0x686>
   877e2:	f01a 0f01 	tst.w	sl, #1
   877e6:	d0e9      	beq.n	877bc <_vfiprintf_r+0x67c>
   877e8:	2b30      	cmp	r3, #48	; 0x30
   877ea:	d0e7      	beq.n	877bc <_vfiprintf_r+0x67c>
   877ec:	2330      	movs	r3, #48	; 0x30
   877ee:	3a02      	subs	r2, #2
   877f0:	f804 3c01 	strb.w	r3, [r4, #-1]
   877f4:	ab3c      	add	r3, sp, #240	; 0xf0
   877f6:	1a9b      	subs	r3, r3, r2
   877f8:	4655      	mov	r5, sl
   877fa:	4614      	mov	r4, r2
   877fc:	9301      	str	r3, [sp, #4]
   877fe:	e5a1      	b.n	87344 <_vfiprintf_r+0x204>
   87800:	2301      	movs	r3, #1
   87802:	9a01      	ldr	r2, [sp, #4]
   87804:	9413      	str	r4, [sp, #76]	; 0x4c
   87806:	9311      	str	r3, [sp, #68]	; 0x44
   87808:	9214      	str	r2, [sp, #80]	; 0x50
   8780a:	9212      	str	r2, [sp, #72]	; 0x48
   8780c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87810:	f109 0908 	add.w	r9, r9, #8
   87814:	e6ad      	b.n	87572 <_vfiprintf_r+0x432>
   87816:	9b03      	ldr	r3, [sp, #12]
   87818:	eba3 0608 	sub.w	r6, r3, r8
   8781c:	2e00      	cmp	r6, #0
   8781e:	f77f ae89 	ble.w	87534 <_vfiprintf_r+0x3f4>
   87822:	2e10      	cmp	r6, #16
   87824:	f8df a198 	ldr.w	sl, [pc, #408]	; 879c0 <_vfiprintf_r+0x880>
   87828:	dd38      	ble.n	8789c <_vfiprintf_r+0x75c>
   8782a:	4653      	mov	r3, sl
   8782c:	46cc      	mov	ip, r9
   8782e:	46ba      	mov	sl, r7
   87830:	46c1      	mov	r9, r8
   87832:	9407      	str	r4, [sp, #28]
   87834:	46a8      	mov	r8, r5
   87836:	461f      	mov	r7, r3
   87838:	9c06      	ldr	r4, [sp, #24]
   8783a:	9d02      	ldr	r5, [sp, #8]
   8783c:	e007      	b.n	8784e <_vfiprintf_r+0x70e>
   8783e:	f101 0e02 	add.w	lr, r1, #2
   87842:	4601      	mov	r1, r0
   87844:	f10c 0c08 	add.w	ip, ip, #8
   87848:	3e10      	subs	r6, #16
   8784a:	2e10      	cmp	r6, #16
   8784c:	dd1e      	ble.n	8788c <_vfiprintf_r+0x74c>
   8784e:	2310      	movs	r3, #16
   87850:	1c48      	adds	r0, r1, #1
   87852:	3210      	adds	r2, #16
   87854:	2807      	cmp	r0, #7
   87856:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8785a:	f8cc 7000 	str.w	r7, [ip]
   8785e:	f8cc 3004 	str.w	r3, [ip, #4]
   87862:	ddec      	ble.n	8783e <_vfiprintf_r+0x6fe>
   87864:	2a00      	cmp	r2, #0
   87866:	f000 8092 	beq.w	8798e <_vfiprintf_r+0x84e>
   8786a:	4629      	mov	r1, r5
   8786c:	4620      	mov	r0, r4
   8786e:	aa10      	add	r2, sp, #64	; 0x40
   87870:	f7ff fc2a 	bl	870c8 <__sprint_r.part.0>
   87874:	2800      	cmp	r0, #0
   87876:	f47f adec 	bne.w	87452 <_vfiprintf_r+0x312>
   8787a:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8787e:	3e10      	subs	r6, #16
   87880:	2e10      	cmp	r6, #16
   87882:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   87886:	f101 0e01 	add.w	lr, r1, #1
   8788a:	dce0      	bgt.n	8784e <_vfiprintf_r+0x70e>
   8788c:	463b      	mov	r3, r7
   8788e:	4645      	mov	r5, r8
   87890:	4657      	mov	r7, sl
   87892:	46c8      	mov	r8, r9
   87894:	4670      	mov	r0, lr
   87896:	46e1      	mov	r9, ip
   87898:	469a      	mov	sl, r3
   8789a:	9c07      	ldr	r4, [sp, #28]
   8789c:	4432      	add	r2, r6
   8789e:	2807      	cmp	r0, #7
   878a0:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   878a4:	f8c9 a000 	str.w	sl, [r9]
   878a8:	f8c9 6004 	str.w	r6, [r9, #4]
   878ac:	f340 8196 	ble.w	87bdc <_vfiprintf_r+0xa9c>
   878b0:	2a00      	cmp	r2, #0
   878b2:	f000 829a 	beq.w	87dea <_vfiprintf_r+0xcaa>
   878b6:	9902      	ldr	r1, [sp, #8]
   878b8:	9806      	ldr	r0, [sp, #24]
   878ba:	aa10      	add	r2, sp, #64	; 0x40
   878bc:	f7ff fc04 	bl	870c8 <__sprint_r.part.0>
   878c0:	2800      	cmp	r0, #0
   878c2:	f47f adc6 	bne.w	87452 <_vfiprintf_r+0x312>
   878c6:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   878ca:	9b01      	ldr	r3, [sp, #4]
   878cc:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   878d0:	ebab 0603 	sub.w	r6, fp, r3
   878d4:	2e00      	cmp	r6, #0
   878d6:	f101 0001 	add.w	r0, r1, #1
   878da:	f77f ae31 	ble.w	87540 <_vfiprintf_r+0x400>
   878de:	2e10      	cmp	r6, #16
   878e0:	f340 826b 	ble.w	87dba <_vfiprintf_r+0xc7a>
   878e4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 879c0 <_vfiprintf_r+0x880>
   878e8:	46cc      	mov	ip, r9
   878ea:	4653      	mov	r3, sl
   878ec:	46c1      	mov	r9, r8
   878ee:	46ba      	mov	sl, r7
   878f0:	46a8      	mov	r8, r5
   878f2:	9407      	str	r4, [sp, #28]
   878f4:	f04f 0b10 	mov.w	fp, #16
   878f8:	461f      	mov	r7, r3
   878fa:	9c06      	ldr	r4, [sp, #24]
   878fc:	9d02      	ldr	r5, [sp, #8]
   878fe:	e007      	b.n	87910 <_vfiprintf_r+0x7d0>
   87900:	f101 0e02 	add.w	lr, r1, #2
   87904:	4601      	mov	r1, r0
   87906:	f10c 0c08 	add.w	ip, ip, #8
   8790a:	3e10      	subs	r6, #16
   8790c:	2e10      	cmp	r6, #16
   8790e:	dd19      	ble.n	87944 <_vfiprintf_r+0x804>
   87910:	1c48      	adds	r0, r1, #1
   87912:	3210      	adds	r2, #16
   87914:	2807      	cmp	r0, #7
   87916:	e9cc 7b00 	strd	r7, fp, [ip]
   8791a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8791e:	ddef      	ble.n	87900 <_vfiprintf_r+0x7c0>
   87920:	b332      	cbz	r2, 87970 <_vfiprintf_r+0x830>
   87922:	4629      	mov	r1, r5
   87924:	4620      	mov	r0, r4
   87926:	aa10      	add	r2, sp, #64	; 0x40
   87928:	f7ff fbce 	bl	870c8 <__sprint_r.part.0>
   8792c:	2800      	cmp	r0, #0
   8792e:	f47f ad90 	bne.w	87452 <_vfiprintf_r+0x312>
   87932:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87936:	3e10      	subs	r6, #16
   87938:	2e10      	cmp	r6, #16
   8793a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8793e:	f101 0e01 	add.w	lr, r1, #1
   87942:	dce5      	bgt.n	87910 <_vfiprintf_r+0x7d0>
   87944:	463b      	mov	r3, r7
   87946:	4645      	mov	r5, r8
   87948:	4657      	mov	r7, sl
   8794a:	46c8      	mov	r8, r9
   8794c:	4670      	mov	r0, lr
   8794e:	46e1      	mov	r9, ip
   87950:	469a      	mov	sl, r3
   87952:	9c07      	ldr	r4, [sp, #28]
   87954:	4432      	add	r2, r6
   87956:	2807      	cmp	r0, #7
   87958:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8795c:	f8c9 a000 	str.w	sl, [r9]
   87960:	f8c9 6004 	str.w	r6, [r9, #4]
   87964:	f300 80e9 	bgt.w	87b3a <_vfiprintf_r+0x9fa>
   87968:	f109 0908 	add.w	r9, r9, #8
   8796c:	3001      	adds	r0, #1
   8796e:	e5e7      	b.n	87540 <_vfiprintf_r+0x400>
   87970:	f04f 0e01 	mov.w	lr, #1
   87974:	4611      	mov	r1, r2
   87976:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8797a:	e7c6      	b.n	8790a <_vfiprintf_r+0x7ca>
   8797c:	9902      	ldr	r1, [sp, #8]
   8797e:	9806      	ldr	r0, [sp, #24]
   87980:	aa10      	add	r2, sp, #64	; 0x40
   87982:	f7ff fba1 	bl	870c8 <__sprint_r.part.0>
   87986:	2800      	cmp	r0, #0
   87988:	f43f ae05 	beq.w	87596 <_vfiprintf_r+0x456>
   8798c:	e561      	b.n	87452 <_vfiprintf_r+0x312>
   8798e:	f04f 0e01 	mov.w	lr, #1
   87992:	4611      	mov	r1, r2
   87994:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   87998:	e756      	b.n	87848 <_vfiprintf_r+0x708>
   8799a:	2a00      	cmp	r2, #0
   8799c:	f000 80de 	beq.w	87b5c <_vfiprintf_r+0xa1c>
   879a0:	9902      	ldr	r1, [sp, #8]
   879a2:	9806      	ldr	r0, [sp, #24]
   879a4:	aa10      	add	r2, sp, #64	; 0x40
   879a6:	f7ff fb8f 	bl	870c8 <__sprint_r.part.0>
   879aa:	2800      	cmp	r0, #0
   879ac:	f47f ad51 	bne.w	87452 <_vfiprintf_r+0x312>
   879b0:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   879b4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   879b8:	1c48      	adds	r0, r1, #1
   879ba:	e59a      	b.n	874f2 <_vfiprintf_r+0x3b2>
   879bc:	0008c234 	.word	0x0008c234
   879c0:	0008c298 	.word	0x0008c298
   879c4:	2202      	movs	r2, #2
   879c6:	2001      	movs	r0, #1
   879c8:	ab0f      	add	r3, sp, #60	; 0x3c
   879ca:	9313      	str	r3, [sp, #76]	; 0x4c
   879cc:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   879d0:	9214      	str	r2, [sp, #80]	; 0x50
   879d2:	4601      	mov	r1, r0
   879d4:	f109 0908 	add.w	r9, r9, #8
   879d8:	1c48      	adds	r0, r1, #1
   879da:	e5a7      	b.n	8752c <_vfiprintf_r+0x3ec>
   879dc:	2e10      	cmp	r6, #16
   879de:	f340 8245 	ble.w	87e6c <_vfiprintf_r+0xd2c>
   879e2:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   879e6:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 87cd8 <_vfiprintf_r+0xb98>
   879ea:	4619      	mov	r1, r3
   879ec:	4653      	mov	r3, sl
   879ee:	46cc      	mov	ip, r9
   879f0:	46ba      	mov	sl, r7
   879f2:	46c1      	mov	r9, r8
   879f4:	940d      	str	r4, [sp, #52]	; 0x34
   879f6:	46a8      	mov	r8, r5
   879f8:	461f      	mov	r7, r3
   879fa:	9c06      	ldr	r4, [sp, #24]
   879fc:	9d02      	ldr	r5, [sp, #8]
   879fe:	e007      	b.n	87a10 <_vfiprintf_r+0x8d0>
   87a00:	f101 0e02 	add.w	lr, r1, #2
   87a04:	4601      	mov	r1, r0
   87a06:	f10c 0c08 	add.w	ip, ip, #8
   87a0a:	3e10      	subs	r6, #16
   87a0c:	2e10      	cmp	r6, #16
   87a0e:	dd1c      	ble.n	87a4a <_vfiprintf_r+0x90a>
   87a10:	2310      	movs	r3, #16
   87a12:	1c48      	adds	r0, r1, #1
   87a14:	3210      	adds	r2, #16
   87a16:	2807      	cmp	r0, #7
   87a18:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87a1c:	f8cc 7000 	str.w	r7, [ip]
   87a20:	f8cc 3004 	str.w	r3, [ip, #4]
   87a24:	ddec      	ble.n	87a00 <_vfiprintf_r+0x8c0>
   87a26:	b332      	cbz	r2, 87a76 <_vfiprintf_r+0x936>
   87a28:	4629      	mov	r1, r5
   87a2a:	4620      	mov	r0, r4
   87a2c:	aa10      	add	r2, sp, #64	; 0x40
   87a2e:	f7ff fb4b 	bl	870c8 <__sprint_r.part.0>
   87a32:	2800      	cmp	r0, #0
   87a34:	f47f ad0d 	bne.w	87452 <_vfiprintf_r+0x312>
   87a38:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87a3c:	3e10      	subs	r6, #16
   87a3e:	2e10      	cmp	r6, #16
   87a40:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   87a44:	f101 0e01 	add.w	lr, r1, #1
   87a48:	dce2      	bgt.n	87a10 <_vfiprintf_r+0x8d0>
   87a4a:	463b      	mov	r3, r7
   87a4c:	4645      	mov	r5, r8
   87a4e:	4657      	mov	r7, sl
   87a50:	46c8      	mov	r8, r9
   87a52:	4671      	mov	r1, lr
   87a54:	46e1      	mov	r9, ip
   87a56:	469a      	mov	sl, r3
   87a58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   87a5a:	4432      	add	r2, r6
   87a5c:	2907      	cmp	r1, #7
   87a5e:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   87a62:	f8c9 a000 	str.w	sl, [r9]
   87a66:	f8c9 6004 	str.w	r6, [r9, #4]
   87a6a:	f300 80a7 	bgt.w	87bbc <_vfiprintf_r+0xa7c>
   87a6e:	f109 0908 	add.w	r9, r9, #8
   87a72:	1c48      	adds	r0, r1, #1
   87a74:	e52b      	b.n	874ce <_vfiprintf_r+0x38e>
   87a76:	4611      	mov	r1, r2
   87a78:	f04f 0e01 	mov.w	lr, #1
   87a7c:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   87a80:	e7c3      	b.n	87a0a <_vfiprintf_r+0x8ca>
   87a82:	076c      	lsls	r4, r5, #29
   87a84:	9211      	str	r2, [sp, #68]	; 0x44
   87a86:	d550      	bpl.n	87b2a <_vfiprintf_r+0x9ea>
   87a88:	9b03      	ldr	r3, [sp, #12]
   87a8a:	eba3 0408 	sub.w	r4, r3, r8
   87a8e:	2c00      	cmp	r4, #0
   87a90:	dd4b      	ble.n	87b2a <_vfiprintf_r+0x9ea>
   87a92:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87a96:	2c10      	cmp	r4, #16
   87a98:	f340 81f8 	ble.w	87e8c <_vfiprintf_r+0xd4c>
   87a9c:	f8df a238 	ldr.w	sl, [pc, #568]	; 87cd8 <_vfiprintf_r+0xb98>
   87aa0:	2510      	movs	r5, #16
   87aa2:	4653      	mov	r3, sl
   87aa4:	9911      	ldr	r1, [sp, #68]	; 0x44
   87aa6:	46ba      	mov	sl, r7
   87aa8:	9e06      	ldr	r6, [sp, #24]
   87aaa:	461f      	mov	r7, r3
   87aac:	f8dd b008 	ldr.w	fp, [sp, #8]
   87ab0:	e006      	b.n	87ac0 <_vfiprintf_r+0x980>
   87ab2:	1c88      	adds	r0, r1, #2
   87ab4:	4619      	mov	r1, r3
   87ab6:	f109 0908 	add.w	r9, r9, #8
   87aba:	3c10      	subs	r4, #16
   87abc:	2c10      	cmp	r4, #16
   87abe:	dd19      	ble.n	87af4 <_vfiprintf_r+0x9b4>
   87ac0:	1c4b      	adds	r3, r1, #1
   87ac2:	3210      	adds	r2, #16
   87ac4:	2b07      	cmp	r3, #7
   87ac6:	e9c9 7500 	strd	r7, r5, [r9]
   87aca:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   87ace:	ddf0      	ble.n	87ab2 <_vfiprintf_r+0x972>
   87ad0:	b332      	cbz	r2, 87b20 <_vfiprintf_r+0x9e0>
   87ad2:	4659      	mov	r1, fp
   87ad4:	4630      	mov	r0, r6
   87ad6:	aa10      	add	r2, sp, #64	; 0x40
   87ad8:	f7ff faf6 	bl	870c8 <__sprint_r.part.0>
   87adc:	2800      	cmp	r0, #0
   87ade:	f47f acb8 	bne.w	87452 <_vfiprintf_r+0x312>
   87ae2:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87ae6:	3c10      	subs	r4, #16
   87ae8:	2c10      	cmp	r4, #16
   87aea:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87aee:	f101 0001 	add.w	r0, r1, #1
   87af2:	dce5      	bgt.n	87ac0 <_vfiprintf_r+0x980>
   87af4:	463b      	mov	r3, r7
   87af6:	4657      	mov	r7, sl
   87af8:	469a      	mov	sl, r3
   87afa:	4422      	add	r2, r4
   87afc:	2807      	cmp	r0, #7
   87afe:	e9c9 a400 	strd	sl, r4, [r9]
   87b02:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87b06:	f77f ad3c 	ble.w	87582 <_vfiprintf_r+0x442>
   87b0a:	b172      	cbz	r2, 87b2a <_vfiprintf_r+0x9ea>
   87b0c:	9902      	ldr	r1, [sp, #8]
   87b0e:	9806      	ldr	r0, [sp, #24]
   87b10:	aa10      	add	r2, sp, #64	; 0x40
   87b12:	f7ff fad9 	bl	870c8 <__sprint_r.part.0>
   87b16:	2800      	cmp	r0, #0
   87b18:	f47f ac9b 	bne.w	87452 <_vfiprintf_r+0x312>
   87b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87b1e:	e530      	b.n	87582 <_vfiprintf_r+0x442>
   87b20:	2001      	movs	r0, #1
   87b22:	4611      	mov	r1, r2
   87b24:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87b28:	e7c7      	b.n	87aba <_vfiprintf_r+0x97a>
   87b2a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   87b2e:	4542      	cmp	r2, r8
   87b30:	bfac      	ite	ge
   87b32:	189b      	addge	r3, r3, r2
   87b34:	4443      	addlt	r3, r8
   87b36:	9304      	str	r3, [sp, #16]
   87b38:	e52d      	b.n	87596 <_vfiprintf_r+0x456>
   87b3a:	2a00      	cmp	r2, #0
   87b3c:	f43f ae60 	beq.w	87800 <_vfiprintf_r+0x6c0>
   87b40:	9902      	ldr	r1, [sp, #8]
   87b42:	9806      	ldr	r0, [sp, #24]
   87b44:	aa10      	add	r2, sp, #64	; 0x40
   87b46:	f7ff fabf 	bl	870c8 <__sprint_r.part.0>
   87b4a:	2800      	cmp	r0, #0
   87b4c:	f47f ac81 	bne.w	87452 <_vfiprintf_r+0x312>
   87b50:	9811      	ldr	r0, [sp, #68]	; 0x44
   87b52:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87b54:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87b58:	3001      	adds	r0, #1
   87b5a:	e4f1      	b.n	87540 <_vfiprintf_r+0x400>
   87b5c:	9b07      	ldr	r3, [sp, #28]
   87b5e:	2b00      	cmp	r3, #0
   87b60:	d169      	bne.n	87c36 <_vfiprintf_r+0xaf6>
   87b62:	2001      	movs	r0, #1
   87b64:	4611      	mov	r1, r2
   87b66:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87b6a:	e4df      	b.n	8752c <_vfiprintf_r+0x3ec>
   87b6c:	9211      	str	r2, [sp, #68]	; 0x44
   87b6e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87b72:	e458      	b.n	87426 <_vfiprintf_r+0x2e6>
   87b74:	f1bb 0f00 	cmp.w	fp, #0
   87b78:	f47f abdc 	bne.w	87334 <_vfiprintf_r+0x1f4>
   87b7c:	4655      	mov	r5, sl
   87b7e:	f04f 0b00 	mov.w	fp, #0
   87b82:	ac3c      	add	r4, sp, #240	; 0xf0
   87b84:	f8cd b004 	str.w	fp, [sp, #4]
   87b88:	f7ff bbdc 	b.w	87344 <_vfiprintf_r+0x204>
   87b8c:	f01a 0310 	ands.w	r3, sl, #16
   87b90:	d140      	bne.n	87c14 <_vfiprintf_r+0xad4>
   87b92:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   87b96:	d039      	beq.n	87c0c <_vfiprintf_r+0xacc>
   87b98:	9e05      	ldr	r6, [sp, #20]
   87b9a:	4698      	mov	r8, r3
   87b9c:	f856 2b04 	ldr.w	r2, [r6], #4
   87ba0:	2301      	movs	r3, #1
   87ba2:	9605      	str	r6, [sp, #20]
   87ba4:	b296      	uxth	r6, r2
   87ba6:	e410      	b.n	873ca <_vfiprintf_r+0x28a>
   87ba8:	232d      	movs	r3, #45	; 0x2d
   87baa:	4276      	negs	r6, r6
   87bac:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87bb0:	46aa      	mov	sl, r5
   87bb2:	f04f 0301 	mov.w	r3, #1
   87bb6:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   87bba:	e40a      	b.n	873d2 <_vfiprintf_r+0x292>
   87bbc:	2a00      	cmp	r2, #0
   87bbe:	d06f      	beq.n	87ca0 <_vfiprintf_r+0xb60>
   87bc0:	9902      	ldr	r1, [sp, #8]
   87bc2:	9806      	ldr	r0, [sp, #24]
   87bc4:	aa10      	add	r2, sp, #64	; 0x40
   87bc6:	f7ff fa7f 	bl	870c8 <__sprint_r.part.0>
   87bca:	2800      	cmp	r0, #0
   87bcc:	f47f ac41 	bne.w	87452 <_vfiprintf_r+0x312>
   87bd0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87bd4:	e478      	b.n	874c8 <_vfiprintf_r+0x388>
   87bd6:	ac3c      	add	r4, sp, #240	; 0xf0
   87bd8:	f7ff bbb4 	b.w	87344 <_vfiprintf_r+0x204>
   87bdc:	4601      	mov	r1, r0
   87bde:	f109 0908 	add.w	r9, r9, #8
   87be2:	3001      	adds	r0, #1
   87be4:	e4a6      	b.n	87534 <_vfiprintf_r+0x3f4>
   87be6:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   87bea:	f040 811d 	bne.w	87e28 <_vfiprintf_r+0xce8>
   87bee:	9b05      	ldr	r3, [sp, #20]
   87bf0:	f853 6b04 	ldr.w	r6, [r3], #4
   87bf4:	9305      	str	r3, [sp, #20]
   87bf6:	f7ff bbe5 	b.w	873c4 <_vfiprintf_r+0x284>
   87bfa:	05aa      	lsls	r2, r5, #22
   87bfc:	f100 810e 	bmi.w	87e1c <_vfiprintf_r+0xcdc>
   87c00:	ea4f 78e3 	mov.w	r8, r3, asr #31
   87c04:	461e      	mov	r6, r3
   87c06:	4643      	mov	r3, r8
   87c08:	f7ff bb82 	b.w	87310 <_vfiprintf_r+0x1d0>
   87c0c:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   87c10:	f040 80fb 	bne.w	87e0a <_vfiprintf_r+0xcca>
   87c14:	9a05      	ldr	r2, [sp, #20]
   87c16:	2301      	movs	r3, #1
   87c18:	f852 6b04 	ldr.w	r6, [r2], #4
   87c1c:	9205      	str	r2, [sp, #20]
   87c1e:	f7ff bbd4 	b.w	873ca <_vfiprintf_r+0x28a>
   87c22:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   87c26:	f856 2b04 	ldr.w	r2, [r6], #4
   87c2a:	17cb      	asrs	r3, r1, #31
   87c2c:	e9c2 1300 	strd	r1, r3, [r2]
   87c30:	9605      	str	r6, [sp, #20]
   87c32:	f7ff babe 	b.w	871b2 <_vfiprintf_r+0x72>
   87c36:	2202      	movs	r2, #2
   87c38:	ab0f      	add	r3, sp, #60	; 0x3c
   87c3a:	9313      	str	r3, [sp, #76]	; 0x4c
   87c3c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87c40:	9214      	str	r2, [sp, #80]	; 0x50
   87c42:	e6c7      	b.n	879d4 <_vfiprintf_r+0x894>
   87c44:	4a25      	ldr	r2, [pc, #148]	; (87cdc <_vfiprintf_r+0xb9c>)
   87c46:	9209      	str	r2, [sp, #36]	; 0x24
   87c48:	f015 0820 	ands.w	r8, r5, #32
   87c4c:	d036      	beq.n	87cbc <_vfiprintf_r+0xb7c>
   87c4e:	9e05      	ldr	r6, [sp, #20]
   87c50:	3607      	adds	r6, #7
   87c52:	f026 0607 	bic.w	r6, r6, #7
   87c56:	4632      	mov	r2, r6
   87c58:	f8d6 8004 	ldr.w	r8, [r6, #4]
   87c5c:	f852 6b08 	ldr.w	r6, [r2], #8
   87c60:	9205      	str	r2, [sp, #20]
   87c62:	07ea      	lsls	r2, r5, #31
   87c64:	d509      	bpl.n	87c7a <_vfiprintf_r+0xb3a>
   87c66:	ea56 0208 	orrs.w	r2, r6, r8
   87c6a:	d006      	beq.n	87c7a <_vfiprintf_r+0xb3a>
   87c6c:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   87c70:	2330      	movs	r3, #48	; 0x30
   87c72:	f045 0502 	orr.w	r5, r5, #2
   87c76:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   87c7a:	2302      	movs	r3, #2
   87c7c:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   87c80:	f7ff bba3 	b.w	873ca <_vfiprintf_r+0x28a>
   87c84:	46aa      	mov	sl, r5
   87c86:	e4ff      	b.n	87688 <_vfiprintf_r+0x548>
   87c88:	4a15      	ldr	r2, [pc, #84]	; (87ce0 <_vfiprintf_r+0xba0>)
   87c8a:	9209      	str	r2, [sp, #36]	; 0x24
   87c8c:	e7dc      	b.n	87c48 <_vfiprintf_r+0xb08>
   87c8e:	4620      	mov	r0, r4
   87c90:	9605      	str	r6, [sp, #20]
   87c92:	f7fd fc65 	bl	85560 <strlen>
   87c96:	f04f 0b00 	mov.w	fp, #0
   87c9a:	9001      	str	r0, [sp, #4]
   87c9c:	f7ff bb52 	b.w	87344 <_vfiprintf_r+0x204>
   87ca0:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   87ca4:	2900      	cmp	r1, #0
   87ca6:	f000 80a6 	beq.w	87df6 <_vfiprintf_r+0xcb6>
   87caa:	2001      	movs	r0, #1
   87cac:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   87cb0:	9213      	str	r2, [sp, #76]	; 0x4c
   87cb2:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87cb6:	4602      	mov	r2, r0
   87cb8:	9014      	str	r0, [sp, #80]	; 0x50
   87cba:	e416      	b.n	874ea <_vfiprintf_r+0x3aa>
   87cbc:	f015 0210 	ands.w	r2, r5, #16
   87cc0:	d114      	bne.n	87cec <_vfiprintf_r+0xbac>
   87cc2:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   87cc6:	d00d      	beq.n	87ce4 <_vfiprintf_r+0xba4>
   87cc8:	9e05      	ldr	r6, [sp, #20]
   87cca:	4690      	mov	r8, r2
   87ccc:	f856 2b04 	ldr.w	r2, [r6], #4
   87cd0:	9605      	str	r6, [sp, #20]
   87cd2:	b296      	uxth	r6, r2
   87cd4:	e7c5      	b.n	87c62 <_vfiprintf_r+0xb22>
   87cd6:	bf00      	nop
   87cd8:	0008c288 	.word	0x0008c288
   87cdc:	0008c248 	.word	0x0008c248
   87ce0:	0008c234 	.word	0x0008c234
   87ce4:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   87ce8:	f040 80a6 	bne.w	87e38 <_vfiprintf_r+0xcf8>
   87cec:	9a05      	ldr	r2, [sp, #20]
   87cee:	f852 6b04 	ldr.w	r6, [r2], #4
   87cf2:	9205      	str	r2, [sp, #20]
   87cf4:	e7b5      	b.n	87c62 <_vfiprintf_r+0xb22>
   87cf6:	2300      	movs	r3, #0
   87cf8:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   87cfc:	f8cd b004 	str.w	fp, [sp, #4]
   87d00:	f8cd a01c 	str.w	sl, [sp, #28]
   87d04:	46bb      	mov	fp, r7
   87d06:	f8cd 9020 	str.w	r9, [sp, #32]
   87d0a:	469a      	mov	sl, r3
   87d0c:	4617      	mov	r7, r2
   87d0e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87d12:	ad3c      	add	r5, sp, #240	; 0xf0
   87d14:	e00c      	b.n	87d30 <_vfiprintf_r+0xbf0>
   87d16:	2300      	movs	r3, #0
   87d18:	4630      	mov	r0, r6
   87d1a:	4641      	mov	r1, r8
   87d1c:	220a      	movs	r2, #10
   87d1e:	f004 f85f 	bl	8bde0 <__aeabi_uldivmod>
   87d22:	2e0a      	cmp	r6, #10
   87d24:	f178 0300 	sbcs.w	r3, r8, #0
   87d28:	d31b      	bcc.n	87d62 <_vfiprintf_r+0xc22>
   87d2a:	4606      	mov	r6, r0
   87d2c:	4688      	mov	r8, r1
   87d2e:	4625      	mov	r5, r4
   87d30:	4630      	mov	r0, r6
   87d32:	4641      	mov	r1, r8
   87d34:	220a      	movs	r2, #10
   87d36:	2300      	movs	r3, #0
   87d38:	f004 f852 	bl	8bde0 <__aeabi_uldivmod>
   87d3c:	3230      	adds	r2, #48	; 0x30
   87d3e:	1e6c      	subs	r4, r5, #1
   87d40:	f10a 0a01 	add.w	sl, sl, #1
   87d44:	f805 2c01 	strb.w	r2, [r5, #-1]
   87d48:	2f00      	cmp	r7, #0
   87d4a:	d0e4      	beq.n	87d16 <_vfiprintf_r+0xbd6>
   87d4c:	f899 3000 	ldrb.w	r3, [r9]
   87d50:	4553      	cmp	r3, sl
   87d52:	d1e0      	bne.n	87d16 <_vfiprintf_r+0xbd6>
   87d54:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   87d58:	d0dd      	beq.n	87d16 <_vfiprintf_r+0xbd6>
   87d5a:	2e0a      	cmp	r6, #10
   87d5c:	f178 0300 	sbcs.w	r3, r8, #0
   87d60:	d22e      	bcs.n	87dc0 <_vfiprintf_r+0xc80>
   87d62:	f8dd a01c 	ldr.w	sl, [sp, #28]
   87d66:	ab3c      	add	r3, sp, #240	; 0xf0
   87d68:	1b1b      	subs	r3, r3, r4
   87d6a:	465f      	mov	r7, fp
   87d6c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   87d70:	f8dd b004 	ldr.w	fp, [sp, #4]
   87d74:	4655      	mov	r5, sl
   87d76:	f8dd 9020 	ldr.w	r9, [sp, #32]
   87d7a:	9301      	str	r3, [sp, #4]
   87d7c:	f7ff bae2 	b.w	87344 <_vfiprintf_r+0x204>
   87d80:	46aa      	mov	sl, r5
   87d82:	f7ff bad2 	b.w	8732a <_vfiprintf_r+0x1ea>
   87d86:	2b01      	cmp	r3, #1
   87d88:	46aa      	mov	sl, r5
   87d8a:	f47f ad06 	bne.w	8779a <_vfiprintf_r+0x65a>
   87d8e:	f7ff bad1 	b.w	87334 <_vfiprintf_r+0x1f4>
   87d92:	9e05      	ldr	r6, [sp, #20]
   87d94:	9a04      	ldr	r2, [sp, #16]
   87d96:	f856 3b04 	ldr.w	r3, [r6], #4
   87d9a:	601a      	str	r2, [r3, #0]
   87d9c:	9605      	str	r6, [sp, #20]
   87d9e:	f7ff ba08 	b.w	871b2 <_vfiprintf_r+0x72>
   87da2:	f1bb 0f06 	cmp.w	fp, #6
   87da6:	46d8      	mov	r8, fp
   87da8:	bf28      	it	cs
   87daa:	f04f 0806 	movcs.w	r8, #6
   87dae:	4c47      	ldr	r4, [pc, #284]	; (87ecc <_vfiprintf_r+0xd8c>)
   87db0:	f8cd 8004 	str.w	r8, [sp, #4]
   87db4:	9605      	str	r6, [sp, #20]
   87db6:	f7ff bb75 	b.w	874a4 <_vfiprintf_r+0x364>
   87dba:	f8df a114 	ldr.w	sl, [pc, #276]	; 87ed0 <_vfiprintf_r+0xd90>
   87dbe:	e5c9      	b.n	87954 <_vfiprintf_r+0x814>
   87dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87dc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87dc4:	1ae4      	subs	r4, r4, r3
   87dc6:	461a      	mov	r2, r3
   87dc8:	4620      	mov	r0, r4
   87dca:	f7fd fbf7 	bl	855bc <strncpy>
   87dce:	f899 3001 	ldrb.w	r3, [r9, #1]
   87dd2:	b10b      	cbz	r3, 87dd8 <_vfiprintf_r+0xc98>
   87dd4:	f109 0901 	add.w	r9, r9, #1
   87dd8:	4630      	mov	r0, r6
   87dda:	4641      	mov	r1, r8
   87ddc:	220a      	movs	r2, #10
   87dde:	2300      	movs	r3, #0
   87de0:	f04f 0a00 	mov.w	sl, #0
   87de4:	f003 fffc 	bl	8bde0 <__aeabi_uldivmod>
   87de8:	e79f      	b.n	87d2a <_vfiprintf_r+0xbea>
   87dea:	2001      	movs	r0, #1
   87dec:	4611      	mov	r1, r2
   87dee:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87df2:	f7ff bb9f 	b.w	87534 <_vfiprintf_r+0x3f4>
   87df6:	9b07      	ldr	r3, [sp, #28]
   87df8:	2b00      	cmp	r3, #0
   87dfa:	f47f ade3 	bne.w	879c4 <_vfiprintf_r+0x884>
   87dfe:	4611      	mov	r1, r2
   87e00:	2001      	movs	r0, #1
   87e02:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87e06:	f7ff bb95 	b.w	87534 <_vfiprintf_r+0x3f4>
   87e0a:	9e05      	ldr	r6, [sp, #20]
   87e0c:	4690      	mov	r8, r2
   87e0e:	f856 2b04 	ldr.w	r2, [r6], #4
   87e12:	2301      	movs	r3, #1
   87e14:	9605      	str	r6, [sp, #20]
   87e16:	b2d6      	uxtb	r6, r2
   87e18:	f7ff bad7 	b.w	873ca <_vfiprintf_r+0x28a>
   87e1c:	f343 18c0 	sbfx	r8, r3, #7, #1
   87e20:	b25e      	sxtb	r6, r3
   87e22:	4643      	mov	r3, r8
   87e24:	f7ff ba74 	b.w	87310 <_vfiprintf_r+0x1d0>
   87e28:	9e05      	ldr	r6, [sp, #20]
   87e2a:	4690      	mov	r8, r2
   87e2c:	f856 3b04 	ldr.w	r3, [r6], #4
   87e30:	9605      	str	r6, [sp, #20]
   87e32:	b2de      	uxtb	r6, r3
   87e34:	f7ff bac6 	b.w	873c4 <_vfiprintf_r+0x284>
   87e38:	9e05      	ldr	r6, [sp, #20]
   87e3a:	4688      	mov	r8, r1
   87e3c:	f856 2b04 	ldr.w	r2, [r6], #4
   87e40:	9605      	str	r6, [sp, #20]
   87e42:	b2d6      	uxtb	r6, r2
   87e44:	e70d      	b.n	87c62 <_vfiprintf_r+0xb22>
   87e46:	9e05      	ldr	r6, [sp, #20]
   87e48:	9a04      	ldr	r2, [sp, #16]
   87e4a:	f856 3b04 	ldr.w	r3, [r6], #4
   87e4e:	801a      	strh	r2, [r3, #0]
   87e50:	9605      	str	r6, [sp, #20]
   87e52:	f7ff b9ae 	b.w	871b2 <_vfiprintf_r+0x72>
   87e56:	6d88      	ldr	r0, [r1, #88]	; 0x58
   87e58:	f001 fde6 	bl	89a28 <__retarget_lock_release_recursive>
   87e5c:	f7ff ba99 	b.w	87392 <_vfiprintf_r+0x252>
   87e60:	f8cd b004 	str.w	fp, [sp, #4]
   87e64:	9605      	str	r6, [sp, #20]
   87e66:	4683      	mov	fp, r0
   87e68:	f7ff ba6c 	b.w	87344 <_vfiprintf_r+0x204>
   87e6c:	9911      	ldr	r1, [sp, #68]	; 0x44
   87e6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87e70:	f8df a060 	ldr.w	sl, [pc, #96]	; 87ed4 <_vfiprintf_r+0xd94>
   87e74:	3101      	adds	r1, #1
   87e76:	e5f0      	b.n	87a5a <_vfiprintf_r+0x91a>
   87e78:	9902      	ldr	r1, [sp, #8]
   87e7a:	9806      	ldr	r0, [sp, #24]
   87e7c:	aa10      	add	r2, sp, #64	; 0x40
   87e7e:	f7ff f923 	bl	870c8 <__sprint_r.part.0>
   87e82:	2800      	cmp	r0, #0
   87e84:	f43f aae3 	beq.w	8744e <_vfiprintf_r+0x30e>
   87e88:	f7ff bae3 	b.w	87452 <_vfiprintf_r+0x312>
   87e8c:	9811      	ldr	r0, [sp, #68]	; 0x44
   87e8e:	f8df a044 	ldr.w	sl, [pc, #68]	; 87ed4 <_vfiprintf_r+0xd94>
   87e92:	3001      	adds	r0, #1
   87e94:	e631      	b.n	87afa <_vfiprintf_r+0x9ba>
   87e96:	9b02      	ldr	r3, [sp, #8]
   87e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   87e9a:	07db      	lsls	r3, r3, #31
   87e9c:	d407      	bmi.n	87eae <_vfiprintf_r+0xd6e>
   87e9e:	9b02      	ldr	r3, [sp, #8]
   87ea0:	899b      	ldrh	r3, [r3, #12]
   87ea2:	059f      	lsls	r7, r3, #22
   87ea4:	d403      	bmi.n	87eae <_vfiprintf_r+0xd6e>
   87ea6:	9b02      	ldr	r3, [sp, #8]
   87ea8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   87eaa:	f001 fdbd 	bl	89a28 <__retarget_lock_release_recursive>
   87eae:	f04f 33ff 	mov.w	r3, #4294967295
   87eb2:	9304      	str	r3, [sp, #16]
   87eb4:	f7ff bad6 	b.w	87464 <_vfiprintf_r+0x324>
   87eb8:	9a05      	ldr	r2, [sp, #20]
   87eba:	787b      	ldrb	r3, [r7, #1]
   87ebc:	460f      	mov	r7, r1
   87ebe:	f852 1b04 	ldr.w	r1, [r2], #4
   87ec2:	9205      	str	r2, [sp, #20]
   87ec4:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   87ec8:	f7ff b993 	b.w	871f2 <_vfiprintf_r+0xb2>
   87ecc:	0008c25c 	.word	0x0008c25c
   87ed0:	0008c298 	.word	0x0008c298
   87ed4:	0008c288 	.word	0x0008c288

00087ed8 <__sbprintf>:
   87ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
   87eda:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   87ede:	4615      	mov	r5, r2
   87ee0:	2400      	movs	r4, #0
   87ee2:	4606      	mov	r6, r0
   87ee4:	461f      	mov	r7, r3
   87ee6:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   87eea:	ab1a      	add	r3, sp, #104	; 0x68
   87eec:	9300      	str	r3, [sp, #0]
   87eee:	9304      	str	r3, [sp, #16]
   87ef0:	898b      	ldrh	r3, [r1, #12]
   87ef2:	a816      	add	r0, sp, #88	; 0x58
   87ef4:	f023 0302 	bic.w	r3, r3, #2
   87ef8:	f8ad 300c 	strh.w	r3, [sp, #12]
   87efc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87efe:	9406      	str	r4, [sp, #24]
   87f00:	9319      	str	r3, [sp, #100]	; 0x64
   87f02:	89cb      	ldrh	r3, [r1, #14]
   87f04:	460c      	mov	r4, r1
   87f06:	f8ad 300e 	strh.w	r3, [sp, #14]
   87f0a:	69cb      	ldr	r3, [r1, #28]
   87f0c:	f8cd c008 	str.w	ip, [sp, #8]
   87f10:	9307      	str	r3, [sp, #28]
   87f12:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87f14:	f8cd c014 	str.w	ip, [sp, #20]
   87f18:	9309      	str	r3, [sp, #36]	; 0x24
   87f1a:	f001 fd7f 	bl	89a1c <__retarget_lock_init_recursive>
   87f1e:	462a      	mov	r2, r5
   87f20:	463b      	mov	r3, r7
   87f22:	4669      	mov	r1, sp
   87f24:	4630      	mov	r0, r6
   87f26:	f7ff f90b 	bl	87140 <_vfiprintf_r>
   87f2a:	1e05      	subs	r5, r0, #0
   87f2c:	db07      	blt.n	87f3e <__sbprintf+0x66>
   87f2e:	4669      	mov	r1, sp
   87f30:	4630      	mov	r0, r6
   87f32:	f001 f91d 	bl	89170 <_fflush_r>
   87f36:	2800      	cmp	r0, #0
   87f38:	bf18      	it	ne
   87f3a:	f04f 35ff 	movne.w	r5, #4294967295
   87f3e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   87f42:	065b      	lsls	r3, r3, #25
   87f44:	d503      	bpl.n	87f4e <__sbprintf+0x76>
   87f46:	89a3      	ldrh	r3, [r4, #12]
   87f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87f4c:	81a3      	strh	r3, [r4, #12]
   87f4e:	9816      	ldr	r0, [sp, #88]	; 0x58
   87f50:	f001 fd66 	bl	89a20 <__retarget_lock_close_recursive>
   87f54:	4628      	mov	r0, r5
   87f56:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   87f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087f5c <__swsetup_r>:
   87f5c:	b538      	push	{r3, r4, r5, lr}
   87f5e:	4b33      	ldr	r3, [pc, #204]	; (8802c <__swsetup_r+0xd0>)
   87f60:	4605      	mov	r5, r0
   87f62:	681b      	ldr	r3, [r3, #0]
   87f64:	460c      	mov	r4, r1
   87f66:	b10b      	cbz	r3, 87f6c <__swsetup_r+0x10>
   87f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   87f6a:	b312      	cbz	r2, 87fb2 <__swsetup_r+0x56>
   87f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87f70:	0718      	lsls	r0, r3, #28
   87f72:	b29a      	uxth	r2, r3
   87f74:	d525      	bpl.n	87fc2 <__swsetup_r+0x66>
   87f76:	6921      	ldr	r1, [r4, #16]
   87f78:	2900      	cmp	r1, #0
   87f7a:	d02d      	beq.n	87fd8 <__swsetup_r+0x7c>
   87f7c:	f012 0001 	ands.w	r0, r2, #1
   87f80:	d007      	beq.n	87f92 <__swsetup_r+0x36>
   87f82:	2500      	movs	r5, #0
   87f84:	6960      	ldr	r0, [r4, #20]
   87f86:	60a5      	str	r5, [r4, #8]
   87f88:	4240      	negs	r0, r0
   87f8a:	61a0      	str	r0, [r4, #24]
   87f8c:	b139      	cbz	r1, 87f9e <__swsetup_r+0x42>
   87f8e:	2000      	movs	r0, #0
   87f90:	bd38      	pop	{r3, r4, r5, pc}
   87f92:	0795      	lsls	r5, r2, #30
   87f94:	bf58      	it	pl
   87f96:	6960      	ldrpl	r0, [r4, #20]
   87f98:	60a0      	str	r0, [r4, #8]
   87f9a:	2900      	cmp	r1, #0
   87f9c:	d1f7      	bne.n	87f8e <__swsetup_r+0x32>
   87f9e:	0612      	lsls	r2, r2, #24
   87fa0:	bf58      	it	pl
   87fa2:	4608      	movpl	r0, r1
   87fa4:	d5f4      	bpl.n	87f90 <__swsetup_r+0x34>
   87fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87faa:	f04f 30ff 	mov.w	r0, #4294967295
   87fae:	81a3      	strh	r3, [r4, #12]
   87fb0:	bd38      	pop	{r3, r4, r5, pc}
   87fb2:	4618      	mov	r0, r3
   87fb4:	f001 f910 	bl	891d8 <__sinit>
   87fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87fbc:	0718      	lsls	r0, r3, #28
   87fbe:	b29a      	uxth	r2, r3
   87fc0:	d4d9      	bmi.n	87f76 <__swsetup_r+0x1a>
   87fc2:	06d1      	lsls	r1, r2, #27
   87fc4:	d52a      	bpl.n	8801c <__swsetup_r+0xc0>
   87fc6:	0752      	lsls	r2, r2, #29
   87fc8:	d414      	bmi.n	87ff4 <__swsetup_r+0x98>
   87fca:	6921      	ldr	r1, [r4, #16]
   87fcc:	f043 0308 	orr.w	r3, r3, #8
   87fd0:	81a3      	strh	r3, [r4, #12]
   87fd2:	b29a      	uxth	r2, r3
   87fd4:	2900      	cmp	r1, #0
   87fd6:	d1d1      	bne.n	87f7c <__swsetup_r+0x20>
   87fd8:	f402 7020 	and.w	r0, r2, #640	; 0x280
   87fdc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   87fe0:	d0cc      	beq.n	87f7c <__swsetup_r+0x20>
   87fe2:	4621      	mov	r1, r4
   87fe4:	4628      	mov	r0, r5
   87fe6:	f001 fd21 	bl	89a2c <__smakebuf_r>
   87fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87fee:	6921      	ldr	r1, [r4, #16]
   87ff0:	b29a      	uxth	r2, r3
   87ff2:	e7c3      	b.n	87f7c <__swsetup_r+0x20>
   87ff4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87ff6:	b151      	cbz	r1, 8800e <__swsetup_r+0xb2>
   87ff8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   87ffc:	4291      	cmp	r1, r2
   87ffe:	d004      	beq.n	8800a <__swsetup_r+0xae>
   88000:	4628      	mov	r0, r5
   88002:	f001 fa65 	bl	894d0 <_free_r>
   88006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8800a:	2200      	movs	r2, #0
   8800c:	6322      	str	r2, [r4, #48]	; 0x30
   8800e:	2200      	movs	r2, #0
   88010:	6921      	ldr	r1, [r4, #16]
   88012:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   88016:	e9c4 1200 	strd	r1, r2, [r4]
   8801a:	e7d7      	b.n	87fcc <__swsetup_r+0x70>
   8801c:	2209      	movs	r2, #9
   8801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88022:	602a      	str	r2, [r5, #0]
   88024:	f04f 30ff 	mov.w	r0, #4294967295
   88028:	81a3      	strh	r3, [r4, #12]
   8802a:	bd38      	pop	{r3, r4, r5, pc}
   8802c:	200003e8 	.word	0x200003e8

00088030 <register_fini>:
   88030:	4b02      	ldr	r3, [pc, #8]	; (8803c <register_fini+0xc>)
   88032:	b113      	cbz	r3, 8803a <register_fini+0xa>
   88034:	4802      	ldr	r0, [pc, #8]	; (88040 <register_fini+0x10>)
   88036:	f000 b805 	b.w	88044 <atexit>
   8803a:	4770      	bx	lr
   8803c:	00000000 	.word	0x00000000
   88040:	000892fd 	.word	0x000892fd

00088044 <atexit>:
   88044:	2300      	movs	r3, #0
   88046:	4601      	mov	r1, r0
   88048:	461a      	mov	r2, r3
   8804a:	4618      	mov	r0, r3
   8804c:	f003 b862 	b.w	8b114 <__register_exitproc>

00088050 <quorem>:
   88050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88054:	6903      	ldr	r3, [r0, #16]
   88056:	690c      	ldr	r4, [r1, #16]
   88058:	b085      	sub	sp, #20
   8805a:	42a3      	cmp	r3, r4
   8805c:	f2c0 8089 	blt.w	88172 <quorem+0x122>
   88060:	3c01      	subs	r4, #1
   88062:	f101 0514 	add.w	r5, r1, #20
   88066:	00a3      	lsls	r3, r4, #2
   88068:	f100 0814 	add.w	r8, r0, #20
   8806c:	9301      	str	r3, [sp, #4]
   8806e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   88072:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   88076:	3301      	adds	r3, #1
   88078:	468a      	mov	sl, r1
   8807a:	429a      	cmp	r2, r3
   8807c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   88080:	4681      	mov	r9, r0
   88082:	fbb2 f6f3 	udiv	r6, r2, r3
   88086:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   8808a:	9102      	str	r1, [sp, #8]
   8808c:	d33a      	bcc.n	88104 <quorem+0xb4>
   8808e:	2100      	movs	r1, #0
   88090:	46ae      	mov	lr, r5
   88092:	4640      	mov	r0, r8
   88094:	460a      	mov	r2, r1
   88096:	46a3      	mov	fp, r4
   88098:	9503      	str	r5, [sp, #12]
   8809a:	f85e 5b04 	ldr.w	r5, [lr], #4
   8809e:	6804      	ldr	r4, [r0, #0]
   880a0:	b2ab      	uxth	r3, r5
   880a2:	fb06 1303 	mla	r3, r6, r3, r1
   880a6:	0c2d      	lsrs	r5, r5, #16
   880a8:	0c19      	lsrs	r1, r3, #16
   880aa:	fb06 1105 	mla	r1, r6, r5, r1
   880ae:	b29b      	uxth	r3, r3
   880b0:	1ad2      	subs	r2, r2, r3
   880b2:	fa1f fc84 	uxth.w	ip, r4
   880b6:	4494      	add	ip, r2
   880b8:	b28a      	uxth	r2, r1
   880ba:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   880be:	eb02 422c 	add.w	r2, r2, ip, asr #16
   880c2:	fa1f fc8c 	uxth.w	ip, ip
   880c6:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   880ca:	4577      	cmp	r7, lr
   880cc:	f840 3b04 	str.w	r3, [r0], #4
   880d0:	ea4f 4111 	mov.w	r1, r1, lsr #16
   880d4:	ea4f 4222 	mov.w	r2, r2, asr #16
   880d8:	d2df      	bcs.n	8809a <quorem+0x4a>
   880da:	9b01      	ldr	r3, [sp, #4]
   880dc:	465c      	mov	r4, fp
   880de:	f858 3003 	ldr.w	r3, [r8, r3]
   880e2:	9d03      	ldr	r5, [sp, #12]
   880e4:	b973      	cbnz	r3, 88104 <quorem+0xb4>
   880e6:	9b02      	ldr	r3, [sp, #8]
   880e8:	3b04      	subs	r3, #4
   880ea:	4598      	cmp	r8, r3
   880ec:	d304      	bcc.n	880f8 <quorem+0xa8>
   880ee:	e007      	b.n	88100 <quorem+0xb0>
   880f0:	4598      	cmp	r8, r3
   880f2:	f104 34ff 	add.w	r4, r4, #4294967295
   880f6:	d203      	bcs.n	88100 <quorem+0xb0>
   880f8:	f853 2904 	ldr.w	r2, [r3], #-4
   880fc:	2a00      	cmp	r2, #0
   880fe:	d0f7      	beq.n	880f0 <quorem+0xa0>
   88100:	f8c9 4010 	str.w	r4, [r9, #16]
   88104:	4651      	mov	r1, sl
   88106:	4648      	mov	r0, r9
   88108:	f002 fb46 	bl	8a798 <__mcmp>
   8810c:	2800      	cmp	r0, #0
   8810e:	db2c      	blt.n	8816a <quorem+0x11a>
   88110:	4640      	mov	r0, r8
   88112:	2300      	movs	r3, #0
   88114:	3601      	adds	r6, #1
   88116:	f855 1b04 	ldr.w	r1, [r5], #4
   8811a:	f8d0 c000 	ldr.w	ip, [r0]
   8811e:	b28a      	uxth	r2, r1
   88120:	1a9a      	subs	r2, r3, r2
   88122:	fa1f fe8c 	uxth.w	lr, ip
   88126:	0c0b      	lsrs	r3, r1, #16
   88128:	4472      	add	r2, lr
   8812a:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   8812e:	eb03 4322 	add.w	r3, r3, r2, asr #16
   88132:	b292      	uxth	r2, r2
   88134:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   88138:	42af      	cmp	r7, r5
   8813a:	f840 2b04 	str.w	r2, [r0], #4
   8813e:	ea4f 4323 	mov.w	r3, r3, asr #16
   88142:	d2e8      	bcs.n	88116 <quorem+0xc6>
   88144:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   88148:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   8814c:	b96a      	cbnz	r2, 8816a <quorem+0x11a>
   8814e:	3b04      	subs	r3, #4
   88150:	4598      	cmp	r8, r3
   88152:	d304      	bcc.n	8815e <quorem+0x10e>
   88154:	e007      	b.n	88166 <quorem+0x116>
   88156:	4598      	cmp	r8, r3
   88158:	f104 34ff 	add.w	r4, r4, #4294967295
   8815c:	d203      	bcs.n	88166 <quorem+0x116>
   8815e:	f853 2904 	ldr.w	r2, [r3], #-4
   88162:	2a00      	cmp	r2, #0
   88164:	d0f7      	beq.n	88156 <quorem+0x106>
   88166:	f8c9 4010 	str.w	r4, [r9, #16]
   8816a:	4630      	mov	r0, r6
   8816c:	b005      	add	sp, #20
   8816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88172:	2000      	movs	r0, #0
   88174:	b005      	add	sp, #20
   88176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8817a:	bf00      	nop
   8817c:	0000      	movs	r0, r0
   8817e:	0000      	movs	r0, r0

00088180 <_dtoa_r>:
   88180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88184:	4690      	mov	r8, r2
   88186:	4699      	mov	r9, r3
   88188:	6c01      	ldr	r1, [r0, #64]	; 0x40
   8818a:	b099      	sub	sp, #100	; 0x64
   8818c:	4604      	mov	r4, r0
   8818e:	e9cd 8904 	strd	r8, r9, [sp, #16]
   88192:	9d25      	ldr	r5, [sp, #148]	; 0x94
   88194:	b141      	cbz	r1, 881a8 <_dtoa_r+0x28>
   88196:	2301      	movs	r3, #1
   88198:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8819a:	4093      	lsls	r3, r2
   8819c:	608b      	str	r3, [r1, #8]
   8819e:	604a      	str	r2, [r1, #4]
   881a0:	f002 f8a4 	bl	8a2ec <_Bfree>
   881a4:	2300      	movs	r3, #0
   881a6:	6423      	str	r3, [r4, #64]	; 0x40
   881a8:	f1b9 0a00 	subs.w	sl, r9, #0
   881ac:	bfb4      	ite	lt
   881ae:	2301      	movlt	r3, #1
   881b0:	2300      	movge	r3, #0
   881b2:	602b      	str	r3, [r5, #0]
   881b4:	4b76      	ldr	r3, [pc, #472]	; (88390 <_dtoa_r+0x210>)
   881b6:	bfbc      	itt	lt
   881b8:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   881bc:	f8cd a014 	strlt.w	sl, [sp, #20]
   881c0:	ea33 030a 	bics.w	r3, r3, sl
   881c4:	f000 80aa 	beq.w	8831c <_dtoa_r+0x19c>
   881c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   881cc:	4610      	mov	r0, r2
   881ce:	4619      	mov	r1, r3
   881d0:	2200      	movs	r2, #0
   881d2:	2300      	movs	r3, #0
   881d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   881d8:	f003 fd92 	bl	8bd00 <__aeabi_dcmpeq>
   881dc:	4607      	mov	r7, r0
   881de:	b170      	cbz	r0, 881fe <_dtoa_r+0x7e>
   881e0:	2301      	movs	r3, #1
   881e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   881e4:	6013      	str	r3, [r2, #0]
   881e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   881e8:	2b00      	cmp	r3, #0
   881ea:	f000 82e6 	beq.w	887ba <_dtoa_r+0x63a>
   881ee:	4869      	ldr	r0, [pc, #420]	; (88394 <_dtoa_r+0x214>)
   881f0:	6018      	str	r0, [r3, #0]
   881f2:	1e43      	subs	r3, r0, #1
   881f4:	9303      	str	r3, [sp, #12]
   881f6:	9803      	ldr	r0, [sp, #12]
   881f8:	b019      	add	sp, #100	; 0x64
   881fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   881fe:	ab16      	add	r3, sp, #88	; 0x58
   88200:	9301      	str	r3, [sp, #4]
   88202:	ab17      	add	r3, sp, #92	; 0x5c
   88204:	9300      	str	r3, [sp, #0]
   88206:	4620      	mov	r0, r4
   88208:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8820c:	f002 fb8a 	bl	8a924 <__d2b>
   88210:	ea5f 561a 	movs.w	r6, sl, lsr #20
   88214:	4605      	mov	r5, r0
   88216:	f040 8097 	bne.w	88348 <_dtoa_r+0x1c8>
   8821a:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   8821e:	443e      	add	r6, r7
   88220:	f206 4032 	addw	r0, r6, #1074	; 0x432
   88224:	2820      	cmp	r0, #32
   88226:	f340 83b7 	ble.w	88998 <_dtoa_r+0x818>
   8822a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   8822e:	fa0a fa00 	lsl.w	sl, sl, r0
   88232:	f206 4012 	addw	r0, r6, #1042	; 0x412
   88236:	fa28 f000 	lsr.w	r0, r8, r0
   8823a:	ea4a 0000 	orr.w	r0, sl, r0
   8823e:	f003 fa7d 	bl	8b73c <__aeabi_ui2d>
   88242:	2301      	movs	r3, #1
   88244:	3e01      	subs	r6, #1
   88246:	930f      	str	r3, [sp, #60]	; 0x3c
   88248:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8824c:	2200      	movs	r2, #0
   8824e:	4b52      	ldr	r3, [pc, #328]	; (88398 <_dtoa_r+0x218>)
   88250:	f003 f936 	bl	8b4c0 <__aeabi_dsub>
   88254:	a348      	add	r3, pc, #288	; (adr r3, 88378 <_dtoa_r+0x1f8>)
   88256:	e9d3 2300 	ldrd	r2, r3, [r3]
   8825a:	f003 fae9 	bl	8b830 <__aeabi_dmul>
   8825e:	a348      	add	r3, pc, #288	; (adr r3, 88380 <_dtoa_r+0x200>)
   88260:	e9d3 2300 	ldrd	r2, r3, [r3]
   88264:	f003 f92e 	bl	8b4c4 <__adddf3>
   88268:	4680      	mov	r8, r0
   8826a:	4630      	mov	r0, r6
   8826c:	4689      	mov	r9, r1
   8826e:	f003 fa75 	bl	8b75c <__aeabi_i2d>
   88272:	a345      	add	r3, pc, #276	; (adr r3, 88388 <_dtoa_r+0x208>)
   88274:	e9d3 2300 	ldrd	r2, r3, [r3]
   88278:	f003 fada 	bl	8b830 <__aeabi_dmul>
   8827c:	4602      	mov	r2, r0
   8827e:	460b      	mov	r3, r1
   88280:	4640      	mov	r0, r8
   88282:	4649      	mov	r1, r9
   88284:	f003 f91e 	bl	8b4c4 <__adddf3>
   88288:	4680      	mov	r8, r0
   8828a:	4689      	mov	r9, r1
   8828c:	f003 fd80 	bl	8bd90 <__aeabi_d2iz>
   88290:	2200      	movs	r2, #0
   88292:	4683      	mov	fp, r0
   88294:	2300      	movs	r3, #0
   88296:	4640      	mov	r0, r8
   88298:	4649      	mov	r1, r9
   8829a:	f003 fd3b 	bl	8bd14 <__aeabi_dcmplt>
   8829e:	2800      	cmp	r0, #0
   882a0:	f040 827e 	bne.w	887a0 <_dtoa_r+0x620>
   882a4:	f1bb 0f16 	cmp.w	fp, #22
   882a8:	f200 826d 	bhi.w	88786 <_dtoa_r+0x606>
   882ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   882b0:	4b3a      	ldr	r3, [pc, #232]	; (8839c <_dtoa_r+0x21c>)
   882b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   882b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   882ba:	f003 fd2b 	bl	8bd14 <__aeabi_dcmplt>
   882be:	2800      	cmp	r0, #0
   882c0:	d072      	beq.n	883a8 <_dtoa_r+0x228>
   882c2:	2300      	movs	r3, #0
   882c4:	1bbe      	subs	r6, r7, r6
   882c6:	930e      	str	r3, [sp, #56]	; 0x38
   882c8:	1e73      	subs	r3, r6, #1
   882ca:	f10b 3bff 	add.w	fp, fp, #4294967295
   882ce:	9306      	str	r3, [sp, #24]
   882d0:	f100 8260 	bmi.w	88794 <_dtoa_r+0x614>
   882d4:	2300      	movs	r3, #0
   882d6:	9309      	str	r3, [sp, #36]	; 0x24
   882d8:	f1bb 0f00 	cmp.w	fp, #0
   882dc:	da6b      	bge.n	883b6 <_dtoa_r+0x236>
   882de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   882e0:	f8cd b01c 	str.w	fp, [sp, #28]
   882e4:	eba3 030b 	sub.w	r3, r3, fp
   882e8:	9309      	str	r3, [sp, #36]	; 0x24
   882ea:	f1cb 0300 	rsb	r3, fp, #0
   882ee:	930d      	str	r3, [sp, #52]	; 0x34
   882f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   882f2:	f04f 0b00 	mov.w	fp, #0
   882f6:	2b09      	cmp	r3, #9
   882f8:	d866      	bhi.n	883c8 <_dtoa_r+0x248>
   882fa:	2b05      	cmp	r3, #5
   882fc:	f340 834a 	ble.w	88994 <_dtoa_r+0x814>
   88300:	2600      	movs	r6, #0
   88302:	3b04      	subs	r3, #4
   88304:	9322      	str	r3, [sp, #136]	; 0x88
   88306:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88308:	3b02      	subs	r3, #2
   8830a:	2b03      	cmp	r3, #3
   8830c:	f200 866c 	bhi.w	88fe8 <_dtoa_r+0xe68>
   88310:	e8df f013 	tbh	[pc, r3, lsl #1]
   88314:	045e0461 	.word	0x045e0461
   88318:	04380455 	.word	0x04380455
   8831c:	f242 730f 	movw	r3, #9999	; 0x270f
   88320:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88322:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   88326:	6013      	str	r3, [r2, #0]
   88328:	ea5a 0308 	orrs.w	r3, sl, r8
   8832c:	d11a      	bne.n	88364 <_dtoa_r+0x1e4>
   8832e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88330:	2b00      	cmp	r3, #0
   88332:	f000 8668 	beq.w	89006 <_dtoa_r+0xe86>
   88336:	4b1a      	ldr	r3, [pc, #104]	; (883a0 <_dtoa_r+0x220>)
   88338:	9303      	str	r3, [sp, #12]
   8833a:	3308      	adds	r3, #8
   8833c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8833e:	9803      	ldr	r0, [sp, #12]
   88340:	6013      	str	r3, [r2, #0]
   88342:	b019      	add	sp, #100	; 0x64
   88344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88348:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   8834c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88350:	4608      	mov	r0, r1
   88352:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   88356:	970f      	str	r7, [sp, #60]	; 0x3c
   88358:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   8835c:	9f16      	ldr	r7, [sp, #88]	; 0x58
   8835e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   88362:	e773      	b.n	8824c <_dtoa_r+0xcc>
   88364:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88366:	2b00      	cmp	r3, #0
   88368:	f040 83ef 	bne.w	88b4a <_dtoa_r+0x9ca>
   8836c:	4b0d      	ldr	r3, [pc, #52]	; (883a4 <_dtoa_r+0x224>)
   8836e:	9303      	str	r3, [sp, #12]
   88370:	e741      	b.n	881f6 <_dtoa_r+0x76>
   88372:	bf00      	nop
   88374:	f3af 8000 	nop.w
   88378:	636f4361 	.word	0x636f4361
   8837c:	3fd287a7 	.word	0x3fd287a7
   88380:	8b60c8b3 	.word	0x8b60c8b3
   88384:	3fc68a28 	.word	0x3fc68a28
   88388:	509f79fb 	.word	0x509f79fb
   8838c:	3fd34413 	.word	0x3fd34413
   88390:	7ff00000 	.word	0x7ff00000
   88394:	0008c265 	.word	0x0008c265
   88398:	3ff80000 	.word	0x3ff80000
   8839c:	0008c408 	.word	0x0008c408
   883a0:	0008c2ac 	.word	0x0008c2ac
   883a4:	0008c2a8 	.word	0x0008c2a8
   883a8:	1bbe      	subs	r6, r7, r6
   883aa:	1e73      	subs	r3, r6, #1
   883ac:	9306      	str	r3, [sp, #24]
   883ae:	f100 848a 	bmi.w	88cc6 <_dtoa_r+0xb46>
   883b2:	900e      	str	r0, [sp, #56]	; 0x38
   883b4:	9009      	str	r0, [sp, #36]	; 0x24
   883b6:	9b06      	ldr	r3, [sp, #24]
   883b8:	445b      	add	r3, fp
   883ba:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   883be:	2300      	movs	r3, #0
   883c0:	930d      	str	r3, [sp, #52]	; 0x34
   883c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   883c4:	2b09      	cmp	r3, #9
   883c6:	d998      	bls.n	882fa <_dtoa_r+0x17a>
   883c8:	2300      	movs	r3, #0
   883ca:	9322      	str	r3, [sp, #136]	; 0x88
   883cc:	f04f 33ff 	mov.w	r3, #4294967295
   883d0:	2601      	movs	r6, #1
   883d2:	9308      	str	r3, [sp, #32]
   883d4:	2300      	movs	r3, #0
   883d6:	960c      	str	r6, [sp, #48]	; 0x30
   883d8:	9323      	str	r3, [sp, #140]	; 0x8c
   883da:	2100      	movs	r1, #0
   883dc:	9b08      	ldr	r3, [sp, #32]
   883de:	6461      	str	r1, [r4, #68]	; 0x44
   883e0:	9312      	str	r3, [sp, #72]	; 0x48
   883e2:	4620      	mov	r0, r4
   883e4:	f001 ff5c 	bl	8a2a0 <_Balloc>
   883e8:	9003      	str	r0, [sp, #12]
   883ea:	2800      	cmp	r0, #0
   883ec:	f000 8604 	beq.w	88ff8 <_dtoa_r+0xe78>
   883f0:	9b03      	ldr	r3, [sp, #12]
   883f2:	6423      	str	r3, [r4, #64]	; 0x40
   883f4:	9b08      	ldr	r3, [sp, #32]
   883f6:	2b0e      	cmp	r3, #14
   883f8:	f200 8114 	bhi.w	88624 <_dtoa_r+0x4a4>
   883fc:	2e00      	cmp	r6, #0
   883fe:	f000 8111 	beq.w	88624 <_dtoa_r+0x4a4>
   88402:	9907      	ldr	r1, [sp, #28]
   88404:	2900      	cmp	r1, #0
   88406:	f340 8460 	ble.w	88cca <_dtoa_r+0xb4a>
   8840a:	4baf      	ldr	r3, [pc, #700]	; (886c8 <_dtoa_r+0x548>)
   8840c:	f001 020f 	and.w	r2, r1, #15
   88410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88414:	460a      	mov	r2, r1
   88416:	e9d3 6700 	ldrd	r6, r7, [r3]
   8841a:	ea4f 1821 	mov.w	r8, r1, asr #4
   8841e:	05d1      	lsls	r1, r2, #23
   88420:	f140 8417 	bpl.w	88c52 <_dtoa_r+0xad2>
   88424:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88428:	4ba8      	ldr	r3, [pc, #672]	; (886cc <_dtoa_r+0x54c>)
   8842a:	f04f 0a03 	mov.w	sl, #3
   8842e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   88432:	f003 fb27 	bl	8ba84 <__aeabi_ddiv>
   88436:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8843a:	f008 080f 	and.w	r8, r8, #15
   8843e:	f1b8 0f00 	cmp.w	r8, #0
   88442:	d013      	beq.n	8846c <_dtoa_r+0x2ec>
   88444:	f8df 9284 	ldr.w	r9, [pc, #644]	; 886cc <_dtoa_r+0x54c>
   88448:	f018 0f01 	tst.w	r8, #1
   8844c:	d009      	beq.n	88462 <_dtoa_r+0x2e2>
   8844e:	e9d9 2300 	ldrd	r2, r3, [r9]
   88452:	4630      	mov	r0, r6
   88454:	4639      	mov	r1, r7
   88456:	f003 f9eb 	bl	8b830 <__aeabi_dmul>
   8845a:	4606      	mov	r6, r0
   8845c:	460f      	mov	r7, r1
   8845e:	f10a 0a01 	add.w	sl, sl, #1
   88462:	ea5f 0868 	movs.w	r8, r8, asr #1
   88466:	f109 0908 	add.w	r9, r9, #8
   8846a:	d1ed      	bne.n	88448 <_dtoa_r+0x2c8>
   8846c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88470:	4632      	mov	r2, r6
   88472:	463b      	mov	r3, r7
   88474:	f003 fb06 	bl	8ba84 <__aeabi_ddiv>
   88478:	4680      	mov	r8, r0
   8847a:	4689      	mov	r9, r1
   8847c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8847e:	b143      	cbz	r3, 88492 <_dtoa_r+0x312>
   88480:	2200      	movs	r2, #0
   88482:	4640      	mov	r0, r8
   88484:	4649      	mov	r1, r9
   88486:	4b92      	ldr	r3, [pc, #584]	; (886d0 <_dtoa_r+0x550>)
   88488:	f003 fc44 	bl	8bd14 <__aeabi_dcmplt>
   8848c:	2800      	cmp	r0, #0
   8848e:	f040 8535 	bne.w	88efc <_dtoa_r+0xd7c>
   88492:	4650      	mov	r0, sl
   88494:	f003 f962 	bl	8b75c <__aeabi_i2d>
   88498:	4642      	mov	r2, r8
   8849a:	464b      	mov	r3, r9
   8849c:	f003 f9c8 	bl	8b830 <__aeabi_dmul>
   884a0:	4b8c      	ldr	r3, [pc, #560]	; (886d4 <_dtoa_r+0x554>)
   884a2:	2200      	movs	r2, #0
   884a4:	f003 f80e 	bl	8b4c4 <__adddf3>
   884a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   884ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   884b0:	9311      	str	r3, [sp, #68]	; 0x44
   884b2:	9b08      	ldr	r3, [sp, #32]
   884b4:	2b00      	cmp	r3, #0
   884b6:	f000 8097 	beq.w	885e8 <_dtoa_r+0x468>
   884ba:	9b07      	ldr	r3, [sp, #28]
   884bc:	9314      	str	r3, [sp, #80]	; 0x50
   884be:	9b08      	ldr	r3, [sp, #32]
   884c0:	9313      	str	r3, [sp, #76]	; 0x4c
   884c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   884c4:	2b00      	cmp	r3, #0
   884c6:	f000 84a9 	beq.w	88e1c <_dtoa_r+0xc9c>
   884ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   884cc:	4b7e      	ldr	r3, [pc, #504]	; (886c8 <_dtoa_r+0x548>)
   884ce:	2000      	movs	r0, #0
   884d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   884d4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   884d8:	497f      	ldr	r1, [pc, #508]	; (886d8 <_dtoa_r+0x558>)
   884da:	f003 fad3 	bl	8ba84 <__aeabi_ddiv>
   884de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   884e2:	f002 ffed 	bl	8b4c0 <__aeabi_dsub>
   884e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   884ea:	4649      	mov	r1, r9
   884ec:	4640      	mov	r0, r8
   884ee:	f003 fc4f 	bl	8bd90 <__aeabi_d2iz>
   884f2:	4607      	mov	r7, r0
   884f4:	f003 f932 	bl	8b75c <__aeabi_i2d>
   884f8:	4602      	mov	r2, r0
   884fa:	460b      	mov	r3, r1
   884fc:	4640      	mov	r0, r8
   884fe:	4649      	mov	r1, r9
   88500:	f002 ffde 	bl	8b4c0 <__aeabi_dsub>
   88504:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88508:	9e03      	ldr	r6, [sp, #12]
   8850a:	3730      	adds	r7, #48	; 0x30
   8850c:	f806 7b01 	strb.w	r7, [r6], #1
   88510:	4680      	mov	r8, r0
   88512:	4689      	mov	r9, r1
   88514:	f003 fbfe 	bl	8bd14 <__aeabi_dcmplt>
   88518:	2800      	cmp	r0, #0
   8851a:	f040 852e 	bne.w	88f7a <_dtoa_r+0xdfa>
   8851e:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   88522:	2700      	movs	r7, #0
   88524:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   88528:	9510      	str	r5, [sp, #64]	; 0x40
   8852a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   8852c:	9413      	str	r4, [sp, #76]	; 0x4c
   8852e:	e02a      	b.n	88586 <_dtoa_r+0x406>
   88530:	3701      	adds	r7, #1
   88532:	42af      	cmp	r7, r5
   88534:	f280 852e 	bge.w	88f94 <_dtoa_r+0xe14>
   88538:	4650      	mov	r0, sl
   8853a:	4659      	mov	r1, fp
   8853c:	2200      	movs	r2, #0
   8853e:	4b67      	ldr	r3, [pc, #412]	; (886dc <_dtoa_r+0x55c>)
   88540:	f003 f976 	bl	8b830 <__aeabi_dmul>
   88544:	2200      	movs	r2, #0
   88546:	4b65      	ldr	r3, [pc, #404]	; (886dc <_dtoa_r+0x55c>)
   88548:	4682      	mov	sl, r0
   8854a:	468b      	mov	fp, r1
   8854c:	4640      	mov	r0, r8
   8854e:	4649      	mov	r1, r9
   88550:	f003 f96e 	bl	8b830 <__aeabi_dmul>
   88554:	4689      	mov	r9, r1
   88556:	4680      	mov	r8, r0
   88558:	f003 fc1a 	bl	8bd90 <__aeabi_d2iz>
   8855c:	4604      	mov	r4, r0
   8855e:	f003 f8fd 	bl	8b75c <__aeabi_i2d>
   88562:	4602      	mov	r2, r0
   88564:	460b      	mov	r3, r1
   88566:	4640      	mov	r0, r8
   88568:	4649      	mov	r1, r9
   8856a:	f002 ffa9 	bl	8b4c0 <__aeabi_dsub>
   8856e:	3430      	adds	r4, #48	; 0x30
   88570:	4652      	mov	r2, sl
   88572:	465b      	mov	r3, fp
   88574:	f806 4b01 	strb.w	r4, [r6], #1
   88578:	4680      	mov	r8, r0
   8857a:	4689      	mov	r9, r1
   8857c:	f003 fbca 	bl	8bd14 <__aeabi_dcmplt>
   88580:	2800      	cmp	r0, #0
   88582:	f040 84f8 	bne.w	88f76 <_dtoa_r+0xdf6>
   88586:	4642      	mov	r2, r8
   88588:	464b      	mov	r3, r9
   8858a:	2000      	movs	r0, #0
   8858c:	4950      	ldr	r1, [pc, #320]	; (886d0 <_dtoa_r+0x550>)
   8858e:	f002 ff97 	bl	8b4c0 <__aeabi_dsub>
   88592:	4652      	mov	r2, sl
   88594:	465b      	mov	r3, fp
   88596:	f003 fbbd 	bl	8bd14 <__aeabi_dcmplt>
   8859a:	2800      	cmp	r0, #0
   8859c:	d0c8      	beq.n	88530 <_dtoa_r+0x3b0>
   8859e:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   885a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   885a4:	9a03      	ldr	r2, [sp, #12]
   885a6:	9307      	str	r3, [sp, #28]
   885a8:	e002      	b.n	885b0 <_dtoa_r+0x430>
   885aa:	4296      	cmp	r6, r2
   885ac:	f000 84cd 	beq.w	88f4a <_dtoa_r+0xdca>
   885b0:	46b2      	mov	sl, r6
   885b2:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   885b6:	2b39      	cmp	r3, #57	; 0x39
   885b8:	d0f7      	beq.n	885aa <_dtoa_r+0x42a>
   885ba:	3301      	adds	r3, #1
   885bc:	b2db      	uxtb	r3, r3
   885be:	7033      	strb	r3, [r6, #0]
   885c0:	9b07      	ldr	r3, [sp, #28]
   885c2:	3301      	adds	r3, #1
   885c4:	9307      	str	r3, [sp, #28]
   885c6:	e1c8      	b.n	8895a <_dtoa_r+0x7da>
   885c8:	4650      	mov	r0, sl
   885ca:	f003 f8c7 	bl	8b75c <__aeabi_i2d>
   885ce:	4642      	mov	r2, r8
   885d0:	464b      	mov	r3, r9
   885d2:	f003 f92d 	bl	8b830 <__aeabi_dmul>
   885d6:	4b3f      	ldr	r3, [pc, #252]	; (886d4 <_dtoa_r+0x554>)
   885d8:	2200      	movs	r2, #0
   885da:	f002 ff73 	bl	8b4c4 <__adddf3>
   885de:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   885e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   885e6:	9311      	str	r3, [sp, #68]	; 0x44
   885e8:	4640      	mov	r0, r8
   885ea:	4649      	mov	r1, r9
   885ec:	2200      	movs	r2, #0
   885ee:	4b3c      	ldr	r3, [pc, #240]	; (886e0 <_dtoa_r+0x560>)
   885f0:	f002 ff66 	bl	8b4c0 <__aeabi_dsub>
   885f4:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   885f8:	464b      	mov	r3, r9
   885fa:	4642      	mov	r2, r8
   885fc:	4606      	mov	r6, r0
   885fe:	460f      	mov	r7, r1
   88600:	f003 fba6 	bl	8bd50 <__aeabi_dcmpgt>
   88604:	4681      	mov	r9, r0
   88606:	2800      	cmp	r0, #0
   88608:	f040 84af 	bne.w	88f6a <_dtoa_r+0xdea>
   8860c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88610:	4602      	mov	r2, r0
   88612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   88616:	4630      	mov	r0, r6
   88618:	4639      	mov	r1, r7
   8861a:	f003 fb7b 	bl	8bd14 <__aeabi_dcmplt>
   8861e:	2800      	cmp	r0, #0
   88620:	f040 8348 	bne.w	88cb4 <_dtoa_r+0xb34>
   88624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88626:	2b00      	cmp	r3, #0
   88628:	f2c0 808c 	blt.w	88744 <_dtoa_r+0x5c4>
   8862c:	9a07      	ldr	r2, [sp, #28]
   8862e:	2a0e      	cmp	r2, #14
   88630:	f300 8088 	bgt.w	88744 <_dtoa_r+0x5c4>
   88634:	4b24      	ldr	r3, [pc, #144]	; (886c8 <_dtoa_r+0x548>)
   88636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8863a:	e9d3 ab00 	ldrd	sl, fp, [r3]
   8863e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88640:	2b00      	cmp	r3, #0
   88642:	da1b      	bge.n	8867c <_dtoa_r+0x4fc>
   88644:	9b08      	ldr	r3, [sp, #32]
   88646:	2b00      	cmp	r3, #0
   88648:	dc18      	bgt.n	8867c <_dtoa_r+0x4fc>
   8864a:	f040 8331 	bne.w	88cb0 <_dtoa_r+0xb30>
   8864e:	2200      	movs	r2, #0
   88650:	4b23      	ldr	r3, [pc, #140]	; (886e0 <_dtoa_r+0x560>)
   88652:	4650      	mov	r0, sl
   88654:	4659      	mov	r1, fp
   88656:	f003 f8eb 	bl	8b830 <__aeabi_dmul>
   8865a:	4602      	mov	r2, r0
   8865c:	460b      	mov	r3, r1
   8865e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88662:	f003 fb61 	bl	8bd28 <__aeabi_dcmple>
   88666:	f8dd 9020 	ldr.w	r9, [sp, #32]
   8866a:	464e      	mov	r6, r9
   8866c:	2800      	cmp	r0, #0
   8866e:	f000 82ca 	beq.w	88c06 <_dtoa_r+0xa86>
   88672:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88674:	f8dd 800c 	ldr.w	r8, [sp, #12]
   88678:	43df      	mvns	r7, r3
   8867a:	e2cc      	b.n	88c16 <_dtoa_r+0xa96>
   8867c:	4652      	mov	r2, sl
   8867e:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   88682:	465b      	mov	r3, fp
   88684:	4638      	mov	r0, r7
   88686:	4641      	mov	r1, r8
   88688:	f003 f9fc 	bl	8ba84 <__aeabi_ddiv>
   8868c:	f003 fb80 	bl	8bd90 <__aeabi_d2iz>
   88690:	4681      	mov	r9, r0
   88692:	9009      	str	r0, [sp, #36]	; 0x24
   88694:	f003 f862 	bl	8b75c <__aeabi_i2d>
   88698:	4652      	mov	r2, sl
   8869a:	465b      	mov	r3, fp
   8869c:	f003 f8c8 	bl	8b830 <__aeabi_dmul>
   886a0:	9e03      	ldr	r6, [sp, #12]
   886a2:	460b      	mov	r3, r1
   886a4:	4602      	mov	r2, r0
   886a6:	4641      	mov	r1, r8
   886a8:	4638      	mov	r0, r7
   886aa:	f002 ff09 	bl	8b4c0 <__aeabi_dsub>
   886ae:	f109 0330 	add.w	r3, r9, #48	; 0x30
   886b2:	f806 3b01 	strb.w	r3, [r6], #1
   886b6:	9b08      	ldr	r3, [sp, #32]
   886b8:	2b01      	cmp	r3, #1
   886ba:	f000 835f 	beq.w	88d7c <_dtoa_r+0xbfc>
   886be:	9406      	str	r4, [sp, #24]
   886c0:	2701      	movs	r7, #1
   886c2:	461c      	mov	r4, r3
   886c4:	9504      	str	r5, [sp, #16]
   886c6:	e02a      	b.n	8871e <_dtoa_r+0x59e>
   886c8:	0008c408 	.word	0x0008c408
   886cc:	0008c3e0 	.word	0x0008c3e0
   886d0:	3ff00000 	.word	0x3ff00000
   886d4:	401c0000 	.word	0x401c0000
   886d8:	3fe00000 	.word	0x3fe00000
   886dc:	40240000 	.word	0x40240000
   886e0:	40140000 	.word	0x40140000
   886e4:	4652      	mov	r2, sl
   886e6:	465b      	mov	r3, fp
   886e8:	4640      	mov	r0, r8
   886ea:	4649      	mov	r1, r9
   886ec:	f003 f9ca 	bl	8ba84 <__aeabi_ddiv>
   886f0:	f003 fb4e 	bl	8bd90 <__aeabi_d2iz>
   886f4:	4605      	mov	r5, r0
   886f6:	f003 f831 	bl	8b75c <__aeabi_i2d>
   886fa:	4652      	mov	r2, sl
   886fc:	465b      	mov	r3, fp
   886fe:	f003 f897 	bl	8b830 <__aeabi_dmul>
   88702:	3701      	adds	r7, #1
   88704:	460b      	mov	r3, r1
   88706:	4602      	mov	r2, r0
   88708:	4649      	mov	r1, r9
   8870a:	4640      	mov	r0, r8
   8870c:	f002 fed8 	bl	8b4c0 <__aeabi_dsub>
   88710:	f105 0330 	add.w	r3, r5, #48	; 0x30
   88714:	42a7      	cmp	r7, r4
   88716:	f806 3b01 	strb.w	r3, [r6], #1
   8871a:	f000 832c 	beq.w	88d76 <_dtoa_r+0xbf6>
   8871e:	2200      	movs	r2, #0
   88720:	4bab      	ldr	r3, [pc, #684]	; (889d0 <_dtoa_r+0x850>)
   88722:	f003 f885 	bl	8b830 <__aeabi_dmul>
   88726:	2200      	movs	r2, #0
   88728:	2300      	movs	r3, #0
   8872a:	4680      	mov	r8, r0
   8872c:	4689      	mov	r9, r1
   8872e:	f003 fae7 	bl	8bd00 <__aeabi_dcmpeq>
   88732:	2800      	cmp	r0, #0
   88734:	d0d6      	beq.n	886e4 <_dtoa_r+0x564>
   88736:	9d04      	ldr	r5, [sp, #16]
   88738:	9c06      	ldr	r4, [sp, #24]
   8873a:	9b07      	ldr	r3, [sp, #28]
   8873c:	46b2      	mov	sl, r6
   8873e:	3301      	adds	r3, #1
   88740:	9307      	str	r3, [sp, #28]
   88742:	e10a      	b.n	8895a <_dtoa_r+0x7da>
   88744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88746:	2a00      	cmp	r2, #0
   88748:	d03d      	beq.n	887c6 <_dtoa_r+0x646>
   8874a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   8874c:	2a01      	cmp	r2, #1
   8874e:	f340 829f 	ble.w	88c90 <_dtoa_r+0xb10>
   88752:	9b08      	ldr	r3, [sp, #32]
   88754:	f103 38ff 	add.w	r8, r3, #4294967295
   88758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8875a:	4543      	cmp	r3, r8
   8875c:	f2c0 8270 	blt.w	88c40 <_dtoa_r+0xac0>
   88760:	eba3 0808 	sub.w	r8, r3, r8
   88764:	9b08      	ldr	r3, [sp, #32]
   88766:	2b00      	cmp	r3, #0
   88768:	f2c0 8340 	blt.w	88dec <_dtoa_r+0xc6c>
   8876c:	9a06      	ldr	r2, [sp, #24]
   8876e:	441a      	add	r2, r3
   88770:	9206      	str	r2, [sp, #24]
   88772:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88774:	4617      	mov	r7, r2
   88776:	441a      	add	r2, r3
   88778:	9209      	str	r2, [sp, #36]	; 0x24
   8877a:	2101      	movs	r1, #1
   8877c:	4620      	mov	r0, r4
   8877e:	f001 fe5d 	bl	8a43c <__i2b>
   88782:	4606      	mov	r6, r0
   88784:	e023      	b.n	887ce <_dtoa_r+0x64e>
   88786:	2301      	movs	r3, #1
   88788:	1bbe      	subs	r6, r7, r6
   8878a:	930e      	str	r3, [sp, #56]	; 0x38
   8878c:	1e73      	subs	r3, r6, #1
   8878e:	9306      	str	r3, [sp, #24]
   88790:	f57f ada0 	bpl.w	882d4 <_dtoa_r+0x154>
   88794:	f1c6 0301 	rsb	r3, r6, #1
   88798:	9309      	str	r3, [sp, #36]	; 0x24
   8879a:	2300      	movs	r3, #0
   8879c:	9306      	str	r3, [sp, #24]
   8879e:	e59b      	b.n	882d8 <_dtoa_r+0x158>
   887a0:	4658      	mov	r0, fp
   887a2:	f002 ffdb 	bl	8b75c <__aeabi_i2d>
   887a6:	4642      	mov	r2, r8
   887a8:	464b      	mov	r3, r9
   887aa:	f003 faa9 	bl	8bd00 <__aeabi_dcmpeq>
   887ae:	2800      	cmp	r0, #0
   887b0:	f47f ad78 	bne.w	882a4 <_dtoa_r+0x124>
   887b4:	f10b 3bff 	add.w	fp, fp, #4294967295
   887b8:	e574      	b.n	882a4 <_dtoa_r+0x124>
   887ba:	4b86      	ldr	r3, [pc, #536]	; (889d4 <_dtoa_r+0x854>)
   887bc:	9303      	str	r3, [sp, #12]
   887be:	9803      	ldr	r0, [sp, #12]
   887c0:	b019      	add	sp, #100	; 0x64
   887c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   887c6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   887ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
   887cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   887ce:	2f00      	cmp	r7, #0
   887d0:	dd0c      	ble.n	887ec <_dtoa_r+0x66c>
   887d2:	9906      	ldr	r1, [sp, #24]
   887d4:	2900      	cmp	r1, #0
   887d6:	460b      	mov	r3, r1
   887d8:	dd08      	ble.n	887ec <_dtoa_r+0x66c>
   887da:	42b9      	cmp	r1, r7
   887dc:	bfa8      	it	ge
   887de:	463b      	movge	r3, r7
   887e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   887e2:	1aff      	subs	r7, r7, r3
   887e4:	1ad2      	subs	r2, r2, r3
   887e6:	1acb      	subs	r3, r1, r3
   887e8:	9209      	str	r2, [sp, #36]	; 0x24
   887ea:	9306      	str	r3, [sp, #24]
   887ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   887ee:	b1e3      	cbz	r3, 8882a <_dtoa_r+0x6aa>
   887f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   887f2:	2b00      	cmp	r3, #0
   887f4:	f000 8260 	beq.w	88cb8 <_dtoa_r+0xb38>
   887f8:	f1b8 0f00 	cmp.w	r8, #0
   887fc:	dd10      	ble.n	88820 <_dtoa_r+0x6a0>
   887fe:	4631      	mov	r1, r6
   88800:	4642      	mov	r2, r8
   88802:	4620      	mov	r0, r4
   88804:	f001 fef6 	bl	8a5f4 <__pow5mult>
   88808:	4606      	mov	r6, r0
   8880a:	462a      	mov	r2, r5
   8880c:	4631      	mov	r1, r6
   8880e:	4620      	mov	r0, r4
   88810:	f001 fe42 	bl	8a498 <__multiply>
   88814:	4603      	mov	r3, r0
   88816:	4629      	mov	r1, r5
   88818:	4620      	mov	r0, r4
   8881a:	461d      	mov	r5, r3
   8881c:	f001 fd66 	bl	8a2ec <_Bfree>
   88820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88822:	ebb3 0208 	subs.w	r2, r3, r8
   88826:	f040 82db 	bne.w	88de0 <_dtoa_r+0xc60>
   8882a:	2101      	movs	r1, #1
   8882c:	4620      	mov	r0, r4
   8882e:	f001 fe05 	bl	8a43c <__i2b>
   88832:	f1bb 0f00 	cmp.w	fp, #0
   88836:	4681      	mov	r9, r0
   88838:	f300 80b3 	bgt.w	889a2 <_dtoa_r+0x822>
   8883c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8883e:	2b01      	cmp	r3, #1
   88840:	f340 8188 	ble.w	88b54 <_dtoa_r+0x9d4>
   88844:	f04f 0a00 	mov.w	sl, #0
   88848:	2001      	movs	r0, #1
   8884a:	f1bb 0f00 	cmp.w	fp, #0
   8884e:	f040 80b4 	bne.w	889ba <_dtoa_r+0x83a>
   88852:	9a06      	ldr	r2, [sp, #24]
   88854:	4410      	add	r0, r2
   88856:	f010 001f 	ands.w	r0, r0, #31
   8885a:	f000 8092 	beq.w	88982 <_dtoa_r+0x802>
   8885e:	f1c0 0320 	rsb	r3, r0, #32
   88862:	2b04      	cmp	r3, #4
   88864:	f340 83d3 	ble.w	8900e <_dtoa_r+0xe8e>
   88868:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8886a:	f1c0 001c 	rsb	r0, r0, #28
   8886e:	4403      	add	r3, r0
   88870:	4402      	add	r2, r0
   88872:	9309      	str	r3, [sp, #36]	; 0x24
   88874:	4407      	add	r7, r0
   88876:	9206      	str	r2, [sp, #24]
   88878:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8887a:	2b00      	cmp	r3, #0
   8887c:	dd05      	ble.n	8888a <_dtoa_r+0x70a>
   8887e:	4629      	mov	r1, r5
   88880:	461a      	mov	r2, r3
   88882:	4620      	mov	r0, r4
   88884:	f001 ff12 	bl	8a6ac <__lshift>
   88888:	4605      	mov	r5, r0
   8888a:	9b06      	ldr	r3, [sp, #24]
   8888c:	2b00      	cmp	r3, #0
   8888e:	dd05      	ble.n	8889c <_dtoa_r+0x71c>
   88890:	4649      	mov	r1, r9
   88892:	461a      	mov	r2, r3
   88894:	4620      	mov	r0, r4
   88896:	f001 ff09 	bl	8a6ac <__lshift>
   8889a:	4681      	mov	r9, r0
   8889c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8889e:	2b00      	cmp	r3, #0
   888a0:	f040 8138 	bne.w	88b14 <_dtoa_r+0x994>
   888a4:	9b08      	ldr	r3, [sp, #32]
   888a6:	2b00      	cmp	r3, #0
   888a8:	f340 811e 	ble.w	88ae8 <_dtoa_r+0x968>
   888ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   888ae:	2b00      	cmp	r3, #0
   888b0:	f040 809f 	bne.w	889f2 <_dtoa_r+0x872>
   888b4:	9b07      	ldr	r3, [sp, #28]
   888b6:	3301      	adds	r3, #1
   888b8:	9307      	str	r3, [sp, #28]
   888ba:	2701      	movs	r7, #1
   888bc:	f8dd 800c 	ldr.w	r8, [sp, #12]
   888c0:	f8dd a020 	ldr.w	sl, [sp, #32]
   888c4:	e007      	b.n	888d6 <_dtoa_r+0x756>
   888c6:	4629      	mov	r1, r5
   888c8:	2300      	movs	r3, #0
   888ca:	220a      	movs	r2, #10
   888cc:	4620      	mov	r0, r4
   888ce:	f001 fd17 	bl	8a300 <__multadd>
   888d2:	4605      	mov	r5, r0
   888d4:	3701      	adds	r7, #1
   888d6:	4649      	mov	r1, r9
   888d8:	4628      	mov	r0, r5
   888da:	f7ff fbb9 	bl	88050 <quorem>
   888de:	4557      	cmp	r7, sl
   888e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   888e4:	f808 3b01 	strb.w	r3, [r8], #1
   888e8:	dbed      	blt.n	888c6 <_dtoa_r+0x746>
   888ea:	9a08      	ldr	r2, [sp, #32]
   888ec:	2700      	movs	r7, #0
   888ee:	2a00      	cmp	r2, #0
   888f0:	bfcc      	ite	gt
   888f2:	4693      	movgt	fp, r2
   888f4:	f04f 0b01 	movle.w	fp, #1
   888f8:	9a03      	ldr	r2, [sp, #12]
   888fa:	4493      	add	fp, r2
   888fc:	4629      	mov	r1, r5
   888fe:	2201      	movs	r2, #1
   88900:	4620      	mov	r0, r4
   88902:	9304      	str	r3, [sp, #16]
   88904:	f001 fed2 	bl	8a6ac <__lshift>
   88908:	4649      	mov	r1, r9
   8890a:	4605      	mov	r5, r0
   8890c:	f001 ff44 	bl	8a798 <__mcmp>
   88910:	2800      	cmp	r0, #0
   88912:	f340 81ab 	ble.w	88c6c <_dtoa_r+0xaec>
   88916:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8891a:	9a03      	ldr	r2, [sp, #12]
   8891c:	f10b 3bff 	add.w	fp, fp, #4294967295
   88920:	e004      	b.n	8892c <_dtoa_r+0x7ac>
   88922:	455a      	cmp	r2, fp
   88924:	f000 81ad 	beq.w	88c82 <_dtoa_r+0xb02>
   88928:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8892c:	2b39      	cmp	r3, #57	; 0x39
   8892e:	f10b 0a01 	add.w	sl, fp, #1
   88932:	d0f6      	beq.n	88922 <_dtoa_r+0x7a2>
   88934:	3301      	adds	r3, #1
   88936:	f88b 3000 	strb.w	r3, [fp]
   8893a:	4649      	mov	r1, r9
   8893c:	4620      	mov	r0, r4
   8893e:	f001 fcd5 	bl	8a2ec <_Bfree>
   88942:	b156      	cbz	r6, 8895a <_dtoa_r+0x7da>
   88944:	b12f      	cbz	r7, 88952 <_dtoa_r+0x7d2>
   88946:	42b7      	cmp	r7, r6
   88948:	d003      	beq.n	88952 <_dtoa_r+0x7d2>
   8894a:	4639      	mov	r1, r7
   8894c:	4620      	mov	r0, r4
   8894e:	f001 fccd 	bl	8a2ec <_Bfree>
   88952:	4631      	mov	r1, r6
   88954:	4620      	mov	r0, r4
   88956:	f001 fcc9 	bl	8a2ec <_Bfree>
   8895a:	4629      	mov	r1, r5
   8895c:	4620      	mov	r0, r4
   8895e:	f001 fcc5 	bl	8a2ec <_Bfree>
   88962:	2300      	movs	r3, #0
   88964:	9a07      	ldr	r2, [sp, #28]
   88966:	f88a 3000 	strb.w	r3, [sl]
   8896a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8896c:	601a      	str	r2, [r3, #0]
   8896e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88970:	2b00      	cmp	r3, #0
   88972:	f43f ac40 	beq.w	881f6 <_dtoa_r+0x76>
   88976:	9803      	ldr	r0, [sp, #12]
   88978:	f8c3 a000 	str.w	sl, [r3]
   8897c:	b019      	add	sp, #100	; 0x64
   8897e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88982:	201c      	movs	r0, #28
   88984:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88986:	4407      	add	r7, r0
   88988:	4403      	add	r3, r0
   8898a:	9309      	str	r3, [sp, #36]	; 0x24
   8898c:	9b06      	ldr	r3, [sp, #24]
   8898e:	4403      	add	r3, r0
   88990:	9306      	str	r3, [sp, #24]
   88992:	e771      	b.n	88878 <_dtoa_r+0x6f8>
   88994:	2601      	movs	r6, #1
   88996:	e4b6      	b.n	88306 <_dtoa_r+0x186>
   88998:	f1c0 0020 	rsb	r0, r0, #32
   8899c:	fa08 f000 	lsl.w	r0, r8, r0
   889a0:	e44d      	b.n	8823e <_dtoa_r+0xbe>
   889a2:	4601      	mov	r1, r0
   889a4:	465a      	mov	r2, fp
   889a6:	4620      	mov	r0, r4
   889a8:	f001 fe24 	bl	8a5f4 <__pow5mult>
   889ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
   889ae:	4681      	mov	r9, r0
   889b0:	2b01      	cmp	r3, #1
   889b2:	f340 81b6 	ble.w	88d22 <_dtoa_r+0xba2>
   889b6:	f04f 0a00 	mov.w	sl, #0
   889ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   889be:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   889c2:	6918      	ldr	r0, [r3, #16]
   889c4:	f001 fcee 	bl	8a3a4 <__hi0bits>
   889c8:	f1c0 0020 	rsb	r0, r0, #32
   889cc:	e741      	b.n	88852 <_dtoa_r+0x6d2>
   889ce:	bf00      	nop
   889d0:	40240000 	.word	0x40240000
   889d4:	0008c264 	.word	0x0008c264
   889d8:	4631      	mov	r1, r6
   889da:	2300      	movs	r3, #0
   889dc:	220a      	movs	r2, #10
   889de:	4620      	mov	r0, r4
   889e0:	f001 fc8e 	bl	8a300 <__multadd>
   889e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   889e6:	4606      	mov	r6, r0
   889e8:	2b00      	cmp	r3, #0
   889ea:	f340 82e9 	ble.w	88fc0 <_dtoa_r+0xe40>
   889ee:	e9cd 8307 	strd	r8, r3, [sp, #28]
   889f2:	2f00      	cmp	r7, #0
   889f4:	f300 811d 	bgt.w	88c32 <_dtoa_r+0xab2>
   889f8:	f1ba 0f00 	cmp.w	sl, #0
   889fc:	f040 81d9 	bne.w	88db2 <_dtoa_r+0xc32>
   88a00:	46b0      	mov	r8, r6
   88a02:	9b04      	ldr	r3, [sp, #16]
   88a04:	9908      	ldr	r1, [sp, #32]
   88a06:	f003 0201 	and.w	r2, r3, #1
   88a0a:	9b03      	ldr	r3, [sp, #12]
   88a0c:	920a      	str	r2, [sp, #40]	; 0x28
   88a0e:	461f      	mov	r7, r3
   88a10:	3b01      	subs	r3, #1
   88a12:	4419      	add	r1, r3
   88a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88a16:	9108      	str	r1, [sp, #32]
   88a18:	4313      	orrs	r3, r2
   88a1a:	9309      	str	r3, [sp, #36]	; 0x24
   88a1c:	4649      	mov	r1, r9
   88a1e:	4628      	mov	r0, r5
   88a20:	f7ff fb16 	bl	88050 <quorem>
   88a24:	4631      	mov	r1, r6
   88a26:	4683      	mov	fp, r0
   88a28:	4628      	mov	r0, r5
   88a2a:	f001 feb5 	bl	8a798 <__mcmp>
   88a2e:	4642      	mov	r2, r8
   88a30:	4649      	mov	r1, r9
   88a32:	4682      	mov	sl, r0
   88a34:	4620      	mov	r0, r4
   88a36:	f001 fecf 	bl	8a7d8 <__mdiff>
   88a3a:	68c2      	ldr	r2, [r0, #12]
   88a3c:	4601      	mov	r1, r0
   88a3e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   88a42:	2a00      	cmp	r2, #0
   88a44:	d143      	bne.n	88ace <_dtoa_r+0x94e>
   88a46:	9004      	str	r0, [sp, #16]
   88a48:	4628      	mov	r0, r5
   88a4a:	9306      	str	r3, [sp, #24]
   88a4c:	f001 fea4 	bl	8a798 <__mcmp>
   88a50:	4602      	mov	r2, r0
   88a52:	9904      	ldr	r1, [sp, #16]
   88a54:	4620      	mov	r0, r4
   88a56:	9204      	str	r2, [sp, #16]
   88a58:	f001 fc48 	bl	8a2ec <_Bfree>
   88a5c:	9a04      	ldr	r2, [sp, #16]
   88a5e:	9b06      	ldr	r3, [sp, #24]
   88a60:	b91a      	cbnz	r2, 88a6a <_dtoa_r+0x8ea>
   88a62:	9909      	ldr	r1, [sp, #36]	; 0x24
   88a64:	2900      	cmp	r1, #0
   88a66:	f000 829b 	beq.w	88fa0 <_dtoa_r+0xe20>
   88a6a:	f1ba 0f00 	cmp.w	sl, #0
   88a6e:	f2c0 8164 	blt.w	88d3a <_dtoa_r+0xbba>
   88a72:	9922      	ldr	r1, [sp, #136]	; 0x88
   88a74:	ea4a 0a01 	orr.w	sl, sl, r1
   88a78:	990a      	ldr	r1, [sp, #40]	; 0x28
   88a7a:	ea51 010a 	orrs.w	r1, r1, sl
   88a7e:	f000 815c 	beq.w	88d3a <_dtoa_r+0xbba>
   88a82:	2a00      	cmp	r2, #0
   88a84:	f300 81b6 	bgt.w	88df4 <_dtoa_r+0xc74>
   88a88:	9a08      	ldr	r2, [sp, #32]
   88a8a:	f107 0a01 	add.w	sl, r7, #1
   88a8e:	4297      	cmp	r7, r2
   88a90:	46d3      	mov	fp, sl
   88a92:	703b      	strb	r3, [r7, #0]
   88a94:	f000 81b4 	beq.w	88e00 <_dtoa_r+0xc80>
   88a98:	4629      	mov	r1, r5
   88a9a:	2300      	movs	r3, #0
   88a9c:	220a      	movs	r2, #10
   88a9e:	4620      	mov	r0, r4
   88aa0:	f001 fc2e 	bl	8a300 <__multadd>
   88aa4:	4546      	cmp	r6, r8
   88aa6:	4605      	mov	r5, r0
   88aa8:	4631      	mov	r1, r6
   88aaa:	f04f 0300 	mov.w	r3, #0
   88aae:	f04f 020a 	mov.w	r2, #10
   88ab2:	4620      	mov	r0, r4
   88ab4:	d012      	beq.n	88adc <_dtoa_r+0x95c>
   88ab6:	f001 fc23 	bl	8a300 <__multadd>
   88aba:	4641      	mov	r1, r8
   88abc:	4606      	mov	r6, r0
   88abe:	2300      	movs	r3, #0
   88ac0:	220a      	movs	r2, #10
   88ac2:	4620      	mov	r0, r4
   88ac4:	f001 fc1c 	bl	8a300 <__multadd>
   88ac8:	4657      	mov	r7, sl
   88aca:	4680      	mov	r8, r0
   88acc:	e7a6      	b.n	88a1c <_dtoa_r+0x89c>
   88ace:	4620      	mov	r0, r4
   88ad0:	9304      	str	r3, [sp, #16]
   88ad2:	f001 fc0b 	bl	8a2ec <_Bfree>
   88ad6:	2201      	movs	r2, #1
   88ad8:	9b04      	ldr	r3, [sp, #16]
   88ada:	e7c6      	b.n	88a6a <_dtoa_r+0x8ea>
   88adc:	f001 fc10 	bl	8a300 <__multadd>
   88ae0:	4657      	mov	r7, sl
   88ae2:	4606      	mov	r6, r0
   88ae4:	4680      	mov	r8, r0
   88ae6:	e799      	b.n	88a1c <_dtoa_r+0x89c>
   88ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88aea:	2b02      	cmp	r3, #2
   88aec:	dc7a      	bgt.n	88be4 <_dtoa_r+0xa64>
   88aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88af0:	2b00      	cmp	r3, #0
   88af2:	f47f af7e 	bne.w	889f2 <_dtoa_r+0x872>
   88af6:	9b07      	ldr	r3, [sp, #28]
   88af8:	4649      	mov	r1, r9
   88afa:	3301      	adds	r3, #1
   88afc:	4628      	mov	r0, r5
   88afe:	9307      	str	r3, [sp, #28]
   88b00:	f7ff faa6 	bl	88050 <quorem>
   88b04:	f8dd b00c 	ldr.w	fp, [sp, #12]
   88b08:	f100 0330 	add.w	r3, r0, #48	; 0x30
   88b0c:	2700      	movs	r7, #0
   88b0e:	f80b 3b01 	strb.w	r3, [fp], #1
   88b12:	e6f3      	b.n	888fc <_dtoa_r+0x77c>
   88b14:	4649      	mov	r1, r9
   88b16:	4628      	mov	r0, r5
   88b18:	f001 fe3e 	bl	8a798 <__mcmp>
   88b1c:	2800      	cmp	r0, #0
   88b1e:	f6bf aec1 	bge.w	888a4 <_dtoa_r+0x724>
   88b22:	4629      	mov	r1, r5
   88b24:	2300      	movs	r3, #0
   88b26:	220a      	movs	r2, #10
   88b28:	4620      	mov	r0, r4
   88b2a:	f001 fbe9 	bl	8a300 <__multadd>
   88b2e:	9b07      	ldr	r3, [sp, #28]
   88b30:	4605      	mov	r5, r0
   88b32:	f103 38ff 	add.w	r8, r3, #4294967295
   88b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88b38:	2b00      	cmp	r3, #0
   88b3a:	f47f af4d 	bne.w	889d8 <_dtoa_r+0x858>
   88b3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88b40:	2b00      	cmp	r3, #0
   88b42:	f340 8234 	ble.w	88fae <_dtoa_r+0xe2e>
   88b46:	9308      	str	r3, [sp, #32]
   88b48:	e6b7      	b.n	888ba <_dtoa_r+0x73a>
   88b4a:	4bb0      	ldr	r3, [pc, #704]	; (88e0c <_dtoa_r+0xc8c>)
   88b4c:	9303      	str	r3, [sp, #12]
   88b4e:	3303      	adds	r3, #3
   88b50:	f7ff bbf4 	b.w	8833c <_dtoa_r+0x1bc>
   88b54:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   88b58:	2900      	cmp	r1, #0
   88b5a:	f47f ae73 	bne.w	88844 <_dtoa_r+0x6c4>
   88b5e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88b62:	2b00      	cmp	r3, #0
   88b64:	f47f ae6e 	bne.w	88844 <_dtoa_r+0x6c4>
   88b68:	4ba9      	ldr	r3, [pc, #676]	; (88e10 <_dtoa_r+0xc90>)
   88b6a:	4013      	ands	r3, r2
   88b6c:	2b00      	cmp	r3, #0
   88b6e:	f000 8200 	beq.w	88f72 <_dtoa_r+0xdf2>
   88b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88b74:	f04f 0a01 	mov.w	sl, #1
   88b78:	3301      	adds	r3, #1
   88b7a:	9309      	str	r3, [sp, #36]	; 0x24
   88b7c:	9b06      	ldr	r3, [sp, #24]
   88b7e:	3301      	adds	r3, #1
   88b80:	9306      	str	r3, [sp, #24]
   88b82:	e661      	b.n	88848 <_dtoa_r+0x6c8>
   88b84:	2301      	movs	r3, #1
   88b86:	930c      	str	r3, [sp, #48]	; 0x30
   88b88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88b8a:	9a07      	ldr	r2, [sp, #28]
   88b8c:	4413      	add	r3, r2
   88b8e:	9312      	str	r3, [sp, #72]	; 0x48
   88b90:	3301      	adds	r3, #1
   88b92:	2b01      	cmp	r3, #1
   88b94:	461f      	mov	r7, r3
   88b96:	bfb8      	it	lt
   88b98:	2701      	movlt	r7, #1
   88b9a:	9308      	str	r3, [sp, #32]
   88b9c:	2100      	movs	r1, #0
   88b9e:	2f17      	cmp	r7, #23
   88ba0:	6461      	str	r1, [r4, #68]	; 0x44
   88ba2:	f77f ac1e 	ble.w	883e2 <_dtoa_r+0x262>
   88ba6:	2201      	movs	r2, #1
   88ba8:	2304      	movs	r3, #4
   88baa:	005b      	lsls	r3, r3, #1
   88bac:	f103 0014 	add.w	r0, r3, #20
   88bb0:	42b8      	cmp	r0, r7
   88bb2:	4611      	mov	r1, r2
   88bb4:	f102 0201 	add.w	r2, r2, #1
   88bb8:	d9f7      	bls.n	88baa <_dtoa_r+0xa2a>
   88bba:	6461      	str	r1, [r4, #68]	; 0x44
   88bbc:	e411      	b.n	883e2 <_dtoa_r+0x262>
   88bbe:	2301      	movs	r3, #1
   88bc0:	930c      	str	r3, [sp, #48]	; 0x30
   88bc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88bc4:	2b00      	cmp	r3, #0
   88bc6:	dd4c      	ble.n	88c62 <_dtoa_r+0xae2>
   88bc8:	461f      	mov	r7, r3
   88bca:	9312      	str	r3, [sp, #72]	; 0x48
   88bcc:	9308      	str	r3, [sp, #32]
   88bce:	e7e5      	b.n	88b9c <_dtoa_r+0xa1c>
   88bd0:	2300      	movs	r3, #0
   88bd2:	930c      	str	r3, [sp, #48]	; 0x30
   88bd4:	e7d8      	b.n	88b88 <_dtoa_r+0xa08>
   88bd6:	2300      	movs	r3, #0
   88bd8:	930c      	str	r3, [sp, #48]	; 0x30
   88bda:	e7f2      	b.n	88bc2 <_dtoa_r+0xa42>
   88bdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88bde:	f8cd 801c 	str.w	r8, [sp, #28]
   88be2:	9308      	str	r3, [sp, #32]
   88be4:	9b08      	ldr	r3, [sp, #32]
   88be6:	2b00      	cmp	r3, #0
   88be8:	f47f ad43 	bne.w	88672 <_dtoa_r+0x4f2>
   88bec:	4649      	mov	r1, r9
   88bee:	2205      	movs	r2, #5
   88bf0:	4620      	mov	r0, r4
   88bf2:	f001 fb85 	bl	8a300 <__multadd>
   88bf6:	4681      	mov	r9, r0
   88bf8:	4628      	mov	r0, r5
   88bfa:	4649      	mov	r1, r9
   88bfc:	f001 fdcc 	bl	8a798 <__mcmp>
   88c00:	2800      	cmp	r0, #0
   88c02:	f77f ad36 	ble.w	88672 <_dtoa_r+0x4f2>
   88c06:	2331      	movs	r3, #49	; 0x31
   88c08:	9803      	ldr	r0, [sp, #12]
   88c0a:	9f07      	ldr	r7, [sp, #28]
   88c0c:	4680      	mov	r8, r0
   88c0e:	f800 3b01 	strb.w	r3, [r0], #1
   88c12:	3701      	adds	r7, #1
   88c14:	9003      	str	r0, [sp, #12]
   88c16:	4649      	mov	r1, r9
   88c18:	4620      	mov	r0, r4
   88c1a:	f001 fb67 	bl	8a2ec <_Bfree>
   88c1e:	1c7b      	adds	r3, r7, #1
   88c20:	f8dd a00c 	ldr.w	sl, [sp, #12]
   88c24:	9307      	str	r3, [sp, #28]
   88c26:	f8cd 800c 	str.w	r8, [sp, #12]
   88c2a:	2e00      	cmp	r6, #0
   88c2c:	f47f ae91 	bne.w	88952 <_dtoa_r+0x7d2>
   88c30:	e693      	b.n	8895a <_dtoa_r+0x7da>
   88c32:	4631      	mov	r1, r6
   88c34:	463a      	mov	r2, r7
   88c36:	4620      	mov	r0, r4
   88c38:	f001 fd38 	bl	8a6ac <__lshift>
   88c3c:	4606      	mov	r6, r0
   88c3e:	e6db      	b.n	889f8 <_dtoa_r+0x878>
   88c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88c42:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   88c46:	eba8 0303 	sub.w	r3, r8, r3
   88c4a:	449b      	add	fp, r3
   88c4c:	f04f 0800 	mov.w	r8, #0
   88c50:	e588      	b.n	88764 <_dtoa_r+0x5e4>
   88c52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   88c56:	f04f 0a02 	mov.w	sl, #2
   88c5a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   88c5e:	f7ff bbee 	b.w	8843e <_dtoa_r+0x2be>
   88c62:	2301      	movs	r3, #1
   88c64:	9323      	str	r3, [sp, #140]	; 0x8c
   88c66:	9308      	str	r3, [sp, #32]
   88c68:	f7ff bbb7 	b.w	883da <_dtoa_r+0x25a>
   88c6c:	d103      	bne.n	88c76 <_dtoa_r+0xaf6>
   88c6e:	9b04      	ldr	r3, [sp, #16]
   88c70:	07d8      	lsls	r0, r3, #31
   88c72:	f53f ae50 	bmi.w	88916 <_dtoa_r+0x796>
   88c76:	46da      	mov	sl, fp
   88c78:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   88c7c:	2b30      	cmp	r3, #48	; 0x30
   88c7e:	d0fa      	beq.n	88c76 <_dtoa_r+0xaf6>
   88c80:	e65b      	b.n	8893a <_dtoa_r+0x7ba>
   88c82:	9b07      	ldr	r3, [sp, #28]
   88c84:	9a03      	ldr	r2, [sp, #12]
   88c86:	3301      	adds	r3, #1
   88c88:	9307      	str	r3, [sp, #28]
   88c8a:	2331      	movs	r3, #49	; 0x31
   88c8c:	7013      	strb	r3, [r2, #0]
   88c8e:	e654      	b.n	8893a <_dtoa_r+0x7ba>
   88c90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88c92:	2a00      	cmp	r2, #0
   88c94:	f000 8128 	beq.w	88ee8 <_dtoa_r+0xd68>
   88c98:	f203 4333 	addw	r3, r3, #1075	; 0x433
   88c9c:	9a06      	ldr	r2, [sp, #24]
   88c9e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   88ca2:	441a      	add	r2, r3
   88ca4:	9206      	str	r2, [sp, #24]
   88ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88ca8:	4617      	mov	r7, r2
   88caa:	441a      	add	r2, r3
   88cac:	9209      	str	r2, [sp, #36]	; 0x24
   88cae:	e564      	b.n	8877a <_dtoa_r+0x5fa>
   88cb0:	f04f 0900 	mov.w	r9, #0
   88cb4:	464e      	mov	r6, r9
   88cb6:	e4dc      	b.n	88672 <_dtoa_r+0x4f2>
   88cb8:	4629      	mov	r1, r5
   88cba:	4620      	mov	r0, r4
   88cbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   88cbe:	f001 fc99 	bl	8a5f4 <__pow5mult>
   88cc2:	4605      	mov	r5, r0
   88cc4:	e5b1      	b.n	8882a <_dtoa_r+0x6aa>
   88cc6:	900e      	str	r0, [sp, #56]	; 0x38
   88cc8:	e564      	b.n	88794 <_dtoa_r+0x614>
   88cca:	f000 8111 	beq.w	88ef0 <_dtoa_r+0xd70>
   88cce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88cd2:	9a07      	ldr	r2, [sp, #28]
   88cd4:	4b4f      	ldr	r3, [pc, #316]	; (88e14 <_dtoa_r+0xc94>)
   88cd6:	4256      	negs	r6, r2
   88cd8:	f006 020f 	and.w	r2, r6, #15
   88cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   88ce4:	f002 fda4 	bl	8b830 <__aeabi_dmul>
   88ce8:	1136      	asrs	r6, r6, #4
   88cea:	4680      	mov	r8, r0
   88cec:	4689      	mov	r9, r1
   88cee:	f000 8170 	beq.w	88fd2 <_dtoa_r+0xe52>
   88cf2:	2300      	movs	r3, #0
   88cf4:	f04f 0a02 	mov.w	sl, #2
   88cf8:	4f47      	ldr	r7, [pc, #284]	; (88e18 <_dtoa_r+0xc98>)
   88cfa:	07f2      	lsls	r2, r6, #31
   88cfc:	d506      	bpl.n	88d0c <_dtoa_r+0xb8c>
   88cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
   88d02:	f002 fd95 	bl	8b830 <__aeabi_dmul>
   88d06:	2301      	movs	r3, #1
   88d08:	f10a 0a01 	add.w	sl, sl, #1
   88d0c:	1076      	asrs	r6, r6, #1
   88d0e:	f107 0708 	add.w	r7, r7, #8
   88d12:	d1f2      	bne.n	88cfa <_dtoa_r+0xb7a>
   88d14:	2b00      	cmp	r3, #0
   88d16:	f43f abb1 	beq.w	8847c <_dtoa_r+0x2fc>
   88d1a:	4680      	mov	r8, r0
   88d1c:	4689      	mov	r9, r1
   88d1e:	f7ff bbad 	b.w	8847c <_dtoa_r+0x2fc>
   88d22:	9b04      	ldr	r3, [sp, #16]
   88d24:	2b00      	cmp	r3, #0
   88d26:	f47f ae46 	bne.w	889b6 <_dtoa_r+0x836>
   88d2a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   88d2e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88d32:	2b00      	cmp	r3, #0
   88d34:	f43f af18 	beq.w	88b68 <_dtoa_r+0x9e8>
   88d38:	e63d      	b.n	889b6 <_dtoa_r+0x836>
   88d3a:	2a00      	cmp	r2, #0
   88d3c:	dd12      	ble.n	88d64 <_dtoa_r+0xbe4>
   88d3e:	4629      	mov	r1, r5
   88d40:	2201      	movs	r2, #1
   88d42:	4620      	mov	r0, r4
   88d44:	9304      	str	r3, [sp, #16]
   88d46:	f001 fcb1 	bl	8a6ac <__lshift>
   88d4a:	4649      	mov	r1, r9
   88d4c:	4605      	mov	r5, r0
   88d4e:	f001 fd23 	bl	8a798 <__mcmp>
   88d52:	2800      	cmp	r0, #0
   88d54:	9b04      	ldr	r3, [sp, #16]
   88d56:	f340 8117 	ble.w	88f88 <_dtoa_r+0xe08>
   88d5a:	2b39      	cmp	r3, #57	; 0x39
   88d5c:	f000 80fb 	beq.w	88f56 <_dtoa_r+0xdd6>
   88d60:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   88d64:	46ba      	mov	sl, r7
   88d66:	9a07      	ldr	r2, [sp, #28]
   88d68:	4637      	mov	r7, r6
   88d6a:	3201      	adds	r2, #1
   88d6c:	4646      	mov	r6, r8
   88d6e:	9207      	str	r2, [sp, #28]
   88d70:	f80a 3b01 	strb.w	r3, [sl], #1
   88d74:	e5e1      	b.n	8893a <_dtoa_r+0x7ba>
   88d76:	9509      	str	r5, [sp, #36]	; 0x24
   88d78:	9c06      	ldr	r4, [sp, #24]
   88d7a:	9d04      	ldr	r5, [sp, #16]
   88d7c:	4602      	mov	r2, r0
   88d7e:	460b      	mov	r3, r1
   88d80:	f002 fba0 	bl	8b4c4 <__adddf3>
   88d84:	4652      	mov	r2, sl
   88d86:	465b      	mov	r3, fp
   88d88:	4680      	mov	r8, r0
   88d8a:	4689      	mov	r9, r1
   88d8c:	f002 ffe0 	bl	8bd50 <__aeabi_dcmpgt>
   88d90:	b960      	cbnz	r0, 88dac <_dtoa_r+0xc2c>
   88d92:	4652      	mov	r2, sl
   88d94:	465b      	mov	r3, fp
   88d96:	4640      	mov	r0, r8
   88d98:	4649      	mov	r1, r9
   88d9a:	f002 ffb1 	bl	8bd00 <__aeabi_dcmpeq>
   88d9e:	2800      	cmp	r0, #0
   88da0:	f43f accb 	beq.w	8873a <_dtoa_r+0x5ba>
   88da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88da6:	07d9      	lsls	r1, r3, #31
   88da8:	f57f acc7 	bpl.w	8873a <_dtoa_r+0x5ba>
   88dac:	9a03      	ldr	r2, [sp, #12]
   88dae:	f7ff bbff 	b.w	885b0 <_dtoa_r+0x430>
   88db2:	4620      	mov	r0, r4
   88db4:	6871      	ldr	r1, [r6, #4]
   88db6:	f001 fa73 	bl	8a2a0 <_Balloc>
   88dba:	4607      	mov	r7, r0
   88dbc:	2800      	cmp	r0, #0
   88dbe:	f000 810c 	beq.w	88fda <_dtoa_r+0xe5a>
   88dc2:	6933      	ldr	r3, [r6, #16]
   88dc4:	f106 010c 	add.w	r1, r6, #12
   88dc8:	3302      	adds	r3, #2
   88dca:	009a      	lsls	r2, r3, #2
   88dcc:	300c      	adds	r0, #12
   88dce:	f7fc f9fd 	bl	851cc <memcpy>
   88dd2:	4639      	mov	r1, r7
   88dd4:	2201      	movs	r2, #1
   88dd6:	4620      	mov	r0, r4
   88dd8:	f001 fc68 	bl	8a6ac <__lshift>
   88ddc:	4680      	mov	r8, r0
   88dde:	e610      	b.n	88a02 <_dtoa_r+0x882>
   88de0:	4629      	mov	r1, r5
   88de2:	4620      	mov	r0, r4
   88de4:	f001 fc06 	bl	8a5f4 <__pow5mult>
   88de8:	4605      	mov	r5, r0
   88dea:	e51e      	b.n	8882a <_dtoa_r+0x6aa>
   88dec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   88df0:	1a9f      	subs	r7, r3, r2
   88df2:	e4c2      	b.n	8877a <_dtoa_r+0x5fa>
   88df4:	2b39      	cmp	r3, #57	; 0x39
   88df6:	f000 80ae 	beq.w	88f56 <_dtoa_r+0xdd6>
   88dfa:	46ba      	mov	sl, r7
   88dfc:	3301      	adds	r3, #1
   88dfe:	e7b2      	b.n	88d66 <_dtoa_r+0xbe6>
   88e00:	9a07      	ldr	r2, [sp, #28]
   88e02:	4637      	mov	r7, r6
   88e04:	3201      	adds	r2, #1
   88e06:	4646      	mov	r6, r8
   88e08:	9207      	str	r2, [sp, #28]
   88e0a:	e577      	b.n	888fc <_dtoa_r+0x77c>
   88e0c:	0008c2a8 	.word	0x0008c2a8
   88e10:	7ff00000 	.word	0x7ff00000
   88e14:	0008c408 	.word	0x0008c408
   88e18:	0008c3e0 	.word	0x0008c3e0
   88e1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   88e20:	4983      	ldr	r1, [pc, #524]	; (89030 <_dtoa_r+0xeb0>)
   88e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88e26:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   88e2a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   88e2e:	f002 fcff 	bl	8b830 <__aeabi_dmul>
   88e32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88e36:	4649      	mov	r1, r9
   88e38:	4640      	mov	r0, r8
   88e3a:	f002 ffa9 	bl	8bd90 <__aeabi_d2iz>
   88e3e:	4606      	mov	r6, r0
   88e40:	f002 fc8c 	bl	8b75c <__aeabi_i2d>
   88e44:	460b      	mov	r3, r1
   88e46:	4602      	mov	r2, r0
   88e48:	4649      	mov	r1, r9
   88e4a:	4640      	mov	r0, r8
   88e4c:	f002 fb38 	bl	8b4c0 <__aeabi_dsub>
   88e50:	4653      	mov	r3, sl
   88e52:	9f03      	ldr	r7, [sp, #12]
   88e54:	3630      	adds	r6, #48	; 0x30
   88e56:	2b01      	cmp	r3, #1
   88e58:	4680      	mov	r8, r0
   88e5a:	4689      	mov	r9, r1
   88e5c:	f807 6b01 	strb.w	r6, [r7], #1
   88e60:	f000 80ac 	beq.w	88fbc <_dtoa_r+0xe3c>
   88e64:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   88e66:	9b03      	ldr	r3, [sp, #12]
   88e68:	441e      	add	r6, r3
   88e6a:	2200      	movs	r2, #0
   88e6c:	4b71      	ldr	r3, [pc, #452]	; (89034 <_dtoa_r+0xeb4>)
   88e6e:	4640      	mov	r0, r8
   88e70:	4649      	mov	r1, r9
   88e72:	f002 fcdd 	bl	8b830 <__aeabi_dmul>
   88e76:	4689      	mov	r9, r1
   88e78:	4680      	mov	r8, r0
   88e7a:	f002 ff89 	bl	8bd90 <__aeabi_d2iz>
   88e7e:	4682      	mov	sl, r0
   88e80:	f002 fc6c 	bl	8b75c <__aeabi_i2d>
   88e84:	4602      	mov	r2, r0
   88e86:	460b      	mov	r3, r1
   88e88:	4640      	mov	r0, r8
   88e8a:	4649      	mov	r1, r9
   88e8c:	f002 fb18 	bl	8b4c0 <__aeabi_dsub>
   88e90:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   88e94:	f807 ab01 	strb.w	sl, [r7], #1
   88e98:	42b7      	cmp	r7, r6
   88e9a:	4680      	mov	r8, r0
   88e9c:	4689      	mov	r9, r1
   88e9e:	d1e4      	bne.n	88e6a <_dtoa_r+0xcea>
   88ea0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88ea4:	2200      	movs	r2, #0
   88ea6:	4b64      	ldr	r3, [pc, #400]	; (89038 <_dtoa_r+0xeb8>)
   88ea8:	f002 fb0c 	bl	8b4c4 <__adddf3>
   88eac:	4642      	mov	r2, r8
   88eae:	464b      	mov	r3, r9
   88eb0:	f002 ff30 	bl	8bd14 <__aeabi_dcmplt>
   88eb4:	2800      	cmp	r0, #0
   88eb6:	d162      	bne.n	88f7e <_dtoa_r+0xdfe>
   88eb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88ebc:	2000      	movs	r0, #0
   88ebe:	495e      	ldr	r1, [pc, #376]	; (89038 <_dtoa_r+0xeb8>)
   88ec0:	f002 fafe 	bl	8b4c0 <__aeabi_dsub>
   88ec4:	4642      	mov	r2, r8
   88ec6:	464b      	mov	r3, r9
   88ec8:	f002 ff42 	bl	8bd50 <__aeabi_dcmpgt>
   88ecc:	2800      	cmp	r0, #0
   88ece:	f43f aba9 	beq.w	88624 <_dtoa_r+0x4a4>
   88ed2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   88ed6:	46b2      	mov	sl, r6
   88ed8:	2b30      	cmp	r3, #48	; 0x30
   88eda:	f106 36ff 	add.w	r6, r6, #4294967295
   88ede:	d0f8      	beq.n	88ed2 <_dtoa_r+0xd52>
   88ee0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88ee2:	3301      	adds	r3, #1
   88ee4:	9307      	str	r3, [sp, #28]
   88ee6:	e538      	b.n	8895a <_dtoa_r+0x7da>
   88ee8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88eea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   88eee:	e6d5      	b.n	88c9c <_dtoa_r+0xb1c>
   88ef0:	f04f 0a02 	mov.w	sl, #2
   88ef4:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   88ef8:	f7ff bac0 	b.w	8847c <_dtoa_r+0x2fc>
   88efc:	9b08      	ldr	r3, [sp, #32]
   88efe:	2b00      	cmp	r3, #0
   88f00:	f43f ab62 	beq.w	885c8 <_dtoa_r+0x448>
   88f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88f06:	2b00      	cmp	r3, #0
   88f08:	f77f ab8c 	ble.w	88624 <_dtoa_r+0x4a4>
   88f0c:	9313      	str	r3, [sp, #76]	; 0x4c
   88f0e:	9b07      	ldr	r3, [sp, #28]
   88f10:	2200      	movs	r2, #0
   88f12:	3b01      	subs	r3, #1
   88f14:	4640      	mov	r0, r8
   88f16:	4649      	mov	r1, r9
   88f18:	9314      	str	r3, [sp, #80]	; 0x50
   88f1a:	4b46      	ldr	r3, [pc, #280]	; (89034 <_dtoa_r+0xeb4>)
   88f1c:	f002 fc88 	bl	8b830 <__aeabi_dmul>
   88f20:	4680      	mov	r8, r0
   88f22:	4689      	mov	r9, r1
   88f24:	f10a 0001 	add.w	r0, sl, #1
   88f28:	f002 fc18 	bl	8b75c <__aeabi_i2d>
   88f2c:	4642      	mov	r2, r8
   88f2e:	464b      	mov	r3, r9
   88f30:	f002 fc7e 	bl	8b830 <__aeabi_dmul>
   88f34:	4b41      	ldr	r3, [pc, #260]	; (8903c <_dtoa_r+0xebc>)
   88f36:	2200      	movs	r2, #0
   88f38:	f002 fac4 	bl	8b4c4 <__adddf3>
   88f3c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88f40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88f44:	9311      	str	r3, [sp, #68]	; 0x44
   88f46:	f7ff babc 	b.w	884c2 <_dtoa_r+0x342>
   88f4a:	9b07      	ldr	r3, [sp, #28]
   88f4c:	3301      	adds	r3, #1
   88f4e:	9307      	str	r3, [sp, #28]
   88f50:	2331      	movs	r3, #49	; 0x31
   88f52:	f7ff bb34 	b.w	885be <_dtoa_r+0x43e>
   88f56:	9b07      	ldr	r3, [sp, #28]
   88f58:	46bb      	mov	fp, r7
   88f5a:	3301      	adds	r3, #1
   88f5c:	9307      	str	r3, [sp, #28]
   88f5e:	2339      	movs	r3, #57	; 0x39
   88f60:	4637      	mov	r7, r6
   88f62:	f80b 3b01 	strb.w	r3, [fp], #1
   88f66:	4646      	mov	r6, r8
   88f68:	e4d7      	b.n	8891a <_dtoa_r+0x79a>
   88f6a:	f04f 0900 	mov.w	r9, #0
   88f6e:	464e      	mov	r6, r9
   88f70:	e649      	b.n	88c06 <_dtoa_r+0xa86>
   88f72:	469a      	mov	sl, r3
   88f74:	e468      	b.n	88848 <_dtoa_r+0x6c8>
   88f76:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88f78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   88f7a:	46b2      	mov	sl, r6
   88f7c:	e7b0      	b.n	88ee0 <_dtoa_r+0xd60>
   88f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88f80:	9a03      	ldr	r2, [sp, #12]
   88f82:	9307      	str	r3, [sp, #28]
   88f84:	f7ff bb14 	b.w	885b0 <_dtoa_r+0x430>
   88f88:	f47f aeec 	bne.w	88d64 <_dtoa_r+0xbe4>
   88f8c:	07da      	lsls	r2, r3, #31
   88f8e:	f57f aee9 	bpl.w	88d64 <_dtoa_r+0xbe4>
   88f92:	e6e2      	b.n	88d5a <_dtoa_r+0xbda>
   88f94:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   88f98:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88f9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   88f9c:	f7ff bb42 	b.w	88624 <_dtoa_r+0x4a4>
   88fa0:	2b39      	cmp	r3, #57	; 0x39
   88fa2:	d0d8      	beq.n	88f56 <_dtoa_r+0xdd6>
   88fa4:	f1ba 0f00 	cmp.w	sl, #0
   88fa8:	f73f aeda 	bgt.w	88d60 <_dtoa_r+0xbe0>
   88fac:	e6da      	b.n	88d64 <_dtoa_r+0xbe4>
   88fae:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88fb0:	2b02      	cmp	r3, #2
   88fb2:	f73f ae13 	bgt.w	88bdc <_dtoa_r+0xa5c>
   88fb6:	f8cd 801c 	str.w	r8, [sp, #28]
   88fba:	e59c      	b.n	88af6 <_dtoa_r+0x976>
   88fbc:	463e      	mov	r6, r7
   88fbe:	e76f      	b.n	88ea0 <_dtoa_r+0xd20>
   88fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88fc2:	2b02      	cmp	r3, #2
   88fc4:	f73f ae0a 	bgt.w	88bdc <_dtoa_r+0xa5c>
   88fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88fca:	f8cd 801c 	str.w	r8, [sp, #28]
   88fce:	9308      	str	r3, [sp, #32]
   88fd0:	e50f      	b.n	889f2 <_dtoa_r+0x872>
   88fd2:	f04f 0a02 	mov.w	sl, #2
   88fd6:	f7ff ba51 	b.w	8847c <_dtoa_r+0x2fc>
   88fda:	4602      	mov	r2, r0
   88fdc:	f240 21ea 	movw	r1, #746	; 0x2ea
   88fe0:	4b17      	ldr	r3, [pc, #92]	; (89040 <_dtoa_r+0xec0>)
   88fe2:	4818      	ldr	r0, [pc, #96]	; (89044 <_dtoa_r+0xec4>)
   88fe4:	f002 f8dc 	bl	8b1a0 <__assert_func>
   88fe8:	2600      	movs	r6, #0
   88fea:	4620      	mov	r0, r4
   88fec:	4631      	mov	r1, r6
   88fee:	6466      	str	r6, [r4, #68]	; 0x44
   88ff0:	f001 f956 	bl	8a2a0 <_Balloc>
   88ff4:	9003      	str	r0, [sp, #12]
   88ff6:	b978      	cbnz	r0, 89018 <_dtoa_r+0xe98>
   88ff8:	2200      	movs	r2, #0
   88ffa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   88ffe:	4b10      	ldr	r3, [pc, #64]	; (89040 <_dtoa_r+0xec0>)
   89000:	4810      	ldr	r0, [pc, #64]	; (89044 <_dtoa_r+0xec4>)
   89002:	f002 f8cd 	bl	8b1a0 <__assert_func>
   89006:	4b10      	ldr	r3, [pc, #64]	; (89048 <_dtoa_r+0xec8>)
   89008:	9303      	str	r3, [sp, #12]
   8900a:	f7ff b8f4 	b.w	881f6 <_dtoa_r+0x76>
   8900e:	f43f ac33 	beq.w	88878 <_dtoa_r+0x6f8>
   89012:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   89016:	e4b5      	b.n	88984 <_dtoa_r+0x804>
   89018:	9b03      	ldr	r3, [sp, #12]
   8901a:	2201      	movs	r2, #1
   8901c:	6423      	str	r3, [r4, #64]	; 0x40
   8901e:	f04f 33ff 	mov.w	r3, #4294967295
   89022:	9623      	str	r6, [sp, #140]	; 0x8c
   89024:	9312      	str	r3, [sp, #72]	; 0x48
   89026:	920c      	str	r2, [sp, #48]	; 0x30
   89028:	9308      	str	r3, [sp, #32]
   8902a:	f7ff bafb 	b.w	88624 <_dtoa_r+0x4a4>
   8902e:	bf00      	nop
   89030:	0008c408 	.word	0x0008c408
   89034:	40240000 	.word	0x40240000
   89038:	3fe00000 	.word	0x3fe00000
   8903c:	401c0000 	.word	0x401c0000
   89040:	0008c2b8 	.word	0x0008c2b8
   89044:	0008c2cc 	.word	0x0008c2cc
   89048:	0008c2ac 	.word	0x0008c2ac

0008904c <__sflush_r>:
   8904c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   89050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89052:	460c      	mov	r4, r1
   89054:	0711      	lsls	r1, r2, #28
   89056:	4607      	mov	r7, r0
   89058:	d443      	bmi.n	890e2 <__sflush_r+0x96>
   8905a:	6863      	ldr	r3, [r4, #4]
   8905c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   89060:	2b00      	cmp	r3, #0
   89062:	81a2      	strh	r2, [r4, #12]
   89064:	dd5b      	ble.n	8911e <__sflush_r+0xd2>
   89066:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   89068:	2d00      	cmp	r5, #0
   8906a:	d056      	beq.n	8911a <__sflush_r+0xce>
   8906c:	2300      	movs	r3, #0
   8906e:	683e      	ldr	r6, [r7, #0]
   89070:	603b      	str	r3, [r7, #0]
   89072:	b293      	uxth	r3, r2
   89074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   89078:	d155      	bne.n	89126 <__sflush_r+0xda>
   8907a:	2301      	movs	r3, #1
   8907c:	4638      	mov	r0, r7
   8907e:	69e1      	ldr	r1, [r4, #28]
   89080:	47a8      	blx	r5
   89082:	1c42      	adds	r2, r0, #1
   89084:	d065      	beq.n	89152 <__sflush_r+0x106>
   89086:	89a3      	ldrh	r3, [r4, #12]
   89088:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8908a:	075b      	lsls	r3, r3, #29
   8908c:	d505      	bpl.n	8909a <__sflush_r+0x4e>
   8908e:	6863      	ldr	r3, [r4, #4]
   89090:	1ac0      	subs	r0, r0, r3
   89092:	6b23      	ldr	r3, [r4, #48]	; 0x30
   89094:	b10b      	cbz	r3, 8909a <__sflush_r+0x4e>
   89096:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   89098:	1ac0      	subs	r0, r0, r3
   8909a:	4602      	mov	r2, r0
   8909c:	69e1      	ldr	r1, [r4, #28]
   8909e:	2300      	movs	r3, #0
   890a0:	4638      	mov	r0, r7
   890a2:	47a8      	blx	r5
   890a4:	1c41      	adds	r1, r0, #1
   890a6:	d140      	bne.n	8912a <__sflush_r+0xde>
   890a8:	683b      	ldr	r3, [r7, #0]
   890aa:	2b00      	cmp	r3, #0
   890ac:	d03d      	beq.n	8912a <__sflush_r+0xde>
   890ae:	2b1d      	cmp	r3, #29
   890b0:	d001      	beq.n	890b6 <__sflush_r+0x6a>
   890b2:	2b16      	cmp	r3, #22
   890b4:	d154      	bne.n	89160 <__sflush_r+0x114>
   890b6:	2200      	movs	r2, #0
   890b8:	89a3      	ldrh	r3, [r4, #12]
   890ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   890be:	81a3      	strh	r3, [r4, #12]
   890c0:	6923      	ldr	r3, [r4, #16]
   890c2:	e9c4 3200 	strd	r3, r2, [r4]
   890c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   890c8:	603e      	str	r6, [r7, #0]
   890ca:	b331      	cbz	r1, 8911a <__sflush_r+0xce>
   890cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   890d0:	4299      	cmp	r1, r3
   890d2:	d002      	beq.n	890da <__sflush_r+0x8e>
   890d4:	4638      	mov	r0, r7
   890d6:	f000 f9fb 	bl	894d0 <_free_r>
   890da:	2300      	movs	r3, #0
   890dc:	4618      	mov	r0, r3
   890de:	6323      	str	r3, [r4, #48]	; 0x30
   890e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   890e2:	6926      	ldr	r6, [r4, #16]
   890e4:	b1ce      	cbz	r6, 8911a <__sflush_r+0xce>
   890e6:	b293      	uxth	r3, r2
   890e8:	079a      	lsls	r2, r3, #30
   890ea:	bf18      	it	ne
   890ec:	2300      	movne	r3, #0
   890ee:	6825      	ldr	r5, [r4, #0]
   890f0:	bf08      	it	eq
   890f2:	6963      	ldreq	r3, [r4, #20]
   890f4:	6026      	str	r6, [r4, #0]
   890f6:	1bad      	subs	r5, r5, r6
   890f8:	60a3      	str	r3, [r4, #8]
   890fa:	e00c      	b.n	89116 <__sflush_r+0xca>
   890fc:	462b      	mov	r3, r5
   890fe:	4632      	mov	r2, r6
   89100:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   89104:	4638      	mov	r0, r7
   89106:	69e1      	ldr	r1, [r4, #28]
   89108:	47e0      	blx	ip
   8910a:	f1b0 0c00 	subs.w	ip, r0, #0
   8910e:	eba5 050c 	sub.w	r5, r5, ip
   89112:	4466      	add	r6, ip
   89114:	dd16      	ble.n	89144 <__sflush_r+0xf8>
   89116:	2d00      	cmp	r5, #0
   89118:	dcf0      	bgt.n	890fc <__sflush_r+0xb0>
   8911a:	2000      	movs	r0, #0
   8911c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8911e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   89120:	2b00      	cmp	r3, #0
   89122:	dca0      	bgt.n	89066 <__sflush_r+0x1a>
   89124:	e7f9      	b.n	8911a <__sflush_r+0xce>
   89126:	6d20      	ldr	r0, [r4, #80]	; 0x50
   89128:	e7af      	b.n	8908a <__sflush_r+0x3e>
   8912a:	2200      	movs	r2, #0
   8912c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89130:	6062      	str	r2, [r4, #4]
   89132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89136:	6922      	ldr	r2, [r4, #16]
   89138:	81a3      	strh	r3, [r4, #12]
   8913a:	04db      	lsls	r3, r3, #19
   8913c:	6022      	str	r2, [r4, #0]
   8913e:	d5c2      	bpl.n	890c6 <__sflush_r+0x7a>
   89140:	6520      	str	r0, [r4, #80]	; 0x50
   89142:	e7c0      	b.n	890c6 <__sflush_r+0x7a>
   89144:	89a3      	ldrh	r3, [r4, #12]
   89146:	f04f 30ff 	mov.w	r0, #4294967295
   8914a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8914e:	81a3      	strh	r3, [r4, #12]
   89150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89152:	683b      	ldr	r3, [r7, #0]
   89154:	2b00      	cmp	r3, #0
   89156:	d096      	beq.n	89086 <__sflush_r+0x3a>
   89158:	2b1d      	cmp	r3, #29
   8915a:	d006      	beq.n	8916a <__sflush_r+0x11e>
   8915c:	2b16      	cmp	r3, #22
   8915e:	d004      	beq.n	8916a <__sflush_r+0x11e>
   89160:	89a3      	ldrh	r3, [r4, #12]
   89162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89166:	81a3      	strh	r3, [r4, #12]
   89168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8916a:	2000      	movs	r0, #0
   8916c:	603e      	str	r6, [r7, #0]
   8916e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00089170 <_fflush_r>:
   89170:	b538      	push	{r3, r4, r5, lr}
   89172:	4605      	mov	r5, r0
   89174:	460c      	mov	r4, r1
   89176:	b108      	cbz	r0, 8917c <_fflush_r+0xc>
   89178:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8917a:	b1a3      	cbz	r3, 891a6 <_fflush_r+0x36>
   8917c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89180:	b1b8      	cbz	r0, 891b2 <_fflush_r+0x42>
   89182:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89184:	07db      	lsls	r3, r3, #31
   89186:	d401      	bmi.n	8918c <_fflush_r+0x1c>
   89188:	0581      	lsls	r1, r0, #22
   8918a:	d515      	bpl.n	891b8 <_fflush_r+0x48>
   8918c:	4628      	mov	r0, r5
   8918e:	4621      	mov	r1, r4
   89190:	f7ff ff5c 	bl	8904c <__sflush_r>
   89194:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89196:	4605      	mov	r5, r0
   89198:	07da      	lsls	r2, r3, #31
   8919a:	d402      	bmi.n	891a2 <_fflush_r+0x32>
   8919c:	89a3      	ldrh	r3, [r4, #12]
   8919e:	059b      	lsls	r3, r3, #22
   891a0:	d50e      	bpl.n	891c0 <_fflush_r+0x50>
   891a2:	4628      	mov	r0, r5
   891a4:	bd38      	pop	{r3, r4, r5, pc}
   891a6:	f000 f817 	bl	891d8 <__sinit>
   891aa:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   891ae:	2800      	cmp	r0, #0
   891b0:	d1e7      	bne.n	89182 <_fflush_r+0x12>
   891b2:	4605      	mov	r5, r0
   891b4:	4628      	mov	r0, r5
   891b6:	bd38      	pop	{r3, r4, r5, pc}
   891b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   891ba:	f000 fc33 	bl	89a24 <__retarget_lock_acquire_recursive>
   891be:	e7e5      	b.n	8918c <_fflush_r+0x1c>
   891c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   891c2:	f000 fc31 	bl	89a28 <__retarget_lock_release_recursive>
   891c6:	4628      	mov	r0, r5
   891c8:	bd38      	pop	{r3, r4, r5, pc}
   891ca:	bf00      	nop

000891cc <_cleanup_r>:
   891cc:	4901      	ldr	r1, [pc, #4]	; (891d4 <_cleanup_r+0x8>)
   891ce:	f000 bbf7 	b.w	899c0 <_fwalk_reent>
   891d2:	bf00      	nop
   891d4:	0008b289 	.word	0x0008b289

000891d8 <__sinit>:
   891d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   891dc:	4682      	mov	sl, r0
   891de:	4839      	ldr	r0, [pc, #228]	; (892c4 <__sinit+0xec>)
   891e0:	f000 fc20 	bl	89a24 <__retarget_lock_acquire_recursive>
   891e4:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   891e8:	2c00      	cmp	r4, #0
   891ea:	d166      	bne.n	892ba <__sinit+0xe2>
   891ec:	2304      	movs	r3, #4
   891ee:	2203      	movs	r2, #3
   891f0:	4935      	ldr	r1, [pc, #212]	; (892c8 <__sinit+0xf0>)
   891f2:	f8da 5004 	ldr.w	r5, [sl, #4]
   891f6:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   891fa:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 892cc <__sinit+0xf4>
   891fe:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 892d0 <__sinit+0xf8>
   89202:	4f34      	ldr	r7, [pc, #208]	; (892d4 <__sinit+0xfc>)
   89204:	4e34      	ldr	r6, [pc, #208]	; (892d8 <__sinit+0x100>)
   89206:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   8920a:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   8920e:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   89212:	4621      	mov	r1, r4
   89214:	60eb      	str	r3, [r5, #12]
   89216:	2208      	movs	r2, #8
   89218:	e9c5 4400 	strd	r4, r4, [r5]
   8921c:	e9c5 4404 	strd	r4, r4, [r5, #16]
   89220:	666c      	str	r4, [r5, #100]	; 0x64
   89222:	60ac      	str	r4, [r5, #8]
   89224:	61ac      	str	r4, [r5, #24]
   89226:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8922a:	f7fc f845 	bl	852b8 <memset>
   8922e:	e9c5 5907 	strd	r5, r9, [r5, #28]
   89232:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   89236:	62ee      	str	r6, [r5, #44]	; 0x2c
   89238:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8923c:	f000 fbee 	bl	89a1c <__retarget_lock_init_recursive>
   89240:	f8da 5008 	ldr.w	r5, [sl, #8]
   89244:	4b25      	ldr	r3, [pc, #148]	; (892dc <__sinit+0x104>)
   89246:	4621      	mov	r1, r4
   89248:	60eb      	str	r3, [r5, #12]
   8924a:	2208      	movs	r2, #8
   8924c:	e9c5 4400 	strd	r4, r4, [r5]
   89250:	e9c5 4404 	strd	r4, r4, [r5, #16]
   89254:	666c      	str	r4, [r5, #100]	; 0x64
   89256:	60ac      	str	r4, [r5, #8]
   89258:	61ac      	str	r4, [r5, #24]
   8925a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8925e:	f7fc f82b 	bl	852b8 <memset>
   89262:	e9c5 5907 	strd	r5, r9, [r5, #28]
   89266:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8926a:	62ee      	str	r6, [r5, #44]	; 0x2c
   8926c:	f105 0058 	add.w	r0, r5, #88	; 0x58
   89270:	f000 fbd4 	bl	89a1c <__retarget_lock_init_recursive>
   89274:	f8da 500c 	ldr.w	r5, [sl, #12]
   89278:	4b19      	ldr	r3, [pc, #100]	; (892e0 <__sinit+0x108>)
   8927a:	4621      	mov	r1, r4
   8927c:	60eb      	str	r3, [r5, #12]
   8927e:	2208      	movs	r2, #8
   89280:	e9c5 4400 	strd	r4, r4, [r5]
   89284:	e9c5 4404 	strd	r4, r4, [r5, #16]
   89288:	666c      	str	r4, [r5, #100]	; 0x64
   8928a:	60ac      	str	r4, [r5, #8]
   8928c:	61ac      	str	r4, [r5, #24]
   8928e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   89292:	f7fc f811 	bl	852b8 <memset>
   89296:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8929a:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8929e:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   892a2:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   892a6:	f000 fbb9 	bl	89a1c <__retarget_lock_init_recursive>
   892aa:	2301      	movs	r3, #1
   892ac:	4805      	ldr	r0, [pc, #20]	; (892c4 <__sinit+0xec>)
   892ae:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   892b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   892b6:	f000 bbb7 	b.w	89a28 <__retarget_lock_release_recursive>
   892ba:	4802      	ldr	r0, [pc, #8]	; (892c4 <__sinit+0xec>)
   892bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   892c0:	f000 bbb2 	b.w	89a28 <__retarget_lock_release_recursive>
   892c4:	20001978 	.word	0x20001978
   892c8:	000891cd 	.word	0x000891cd
   892cc:	0008ae59 	.word	0x0008ae59
   892d0:	0008ae7d 	.word	0x0008ae7d
   892d4:	0008aebd 	.word	0x0008aebd
   892d8:	0008aedd 	.word	0x0008aedd
   892dc:	00010009 	.word	0x00010009
   892e0:	00020012 	.word	0x00020012

000892e4 <__sfp_lock_acquire>:
   892e4:	4801      	ldr	r0, [pc, #4]	; (892ec <__sfp_lock_acquire+0x8>)
   892e6:	f000 bb9d 	b.w	89a24 <__retarget_lock_acquire_recursive>
   892ea:	bf00      	nop
   892ec:	20001974 	.word	0x20001974

000892f0 <__sfp_lock_release>:
   892f0:	4801      	ldr	r0, [pc, #4]	; (892f8 <__sfp_lock_release+0x8>)
   892f2:	f000 bb99 	b.w	89a28 <__retarget_lock_release_recursive>
   892f6:	bf00      	nop
   892f8:	20001974 	.word	0x20001974

000892fc <__libc_fini_array>:
   892fc:	b538      	push	{r3, r4, r5, lr}
   892fe:	4b08      	ldr	r3, [pc, #32]	; (89320 <__libc_fini_array+0x24>)
   89300:	4d08      	ldr	r5, [pc, #32]	; (89324 <__libc_fini_array+0x28>)
   89302:	1b5b      	subs	r3, r3, r5
   89304:	109c      	asrs	r4, r3, #2
   89306:	d007      	beq.n	89318 <__libc_fini_array+0x1c>
   89308:	3b04      	subs	r3, #4
   8930a:	441d      	add	r5, r3
   8930c:	3c01      	subs	r4, #1
   8930e:	f855 3904 	ldr.w	r3, [r5], #-4
   89312:	4798      	blx	r3
   89314:	2c00      	cmp	r4, #0
   89316:	d1f9      	bne.n	8930c <__libc_fini_array+0x10>
   89318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8931c:	f003 b98a 	b.w	8c634 <_fini>
   89320:	0008c644 	.word	0x0008c644
   89324:	0008c640 	.word	0x0008c640

00089328 <__fputwc>:
   89328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8932c:	b083      	sub	sp, #12
   8932e:	4607      	mov	r7, r0
   89330:	4688      	mov	r8, r1
   89332:	4614      	mov	r4, r2
   89334:	f000 fb68 	bl	89a08 <__locale_mb_cur_max>
   89338:	2801      	cmp	r0, #1
   8933a:	d103      	bne.n	89344 <__fputwc+0x1c>
   8933c:	f108 33ff 	add.w	r3, r8, #4294967295
   89340:	2bfe      	cmp	r3, #254	; 0xfe
   89342:	d933      	bls.n	893ac <__fputwc+0x84>
   89344:	4642      	mov	r2, r8
   89346:	4638      	mov	r0, r7
   89348:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8934c:	a901      	add	r1, sp, #4
   8934e:	f001 fe9f 	bl	8b090 <_wcrtomb_r>
   89352:	1c42      	adds	r2, r0, #1
   89354:	4606      	mov	r6, r0
   89356:	d02f      	beq.n	893b8 <__fputwc+0x90>
   89358:	b318      	cbz	r0, 893a2 <__fputwc+0x7a>
   8935a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8935e:	2500      	movs	r5, #0
   89360:	f10d 0905 	add.w	r9, sp, #5
   89364:	e008      	b.n	89378 <__fputwc+0x50>
   89366:	6823      	ldr	r3, [r4, #0]
   89368:	1c5a      	adds	r2, r3, #1
   8936a:	6022      	str	r2, [r4, #0]
   8936c:	7019      	strb	r1, [r3, #0]
   8936e:	3501      	adds	r5, #1
   89370:	42b5      	cmp	r5, r6
   89372:	d216      	bcs.n	893a2 <__fputwc+0x7a>
   89374:	f819 1b01 	ldrb.w	r1, [r9], #1
   89378:	68a3      	ldr	r3, [r4, #8]
   8937a:	3b01      	subs	r3, #1
   8937c:	2b00      	cmp	r3, #0
   8937e:	60a3      	str	r3, [r4, #8]
   89380:	daf1      	bge.n	89366 <__fputwc+0x3e>
   89382:	69a2      	ldr	r2, [r4, #24]
   89384:	4293      	cmp	r3, r2
   89386:	db01      	blt.n	8938c <__fputwc+0x64>
   89388:	290a      	cmp	r1, #10
   8938a:	d1ec      	bne.n	89366 <__fputwc+0x3e>
   8938c:	4622      	mov	r2, r4
   8938e:	4638      	mov	r0, r7
   89390:	f001 fe26 	bl	8afe0 <__swbuf_r>
   89394:	1c43      	adds	r3, r0, #1
   89396:	d1ea      	bne.n	8936e <__fputwc+0x46>
   89398:	4606      	mov	r6, r0
   8939a:	4630      	mov	r0, r6
   8939c:	b003      	add	sp, #12
   8939e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   893a2:	4646      	mov	r6, r8
   893a4:	4630      	mov	r0, r6
   893a6:	b003      	add	sp, #12
   893a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   893ac:	fa5f f188 	uxtb.w	r1, r8
   893b0:	4606      	mov	r6, r0
   893b2:	f88d 1004 	strb.w	r1, [sp, #4]
   893b6:	e7d2      	b.n	8935e <__fputwc+0x36>
   893b8:	4630      	mov	r0, r6
   893ba:	89a3      	ldrh	r3, [r4, #12]
   893bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   893c0:	81a3      	strh	r3, [r4, #12]
   893c2:	b003      	add	sp, #12
   893c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000893c8 <_fputwc_r>:
   893c8:	b530      	push	{r4, r5, lr}
   893ca:	6e53      	ldr	r3, [r2, #100]	; 0x64
   893cc:	4614      	mov	r4, r2
   893ce:	f013 0f01 	tst.w	r3, #1
   893d2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   893d6:	4605      	mov	r5, r0
   893d8:	b083      	sub	sp, #12
   893da:	b29a      	uxth	r2, r3
   893dc:	d101      	bne.n	893e2 <_fputwc_r+0x1a>
   893de:	0598      	lsls	r0, r3, #22
   893e0:	d51c      	bpl.n	8941c <_fputwc_r+0x54>
   893e2:	0490      	lsls	r0, r2, #18
   893e4:	d406      	bmi.n	893f4 <_fputwc_r+0x2c>
   893e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   893e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   893ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   893f0:	81a3      	strh	r3, [r4, #12]
   893f2:	6662      	str	r2, [r4, #100]	; 0x64
   893f4:	4622      	mov	r2, r4
   893f6:	4628      	mov	r0, r5
   893f8:	f7ff ff96 	bl	89328 <__fputwc>
   893fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   893fe:	4605      	mov	r5, r0
   89400:	07da      	lsls	r2, r3, #31
   89402:	d402      	bmi.n	8940a <_fputwc_r+0x42>
   89404:	89a3      	ldrh	r3, [r4, #12]
   89406:	059b      	lsls	r3, r3, #22
   89408:	d502      	bpl.n	89410 <_fputwc_r+0x48>
   8940a:	4628      	mov	r0, r5
   8940c:	b003      	add	sp, #12
   8940e:	bd30      	pop	{r4, r5, pc}
   89410:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89412:	f000 fb09 	bl	89a28 <__retarget_lock_release_recursive>
   89416:	4628      	mov	r0, r5
   89418:	b003      	add	sp, #12
   8941a:	bd30      	pop	{r4, r5, pc}
   8941c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8941e:	9101      	str	r1, [sp, #4]
   89420:	f000 fb00 	bl	89a24 <__retarget_lock_acquire_recursive>
   89424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89428:	9901      	ldr	r1, [sp, #4]
   8942a:	b29a      	uxth	r2, r3
   8942c:	e7d9      	b.n	893e2 <_fputwc_r+0x1a>
   8942e:	bf00      	nop

00089430 <_malloc_trim_r>:
   89430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89432:	460c      	mov	r4, r1
   89434:	4f23      	ldr	r7, [pc, #140]	; (894c4 <_malloc_trim_r+0x94>)
   89436:	4606      	mov	r6, r0
   89438:	f000 ff26 	bl	8a288 <__malloc_lock>
   8943c:	68bb      	ldr	r3, [r7, #8]
   8943e:	685d      	ldr	r5, [r3, #4]
   89440:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   89444:	f025 0503 	bic.w	r5, r5, #3
   89448:	330f      	adds	r3, #15
   8944a:	442b      	add	r3, r5
   8944c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   89450:	f023 030f 	bic.w	r3, r3, #15
   89454:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   89458:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8945c:	db07      	blt.n	8946e <_malloc_trim_r+0x3e>
   8945e:	2100      	movs	r1, #0
   89460:	4630      	mov	r0, r6
   89462:	f001 fce7 	bl	8ae34 <_sbrk_r>
   89466:	68bb      	ldr	r3, [r7, #8]
   89468:	442b      	add	r3, r5
   8946a:	4298      	cmp	r0, r3
   8946c:	d004      	beq.n	89478 <_malloc_trim_r+0x48>
   8946e:	4630      	mov	r0, r6
   89470:	f000 ff10 	bl	8a294 <__malloc_unlock>
   89474:	2000      	movs	r0, #0
   89476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89478:	4630      	mov	r0, r6
   8947a:	4261      	negs	r1, r4
   8947c:	f001 fcda 	bl	8ae34 <_sbrk_r>
   89480:	3001      	adds	r0, #1
   89482:	d00d      	beq.n	894a0 <_malloc_trim_r+0x70>
   89484:	4a10      	ldr	r2, [pc, #64]	; (894c8 <_malloc_trim_r+0x98>)
   89486:	68bb      	ldr	r3, [r7, #8]
   89488:	1b2d      	subs	r5, r5, r4
   8948a:	f045 0501 	orr.w	r5, r5, #1
   8948e:	605d      	str	r5, [r3, #4]
   89490:	6813      	ldr	r3, [r2, #0]
   89492:	4630      	mov	r0, r6
   89494:	1b1b      	subs	r3, r3, r4
   89496:	6013      	str	r3, [r2, #0]
   89498:	f000 fefc 	bl	8a294 <__malloc_unlock>
   8949c:	2001      	movs	r0, #1
   8949e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   894a0:	2100      	movs	r1, #0
   894a2:	4630      	mov	r0, r6
   894a4:	f001 fcc6 	bl	8ae34 <_sbrk_r>
   894a8:	68ba      	ldr	r2, [r7, #8]
   894aa:	1a83      	subs	r3, r0, r2
   894ac:	2b0f      	cmp	r3, #15
   894ae:	ddde      	ble.n	8946e <_malloc_trim_r+0x3e>
   894b0:	f043 0301 	orr.w	r3, r3, #1
   894b4:	6053      	str	r3, [r2, #4]
   894b6:	4b05      	ldr	r3, [pc, #20]	; (894cc <_malloc_trim_r+0x9c>)
   894b8:	4903      	ldr	r1, [pc, #12]	; (894c8 <_malloc_trim_r+0x98>)
   894ba:	681b      	ldr	r3, [r3, #0]
   894bc:	1ac0      	subs	r0, r0, r3
   894be:	6008      	str	r0, [r1, #0]
   894c0:	e7d5      	b.n	8946e <_malloc_trim_r+0x3e>
   894c2:	bf00      	nop
   894c4:	20000988 	.word	0x20000988
   894c8:	2000197c 	.word	0x2000197c
   894cc:	20000d90 	.word	0x20000d90

000894d0 <_free_r>:
   894d0:	2900      	cmp	r1, #0
   894d2:	d05e      	beq.n	89592 <_free_r+0xc2>
   894d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   894d6:	460c      	mov	r4, r1
   894d8:	4606      	mov	r6, r0
   894da:	f000 fed5 	bl	8a288 <__malloc_lock>
   894de:	f854 2c04 	ldr.w	r2, [r4, #-4]
   894e2:	4f78      	ldr	r7, [pc, #480]	; (896c4 <_free_r+0x1f4>)
   894e4:	f1a4 0508 	sub.w	r5, r4, #8
   894e8:	f022 0101 	bic.w	r1, r2, #1
   894ec:	1868      	adds	r0, r5, r1
   894ee:	f8d7 c008 	ldr.w	ip, [r7, #8]
   894f2:	6843      	ldr	r3, [r0, #4]
   894f4:	4584      	cmp	ip, r0
   894f6:	f023 0303 	bic.w	r3, r3, #3
   894fa:	f000 8087 	beq.w	8960c <_free_r+0x13c>
   894fe:	07d2      	lsls	r2, r2, #31
   89500:	6043      	str	r3, [r0, #4]
   89502:	d434      	bmi.n	8956e <_free_r+0x9e>
   89504:	f854 2c08 	ldr.w	r2, [r4, #-8]
   89508:	f107 0408 	add.w	r4, r7, #8
   8950c:	1aad      	subs	r5, r5, r2
   8950e:	4411      	add	r1, r2
   89510:	68aa      	ldr	r2, [r5, #8]
   89512:	42a2      	cmp	r2, r4
   89514:	d068      	beq.n	895e8 <_free_r+0x118>
   89516:	eb00 0c03 	add.w	ip, r0, r3
   8951a:	f8dc e004 	ldr.w	lr, [ip, #4]
   8951e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   89522:	f01e 0f01 	tst.w	lr, #1
   89526:	f8c2 c00c 	str.w	ip, [r2, #12]
   8952a:	f8cc 2008 	str.w	r2, [ip, #8]
   8952e:	f000 8091 	beq.w	89654 <_free_r+0x184>
   89532:	f041 0301 	orr.w	r3, r1, #1
   89536:	606b      	str	r3, [r5, #4]
   89538:	6001      	str	r1, [r0, #0]
   8953a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8953e:	d231      	bcs.n	895a4 <_free_r+0xd4>
   89540:	094a      	lsrs	r2, r1, #5
   89542:	08cb      	lsrs	r3, r1, #3
   89544:	2101      	movs	r1, #1
   89546:	4091      	lsls	r1, r2
   89548:	687a      	ldr	r2, [r7, #4]
   8954a:	3301      	adds	r3, #1
   8954c:	4311      	orrs	r1, r2
   8954e:	6079      	str	r1, [r7, #4]
   89550:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   89554:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   89558:	3a08      	subs	r2, #8
   8955a:	e9c5 1202 	strd	r1, r2, [r5, #8]
   8955e:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   89562:	60cd      	str	r5, [r1, #12]
   89564:	4630      	mov	r0, r6
   89566:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8956a:	f000 be93 	b.w	8a294 <__malloc_unlock>
   8956e:	18c2      	adds	r2, r0, r3
   89570:	6852      	ldr	r2, [r2, #4]
   89572:	07d2      	lsls	r2, r2, #31
   89574:	d40e      	bmi.n	89594 <_free_r+0xc4>
   89576:	4419      	add	r1, r3
   89578:	f107 0408 	add.w	r4, r7, #8
   8957c:	6883      	ldr	r3, [r0, #8]
   8957e:	42a3      	cmp	r3, r4
   89580:	d070      	beq.n	89664 <_free_r+0x194>
   89582:	68c2      	ldr	r2, [r0, #12]
   89584:	60da      	str	r2, [r3, #12]
   89586:	6093      	str	r3, [r2, #8]
   89588:	f041 0301 	orr.w	r3, r1, #1
   8958c:	606b      	str	r3, [r5, #4]
   8958e:	5069      	str	r1, [r5, r1]
   89590:	e7d3      	b.n	8953a <_free_r+0x6a>
   89592:	4770      	bx	lr
   89594:	f041 0301 	orr.w	r3, r1, #1
   89598:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8959c:	f844 3c04 	str.w	r3, [r4, #-4]
   895a0:	6001      	str	r1, [r0, #0]
   895a2:	d3cd      	bcc.n	89540 <_free_r+0x70>
   895a4:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   895a8:	ea4f 2351 	mov.w	r3, r1, lsr #9
   895ac:	d247      	bcs.n	8963e <_free_r+0x16e>
   895ae:	098b      	lsrs	r3, r1, #6
   895b0:	f103 0039 	add.w	r0, r3, #57	; 0x39
   895b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
   895b8:	00c3      	lsls	r3, r0, #3
   895ba:	18f8      	adds	r0, r7, r3
   895bc:	58fb      	ldr	r3, [r7, r3]
   895be:	3808      	subs	r0, #8
   895c0:	4298      	cmp	r0, r3
   895c2:	d058      	beq.n	89676 <_free_r+0x1a6>
   895c4:	685a      	ldr	r2, [r3, #4]
   895c6:	f022 0203 	bic.w	r2, r2, #3
   895ca:	428a      	cmp	r2, r1
   895cc:	d902      	bls.n	895d4 <_free_r+0x104>
   895ce:	689b      	ldr	r3, [r3, #8]
   895d0:	4298      	cmp	r0, r3
   895d2:	d1f7      	bne.n	895c4 <_free_r+0xf4>
   895d4:	68d8      	ldr	r0, [r3, #12]
   895d6:	e9c5 3002 	strd	r3, r0, [r5, #8]
   895da:	6085      	str	r5, [r0, #8]
   895dc:	4630      	mov	r0, r6
   895de:	60dd      	str	r5, [r3, #12]
   895e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   895e4:	f000 be56 	b.w	8a294 <__malloc_unlock>
   895e8:	18c2      	adds	r2, r0, r3
   895ea:	6852      	ldr	r2, [r2, #4]
   895ec:	07d2      	lsls	r2, r2, #31
   895ee:	d463      	bmi.n	896b8 <_free_r+0x1e8>
   895f0:	440b      	add	r3, r1
   895f2:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   895f6:	60ca      	str	r2, [r1, #12]
   895f8:	6091      	str	r1, [r2, #8]
   895fa:	f043 0201 	orr.w	r2, r3, #1
   895fe:	606a      	str	r2, [r5, #4]
   89600:	4630      	mov	r0, r6
   89602:	50eb      	str	r3, [r5, r3]
   89604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89608:	f000 be44 	b.w	8a294 <__malloc_unlock>
   8960c:	440b      	add	r3, r1
   8960e:	07d1      	lsls	r1, r2, #31
   89610:	d407      	bmi.n	89622 <_free_r+0x152>
   89612:	f854 2c08 	ldr.w	r2, [r4, #-8]
   89616:	1aad      	subs	r5, r5, r2
   89618:	4413      	add	r3, r2
   8961a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   8961e:	60ca      	str	r2, [r1, #12]
   89620:	6091      	str	r1, [r2, #8]
   89622:	f043 0201 	orr.w	r2, r3, #1
   89626:	606a      	str	r2, [r5, #4]
   89628:	4a27      	ldr	r2, [pc, #156]	; (896c8 <_free_r+0x1f8>)
   8962a:	60bd      	str	r5, [r7, #8]
   8962c:	6812      	ldr	r2, [r2, #0]
   8962e:	429a      	cmp	r2, r3
   89630:	d898      	bhi.n	89564 <_free_r+0x94>
   89632:	4b26      	ldr	r3, [pc, #152]	; (896cc <_free_r+0x1fc>)
   89634:	4630      	mov	r0, r6
   89636:	6819      	ldr	r1, [r3, #0]
   89638:	f7ff fefa 	bl	89430 <_malloc_trim_r>
   8963c:	e792      	b.n	89564 <_free_r+0x94>
   8963e:	2b14      	cmp	r3, #20
   89640:	d90a      	bls.n	89658 <_free_r+0x188>
   89642:	2b54      	cmp	r3, #84	; 0x54
   89644:	d81f      	bhi.n	89686 <_free_r+0x1b6>
   89646:	0b0b      	lsrs	r3, r1, #12
   89648:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8964c:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   89650:	00c3      	lsls	r3, r0, #3
   89652:	e7b2      	b.n	895ba <_free_r+0xea>
   89654:	4419      	add	r1, r3
   89656:	e791      	b.n	8957c <_free_r+0xac>
   89658:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8965c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   89660:	00c3      	lsls	r3, r0, #3
   89662:	e7aa      	b.n	895ba <_free_r+0xea>
   89664:	f041 0301 	orr.w	r3, r1, #1
   89668:	e9c7 5504 	strd	r5, r5, [r7, #16]
   8966c:	e9c5 4402 	strd	r4, r4, [r5, #8]
   89670:	606b      	str	r3, [r5, #4]
   89672:	5069      	str	r1, [r5, r1]
   89674:	e776      	b.n	89564 <_free_r+0x94>
   89676:	2101      	movs	r1, #1
   89678:	1092      	asrs	r2, r2, #2
   8967a:	fa01 f202 	lsl.w	r2, r1, r2
   8967e:	6879      	ldr	r1, [r7, #4]
   89680:	430a      	orrs	r2, r1
   89682:	607a      	str	r2, [r7, #4]
   89684:	e7a7      	b.n	895d6 <_free_r+0x106>
   89686:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8968a:	d806      	bhi.n	8969a <_free_r+0x1ca>
   8968c:	0bcb      	lsrs	r3, r1, #15
   8968e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   89692:	f103 0277 	add.w	r2, r3, #119	; 0x77
   89696:	00c3      	lsls	r3, r0, #3
   89698:	e78f      	b.n	895ba <_free_r+0xea>
   8969a:	f240 5254 	movw	r2, #1364	; 0x554
   8969e:	4293      	cmp	r3, r2
   896a0:	d806      	bhi.n	896b0 <_free_r+0x1e0>
   896a2:	0c8b      	lsrs	r3, r1, #18
   896a4:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   896a8:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   896ac:	00c3      	lsls	r3, r0, #3
   896ae:	e784      	b.n	895ba <_free_r+0xea>
   896b0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   896b4:	227e      	movs	r2, #126	; 0x7e
   896b6:	e780      	b.n	895ba <_free_r+0xea>
   896b8:	f041 0301 	orr.w	r3, r1, #1
   896bc:	606b      	str	r3, [r5, #4]
   896be:	6001      	str	r1, [r0, #0]
   896c0:	e750      	b.n	89564 <_free_r+0x94>
   896c2:	bf00      	nop
   896c4:	20000988 	.word	0x20000988
   896c8:	20000d94 	.word	0x20000d94
   896cc:	200019ac 	.word	0x200019ac

000896d0 <__sfvwrite_r>:
   896d0:	6893      	ldr	r3, [r2, #8]
   896d2:	2b00      	cmp	r3, #0
   896d4:	f000 80b7 	beq.w	89846 <__sfvwrite_r+0x176>
   896d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   896dc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   896e0:	460c      	mov	r4, r1
   896e2:	0719      	lsls	r1, r3, #28
   896e4:	4680      	mov	r8, r0
   896e6:	4617      	mov	r7, r2
   896e8:	b083      	sub	sp, #12
   896ea:	b298      	uxth	r0, r3
   896ec:	d525      	bpl.n	8973a <__sfvwrite_r+0x6a>
   896ee:	6923      	ldr	r3, [r4, #16]
   896f0:	b31b      	cbz	r3, 8973a <__sfvwrite_r+0x6a>
   896f2:	f010 0302 	ands.w	r3, r0, #2
   896f6:	683d      	ldr	r5, [r7, #0]
   896f8:	d02d      	beq.n	89756 <__sfvwrite_r+0x86>
   896fa:	f04f 0b00 	mov.w	fp, #0
   896fe:	465e      	mov	r6, fp
   89700:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 899bc <__sfvwrite_r+0x2ec>
   89704:	2e00      	cmp	r6, #0
   89706:	f000 808b 	beq.w	89820 <__sfvwrite_r+0x150>
   8970a:	4556      	cmp	r6, sl
   8970c:	4633      	mov	r3, r6
   8970e:	465a      	mov	r2, fp
   89710:	bf28      	it	cs
   89712:	4653      	movcs	r3, sl
   89714:	4640      	mov	r0, r8
   89716:	69e1      	ldr	r1, [r4, #28]
   89718:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8971c:	47e0      	blx	ip
   8971e:	2800      	cmp	r0, #0
   89720:	f340 8087 	ble.w	89832 <__sfvwrite_r+0x162>
   89724:	68bb      	ldr	r3, [r7, #8]
   89726:	4483      	add	fp, r0
   89728:	1a1b      	subs	r3, r3, r0
   8972a:	1a36      	subs	r6, r6, r0
   8972c:	60bb      	str	r3, [r7, #8]
   8972e:	2b00      	cmp	r3, #0
   89730:	d1e8      	bne.n	89704 <__sfvwrite_r+0x34>
   89732:	2000      	movs	r0, #0
   89734:	b003      	add	sp, #12
   89736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8973a:	4621      	mov	r1, r4
   8973c:	4640      	mov	r0, r8
   8973e:	f7fe fc0d 	bl	87f5c <__swsetup_r>
   89742:	2800      	cmp	r0, #0
   89744:	f040 8136 	bne.w	899b4 <__sfvwrite_r+0x2e4>
   89748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8974c:	683d      	ldr	r5, [r7, #0]
   8974e:	b298      	uxth	r0, r3
   89750:	f010 0302 	ands.w	r3, r0, #2
   89754:	d1d1      	bne.n	896fa <__sfvwrite_r+0x2a>
   89756:	f010 0901 	ands.w	r9, r0, #1
   8975a:	d176      	bne.n	8984a <__sfvwrite_r+0x17a>
   8975c:	464e      	mov	r6, r9
   8975e:	2e00      	cmp	r6, #0
   89760:	d05a      	beq.n	89818 <__sfvwrite_r+0x148>
   89762:	0582      	lsls	r2, r0, #22
   89764:	f8d4 b008 	ldr.w	fp, [r4, #8]
   89768:	f140 80b5 	bpl.w	898d6 <__sfvwrite_r+0x206>
   8976c:	45b3      	cmp	fp, r6
   8976e:	465a      	mov	r2, fp
   89770:	f200 80cd 	bhi.w	8990e <__sfvwrite_r+0x23e>
   89774:	f410 6f90 	tst.w	r0, #1152	; 0x480
   89778:	f000 80cb 	beq.w	89912 <__sfvwrite_r+0x242>
   8977c:	6823      	ldr	r3, [r4, #0]
   8977e:	6921      	ldr	r1, [r4, #16]
   89780:	eba3 0b01 	sub.w	fp, r3, r1
   89784:	6963      	ldr	r3, [r4, #20]
   89786:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   8978a:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   8978e:	f10b 0301 	add.w	r3, fp, #1
   89792:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   89796:	4433      	add	r3, r6
   89798:	4553      	cmp	r3, sl
   8979a:	4652      	mov	r2, sl
   8979c:	bf84      	itt	hi
   8979e:	469a      	movhi	sl, r3
   897a0:	4652      	movhi	r2, sl
   897a2:	0543      	lsls	r3, r0, #21
   897a4:	f140 80ea 	bpl.w	8997c <__sfvwrite_r+0x2ac>
   897a8:	4611      	mov	r1, r2
   897aa:	4640      	mov	r0, r8
   897ac:	f000 f9e6 	bl	89b7c <_malloc_r>
   897b0:	2800      	cmp	r0, #0
   897b2:	f000 80f9 	beq.w	899a8 <__sfvwrite_r+0x2d8>
   897b6:	465a      	mov	r2, fp
   897b8:	6921      	ldr	r1, [r4, #16]
   897ba:	9001      	str	r0, [sp, #4]
   897bc:	f7fb fd06 	bl	851cc <memcpy>
   897c0:	89a2      	ldrh	r2, [r4, #12]
   897c2:	9b01      	ldr	r3, [sp, #4]
   897c4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   897c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   897cc:	81a2      	strh	r2, [r4, #12]
   897ce:	eb03 000b 	add.w	r0, r3, fp
   897d2:	6123      	str	r3, [r4, #16]
   897d4:	4632      	mov	r2, r6
   897d6:	ebaa 030b 	sub.w	r3, sl, fp
   897da:	46b3      	mov	fp, r6
   897dc:	f8c4 a014 	str.w	sl, [r4, #20]
   897e0:	60a3      	str	r3, [r4, #8]
   897e2:	6020      	str	r0, [r4, #0]
   897e4:	46b2      	mov	sl, r6
   897e6:	2600      	movs	r6, #0
   897e8:	4649      	mov	r1, r9
   897ea:	9201      	str	r2, [sp, #4]
   897ec:	f000 fcd0 	bl	8a190 <memmove>
   897f0:	68a3      	ldr	r3, [r4, #8]
   897f2:	6821      	ldr	r1, [r4, #0]
   897f4:	9a01      	ldr	r2, [sp, #4]
   897f6:	eba3 030b 	sub.w	r3, r3, fp
   897fa:	440a      	add	r2, r1
   897fc:	60a3      	str	r3, [r4, #8]
   897fe:	6022      	str	r2, [r4, #0]
   89800:	68b8      	ldr	r0, [r7, #8]
   89802:	44d1      	add	r9, sl
   89804:	eba0 000a 	sub.w	r0, r0, sl
   89808:	60b8      	str	r0, [r7, #8]
   8980a:	2800      	cmp	r0, #0
   8980c:	d091      	beq.n	89732 <__sfvwrite_r+0x62>
   8980e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89812:	b280      	uxth	r0, r0
   89814:	2e00      	cmp	r6, #0
   89816:	d1a4      	bne.n	89762 <__sfvwrite_r+0x92>
   89818:	e9d5 9600 	ldrd	r9, r6, [r5]
   8981c:	3508      	adds	r5, #8
   8981e:	e79e      	b.n	8975e <__sfvwrite_r+0x8e>
   89820:	e9d5 b600 	ldrd	fp, r6, [r5]
   89824:	3508      	adds	r5, #8
   89826:	e76d      	b.n	89704 <__sfvwrite_r+0x34>
   89828:	4621      	mov	r1, r4
   8982a:	4640      	mov	r0, r8
   8982c:	f7ff fca0 	bl	89170 <_fflush_r>
   89830:	b380      	cbz	r0, 89894 <__sfvwrite_r+0x1c4>
   89832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89836:	f04f 30ff 	mov.w	r0, #4294967295
   8983a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8983e:	81a3      	strh	r3, [r4, #12]
   89840:	b003      	add	sp, #12
   89842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89846:	2000      	movs	r0, #0
   89848:	4770      	bx	lr
   8984a:	461e      	mov	r6, r3
   8984c:	46aa      	mov	sl, r5
   8984e:	4699      	mov	r9, r3
   89850:	4618      	mov	r0, r3
   89852:	461d      	mov	r5, r3
   89854:	b356      	cbz	r6, 898ac <__sfvwrite_r+0x1dc>
   89856:	2800      	cmp	r0, #0
   89858:	d032      	beq.n	898c0 <__sfvwrite_r+0x1f0>
   8985a:	464a      	mov	r2, r9
   8985c:	6820      	ldr	r0, [r4, #0]
   8985e:	6921      	ldr	r1, [r4, #16]
   89860:	42b2      	cmp	r2, r6
   89862:	bf28      	it	cs
   89864:	4632      	movcs	r2, r6
   89866:	4288      	cmp	r0, r1
   89868:	6963      	ldr	r3, [r4, #20]
   8986a:	d904      	bls.n	89876 <__sfvwrite_r+0x1a6>
   8986c:	68a1      	ldr	r1, [r4, #8]
   8986e:	eb03 0b01 	add.w	fp, r3, r1
   89872:	455a      	cmp	r2, fp
   89874:	dc74      	bgt.n	89960 <__sfvwrite_r+0x290>
   89876:	4293      	cmp	r3, r2
   89878:	dc65      	bgt.n	89946 <__sfvwrite_r+0x276>
   8987a:	462a      	mov	r2, r5
   8987c:	4640      	mov	r0, r8
   8987e:	69e1      	ldr	r1, [r4, #28]
   89880:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   89884:	47e0      	blx	ip
   89886:	f1b0 0b00 	subs.w	fp, r0, #0
   8988a:	ddd2      	ble.n	89832 <__sfvwrite_r+0x162>
   8988c:	ebb9 090b 	subs.w	r9, r9, fp
   89890:	d0ca      	beq.n	89828 <__sfvwrite_r+0x158>
   89892:	2001      	movs	r0, #1
   89894:	68bb      	ldr	r3, [r7, #8]
   89896:	445d      	add	r5, fp
   89898:	eba3 030b 	sub.w	r3, r3, fp
   8989c:	eba6 060b 	sub.w	r6, r6, fp
   898a0:	60bb      	str	r3, [r7, #8]
   898a2:	2b00      	cmp	r3, #0
   898a4:	f43f af45 	beq.w	89732 <__sfvwrite_r+0x62>
   898a8:	2e00      	cmp	r6, #0
   898aa:	d1d4      	bne.n	89856 <__sfvwrite_r+0x186>
   898ac:	f10a 0308 	add.w	r3, sl, #8
   898b0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   898b4:	469a      	mov	sl, r3
   898b6:	f853 5c08 	ldr.w	r5, [r3, #-8]
   898ba:	3308      	adds	r3, #8
   898bc:	2e00      	cmp	r6, #0
   898be:	d0f7      	beq.n	898b0 <__sfvwrite_r+0x1e0>
   898c0:	4632      	mov	r2, r6
   898c2:	210a      	movs	r1, #10
   898c4:	4628      	mov	r0, r5
   898c6:	f000 fc1b 	bl	8a100 <memchr>
   898ca:	2800      	cmp	r0, #0
   898cc:	d069      	beq.n	899a2 <__sfvwrite_r+0x2d2>
   898ce:	3001      	adds	r0, #1
   898d0:	eba0 0905 	sub.w	r9, r0, r5
   898d4:	e7c1      	b.n	8985a <__sfvwrite_r+0x18a>
   898d6:	6820      	ldr	r0, [r4, #0]
   898d8:	6923      	ldr	r3, [r4, #16]
   898da:	4298      	cmp	r0, r3
   898dc:	d81b      	bhi.n	89916 <__sfvwrite_r+0x246>
   898de:	6963      	ldr	r3, [r4, #20]
   898e0:	42b3      	cmp	r3, r6
   898e2:	d818      	bhi.n	89916 <__sfvwrite_r+0x246>
   898e4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   898e8:	45b4      	cmp	ip, r6
   898ea:	bf28      	it	cs
   898ec:	46b4      	movcs	ip, r6
   898ee:	fb9c fcf3 	sdiv	ip, ip, r3
   898f2:	464a      	mov	r2, r9
   898f4:	fb03 f30c 	mul.w	r3, r3, ip
   898f8:	4640      	mov	r0, r8
   898fa:	69e1      	ldr	r1, [r4, #28]
   898fc:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   89900:	47e0      	blx	ip
   89902:	f1b0 0a00 	subs.w	sl, r0, #0
   89906:	dd94      	ble.n	89832 <__sfvwrite_r+0x162>
   89908:	eba6 060a 	sub.w	r6, r6, sl
   8990c:	e778      	b.n	89800 <__sfvwrite_r+0x130>
   8990e:	46b3      	mov	fp, r6
   89910:	4632      	mov	r2, r6
   89912:	6820      	ldr	r0, [r4, #0]
   89914:	e766      	b.n	897e4 <__sfvwrite_r+0x114>
   89916:	45b3      	cmp	fp, r6
   89918:	46da      	mov	sl, fp
   8991a:	bf28      	it	cs
   8991c:	46b2      	movcs	sl, r6
   8991e:	4649      	mov	r1, r9
   89920:	4652      	mov	r2, sl
   89922:	f000 fc35 	bl	8a190 <memmove>
   89926:	68a3      	ldr	r3, [r4, #8]
   89928:	6822      	ldr	r2, [r4, #0]
   8992a:	eba3 030a 	sub.w	r3, r3, sl
   8992e:	4452      	add	r2, sl
   89930:	60a3      	str	r3, [r4, #8]
   89932:	6022      	str	r2, [r4, #0]
   89934:	2b00      	cmp	r3, #0
   89936:	d1e7      	bne.n	89908 <__sfvwrite_r+0x238>
   89938:	4621      	mov	r1, r4
   8993a:	4640      	mov	r0, r8
   8993c:	f7ff fc18 	bl	89170 <_fflush_r>
   89940:	2800      	cmp	r0, #0
   89942:	d0e1      	beq.n	89908 <__sfvwrite_r+0x238>
   89944:	e775      	b.n	89832 <__sfvwrite_r+0x162>
   89946:	4629      	mov	r1, r5
   89948:	4693      	mov	fp, r2
   8994a:	9201      	str	r2, [sp, #4]
   8994c:	f000 fc20 	bl	8a190 <memmove>
   89950:	68a3      	ldr	r3, [r4, #8]
   89952:	9a01      	ldr	r2, [sp, #4]
   89954:	1a9b      	subs	r3, r3, r2
   89956:	60a3      	str	r3, [r4, #8]
   89958:	6823      	ldr	r3, [r4, #0]
   8995a:	441a      	add	r2, r3
   8995c:	6022      	str	r2, [r4, #0]
   8995e:	e795      	b.n	8988c <__sfvwrite_r+0x1bc>
   89960:	4629      	mov	r1, r5
   89962:	465a      	mov	r2, fp
   89964:	f000 fc14 	bl	8a190 <memmove>
   89968:	6823      	ldr	r3, [r4, #0]
   8996a:	4621      	mov	r1, r4
   8996c:	445b      	add	r3, fp
   8996e:	4640      	mov	r0, r8
   89970:	6023      	str	r3, [r4, #0]
   89972:	f7ff fbfd 	bl	89170 <_fflush_r>
   89976:	2800      	cmp	r0, #0
   89978:	d088      	beq.n	8988c <__sfvwrite_r+0x1bc>
   8997a:	e75a      	b.n	89832 <__sfvwrite_r+0x162>
   8997c:	4640      	mov	r0, r8
   8997e:	f001 f833 	bl	8a9e8 <_realloc_r>
   89982:	4603      	mov	r3, r0
   89984:	2800      	cmp	r0, #0
   89986:	f47f af22 	bne.w	897ce <__sfvwrite_r+0xfe>
   8998a:	4640      	mov	r0, r8
   8998c:	6921      	ldr	r1, [r4, #16]
   8998e:	f7ff fd9f 	bl	894d0 <_free_r>
   89992:	220c      	movs	r2, #12
   89994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89998:	f8c8 2000 	str.w	r2, [r8]
   8999c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   899a0:	e749      	b.n	89836 <__sfvwrite_r+0x166>
   899a2:	1c72      	adds	r2, r6, #1
   899a4:	4691      	mov	r9, r2
   899a6:	e759      	b.n	8985c <__sfvwrite_r+0x18c>
   899a8:	220c      	movs	r2, #12
   899aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   899ae:	f8c8 2000 	str.w	r2, [r8]
   899b2:	e740      	b.n	89836 <__sfvwrite_r+0x166>
   899b4:	f04f 30ff 	mov.w	r0, #4294967295
   899b8:	e6bc      	b.n	89734 <__sfvwrite_r+0x64>
   899ba:	bf00      	nop
   899bc:	7ffffc00 	.word	0x7ffffc00

000899c0 <_fwalk_reent>:
   899c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   899c4:	f04f 0900 	mov.w	r9, #0
   899c8:	4607      	mov	r7, r0
   899ca:	4688      	mov	r8, r1
   899cc:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   899d0:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   899d4:	3d01      	subs	r5, #1
   899d6:	d410      	bmi.n	899fa <_fwalk_reent+0x3a>
   899d8:	89a3      	ldrh	r3, [r4, #12]
   899da:	3d01      	subs	r5, #1
   899dc:	2b01      	cmp	r3, #1
   899de:	d908      	bls.n	899f2 <_fwalk_reent+0x32>
   899e0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   899e4:	3301      	adds	r3, #1
   899e6:	d004      	beq.n	899f2 <_fwalk_reent+0x32>
   899e8:	4621      	mov	r1, r4
   899ea:	4638      	mov	r0, r7
   899ec:	47c0      	blx	r8
   899ee:	ea49 0900 	orr.w	r9, r9, r0
   899f2:	1c6b      	adds	r3, r5, #1
   899f4:	f104 0468 	add.w	r4, r4, #104	; 0x68
   899f8:	d1ee      	bne.n	899d8 <_fwalk_reent+0x18>
   899fa:	6836      	ldr	r6, [r6, #0]
   899fc:	2e00      	cmp	r6, #0
   899fe:	d1e7      	bne.n	899d0 <_fwalk_reent+0x10>
   89a00:	4648      	mov	r0, r9
   89a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   89a06:	bf00      	nop

00089a08 <__locale_mb_cur_max>:
   89a08:	4b01      	ldr	r3, [pc, #4]	; (89a10 <__locale_mb_cur_max+0x8>)
   89a0a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   89a0e:	4770      	bx	lr
   89a10:	2000081c 	.word	0x2000081c

00089a14 <_localeconv_r>:
   89a14:	4800      	ldr	r0, [pc, #0]	; (89a18 <_localeconv_r+0x4>)
   89a16:	4770      	bx	lr
   89a18:	2000090c 	.word	0x2000090c

00089a1c <__retarget_lock_init_recursive>:
   89a1c:	4770      	bx	lr
   89a1e:	bf00      	nop

00089a20 <__retarget_lock_close_recursive>:
   89a20:	4770      	bx	lr
   89a22:	bf00      	nop

00089a24 <__retarget_lock_acquire_recursive>:
   89a24:	4770      	bx	lr
   89a26:	bf00      	nop

00089a28 <__retarget_lock_release_recursive>:
   89a28:	4770      	bx	lr
   89a2a:	bf00      	nop

00089a2c <__smakebuf_r>:
   89a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89a30:	898b      	ldrh	r3, [r1, #12]
   89a32:	460c      	mov	r4, r1
   89a34:	0799      	lsls	r1, r3, #30
   89a36:	b096      	sub	sp, #88	; 0x58
   89a38:	d508      	bpl.n	89a4c <__smakebuf_r+0x20>
   89a3a:	2201      	movs	r2, #1
   89a3c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   89a40:	e9c4 3204 	strd	r3, r2, [r4, #16]
   89a44:	6023      	str	r3, [r4, #0]
   89a46:	b016      	add	sp, #88	; 0x58
   89a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   89a50:	4606      	mov	r6, r0
   89a52:	2900      	cmp	r1, #0
   89a54:	db27      	blt.n	89aa6 <__smakebuf_r+0x7a>
   89a56:	466a      	mov	r2, sp
   89a58:	f001 fc90 	bl	8b37c <_fstat_r>
   89a5c:	2800      	cmp	r0, #0
   89a5e:	db21      	blt.n	89aa4 <__smakebuf_r+0x78>
   89a60:	9d01      	ldr	r5, [sp, #4]
   89a62:	f44f 6880 	mov.w	r8, #1024	; 0x400
   89a66:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   89a6a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   89a6e:	fab5 f585 	clz	r5, r5
   89a72:	f44f 6700 	mov.w	r7, #2048	; 0x800
   89a76:	096d      	lsrs	r5, r5, #5
   89a78:	4641      	mov	r1, r8
   89a7a:	4630      	mov	r0, r6
   89a7c:	f000 f87e 	bl	89b7c <_malloc_r>
   89a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89a84:	b1f0      	cbz	r0, 89ac4 <__smakebuf_r+0x98>
   89a86:	4a20      	ldr	r2, [pc, #128]	; (89b08 <__smakebuf_r+0xdc>)
   89a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   89a8c:	63f2      	str	r2, [r6, #60]	; 0x3c
   89a8e:	f8c4 8014 	str.w	r8, [r4, #20]
   89a92:	81a3      	strh	r3, [r4, #12]
   89a94:	6020      	str	r0, [r4, #0]
   89a96:	6120      	str	r0, [r4, #16]
   89a98:	bb35      	cbnz	r5, 89ae8 <__smakebuf_r+0xbc>
   89a9a:	433b      	orrs	r3, r7
   89a9c:	81a3      	strh	r3, [r4, #12]
   89a9e:	b016      	add	sp, #88	; 0x58
   89aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89aa4:	89a3      	ldrh	r3, [r4, #12]
   89aa6:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   89aaa:	d019      	beq.n	89ae0 <__smakebuf_r+0xb4>
   89aac:	f04f 0840 	mov.w	r8, #64	; 0x40
   89ab0:	4630      	mov	r0, r6
   89ab2:	4641      	mov	r1, r8
   89ab4:	2500      	movs	r5, #0
   89ab6:	f000 f861 	bl	89b7c <_malloc_r>
   89aba:	462f      	mov	r7, r5
   89abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89ac0:	2800      	cmp	r0, #0
   89ac2:	d1e0      	bne.n	89a86 <__smakebuf_r+0x5a>
   89ac4:	059a      	lsls	r2, r3, #22
   89ac6:	d4be      	bmi.n	89a46 <__smakebuf_r+0x1a>
   89ac8:	2101      	movs	r1, #1
   89aca:	f023 0303 	bic.w	r3, r3, #3
   89ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
   89ad2:	f043 0302 	orr.w	r3, r3, #2
   89ad6:	e9c4 2104 	strd	r2, r1, [r4, #16]
   89ada:	81a3      	strh	r3, [r4, #12]
   89adc:	6022      	str	r2, [r4, #0]
   89ade:	e7b2      	b.n	89a46 <__smakebuf_r+0x1a>
   89ae0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   89ae4:	462f      	mov	r7, r5
   89ae6:	e7c7      	b.n	89a78 <__smakebuf_r+0x4c>
   89ae8:	4630      	mov	r0, r6
   89aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   89aee:	f001 fc59 	bl	8b3a4 <_isatty_r>
   89af2:	b910      	cbnz	r0, 89afa <__smakebuf_r+0xce>
   89af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89af8:	e7cf      	b.n	89a9a <__smakebuf_r+0x6e>
   89afa:	89a3      	ldrh	r3, [r4, #12]
   89afc:	f023 0303 	bic.w	r3, r3, #3
   89b00:	f043 0301 	orr.w	r3, r3, #1
   89b04:	b21b      	sxth	r3, r3
   89b06:	e7c8      	b.n	89a9a <__smakebuf_r+0x6e>
   89b08:	000891cd 	.word	0x000891cd

00089b0c <__swhatbuf_r>:
   89b0c:	b570      	push	{r4, r5, r6, lr}
   89b0e:	460c      	mov	r4, r1
   89b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   89b14:	4615      	mov	r5, r2
   89b16:	2900      	cmp	r1, #0
   89b18:	461e      	mov	r6, r3
   89b1a:	b096      	sub	sp, #88	; 0x58
   89b1c:	db14      	blt.n	89b48 <__swhatbuf_r+0x3c>
   89b1e:	466a      	mov	r2, sp
   89b20:	f001 fc2c 	bl	8b37c <_fstat_r>
   89b24:	2800      	cmp	r0, #0
   89b26:	db0f      	blt.n	89b48 <__swhatbuf_r+0x3c>
   89b28:	9a01      	ldr	r2, [sp, #4]
   89b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   89b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   89b32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   89b36:	fab2 f282 	clz	r2, r2
   89b3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   89b3e:	0952      	lsrs	r2, r2, #5
   89b40:	6032      	str	r2, [r6, #0]
   89b42:	602b      	str	r3, [r5, #0]
   89b44:	b016      	add	sp, #88	; 0x58
   89b46:	bd70      	pop	{r4, r5, r6, pc}
   89b48:	2300      	movs	r3, #0
   89b4a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   89b4e:	6033      	str	r3, [r6, #0]
   89b50:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   89b54:	d004      	beq.n	89b60 <__swhatbuf_r+0x54>
   89b56:	2240      	movs	r2, #64	; 0x40
   89b58:	4618      	mov	r0, r3
   89b5a:	602a      	str	r2, [r5, #0]
   89b5c:	b016      	add	sp, #88	; 0x58
   89b5e:	bd70      	pop	{r4, r5, r6, pc}
   89b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
   89b64:	602b      	str	r3, [r5, #0]
   89b66:	b016      	add	sp, #88	; 0x58
   89b68:	bd70      	pop	{r4, r5, r6, pc}
   89b6a:	bf00      	nop

00089b6c <malloc>:
   89b6c:	4b02      	ldr	r3, [pc, #8]	; (89b78 <malloc+0xc>)
   89b6e:	4601      	mov	r1, r0
   89b70:	6818      	ldr	r0, [r3, #0]
   89b72:	f000 b803 	b.w	89b7c <_malloc_r>
   89b76:	bf00      	nop
   89b78:	200003e8 	.word	0x200003e8

00089b7c <_malloc_r>:
   89b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89b80:	f101 050b 	add.w	r5, r1, #11
   89b84:	2d16      	cmp	r5, #22
   89b86:	4606      	mov	r6, r0
   89b88:	b083      	sub	sp, #12
   89b8a:	d825      	bhi.n	89bd8 <_malloc_r+0x5c>
   89b8c:	2910      	cmp	r1, #16
   89b8e:	f200 80b8 	bhi.w	89d02 <_malloc_r+0x186>
   89b92:	f000 fb79 	bl	8a288 <__malloc_lock>
   89b96:	2510      	movs	r5, #16
   89b98:	2218      	movs	r2, #24
   89b9a:	f04f 0c02 	mov.w	ip, #2
   89b9e:	4fb5      	ldr	r7, [pc, #724]	; (89e74 <_malloc_r+0x2f8>)
   89ba0:	443a      	add	r2, r7
   89ba2:	6853      	ldr	r3, [r2, #4]
   89ba4:	f1a2 0108 	sub.w	r1, r2, #8
   89ba8:	428b      	cmp	r3, r1
   89baa:	f000 80b7 	beq.w	89d1c <_malloc_r+0x1a0>
   89bae:	685a      	ldr	r2, [r3, #4]
   89bb0:	68d9      	ldr	r1, [r3, #12]
   89bb2:	f022 0203 	bic.w	r2, r2, #3
   89bb6:	441a      	add	r2, r3
   89bb8:	689c      	ldr	r4, [r3, #8]
   89bba:	4630      	mov	r0, r6
   89bbc:	60e1      	str	r1, [r4, #12]
   89bbe:	608c      	str	r4, [r1, #8]
   89bc0:	6851      	ldr	r1, [r2, #4]
   89bc2:	f103 0408 	add.w	r4, r3, #8
   89bc6:	f041 0101 	orr.w	r1, r1, #1
   89bca:	6051      	str	r1, [r2, #4]
   89bcc:	f000 fb62 	bl	8a294 <__malloc_unlock>
   89bd0:	4620      	mov	r0, r4
   89bd2:	b003      	add	sp, #12
   89bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89bd8:	f035 0507 	bics.w	r5, r5, #7
   89bdc:	f100 8091 	bmi.w	89d02 <_malloc_r+0x186>
   89be0:	42a9      	cmp	r1, r5
   89be2:	f200 808e 	bhi.w	89d02 <_malloc_r+0x186>
   89be6:	f000 fb4f 	bl	8a288 <__malloc_lock>
   89bea:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   89bee:	f0c0 8194 	bcc.w	89f1a <_malloc_r+0x39e>
   89bf2:	0a6b      	lsrs	r3, r5, #9
   89bf4:	f000 808c 	beq.w	89d10 <_malloc_r+0x194>
   89bf8:	2b04      	cmp	r3, #4
   89bfa:	f200 816a 	bhi.w	89ed2 <_malloc_r+0x356>
   89bfe:	09ab      	lsrs	r3, r5, #6
   89c00:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   89c04:	f103 0438 	add.w	r4, r3, #56	; 0x38
   89c08:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89c0c:	4f99      	ldr	r7, [pc, #612]	; (89e74 <_malloc_r+0x2f8>)
   89c0e:	4438      	add	r0, r7
   89c10:	6843      	ldr	r3, [r0, #4]
   89c12:	3808      	subs	r0, #8
   89c14:	4298      	cmp	r0, r3
   89c16:	d106      	bne.n	89c26 <_malloc_r+0xaa>
   89c18:	e00c      	b.n	89c34 <_malloc_r+0xb8>
   89c1a:	2900      	cmp	r1, #0
   89c1c:	f280 8126 	bge.w	89e6c <_malloc_r+0x2f0>
   89c20:	68db      	ldr	r3, [r3, #12]
   89c22:	4298      	cmp	r0, r3
   89c24:	d006      	beq.n	89c34 <_malloc_r+0xb8>
   89c26:	685a      	ldr	r2, [r3, #4]
   89c28:	f022 0203 	bic.w	r2, r2, #3
   89c2c:	1b51      	subs	r1, r2, r5
   89c2e:	290f      	cmp	r1, #15
   89c30:	ddf3      	ble.n	89c1a <_malloc_r+0x9e>
   89c32:	46a4      	mov	ip, r4
   89c34:	693c      	ldr	r4, [r7, #16]
   89c36:	f8df e240 	ldr.w	lr, [pc, #576]	; 89e78 <_malloc_r+0x2fc>
   89c3a:	4574      	cmp	r4, lr
   89c3c:	d07a      	beq.n	89d34 <_malloc_r+0x1b8>
   89c3e:	6862      	ldr	r2, [r4, #4]
   89c40:	f022 0203 	bic.w	r2, r2, #3
   89c44:	1b53      	subs	r3, r2, r5
   89c46:	2b0f      	cmp	r3, #15
   89c48:	f300 8176 	bgt.w	89f38 <_malloc_r+0x3bc>
   89c4c:	2b00      	cmp	r3, #0
   89c4e:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   89c52:	f280 8167 	bge.w	89f24 <_malloc_r+0x3a8>
   89c56:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   89c5a:	f080 8119 	bcs.w	89e90 <_malloc_r+0x314>
   89c5e:	2101      	movs	r1, #1
   89c60:	08d3      	lsrs	r3, r2, #3
   89c62:	0952      	lsrs	r2, r2, #5
   89c64:	440b      	add	r3, r1
   89c66:	4091      	lsls	r1, r2
   89c68:	687a      	ldr	r2, [r7, #4]
   89c6a:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   89c6e:	430a      	orrs	r2, r1
   89c70:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   89c74:	3908      	subs	r1, #8
   89c76:	60a0      	str	r0, [r4, #8]
   89c78:	60e1      	str	r1, [r4, #12]
   89c7a:	607a      	str	r2, [r7, #4]
   89c7c:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   89c80:	60c4      	str	r4, [r0, #12]
   89c82:	2101      	movs	r1, #1
   89c84:	ea4f 03ac 	mov.w	r3, ip, asr #2
   89c88:	4099      	lsls	r1, r3
   89c8a:	4291      	cmp	r1, r2
   89c8c:	d859      	bhi.n	89d42 <_malloc_r+0x1c6>
   89c8e:	4211      	tst	r1, r2
   89c90:	d106      	bne.n	89ca0 <_malloc_r+0x124>
   89c92:	f02c 0c03 	bic.w	ip, ip, #3
   89c96:	0049      	lsls	r1, r1, #1
   89c98:	4211      	tst	r1, r2
   89c9a:	f10c 0c04 	add.w	ip, ip, #4
   89c9e:	d0fa      	beq.n	89c96 <_malloc_r+0x11a>
   89ca0:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   89ca4:	4648      	mov	r0, r9
   89ca6:	4664      	mov	r4, ip
   89ca8:	f8d0 800c 	ldr.w	r8, [r0, #12]
   89cac:	4540      	cmp	r0, r8
   89cae:	d108      	bne.n	89cc2 <_malloc_r+0x146>
   89cb0:	e11c      	b.n	89eec <_malloc_r+0x370>
   89cb2:	2b00      	cmp	r3, #0
   89cb4:	f280 8121 	bge.w	89efa <_malloc_r+0x37e>
   89cb8:	f8d8 800c 	ldr.w	r8, [r8, #12]
   89cbc:	4540      	cmp	r0, r8
   89cbe:	f000 8115 	beq.w	89eec <_malloc_r+0x370>
   89cc2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   89cc6:	f022 0203 	bic.w	r2, r2, #3
   89cca:	1b53      	subs	r3, r2, r5
   89ccc:	2b0f      	cmp	r3, #15
   89cce:	ddf0      	ble.n	89cb2 <_malloc_r+0x136>
   89cd0:	eb08 0105 	add.w	r1, r8, r5
   89cd4:	f045 0501 	orr.w	r5, r5, #1
   89cd8:	f8c8 5004 	str.w	r5, [r8, #4]
   89cdc:	4630      	mov	r0, r6
   89cde:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   89ce2:	60f4      	str	r4, [r6, #12]
   89ce4:	60a6      	str	r6, [r4, #8]
   89ce6:	f043 0401 	orr.w	r4, r3, #1
   89cea:	e9c7 1104 	strd	r1, r1, [r7, #16]
   89cee:	604c      	str	r4, [r1, #4]
   89cf0:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   89cf4:	f848 3002 	str.w	r3, [r8, r2]
   89cf8:	f000 facc 	bl	8a294 <__malloc_unlock>
   89cfc:	f108 0408 	add.w	r4, r8, #8
   89d00:	e002      	b.n	89d08 <_malloc_r+0x18c>
   89d02:	230c      	movs	r3, #12
   89d04:	2400      	movs	r4, #0
   89d06:	6033      	str	r3, [r6, #0]
   89d08:	4620      	mov	r0, r4
   89d0a:	b003      	add	sp, #12
   89d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d10:	f44f 7000 	mov.w	r0, #512	; 0x200
   89d14:	f04f 0c40 	mov.w	ip, #64	; 0x40
   89d18:	243f      	movs	r4, #63	; 0x3f
   89d1a:	e777      	b.n	89c0c <_malloc_r+0x90>
   89d1c:	68d3      	ldr	r3, [r2, #12]
   89d1e:	429a      	cmp	r2, r3
   89d20:	bf08      	it	eq
   89d22:	f10c 0c02 	addeq.w	ip, ip, #2
   89d26:	f47f af42 	bne.w	89bae <_malloc_r+0x32>
   89d2a:	693c      	ldr	r4, [r7, #16]
   89d2c:	f8df e148 	ldr.w	lr, [pc, #328]	; 89e78 <_malloc_r+0x2fc>
   89d30:	4574      	cmp	r4, lr
   89d32:	d184      	bne.n	89c3e <_malloc_r+0xc2>
   89d34:	2101      	movs	r1, #1
   89d36:	687a      	ldr	r2, [r7, #4]
   89d38:	ea4f 03ac 	mov.w	r3, ip, asr #2
   89d3c:	4099      	lsls	r1, r3
   89d3e:	4291      	cmp	r1, r2
   89d40:	d9a5      	bls.n	89c8e <_malloc_r+0x112>
   89d42:	68bc      	ldr	r4, [r7, #8]
   89d44:	6863      	ldr	r3, [r4, #4]
   89d46:	f023 0903 	bic.w	r9, r3, #3
   89d4a:	454d      	cmp	r5, r9
   89d4c:	d803      	bhi.n	89d56 <_malloc_r+0x1da>
   89d4e:	eba9 0305 	sub.w	r3, r9, r5
   89d52:	2b0f      	cmp	r3, #15
   89d54:	dc7a      	bgt.n	89e4c <_malloc_r+0x2d0>
   89d56:	f8df b124 	ldr.w	fp, [pc, #292]	; 89e7c <_malloc_r+0x300>
   89d5a:	4b49      	ldr	r3, [pc, #292]	; (89e80 <_malloc_r+0x304>)
   89d5c:	f8db 2000 	ldr.w	r2, [fp]
   89d60:	681b      	ldr	r3, [r3, #0]
   89d62:	3201      	adds	r2, #1
   89d64:	442b      	add	r3, r5
   89d66:	eb04 0a09 	add.w	sl, r4, r9
   89d6a:	f000 812f 	beq.w	89fcc <_malloc_r+0x450>
   89d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   89d72:	330f      	adds	r3, #15
   89d74:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   89d78:	f028 080f 	bic.w	r8, r8, #15
   89d7c:	4641      	mov	r1, r8
   89d7e:	4630      	mov	r0, r6
   89d80:	f001 f858 	bl	8ae34 <_sbrk_r>
   89d84:	1c41      	adds	r1, r0, #1
   89d86:	4602      	mov	r2, r0
   89d88:	f000 80ef 	beq.w	89f6a <_malloc_r+0x3ee>
   89d8c:	4582      	cmp	sl, r0
   89d8e:	f200 80ea 	bhi.w	89f66 <_malloc_r+0x3ea>
   89d92:	4b3c      	ldr	r3, [pc, #240]	; (89e84 <_malloc_r+0x308>)
   89d94:	6819      	ldr	r1, [r3, #0]
   89d96:	4441      	add	r1, r8
   89d98:	4608      	mov	r0, r1
   89d9a:	6019      	str	r1, [r3, #0]
   89d9c:	f000 8149 	beq.w	8a032 <_malloc_r+0x4b6>
   89da0:	f8db 1000 	ldr.w	r1, [fp]
   89da4:	9301      	str	r3, [sp, #4]
   89da6:	3101      	adds	r1, #1
   89da8:	bf1b      	ittet	ne
   89daa:	eba2 0a0a 	subne.w	sl, r2, sl
   89dae:	4450      	addne	r0, sl
   89db0:	f8cb 2000 	streq.w	r2, [fp]
   89db4:	6018      	strne	r0, [r3, #0]
   89db6:	f012 0b07 	ands.w	fp, r2, #7
   89dba:	f000 8111 	beq.w	89fe0 <_malloc_r+0x464>
   89dbe:	f1cb 0108 	rsb	r1, fp, #8
   89dc2:	440a      	add	r2, r1
   89dc4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   89dc8:	4490      	add	r8, r2
   89dca:	3108      	adds	r1, #8
   89dcc:	eba1 0108 	sub.w	r1, r1, r8
   89dd0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   89dd4:	4651      	mov	r1, sl
   89dd6:	4630      	mov	r0, r6
   89dd8:	9200      	str	r2, [sp, #0]
   89dda:	f001 f82b 	bl	8ae34 <_sbrk_r>
   89dde:	1c42      	adds	r2, r0, #1
   89de0:	e9dd 2300 	ldrd	r2, r3, [sp]
   89de4:	f000 814b 	beq.w	8a07e <_malloc_r+0x502>
   89de8:	1a80      	subs	r0, r0, r2
   89dea:	eb00 080a 	add.w	r8, r0, sl
   89dee:	6819      	ldr	r1, [r3, #0]
   89df0:	f048 0001 	orr.w	r0, r8, #1
   89df4:	4451      	add	r1, sl
   89df6:	42bc      	cmp	r4, r7
   89df8:	60ba      	str	r2, [r7, #8]
   89dfa:	6019      	str	r1, [r3, #0]
   89dfc:	6050      	str	r0, [r2, #4]
   89dfe:	f000 8124 	beq.w	8a04a <_malloc_r+0x4ce>
   89e02:	f1b9 0f0f 	cmp.w	r9, #15
   89e06:	f240 8122 	bls.w	8a04e <_malloc_r+0x4d2>
   89e0a:	f04f 0e05 	mov.w	lr, #5
   89e0e:	6860      	ldr	r0, [r4, #4]
   89e10:	f1a9 0c0c 	sub.w	ip, r9, #12
   89e14:	f02c 0c07 	bic.w	ip, ip, #7
   89e18:	f000 0001 	and.w	r0, r0, #1
   89e1c:	ea40 000c 	orr.w	r0, r0, ip
   89e20:	6060      	str	r0, [r4, #4]
   89e22:	f1bc 0f0f 	cmp.w	ip, #15
   89e26:	eb04 000c 	add.w	r0, r4, ip
   89e2a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   89e2e:	f200 812e 	bhi.w	8a08e <_malloc_r+0x512>
   89e32:	4614      	mov	r4, r2
   89e34:	6850      	ldr	r0, [r2, #4]
   89e36:	4b14      	ldr	r3, [pc, #80]	; (89e88 <_malloc_r+0x30c>)
   89e38:	681a      	ldr	r2, [r3, #0]
   89e3a:	428a      	cmp	r2, r1
   89e3c:	bf38      	it	cc
   89e3e:	6019      	strcc	r1, [r3, #0]
   89e40:	4b12      	ldr	r3, [pc, #72]	; (89e8c <_malloc_r+0x310>)
   89e42:	681a      	ldr	r2, [r3, #0]
   89e44:	428a      	cmp	r2, r1
   89e46:	bf38      	it	cc
   89e48:	6019      	strcc	r1, [r3, #0]
   89e4a:	e090      	b.n	89f6e <_malloc_r+0x3f2>
   89e4c:	1962      	adds	r2, r4, r5
   89e4e:	f043 0301 	orr.w	r3, r3, #1
   89e52:	f045 0501 	orr.w	r5, r5, #1
   89e56:	6065      	str	r5, [r4, #4]
   89e58:	4630      	mov	r0, r6
   89e5a:	60ba      	str	r2, [r7, #8]
   89e5c:	3408      	adds	r4, #8
   89e5e:	6053      	str	r3, [r2, #4]
   89e60:	f000 fa18 	bl	8a294 <__malloc_unlock>
   89e64:	4620      	mov	r0, r4
   89e66:	b003      	add	sp, #12
   89e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89e6c:	68d9      	ldr	r1, [r3, #12]
   89e6e:	441a      	add	r2, r3
   89e70:	e6a2      	b.n	89bb8 <_malloc_r+0x3c>
   89e72:	bf00      	nop
   89e74:	20000988 	.word	0x20000988
   89e78:	20000990 	.word	0x20000990
   89e7c:	20000d90 	.word	0x20000d90
   89e80:	200019ac 	.word	0x200019ac
   89e84:	2000197c 	.word	0x2000197c
   89e88:	200019a4 	.word	0x200019a4
   89e8c:	200019a8 	.word	0x200019a8
   89e90:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   89e94:	ea4f 2352 	mov.w	r3, r2, lsr #9
   89e98:	d35f      	bcc.n	89f5a <_malloc_r+0x3de>
   89e9a:	2b14      	cmp	r3, #20
   89e9c:	f200 80b1 	bhi.w	8a002 <_malloc_r+0x486>
   89ea0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   89ea4:	00c9      	lsls	r1, r1, #3
   89ea6:	335b      	adds	r3, #91	; 0x5b
   89ea8:	1878      	adds	r0, r7, r1
   89eaa:	5879      	ldr	r1, [r7, r1]
   89eac:	3808      	subs	r0, #8
   89eae:	4288      	cmp	r0, r1
   89eb0:	f000 808f 	beq.w	89fd2 <_malloc_r+0x456>
   89eb4:	684b      	ldr	r3, [r1, #4]
   89eb6:	f023 0303 	bic.w	r3, r3, #3
   89eba:	4293      	cmp	r3, r2
   89ebc:	d902      	bls.n	89ec4 <_malloc_r+0x348>
   89ebe:	6889      	ldr	r1, [r1, #8]
   89ec0:	4288      	cmp	r0, r1
   89ec2:	d1f7      	bne.n	89eb4 <_malloc_r+0x338>
   89ec4:	68c8      	ldr	r0, [r1, #12]
   89ec6:	687a      	ldr	r2, [r7, #4]
   89ec8:	e9c4 1002 	strd	r1, r0, [r4, #8]
   89ecc:	6084      	str	r4, [r0, #8]
   89ece:	60cc      	str	r4, [r1, #12]
   89ed0:	e6d7      	b.n	89c82 <_malloc_r+0x106>
   89ed2:	2b14      	cmp	r3, #20
   89ed4:	d959      	bls.n	89f8a <_malloc_r+0x40e>
   89ed6:	2b54      	cmp	r3, #84	; 0x54
   89ed8:	f200 809b 	bhi.w	8a012 <_malloc_r+0x496>
   89edc:	0b2b      	lsrs	r3, r5, #12
   89ede:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   89ee2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   89ee6:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89eea:	e68f      	b.n	89c0c <_malloc_r+0x90>
   89eec:	3401      	adds	r4, #1
   89eee:	07a3      	lsls	r3, r4, #30
   89ef0:	f100 0008 	add.w	r0, r0, #8
   89ef4:	f47f aed8 	bne.w	89ca8 <_malloc_r+0x12c>
   89ef8:	e053      	b.n	89fa2 <_malloc_r+0x426>
   89efa:	4644      	mov	r4, r8
   89efc:	4442      	add	r2, r8
   89efe:	6853      	ldr	r3, [r2, #4]
   89f00:	f8d8 100c 	ldr.w	r1, [r8, #12]
   89f04:	f043 0301 	orr.w	r3, r3, #1
   89f08:	6053      	str	r3, [r2, #4]
   89f0a:	f854 3f08 	ldr.w	r3, [r4, #8]!
   89f0e:	4630      	mov	r0, r6
   89f10:	60d9      	str	r1, [r3, #12]
   89f12:	608b      	str	r3, [r1, #8]
   89f14:	f000 f9be 	bl	8a294 <__malloc_unlock>
   89f18:	e6f6      	b.n	89d08 <_malloc_r+0x18c>
   89f1a:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   89f1e:	f105 0208 	add.w	r2, r5, #8
   89f22:	e63c      	b.n	89b9e <_malloc_r+0x22>
   89f24:	4422      	add	r2, r4
   89f26:	6853      	ldr	r3, [r2, #4]
   89f28:	4630      	mov	r0, r6
   89f2a:	f043 0301 	orr.w	r3, r3, #1
   89f2e:	6053      	str	r3, [r2, #4]
   89f30:	f000 f9b0 	bl	8a294 <__malloc_unlock>
   89f34:	3408      	adds	r4, #8
   89f36:	e6e7      	b.n	89d08 <_malloc_r+0x18c>
   89f38:	1961      	adds	r1, r4, r5
   89f3a:	f045 0501 	orr.w	r5, r5, #1
   89f3e:	6065      	str	r5, [r4, #4]
   89f40:	f043 0501 	orr.w	r5, r3, #1
   89f44:	e9c7 1104 	strd	r1, r1, [r7, #16]
   89f48:	4630      	mov	r0, r6
   89f4a:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   89f4e:	604d      	str	r5, [r1, #4]
   89f50:	50a3      	str	r3, [r4, r2]
   89f52:	f000 f99f 	bl	8a294 <__malloc_unlock>
   89f56:	3408      	adds	r4, #8
   89f58:	e6d6      	b.n	89d08 <_malloc_r+0x18c>
   89f5a:	0993      	lsrs	r3, r2, #6
   89f5c:	f103 0139 	add.w	r1, r3, #57	; 0x39
   89f60:	00c9      	lsls	r1, r1, #3
   89f62:	3338      	adds	r3, #56	; 0x38
   89f64:	e7a0      	b.n	89ea8 <_malloc_r+0x32c>
   89f66:	42bc      	cmp	r4, r7
   89f68:	d05e      	beq.n	8a028 <_malloc_r+0x4ac>
   89f6a:	68bc      	ldr	r4, [r7, #8]
   89f6c:	6860      	ldr	r0, [r4, #4]
   89f6e:	f020 0803 	bic.w	r8, r0, #3
   89f72:	4545      	cmp	r5, r8
   89f74:	eba8 0305 	sub.w	r3, r8, r5
   89f78:	d802      	bhi.n	89f80 <_malloc_r+0x404>
   89f7a:	2b0f      	cmp	r3, #15
   89f7c:	f73f af66 	bgt.w	89e4c <_malloc_r+0x2d0>
   89f80:	4630      	mov	r0, r6
   89f82:	f000 f987 	bl	8a294 <__malloc_unlock>
   89f86:	2400      	movs	r4, #0
   89f88:	e6be      	b.n	89d08 <_malloc_r+0x18c>
   89f8a:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   89f8e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   89f92:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89f96:	e639      	b.n	89c0c <_malloc_r+0x90>
   89f98:	f859 3908 	ldr.w	r3, [r9], #-8
   89f9c:	454b      	cmp	r3, r9
   89f9e:	f040 8095 	bne.w	8a0cc <_malloc_r+0x550>
   89fa2:	f01c 0f03 	tst.w	ip, #3
   89fa6:	f10c 3cff 	add.w	ip, ip, #4294967295
   89faa:	d1f5      	bne.n	89f98 <_malloc_r+0x41c>
   89fac:	687b      	ldr	r3, [r7, #4]
   89fae:	ea23 0301 	bic.w	r3, r3, r1
   89fb2:	607b      	str	r3, [r7, #4]
   89fb4:	0049      	lsls	r1, r1, #1
   89fb6:	4299      	cmp	r1, r3
   89fb8:	f63f aec3 	bhi.w	89d42 <_malloc_r+0x1c6>
   89fbc:	b911      	cbnz	r1, 89fc4 <_malloc_r+0x448>
   89fbe:	e6c0      	b.n	89d42 <_malloc_r+0x1c6>
   89fc0:	0049      	lsls	r1, r1, #1
   89fc2:	3404      	adds	r4, #4
   89fc4:	4219      	tst	r1, r3
   89fc6:	d0fb      	beq.n	89fc0 <_malloc_r+0x444>
   89fc8:	46a4      	mov	ip, r4
   89fca:	e669      	b.n	89ca0 <_malloc_r+0x124>
   89fcc:	f103 0810 	add.w	r8, r3, #16
   89fd0:	e6d4      	b.n	89d7c <_malloc_r+0x200>
   89fd2:	2201      	movs	r2, #1
   89fd4:	109b      	asrs	r3, r3, #2
   89fd6:	409a      	lsls	r2, r3
   89fd8:	687b      	ldr	r3, [r7, #4]
   89fda:	431a      	orrs	r2, r3
   89fdc:	607a      	str	r2, [r7, #4]
   89fde:	e773      	b.n	89ec8 <_malloc_r+0x34c>
   89fe0:	eb02 0108 	add.w	r1, r2, r8
   89fe4:	4249      	negs	r1, r1
   89fe6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   89fea:	4651      	mov	r1, sl
   89fec:	4630      	mov	r0, r6
   89fee:	9200      	str	r2, [sp, #0]
   89ff0:	f000 ff20 	bl	8ae34 <_sbrk_r>
   89ff4:	1c43      	adds	r3, r0, #1
   89ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
   89ffa:	f47f aef5 	bne.w	89de8 <_malloc_r+0x26c>
   89ffe:	46da      	mov	sl, fp
   8a000:	e6f5      	b.n	89dee <_malloc_r+0x272>
   8a002:	2b54      	cmp	r3, #84	; 0x54
   8a004:	d826      	bhi.n	8a054 <_malloc_r+0x4d8>
   8a006:	0b13      	lsrs	r3, r2, #12
   8a008:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8a00c:	00c9      	lsls	r1, r1, #3
   8a00e:	336e      	adds	r3, #110	; 0x6e
   8a010:	e74a      	b.n	89ea8 <_malloc_r+0x32c>
   8a012:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a016:	d826      	bhi.n	8a066 <_malloc_r+0x4ea>
   8a018:	0beb      	lsrs	r3, r5, #15
   8a01a:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   8a01e:	f103 0477 	add.w	r4, r3, #119	; 0x77
   8a022:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a026:	e5f1      	b.n	89c0c <_malloc_r+0x90>
   8a028:	4b29      	ldr	r3, [pc, #164]	; (8a0d0 <_malloc_r+0x554>)
   8a02a:	6818      	ldr	r0, [r3, #0]
   8a02c:	4440      	add	r0, r8
   8a02e:	6018      	str	r0, [r3, #0]
   8a030:	e6b6      	b.n	89da0 <_malloc_r+0x224>
   8a032:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8a036:	f1bc 0f00 	cmp.w	ip, #0
   8a03a:	f47f aeb1 	bne.w	89da0 <_malloc_r+0x224>
   8a03e:	68bc      	ldr	r4, [r7, #8]
   8a040:	44c8      	add	r8, r9
   8a042:	f048 0001 	orr.w	r0, r8, #1
   8a046:	6060      	str	r0, [r4, #4]
   8a048:	e6f5      	b.n	89e36 <_malloc_r+0x2ba>
   8a04a:	4614      	mov	r4, r2
   8a04c:	e6f3      	b.n	89e36 <_malloc_r+0x2ba>
   8a04e:	2301      	movs	r3, #1
   8a050:	6053      	str	r3, [r2, #4]
   8a052:	e795      	b.n	89f80 <_malloc_r+0x404>
   8a054:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a058:	d824      	bhi.n	8a0a4 <_malloc_r+0x528>
   8a05a:	0bd3      	lsrs	r3, r2, #15
   8a05c:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8a060:	00c9      	lsls	r1, r1, #3
   8a062:	3377      	adds	r3, #119	; 0x77
   8a064:	e720      	b.n	89ea8 <_malloc_r+0x32c>
   8a066:	f240 5254 	movw	r2, #1364	; 0x554
   8a06a:	4293      	cmp	r3, r2
   8a06c:	d824      	bhi.n	8a0b8 <_malloc_r+0x53c>
   8a06e:	0cab      	lsrs	r3, r5, #18
   8a070:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   8a074:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8a078:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a07c:	e5c6      	b.n	89c0c <_malloc_r+0x90>
   8a07e:	f1ab 0b08 	sub.w	fp, fp, #8
   8a082:	44d8      	add	r8, fp
   8a084:	f04f 0a00 	mov.w	sl, #0
   8a088:	eba8 0802 	sub.w	r8, r8, r2
   8a08c:	e6af      	b.n	89dee <_malloc_r+0x272>
   8a08e:	f104 0108 	add.w	r1, r4, #8
   8a092:	4630      	mov	r0, r6
   8a094:	9300      	str	r3, [sp, #0]
   8a096:	f7ff fa1b 	bl	894d0 <_free_r>
   8a09a:	68bc      	ldr	r4, [r7, #8]
   8a09c:	9b00      	ldr	r3, [sp, #0]
   8a09e:	6860      	ldr	r0, [r4, #4]
   8a0a0:	6819      	ldr	r1, [r3, #0]
   8a0a2:	e6c8      	b.n	89e36 <_malloc_r+0x2ba>
   8a0a4:	f240 5154 	movw	r1, #1364	; 0x554
   8a0a8:	428b      	cmp	r3, r1
   8a0aa:	d80b      	bhi.n	8a0c4 <_malloc_r+0x548>
   8a0ac:	0c93      	lsrs	r3, r2, #18
   8a0ae:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8a0b2:	00c9      	lsls	r1, r1, #3
   8a0b4:	337c      	adds	r3, #124	; 0x7c
   8a0b6:	e6f7      	b.n	89ea8 <_malloc_r+0x32c>
   8a0b8:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   8a0bc:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   8a0c0:	247e      	movs	r4, #126	; 0x7e
   8a0c2:	e5a3      	b.n	89c0c <_malloc_r+0x90>
   8a0c4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8a0c8:	237e      	movs	r3, #126	; 0x7e
   8a0ca:	e6ed      	b.n	89ea8 <_malloc_r+0x32c>
   8a0cc:	687b      	ldr	r3, [r7, #4]
   8a0ce:	e771      	b.n	89fb4 <_malloc_r+0x438>
   8a0d0:	2000197c 	.word	0x2000197c

0008a0d4 <__ascii_mbtowc>:
   8a0d4:	b082      	sub	sp, #8
   8a0d6:	b149      	cbz	r1, 8a0ec <__ascii_mbtowc+0x18>
   8a0d8:	b15a      	cbz	r2, 8a0f2 <__ascii_mbtowc+0x1e>
   8a0da:	b16b      	cbz	r3, 8a0f8 <__ascii_mbtowc+0x24>
   8a0dc:	7813      	ldrb	r3, [r2, #0]
   8a0de:	600b      	str	r3, [r1, #0]
   8a0e0:	7812      	ldrb	r2, [r2, #0]
   8a0e2:	1e10      	subs	r0, r2, #0
   8a0e4:	bf18      	it	ne
   8a0e6:	2001      	movne	r0, #1
   8a0e8:	b002      	add	sp, #8
   8a0ea:	4770      	bx	lr
   8a0ec:	a901      	add	r1, sp, #4
   8a0ee:	2a00      	cmp	r2, #0
   8a0f0:	d1f3      	bne.n	8a0da <__ascii_mbtowc+0x6>
   8a0f2:	4610      	mov	r0, r2
   8a0f4:	b002      	add	sp, #8
   8a0f6:	4770      	bx	lr
   8a0f8:	f06f 0001 	mvn.w	r0, #1
   8a0fc:	e7f4      	b.n	8a0e8 <__ascii_mbtowc+0x14>
   8a0fe:	bf00      	nop

0008a100 <memchr>:
   8a100:	fa5f fc81 	uxtb.w	ip, r1
   8a104:	0781      	lsls	r1, r0, #30
   8a106:	d010      	beq.n	8a12a <memchr+0x2a>
   8a108:	4603      	mov	r3, r0
   8a10a:	1e51      	subs	r1, r2, #1
   8a10c:	b92a      	cbnz	r2, 8a11a <memchr+0x1a>
   8a10e:	e00a      	b.n	8a126 <memchr+0x26>
   8a110:	079a      	lsls	r2, r3, #30
   8a112:	4618      	mov	r0, r3
   8a114:	d00a      	beq.n	8a12c <memchr+0x2c>
   8a116:	3901      	subs	r1, #1
   8a118:	d305      	bcc.n	8a126 <memchr+0x26>
   8a11a:	4618      	mov	r0, r3
   8a11c:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a120:	4562      	cmp	r2, ip
   8a122:	d1f5      	bne.n	8a110 <memchr+0x10>
   8a124:	4770      	bx	lr
   8a126:	2000      	movs	r0, #0
   8a128:	4770      	bx	lr
   8a12a:	4611      	mov	r1, r2
   8a12c:	2903      	cmp	r1, #3
   8a12e:	d80c      	bhi.n	8a14a <memchr+0x4a>
   8a130:	2900      	cmp	r1, #0
   8a132:	d0f8      	beq.n	8a126 <memchr+0x26>
   8a134:	4603      	mov	r3, r0
   8a136:	4401      	add	r1, r0
   8a138:	e001      	b.n	8a13e <memchr+0x3e>
   8a13a:	428b      	cmp	r3, r1
   8a13c:	d0f3      	beq.n	8a126 <memchr+0x26>
   8a13e:	4618      	mov	r0, r3
   8a140:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a144:	4562      	cmp	r2, ip
   8a146:	d1f8      	bne.n	8a13a <memchr+0x3a>
   8a148:	e7ec      	b.n	8a124 <memchr+0x24>
   8a14a:	4602      	mov	r2, r0
   8a14c:	b510      	push	{r4, lr}
   8a14e:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   8a152:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   8a156:	4610      	mov	r0, r2
   8a158:	6803      	ldr	r3, [r0, #0]
   8a15a:	3204      	adds	r2, #4
   8a15c:	4063      	eors	r3, r4
   8a15e:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   8a162:	ea2e 0303 	bic.w	r3, lr, r3
   8a166:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8a16a:	d104      	bne.n	8a176 <memchr+0x76>
   8a16c:	3904      	subs	r1, #4
   8a16e:	2903      	cmp	r1, #3
   8a170:	4610      	mov	r0, r2
   8a172:	d8f0      	bhi.n	8a156 <memchr+0x56>
   8a174:	b151      	cbz	r1, 8a18c <memchr+0x8c>
   8a176:	4603      	mov	r3, r0
   8a178:	4401      	add	r1, r0
   8a17a:	e001      	b.n	8a180 <memchr+0x80>
   8a17c:	428b      	cmp	r3, r1
   8a17e:	d005      	beq.n	8a18c <memchr+0x8c>
   8a180:	4618      	mov	r0, r3
   8a182:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a186:	4562      	cmp	r2, ip
   8a188:	d1f8      	bne.n	8a17c <memchr+0x7c>
   8a18a:	bd10      	pop	{r4, pc}
   8a18c:	2000      	movs	r0, #0
   8a18e:	bd10      	pop	{r4, pc}

0008a190 <memmove>:
   8a190:	4288      	cmp	r0, r1
   8a192:	d90d      	bls.n	8a1b0 <memmove+0x20>
   8a194:	188b      	adds	r3, r1, r2
   8a196:	4283      	cmp	r3, r0
   8a198:	d90a      	bls.n	8a1b0 <memmove+0x20>
   8a19a:	eb00 0c02 	add.w	ip, r0, r2
   8a19e:	b1ba      	cbz	r2, 8a1d0 <memmove+0x40>
   8a1a0:	4662      	mov	r2, ip
   8a1a2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   8a1a6:	4299      	cmp	r1, r3
   8a1a8:	f802 cd01 	strb.w	ip, [r2, #-1]!
   8a1ac:	d1f9      	bne.n	8a1a2 <memmove+0x12>
   8a1ae:	4770      	bx	lr
   8a1b0:	2a0f      	cmp	r2, #15
   8a1b2:	d80e      	bhi.n	8a1d2 <memmove+0x42>
   8a1b4:	4603      	mov	r3, r0
   8a1b6:	f102 3cff 	add.w	ip, r2, #4294967295
   8a1ba:	b14a      	cbz	r2, 8a1d0 <memmove+0x40>
   8a1bc:	f10c 0c01 	add.w	ip, ip, #1
   8a1c0:	3b01      	subs	r3, #1
   8a1c2:	448c      	add	ip, r1
   8a1c4:	f811 2b01 	ldrb.w	r2, [r1], #1
   8a1c8:	4561      	cmp	r1, ip
   8a1ca:	f803 2f01 	strb.w	r2, [r3, #1]!
   8a1ce:	d1f9      	bne.n	8a1c4 <memmove+0x34>
   8a1d0:	4770      	bx	lr
   8a1d2:	ea40 0301 	orr.w	r3, r0, r1
   8a1d6:	079b      	lsls	r3, r3, #30
   8a1d8:	d14f      	bne.n	8a27a <memmove+0xea>
   8a1da:	f1a2 0310 	sub.w	r3, r2, #16
   8a1de:	b570      	push	{r4, r5, r6, lr}
   8a1e0:	f101 0c20 	add.w	ip, r1, #32
   8a1e4:	f023 050f 	bic.w	r5, r3, #15
   8a1e8:	f101 0e10 	add.w	lr, r1, #16
   8a1ec:	f100 0410 	add.w	r4, r0, #16
   8a1f0:	44ac      	add	ip, r5
   8a1f2:	091b      	lsrs	r3, r3, #4
   8a1f4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   8a1f8:	f10e 0e10 	add.w	lr, lr, #16
   8a1fc:	f844 5c10 	str.w	r5, [r4, #-16]
   8a200:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   8a204:	3410      	adds	r4, #16
   8a206:	f844 5c1c 	str.w	r5, [r4, #-28]
   8a20a:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   8a20e:	f844 5c18 	str.w	r5, [r4, #-24]
   8a212:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   8a216:	45e6      	cmp	lr, ip
   8a218:	f844 5c14 	str.w	r5, [r4, #-20]
   8a21c:	d1ea      	bne.n	8a1f4 <memmove+0x64>
   8a21e:	3301      	adds	r3, #1
   8a220:	f012 0f0c 	tst.w	r2, #12
   8a224:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8a228:	f002 040f 	and.w	r4, r2, #15
   8a22c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8a230:	d027      	beq.n	8a282 <memmove+0xf2>
   8a232:	468e      	mov	lr, r1
   8a234:	3c04      	subs	r4, #4
   8a236:	f024 0603 	bic.w	r6, r4, #3
   8a23a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   8a23e:	441e      	add	r6, r3
   8a240:	1f1c      	subs	r4, r3, #4
   8a242:	f85e 5b04 	ldr.w	r5, [lr], #4
   8a246:	f844 5f04 	str.w	r5, [r4, #4]!
   8a24a:	42b4      	cmp	r4, r6
   8a24c:	d1f9      	bne.n	8a242 <memmove+0xb2>
   8a24e:	f10c 0401 	add.w	r4, ip, #1
   8a252:	f002 0203 	and.w	r2, r2, #3
   8a256:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8a25a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8a25e:	f102 3cff 	add.w	ip, r2, #4294967295
   8a262:	b14a      	cbz	r2, 8a278 <memmove+0xe8>
   8a264:	f10c 0c01 	add.w	ip, ip, #1
   8a268:	3b01      	subs	r3, #1
   8a26a:	448c      	add	ip, r1
   8a26c:	f811 2b01 	ldrb.w	r2, [r1], #1
   8a270:	4561      	cmp	r1, ip
   8a272:	f803 2f01 	strb.w	r2, [r3, #1]!
   8a276:	d1f9      	bne.n	8a26c <memmove+0xdc>
   8a278:	bd70      	pop	{r4, r5, r6, pc}
   8a27a:	4603      	mov	r3, r0
   8a27c:	f102 3cff 	add.w	ip, r2, #4294967295
   8a280:	e79c      	b.n	8a1bc <memmove+0x2c>
   8a282:	4622      	mov	r2, r4
   8a284:	e7eb      	b.n	8a25e <memmove+0xce>
   8a286:	bf00      	nop

0008a288 <__malloc_lock>:
   8a288:	4801      	ldr	r0, [pc, #4]	; (8a290 <__malloc_lock+0x8>)
   8a28a:	f7ff bbcb 	b.w	89a24 <__retarget_lock_acquire_recursive>
   8a28e:	bf00      	nop
   8a290:	20001970 	.word	0x20001970

0008a294 <__malloc_unlock>:
   8a294:	4801      	ldr	r0, [pc, #4]	; (8a29c <__malloc_unlock+0x8>)
   8a296:	f7ff bbc7 	b.w	89a28 <__retarget_lock_release_recursive>
   8a29a:	bf00      	nop
   8a29c:	20001970 	.word	0x20001970

0008a2a0 <_Balloc>:
   8a2a0:	b538      	push	{r3, r4, r5, lr}
   8a2a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a2a4:	4605      	mov	r5, r0
   8a2a6:	460c      	mov	r4, r1
   8a2a8:	b14b      	cbz	r3, 8a2be <_Balloc+0x1e>
   8a2aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8a2ae:	b180      	cbz	r0, 8a2d2 <_Balloc+0x32>
   8a2b0:	6802      	ldr	r2, [r0, #0]
   8a2b2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8a2b6:	2300      	movs	r3, #0
   8a2b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8a2bc:	bd38      	pop	{r3, r4, r5, pc}
   8a2be:	2221      	movs	r2, #33	; 0x21
   8a2c0:	2104      	movs	r1, #4
   8a2c2:	f000 ff8d 	bl	8b1e0 <_calloc_r>
   8a2c6:	4603      	mov	r3, r0
   8a2c8:	64e8      	str	r0, [r5, #76]	; 0x4c
   8a2ca:	2800      	cmp	r0, #0
   8a2cc:	d1ed      	bne.n	8a2aa <_Balloc+0xa>
   8a2ce:	2000      	movs	r0, #0
   8a2d0:	bd38      	pop	{r3, r4, r5, pc}
   8a2d2:	2101      	movs	r1, #1
   8a2d4:	4628      	mov	r0, r5
   8a2d6:	fa01 f504 	lsl.w	r5, r1, r4
   8a2da:	1d6a      	adds	r2, r5, #5
   8a2dc:	0092      	lsls	r2, r2, #2
   8a2de:	f000 ff7f 	bl	8b1e0 <_calloc_r>
   8a2e2:	2800      	cmp	r0, #0
   8a2e4:	d0f3      	beq.n	8a2ce <_Balloc+0x2e>
   8a2e6:	e9c0 4501 	strd	r4, r5, [r0, #4]
   8a2ea:	e7e4      	b.n	8a2b6 <_Balloc+0x16>

0008a2ec <_Bfree>:
   8a2ec:	b131      	cbz	r1, 8a2fc <_Bfree+0x10>
   8a2ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a2f0:	684a      	ldr	r2, [r1, #4]
   8a2f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8a2f6:	6008      	str	r0, [r1, #0]
   8a2f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8a2fc:	4770      	bx	lr
   8a2fe:	bf00      	nop

0008a300 <__multadd>:
   8a300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a304:	f04f 0e00 	mov.w	lr, #0
   8a308:	460e      	mov	r6, r1
   8a30a:	461c      	mov	r4, r3
   8a30c:	690d      	ldr	r5, [r1, #16]
   8a30e:	4607      	mov	r7, r0
   8a310:	f101 0014 	add.w	r0, r1, #20
   8a314:	6801      	ldr	r1, [r0, #0]
   8a316:	f10e 0e01 	add.w	lr, lr, #1
   8a31a:	b28b      	uxth	r3, r1
   8a31c:	fb02 4303 	mla	r3, r2, r3, r4
   8a320:	0c09      	lsrs	r1, r1, #16
   8a322:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8a326:	fb02 cc01 	mla	ip, r2, r1, ip
   8a32a:	b29b      	uxth	r3, r3
   8a32c:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   8a330:	4575      	cmp	r5, lr
   8a332:	f840 3b04 	str.w	r3, [r0], #4
   8a336:	ea4f 441c 	mov.w	r4, ip, lsr #16
   8a33a:	dceb      	bgt.n	8a314 <__multadd+0x14>
   8a33c:	b13c      	cbz	r4, 8a34e <__multadd+0x4e>
   8a33e:	68b3      	ldr	r3, [r6, #8]
   8a340:	42ab      	cmp	r3, r5
   8a342:	dd07      	ble.n	8a354 <__multadd+0x54>
   8a344:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8a348:	3501      	adds	r5, #1
   8a34a:	615c      	str	r4, [r3, #20]
   8a34c:	6135      	str	r5, [r6, #16]
   8a34e:	4630      	mov	r0, r6
   8a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a354:	6871      	ldr	r1, [r6, #4]
   8a356:	4638      	mov	r0, r7
   8a358:	3101      	adds	r1, #1
   8a35a:	f7ff ffa1 	bl	8a2a0 <_Balloc>
   8a35e:	4680      	mov	r8, r0
   8a360:	b1a8      	cbz	r0, 8a38e <__multadd+0x8e>
   8a362:	6932      	ldr	r2, [r6, #16]
   8a364:	f106 010c 	add.w	r1, r6, #12
   8a368:	3202      	adds	r2, #2
   8a36a:	0092      	lsls	r2, r2, #2
   8a36c:	300c      	adds	r0, #12
   8a36e:	f7fa ff2d 	bl	851cc <memcpy>
   8a372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a374:	6872      	ldr	r2, [r6, #4]
   8a376:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8a37a:	6031      	str	r1, [r6, #0]
   8a37c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8a380:	4646      	mov	r6, r8
   8a382:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8a386:	3501      	adds	r5, #1
   8a388:	615c      	str	r4, [r3, #20]
   8a38a:	6135      	str	r5, [r6, #16]
   8a38c:	e7df      	b.n	8a34e <__multadd+0x4e>
   8a38e:	4602      	mov	r2, r0
   8a390:	21b5      	movs	r1, #181	; 0xb5
   8a392:	4b02      	ldr	r3, [pc, #8]	; (8a39c <__multadd+0x9c>)
   8a394:	4802      	ldr	r0, [pc, #8]	; (8a3a0 <__multadd+0xa0>)
   8a396:	f000 ff03 	bl	8b1a0 <__assert_func>
   8a39a:	bf00      	nop
   8a39c:	0008c2b8 	.word	0x0008c2b8
   8a3a0:	0008c35c 	.word	0x0008c35c

0008a3a4 <__hi0bits>:
   8a3a4:	0c02      	lsrs	r2, r0, #16
   8a3a6:	0412      	lsls	r2, r2, #16
   8a3a8:	4603      	mov	r3, r0
   8a3aa:	b9ca      	cbnz	r2, 8a3e0 <__hi0bits+0x3c>
   8a3ac:	2010      	movs	r0, #16
   8a3ae:	4083      	lsls	r3, r0
   8a3b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8a3b4:	bf04      	itt	eq
   8a3b6:	021b      	lsleq	r3, r3, #8
   8a3b8:	3008      	addeq	r0, #8
   8a3ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8a3be:	bf04      	itt	eq
   8a3c0:	011b      	lsleq	r3, r3, #4
   8a3c2:	3004      	addeq	r0, #4
   8a3c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8a3c8:	bf04      	itt	eq
   8a3ca:	009b      	lsleq	r3, r3, #2
   8a3cc:	3002      	addeq	r0, #2
   8a3ce:	2b00      	cmp	r3, #0
   8a3d0:	db05      	blt.n	8a3de <__hi0bits+0x3a>
   8a3d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8a3d6:	f100 0001 	add.w	r0, r0, #1
   8a3da:	bf08      	it	eq
   8a3dc:	2020      	moveq	r0, #32
   8a3de:	4770      	bx	lr
   8a3e0:	2000      	movs	r0, #0
   8a3e2:	e7e5      	b.n	8a3b0 <__hi0bits+0xc>

0008a3e4 <__lo0bits>:
   8a3e4:	6803      	ldr	r3, [r0, #0]
   8a3e6:	4602      	mov	r2, r0
   8a3e8:	f013 0007 	ands.w	r0, r3, #7
   8a3ec:	d009      	beq.n	8a402 <__lo0bits+0x1e>
   8a3ee:	07d9      	lsls	r1, r3, #31
   8a3f0:	d41f      	bmi.n	8a432 <__lo0bits+0x4e>
   8a3f2:	0798      	lsls	r0, r3, #30
   8a3f4:	bf4b      	itete	mi
   8a3f6:	085b      	lsrmi	r3, r3, #1
   8a3f8:	089b      	lsrpl	r3, r3, #2
   8a3fa:	2001      	movmi	r0, #1
   8a3fc:	2002      	movpl	r0, #2
   8a3fe:	6013      	str	r3, [r2, #0]
   8a400:	4770      	bx	lr
   8a402:	b299      	uxth	r1, r3
   8a404:	b909      	cbnz	r1, 8a40a <__lo0bits+0x26>
   8a406:	2010      	movs	r0, #16
   8a408:	40c3      	lsrs	r3, r0
   8a40a:	b2d9      	uxtb	r1, r3
   8a40c:	b909      	cbnz	r1, 8a412 <__lo0bits+0x2e>
   8a40e:	3008      	adds	r0, #8
   8a410:	0a1b      	lsrs	r3, r3, #8
   8a412:	0719      	lsls	r1, r3, #28
   8a414:	bf04      	itt	eq
   8a416:	091b      	lsreq	r3, r3, #4
   8a418:	3004      	addeq	r0, #4
   8a41a:	0799      	lsls	r1, r3, #30
   8a41c:	bf04      	itt	eq
   8a41e:	089b      	lsreq	r3, r3, #2
   8a420:	3002      	addeq	r0, #2
   8a422:	07d9      	lsls	r1, r3, #31
   8a424:	d403      	bmi.n	8a42e <__lo0bits+0x4a>
   8a426:	085b      	lsrs	r3, r3, #1
   8a428:	f100 0001 	add.w	r0, r0, #1
   8a42c:	d003      	beq.n	8a436 <__lo0bits+0x52>
   8a42e:	6013      	str	r3, [r2, #0]
   8a430:	4770      	bx	lr
   8a432:	2000      	movs	r0, #0
   8a434:	4770      	bx	lr
   8a436:	2020      	movs	r0, #32
   8a438:	4770      	bx	lr
   8a43a:	bf00      	nop

0008a43c <__i2b>:
   8a43c:	b538      	push	{r3, r4, r5, lr}
   8a43e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a440:	4604      	mov	r4, r0
   8a442:	460d      	mov	r5, r1
   8a444:	b14b      	cbz	r3, 8a45a <__i2b+0x1e>
   8a446:	6858      	ldr	r0, [r3, #4]
   8a448:	b1b0      	cbz	r0, 8a478 <__i2b+0x3c>
   8a44a:	6802      	ldr	r2, [r0, #0]
   8a44c:	605a      	str	r2, [r3, #4]
   8a44e:	2200      	movs	r2, #0
   8a450:	2301      	movs	r3, #1
   8a452:	6145      	str	r5, [r0, #20]
   8a454:	e9c0 2303 	strd	r2, r3, [r0, #12]
   8a458:	bd38      	pop	{r3, r4, r5, pc}
   8a45a:	2221      	movs	r2, #33	; 0x21
   8a45c:	2104      	movs	r1, #4
   8a45e:	f000 febf 	bl	8b1e0 <_calloc_r>
   8a462:	4603      	mov	r3, r0
   8a464:	64e0      	str	r0, [r4, #76]	; 0x4c
   8a466:	2800      	cmp	r0, #0
   8a468:	d1ed      	bne.n	8a446 <__i2b+0xa>
   8a46a:	2200      	movs	r2, #0
   8a46c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8a470:	4b07      	ldr	r3, [pc, #28]	; (8a490 <__i2b+0x54>)
   8a472:	4808      	ldr	r0, [pc, #32]	; (8a494 <__i2b+0x58>)
   8a474:	f000 fe94 	bl	8b1a0 <__assert_func>
   8a478:	221c      	movs	r2, #28
   8a47a:	2101      	movs	r1, #1
   8a47c:	4620      	mov	r0, r4
   8a47e:	f000 feaf 	bl	8b1e0 <_calloc_r>
   8a482:	2800      	cmp	r0, #0
   8a484:	d0f1      	beq.n	8a46a <__i2b+0x2e>
   8a486:	2201      	movs	r2, #1
   8a488:	2302      	movs	r3, #2
   8a48a:	e9c0 2301 	strd	r2, r3, [r0, #4]
   8a48e:	e7de      	b.n	8a44e <__i2b+0x12>
   8a490:	0008c2b8 	.word	0x0008c2b8
   8a494:	0008c35c 	.word	0x0008c35c

0008a498 <__multiply>:
   8a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a49c:	690e      	ldr	r6, [r1, #16]
   8a49e:	6915      	ldr	r5, [r2, #16]
   8a4a0:	4688      	mov	r8, r1
   8a4a2:	42ae      	cmp	r6, r5
   8a4a4:	4614      	mov	r4, r2
   8a4a6:	b085      	sub	sp, #20
   8a4a8:	db05      	blt.n	8a4b6 <__multiply+0x1e>
   8a4aa:	462a      	mov	r2, r5
   8a4ac:	4623      	mov	r3, r4
   8a4ae:	4635      	mov	r5, r6
   8a4b0:	460c      	mov	r4, r1
   8a4b2:	4616      	mov	r6, r2
   8a4b4:	4698      	mov	r8, r3
   8a4b6:	68a3      	ldr	r3, [r4, #8]
   8a4b8:	6861      	ldr	r1, [r4, #4]
   8a4ba:	19af      	adds	r7, r5, r6
   8a4bc:	42bb      	cmp	r3, r7
   8a4be:	bfb8      	it	lt
   8a4c0:	3101      	addlt	r1, #1
   8a4c2:	f7ff feed 	bl	8a2a0 <_Balloc>
   8a4c6:	9001      	str	r0, [sp, #4]
   8a4c8:	2800      	cmp	r0, #0
   8a4ca:	f000 8087 	beq.w	8a5dc <__multiply+0x144>
   8a4ce:	9b01      	ldr	r3, [sp, #4]
   8a4d0:	f103 0914 	add.w	r9, r3, #20
   8a4d4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   8a4d8:	45d1      	cmp	r9, sl
   8a4da:	d205      	bcs.n	8a4e8 <__multiply+0x50>
   8a4dc:	464b      	mov	r3, r9
   8a4de:	2200      	movs	r2, #0
   8a4e0:	f843 2b04 	str.w	r2, [r3], #4
   8a4e4:	459a      	cmp	sl, r3
   8a4e6:	d8fb      	bhi.n	8a4e0 <__multiply+0x48>
   8a4e8:	f108 0814 	add.w	r8, r8, #20
   8a4ec:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   8a4f0:	f104 0314 	add.w	r3, r4, #20
   8a4f4:	45d8      	cmp	r8, fp
   8a4f6:	461a      	mov	r2, r3
   8a4f8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   8a4fc:	d25f      	bcs.n	8a5be <__multiply+0x126>
   8a4fe:	1b2b      	subs	r3, r5, r4
   8a500:	3b15      	subs	r3, #21
   8a502:	f023 0303 	bic.w	r3, r3, #3
   8a506:	3304      	adds	r3, #4
   8a508:	3415      	adds	r4, #21
   8a50a:	42a5      	cmp	r5, r4
   8a50c:	bf38      	it	cc
   8a50e:	2304      	movcc	r3, #4
   8a510:	e9cd a702 	strd	sl, r7, [sp, #8]
   8a514:	46ac      	mov	ip, r5
   8a516:	461f      	mov	r7, r3
   8a518:	4692      	mov	sl, r2
   8a51a:	e005      	b.n	8a528 <__multiply+0x90>
   8a51c:	0c00      	lsrs	r0, r0, #16
   8a51e:	d129      	bne.n	8a574 <__multiply+0xdc>
   8a520:	45c3      	cmp	fp, r8
   8a522:	f109 0904 	add.w	r9, r9, #4
   8a526:	d948      	bls.n	8a5ba <__multiply+0x122>
   8a528:	f858 0b04 	ldr.w	r0, [r8], #4
   8a52c:	b285      	uxth	r5, r0
   8a52e:	2d00      	cmp	r5, #0
   8a530:	d0f4      	beq.n	8a51c <__multiply+0x84>
   8a532:	4656      	mov	r6, sl
   8a534:	464c      	mov	r4, r9
   8a536:	2300      	movs	r3, #0
   8a538:	f856 0b04 	ldr.w	r0, [r6], #4
   8a53c:	6821      	ldr	r1, [r4, #0]
   8a53e:	b282      	uxth	r2, r0
   8a540:	fa1f fe81 	uxth.w	lr, r1
   8a544:	fb05 ee02 	mla	lr, r5, r2, lr
   8a548:	0c00      	lsrs	r0, r0, #16
   8a54a:	0c0a      	lsrs	r2, r1, #16
   8a54c:	fb05 2200 	mla	r2, r5, r0, r2
   8a550:	4473      	add	r3, lr
   8a552:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8a556:	b29b      	uxth	r3, r3
   8a558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8a55c:	45b4      	cmp	ip, r6
   8a55e:	f844 3b04 	str.w	r3, [r4], #4
   8a562:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8a566:	d8e7      	bhi.n	8a538 <__multiply+0xa0>
   8a568:	f849 3007 	str.w	r3, [r9, r7]
   8a56c:	f858 0c04 	ldr.w	r0, [r8, #-4]
   8a570:	0c00      	lsrs	r0, r0, #16
   8a572:	d0d5      	beq.n	8a520 <__multiply+0x88>
   8a574:	f8d9 3000 	ldr.w	r3, [r9]
   8a578:	4654      	mov	r4, sl
   8a57a:	4619      	mov	r1, r3
   8a57c:	464d      	mov	r5, r9
   8a57e:	2200      	movs	r2, #0
   8a580:	8826      	ldrh	r6, [r4, #0]
   8a582:	0c09      	lsrs	r1, r1, #16
   8a584:	fb00 1106 	mla	r1, r0, r6, r1
   8a588:	b29b      	uxth	r3, r3
   8a58a:	440a      	add	r2, r1
   8a58c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8a590:	f845 3b04 	str.w	r3, [r5], #4
   8a594:	f854 6b04 	ldr.w	r6, [r4], #4
   8a598:	6829      	ldr	r1, [r5, #0]
   8a59a:	0c36      	lsrs	r6, r6, #16
   8a59c:	b28b      	uxth	r3, r1
   8a59e:	fb00 3306 	mla	r3, r0, r6, r3
   8a5a2:	45a4      	cmp	ip, r4
   8a5a4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8a5a8:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8a5ac:	d8e8      	bhi.n	8a580 <__multiply+0xe8>
   8a5ae:	45c3      	cmp	fp, r8
   8a5b0:	f849 3007 	str.w	r3, [r9, r7]
   8a5b4:	f109 0904 	add.w	r9, r9, #4
   8a5b8:	d8b6      	bhi.n	8a528 <__multiply+0x90>
   8a5ba:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   8a5be:	2f00      	cmp	r7, #0
   8a5c0:	dc02      	bgt.n	8a5c8 <__multiply+0x130>
   8a5c2:	e005      	b.n	8a5d0 <__multiply+0x138>
   8a5c4:	3f01      	subs	r7, #1
   8a5c6:	d003      	beq.n	8a5d0 <__multiply+0x138>
   8a5c8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8a5cc:	2b00      	cmp	r3, #0
   8a5ce:	d0f9      	beq.n	8a5c4 <__multiply+0x12c>
   8a5d0:	9b01      	ldr	r3, [sp, #4]
   8a5d2:	4618      	mov	r0, r3
   8a5d4:	611f      	str	r7, [r3, #16]
   8a5d6:	b005      	add	sp, #20
   8a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a5dc:	4602      	mov	r2, r0
   8a5de:	f240 115d 	movw	r1, #349	; 0x15d
   8a5e2:	4b02      	ldr	r3, [pc, #8]	; (8a5ec <__multiply+0x154>)
   8a5e4:	4802      	ldr	r0, [pc, #8]	; (8a5f0 <__multiply+0x158>)
   8a5e6:	f000 fddb 	bl	8b1a0 <__assert_func>
   8a5ea:	bf00      	nop
   8a5ec:	0008c2b8 	.word	0x0008c2b8
   8a5f0:	0008c35c 	.word	0x0008c35c

0008a5f4 <__pow5mult>:
   8a5f4:	f012 0303 	ands.w	r3, r2, #3
   8a5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a5fc:	4614      	mov	r4, r2
   8a5fe:	4607      	mov	r7, r0
   8a600:	d12e      	bne.n	8a660 <__pow5mult+0x6c>
   8a602:	460e      	mov	r6, r1
   8a604:	10a4      	asrs	r4, r4, #2
   8a606:	d01c      	beq.n	8a642 <__pow5mult+0x4e>
   8a608:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8a60a:	b395      	cbz	r5, 8a672 <__pow5mult+0x7e>
   8a60c:	07e3      	lsls	r3, r4, #31
   8a60e:	f04f 0800 	mov.w	r8, #0
   8a612:	d406      	bmi.n	8a622 <__pow5mult+0x2e>
   8a614:	1064      	asrs	r4, r4, #1
   8a616:	d014      	beq.n	8a642 <__pow5mult+0x4e>
   8a618:	6828      	ldr	r0, [r5, #0]
   8a61a:	b1a8      	cbz	r0, 8a648 <__pow5mult+0x54>
   8a61c:	4605      	mov	r5, r0
   8a61e:	07e3      	lsls	r3, r4, #31
   8a620:	d5f8      	bpl.n	8a614 <__pow5mult+0x20>
   8a622:	462a      	mov	r2, r5
   8a624:	4631      	mov	r1, r6
   8a626:	4638      	mov	r0, r7
   8a628:	f7ff ff36 	bl	8a498 <__multiply>
   8a62c:	b1b6      	cbz	r6, 8a65c <__pow5mult+0x68>
   8a62e:	6871      	ldr	r1, [r6, #4]
   8a630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a632:	1064      	asrs	r4, r4, #1
   8a634:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8a638:	6032      	str	r2, [r6, #0]
   8a63a:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8a63e:	4606      	mov	r6, r0
   8a640:	d1ea      	bne.n	8a618 <__pow5mult+0x24>
   8a642:	4630      	mov	r0, r6
   8a644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a648:	462a      	mov	r2, r5
   8a64a:	4629      	mov	r1, r5
   8a64c:	4638      	mov	r0, r7
   8a64e:	f7ff ff23 	bl	8a498 <__multiply>
   8a652:	6028      	str	r0, [r5, #0]
   8a654:	4605      	mov	r5, r0
   8a656:	f8c0 8000 	str.w	r8, [r0]
   8a65a:	e7e0      	b.n	8a61e <__pow5mult+0x2a>
   8a65c:	4606      	mov	r6, r0
   8a65e:	e7d9      	b.n	8a614 <__pow5mult+0x20>
   8a660:	4a0f      	ldr	r2, [pc, #60]	; (8a6a0 <__pow5mult+0xac>)
   8a662:	3b01      	subs	r3, #1
   8a664:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8a668:	2300      	movs	r3, #0
   8a66a:	f7ff fe49 	bl	8a300 <__multadd>
   8a66e:	4606      	mov	r6, r0
   8a670:	e7c8      	b.n	8a604 <__pow5mult+0x10>
   8a672:	2101      	movs	r1, #1
   8a674:	4638      	mov	r0, r7
   8a676:	f7ff fe13 	bl	8a2a0 <_Balloc>
   8a67a:	4605      	mov	r5, r0
   8a67c:	b140      	cbz	r0, 8a690 <__pow5mult+0x9c>
   8a67e:	f240 2371 	movw	r3, #625	; 0x271
   8a682:	2201      	movs	r2, #1
   8a684:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8a688:	2300      	movs	r3, #0
   8a68a:	64b8      	str	r0, [r7, #72]	; 0x48
   8a68c:	6003      	str	r3, [r0, #0]
   8a68e:	e7bd      	b.n	8a60c <__pow5mult+0x18>
   8a690:	4602      	mov	r2, r0
   8a692:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8a696:	4b03      	ldr	r3, [pc, #12]	; (8a6a4 <__pow5mult+0xb0>)
   8a698:	4803      	ldr	r0, [pc, #12]	; (8a6a8 <__pow5mult+0xb4>)
   8a69a:	f000 fd81 	bl	8b1a0 <__assert_func>
   8a69e:	bf00      	nop
   8a6a0:	0008c4d0 	.word	0x0008c4d0
   8a6a4:	0008c2b8 	.word	0x0008c2b8
   8a6a8:	0008c35c 	.word	0x0008c35c

0008a6ac <__lshift>:
   8a6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a6b0:	460c      	mov	r4, r1
   8a6b2:	6926      	ldr	r6, [r4, #16]
   8a6b4:	68a3      	ldr	r3, [r4, #8]
   8a6b6:	eb06 1662 	add.w	r6, r6, r2, asr #5
   8a6ba:	1c75      	adds	r5, r6, #1
   8a6bc:	429d      	cmp	r5, r3
   8a6be:	4690      	mov	r8, r2
   8a6c0:	4607      	mov	r7, r0
   8a6c2:	6849      	ldr	r1, [r1, #4]
   8a6c4:	ea4f 1962 	mov.w	r9, r2, asr #5
   8a6c8:	dd04      	ble.n	8a6d4 <__lshift+0x28>
   8a6ca:	005b      	lsls	r3, r3, #1
   8a6cc:	429d      	cmp	r5, r3
   8a6ce:	f101 0101 	add.w	r1, r1, #1
   8a6d2:	dcfa      	bgt.n	8a6ca <__lshift+0x1e>
   8a6d4:	4638      	mov	r0, r7
   8a6d6:	f7ff fde3 	bl	8a2a0 <_Balloc>
   8a6da:	2800      	cmp	r0, #0
   8a6dc:	d051      	beq.n	8a782 <__lshift+0xd6>
   8a6de:	f1b9 0f00 	cmp.w	r9, #0
   8a6e2:	f100 0114 	add.w	r1, r0, #20
   8a6e6:	dd0f      	ble.n	8a708 <__lshift+0x5c>
   8a6e8:	460b      	mov	r3, r1
   8a6ea:	f04f 0c00 	mov.w	ip, #0
   8a6ee:	f109 0205 	add.w	r2, r9, #5
   8a6f2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   8a6f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   8a6fa:	f843 cb04 	str.w	ip, [r3], #4
   8a6fe:	4293      	cmp	r3, r2
   8a700:	d1fb      	bne.n	8a6fa <__lshift+0x4e>
   8a702:	f1ae 0314 	sub.w	r3, lr, #20
   8a706:	4419      	add	r1, r3
   8a708:	6922      	ldr	r2, [r4, #16]
   8a70a:	f104 0314 	add.w	r3, r4, #20
   8a70e:	f018 081f 	ands.w	r8, r8, #31
   8a712:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   8a716:	d02c      	beq.n	8a772 <__lshift+0xc6>
   8a718:	468e      	mov	lr, r1
   8a71a:	f04f 0a00 	mov.w	sl, #0
   8a71e:	f1c8 0920 	rsb	r9, r8, #32
   8a722:	681a      	ldr	r2, [r3, #0]
   8a724:	fa02 f208 	lsl.w	r2, r2, r8
   8a728:	ea42 020a 	orr.w	r2, r2, sl
   8a72c:	f84e 2b04 	str.w	r2, [lr], #4
   8a730:	f853 2b04 	ldr.w	r2, [r3], #4
   8a734:	459c      	cmp	ip, r3
   8a736:	fa22 fa09 	lsr.w	sl, r2, r9
   8a73a:	d8f2      	bhi.n	8a722 <__lshift+0x76>
   8a73c:	ebac 0304 	sub.w	r3, ip, r4
   8a740:	3b15      	subs	r3, #21
   8a742:	f023 0303 	bic.w	r3, r3, #3
   8a746:	3304      	adds	r3, #4
   8a748:	f104 0215 	add.w	r2, r4, #21
   8a74c:	4594      	cmp	ip, r2
   8a74e:	bf38      	it	cc
   8a750:	2304      	movcc	r3, #4
   8a752:	f1ba 0f00 	cmp.w	sl, #0
   8a756:	bf18      	it	ne
   8a758:	462e      	movne	r6, r5
   8a75a:	f841 a003 	str.w	sl, [r1, r3]
   8a75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a760:	6862      	ldr	r2, [r4, #4]
   8a762:	6106      	str	r6, [r0, #16]
   8a764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8a768:	6021      	str	r1, [r4, #0]
   8a76a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   8a76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a772:	3904      	subs	r1, #4
   8a774:	f853 2b04 	ldr.w	r2, [r3], #4
   8a778:	459c      	cmp	ip, r3
   8a77a:	f841 2f04 	str.w	r2, [r1, #4]!
   8a77e:	d8f9      	bhi.n	8a774 <__lshift+0xc8>
   8a780:	e7ed      	b.n	8a75e <__lshift+0xb2>
   8a782:	4602      	mov	r2, r0
   8a784:	f240 11d9 	movw	r1, #473	; 0x1d9
   8a788:	4b01      	ldr	r3, [pc, #4]	; (8a790 <__lshift+0xe4>)
   8a78a:	4802      	ldr	r0, [pc, #8]	; (8a794 <__lshift+0xe8>)
   8a78c:	f000 fd08 	bl	8b1a0 <__assert_func>
   8a790:	0008c2b8 	.word	0x0008c2b8
   8a794:	0008c35c 	.word	0x0008c35c

0008a798 <__mcmp>:
   8a798:	4684      	mov	ip, r0
   8a79a:	690b      	ldr	r3, [r1, #16]
   8a79c:	6900      	ldr	r0, [r0, #16]
   8a79e:	1ac0      	subs	r0, r0, r3
   8a7a0:	d115      	bne.n	8a7ce <__mcmp+0x36>
   8a7a2:	f10c 0c14 	add.w	ip, ip, #20
   8a7a6:	3114      	adds	r1, #20
   8a7a8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   8a7ac:	b410      	push	{r4}
   8a7ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8a7b2:	e001      	b.n	8a7b8 <__mcmp+0x20>
   8a7b4:	4594      	cmp	ip, r2
   8a7b6:	d208      	bcs.n	8a7ca <__mcmp+0x32>
   8a7b8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   8a7bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   8a7c0:	428c      	cmp	r4, r1
   8a7c2:	d0f7      	beq.n	8a7b4 <__mcmp+0x1c>
   8a7c4:	d204      	bcs.n	8a7d0 <__mcmp+0x38>
   8a7c6:	f04f 30ff 	mov.w	r0, #4294967295
   8a7ca:	bc10      	pop	{r4}
   8a7cc:	4770      	bx	lr
   8a7ce:	4770      	bx	lr
   8a7d0:	2001      	movs	r0, #1
   8a7d2:	bc10      	pop	{r4}
   8a7d4:	4770      	bx	lr
   8a7d6:	bf00      	nop

0008a7d8 <__mdiff>:
   8a7d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a7dc:	690c      	ldr	r4, [r1, #16]
   8a7de:	6913      	ldr	r3, [r2, #16]
   8a7e0:	4689      	mov	r9, r1
   8a7e2:	1ae4      	subs	r4, r4, r3
   8a7e4:	2c00      	cmp	r4, #0
   8a7e6:	4617      	mov	r7, r2
   8a7e8:	d17d      	bne.n	8a8e6 <__mdiff+0x10e>
   8a7ea:	f101 0614 	add.w	r6, r1, #20
   8a7ee:	3214      	adds	r2, #20
   8a7f0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   8a7f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   8a7f8:	e001      	b.n	8a7fe <__mdiff+0x26>
   8a7fa:	429e      	cmp	r6, r3
   8a7fc:	d276      	bcs.n	8a8ec <__mdiff+0x114>
   8a7fe:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8a802:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8a806:	428d      	cmp	r5, r1
   8a808:	d0f7      	beq.n	8a7fa <__mdiff+0x22>
   8a80a:	d367      	bcc.n	8a8dc <__mdiff+0x104>
   8a80c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8a810:	f7ff fd46 	bl	8a2a0 <_Balloc>
   8a814:	2800      	cmp	r0, #0
   8a816:	d073      	beq.n	8a900 <__mdiff+0x128>
   8a818:	f8d9 5010 	ldr.w	r5, [r9, #16]
   8a81c:	60c4      	str	r4, [r0, #12]
   8a81e:	f100 0414 	add.w	r4, r0, #20
   8a822:	4626      	mov	r6, r4
   8a824:	f04f 0a00 	mov.w	sl, #0
   8a828:	693b      	ldr	r3, [r7, #16]
   8a82a:	f109 0814 	add.w	r8, r9, #20
   8a82e:	f107 0e14 	add.w	lr, r7, #20
   8a832:	f109 0c10 	add.w	ip, r9, #16
   8a836:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   8a83a:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   8a83e:	f85c bf04 	ldr.w	fp, [ip, #4]!
   8a842:	f85e 1b04 	ldr.w	r1, [lr], #4
   8a846:	fa1f f38b 	uxth.w	r3, fp
   8a84a:	4453      	add	r3, sl
   8a84c:	fa1f fa81 	uxth.w	sl, r1
   8a850:	0c09      	lsrs	r1, r1, #16
   8a852:	eba3 030a 	sub.w	r3, r3, sl
   8a856:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   8a85a:	eb01 4123 	add.w	r1, r1, r3, asr #16
   8a85e:	b29b      	uxth	r3, r3
   8a860:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8a864:	45f1      	cmp	r9, lr
   8a866:	f846 3b04 	str.w	r3, [r6], #4
   8a86a:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8a86e:	d8e6      	bhi.n	8a83e <__mdiff+0x66>
   8a870:	eba9 0107 	sub.w	r1, r9, r7
   8a874:	3915      	subs	r1, #21
   8a876:	3715      	adds	r7, #21
   8a878:	45b9      	cmp	r9, r7
   8a87a:	f021 0603 	bic.w	r6, r1, #3
   8a87e:	f106 0604 	add.w	r6, r6, #4
   8a882:	bf38      	it	cc
   8a884:	2604      	movcc	r6, #4
   8a886:	f021 0103 	bic.w	r1, r1, #3
   8a88a:	bf38      	it	cc
   8a88c:	2100      	movcc	r1, #0
   8a88e:	44b0      	add	r8, r6
   8a890:	4542      	cmp	r2, r8
   8a892:	4426      	add	r6, r4
   8a894:	440c      	add	r4, r1
   8a896:	d918      	bls.n	8a8ca <__mdiff+0xf2>
   8a898:	4637      	mov	r7, r6
   8a89a:	4644      	mov	r4, r8
   8a89c:	f854 1b04 	ldr.w	r1, [r4], #4
   8a8a0:	b28b      	uxth	r3, r1
   8a8a2:	4453      	add	r3, sl
   8a8a4:	ea4f 4a23 	mov.w	sl, r3, asr #16
   8a8a8:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   8a8ac:	b29b      	uxth	r3, r3
   8a8ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8a8b2:	42a2      	cmp	r2, r4
   8a8b4:	f847 3b04 	str.w	r3, [r7], #4
   8a8b8:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8a8bc:	d8ee      	bhi.n	8a89c <__mdiff+0xc4>
   8a8be:	1e54      	subs	r4, r2, #1
   8a8c0:	eba4 0408 	sub.w	r4, r4, r8
   8a8c4:	f024 0403 	bic.w	r4, r4, #3
   8a8c8:	4434      	add	r4, r6
   8a8ca:	b923      	cbnz	r3, 8a8d6 <__mdiff+0xfe>
   8a8cc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8a8d0:	3d01      	subs	r5, #1
   8a8d2:	2b00      	cmp	r3, #0
   8a8d4:	d0fa      	beq.n	8a8cc <__mdiff+0xf4>
   8a8d6:	6105      	str	r5, [r0, #16]
   8a8d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a8dc:	464b      	mov	r3, r9
   8a8de:	2401      	movs	r4, #1
   8a8e0:	46b9      	mov	r9, r7
   8a8e2:	461f      	mov	r7, r3
   8a8e4:	e792      	b.n	8a80c <__mdiff+0x34>
   8a8e6:	dbf9      	blt.n	8a8dc <__mdiff+0x104>
   8a8e8:	2400      	movs	r4, #0
   8a8ea:	e78f      	b.n	8a80c <__mdiff+0x34>
   8a8ec:	2100      	movs	r1, #0
   8a8ee:	f7ff fcd7 	bl	8a2a0 <_Balloc>
   8a8f2:	b160      	cbz	r0, 8a90e <__mdiff+0x136>
   8a8f4:	2201      	movs	r2, #1
   8a8f6:	2300      	movs	r3, #0
   8a8f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8a8fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a900:	4602      	mov	r2, r0
   8a902:	f44f 7110 	mov.w	r1, #576	; 0x240
   8a906:	4b05      	ldr	r3, [pc, #20]	; (8a91c <__mdiff+0x144>)
   8a908:	4805      	ldr	r0, [pc, #20]	; (8a920 <__mdiff+0x148>)
   8a90a:	f000 fc49 	bl	8b1a0 <__assert_func>
   8a90e:	4602      	mov	r2, r0
   8a910:	f240 2132 	movw	r1, #562	; 0x232
   8a914:	4b01      	ldr	r3, [pc, #4]	; (8a91c <__mdiff+0x144>)
   8a916:	4802      	ldr	r0, [pc, #8]	; (8a920 <__mdiff+0x148>)
   8a918:	f000 fc42 	bl	8b1a0 <__assert_func>
   8a91c:	0008c2b8 	.word	0x0008c2b8
   8a920:	0008c35c 	.word	0x0008c35c

0008a924 <__d2b>:
   8a924:	b570      	push	{r4, r5, r6, lr}
   8a926:	2101      	movs	r1, #1
   8a928:	b082      	sub	sp, #8
   8a92a:	4616      	mov	r6, r2
   8a92c:	461d      	mov	r5, r3
   8a92e:	f7ff fcb7 	bl	8a2a0 <_Balloc>
   8a932:	4604      	mov	r4, r0
   8a934:	2800      	cmp	r0, #0
   8a936:	d04c      	beq.n	8a9d2 <__d2b+0xae>
   8a938:	462b      	mov	r3, r5
   8a93a:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8a93e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8a942:	b10d      	cbz	r5, 8a948 <__d2b+0x24>
   8a944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a948:	2e00      	cmp	r6, #0
   8a94a:	9301      	str	r3, [sp, #4]
   8a94c:	d022      	beq.n	8a994 <__d2b+0x70>
   8a94e:	4668      	mov	r0, sp
   8a950:	9600      	str	r6, [sp, #0]
   8a952:	f7ff fd47 	bl	8a3e4 <__lo0bits>
   8a956:	2800      	cmp	r0, #0
   8a958:	d037      	beq.n	8a9ca <__d2b+0xa6>
   8a95a:	9b01      	ldr	r3, [sp, #4]
   8a95c:	9900      	ldr	r1, [sp, #0]
   8a95e:	f1c0 0220 	rsb	r2, r0, #32
   8a962:	fa03 f202 	lsl.w	r2, r3, r2
   8a966:	430a      	orrs	r2, r1
   8a968:	40c3      	lsrs	r3, r0
   8a96a:	9301      	str	r3, [sp, #4]
   8a96c:	6162      	str	r2, [r4, #20]
   8a96e:	2b00      	cmp	r3, #0
   8a970:	bf14      	ite	ne
   8a972:	2102      	movne	r1, #2
   8a974:	2101      	moveq	r1, #1
   8a976:	61a3      	str	r3, [r4, #24]
   8a978:	6121      	str	r1, [r4, #16]
   8a97a:	b1b5      	cbz	r5, 8a9aa <__d2b+0x86>
   8a97c:	9b06      	ldr	r3, [sp, #24]
   8a97e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   8a982:	4405      	add	r5, r0
   8a984:	601d      	str	r5, [r3, #0]
   8a986:	9b07      	ldr	r3, [sp, #28]
   8a988:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8a98c:	6018      	str	r0, [r3, #0]
   8a98e:	4620      	mov	r0, r4
   8a990:	b002      	add	sp, #8
   8a992:	bd70      	pop	{r4, r5, r6, pc}
   8a994:	a801      	add	r0, sp, #4
   8a996:	f7ff fd25 	bl	8a3e4 <__lo0bits>
   8a99a:	2301      	movs	r3, #1
   8a99c:	9a01      	ldr	r2, [sp, #4]
   8a99e:	4619      	mov	r1, r3
   8a9a0:	6162      	str	r2, [r4, #20]
   8a9a2:	3020      	adds	r0, #32
   8a9a4:	6123      	str	r3, [r4, #16]
   8a9a6:	2d00      	cmp	r5, #0
   8a9a8:	d1e8      	bne.n	8a97c <__d2b+0x58>
   8a9aa:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   8a9ae:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   8a9b2:	6910      	ldr	r0, [r2, #16]
   8a9b4:	9a06      	ldr	r2, [sp, #24]
   8a9b6:	6013      	str	r3, [r2, #0]
   8a9b8:	f7ff fcf4 	bl	8a3a4 <__hi0bits>
   8a9bc:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8a9c0:	4620      	mov	r0, r4
   8a9c2:	9b07      	ldr	r3, [sp, #28]
   8a9c4:	6019      	str	r1, [r3, #0]
   8a9c6:	b002      	add	sp, #8
   8a9c8:	bd70      	pop	{r4, r5, r6, pc}
   8a9ca:	e9dd 2300 	ldrd	r2, r3, [sp]
   8a9ce:	6162      	str	r2, [r4, #20]
   8a9d0:	e7cd      	b.n	8a96e <__d2b+0x4a>
   8a9d2:	4602      	mov	r2, r0
   8a9d4:	f240 310a 	movw	r1, #778	; 0x30a
   8a9d8:	4b01      	ldr	r3, [pc, #4]	; (8a9e0 <__d2b+0xbc>)
   8a9da:	4802      	ldr	r0, [pc, #8]	; (8a9e4 <__d2b+0xc0>)
   8a9dc:	f000 fbe0 	bl	8b1a0 <__assert_func>
   8a9e0:	0008c2b8 	.word	0x0008c2b8
   8a9e4:	0008c35c 	.word	0x0008c35c

0008a9e8 <_realloc_r>:
   8a9e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a9ec:	4616      	mov	r6, r2
   8a9ee:	2900      	cmp	r1, #0
   8a9f0:	f000 8098 	beq.w	8ab24 <_realloc_r+0x13c>
   8a9f4:	f106 050b 	add.w	r5, r6, #11
   8a9f8:	4680      	mov	r8, r0
   8a9fa:	460c      	mov	r4, r1
   8a9fc:	f7ff fc44 	bl	8a288 <__malloc_lock>
   8aa00:	2d16      	cmp	r5, #22
   8aa02:	d85d      	bhi.n	8aac0 <_realloc_r+0xd8>
   8aa04:	2510      	movs	r5, #16
   8aa06:	462a      	mov	r2, r5
   8aa08:	42ae      	cmp	r6, r5
   8aa0a:	d85e      	bhi.n	8aaca <_realloc_r+0xe2>
   8aa0c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8aa10:	f1a4 0908 	sub.w	r9, r4, #8
   8aa14:	f021 0703 	bic.w	r7, r1, #3
   8aa18:	4297      	cmp	r7, r2
   8aa1a:	da62      	bge.n	8aae2 <_realloc_r+0xfa>
   8aa1c:	4bbc      	ldr	r3, [pc, #752]	; (8ad10 <_realloc_r+0x328>)
   8aa1e:	eb09 0007 	add.w	r0, r9, r7
   8aa22:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8aa26:	4584      	cmp	ip, r0
   8aa28:	f000 8097 	beq.w	8ab5a <_realloc_r+0x172>
   8aa2c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8aa30:	f02c 0301 	bic.w	r3, ip, #1
   8aa34:	4403      	add	r3, r0
   8aa36:	685b      	ldr	r3, [r3, #4]
   8aa38:	07db      	lsls	r3, r3, #31
   8aa3a:	d468      	bmi.n	8ab0e <_realloc_r+0x126>
   8aa3c:	f02c 0c03 	bic.w	ip, ip, #3
   8aa40:	eb07 030c 	add.w	r3, r7, ip
   8aa44:	4293      	cmp	r3, r2
   8aa46:	da47      	bge.n	8aad8 <_realloc_r+0xf0>
   8aa48:	07cb      	lsls	r3, r1, #31
   8aa4a:	d410      	bmi.n	8aa6e <_realloc_r+0x86>
   8aa4c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8aa50:	eba9 0a03 	sub.w	sl, r9, r3
   8aa54:	f8da 3004 	ldr.w	r3, [sl, #4]
   8aa58:	f023 0103 	bic.w	r1, r3, #3
   8aa5c:	448c      	add	ip, r1
   8aa5e:	44bc      	add	ip, r7
   8aa60:	4594      	cmp	ip, r2
   8aa62:	f280 8111 	bge.w	8ac88 <_realloc_r+0x2a0>
   8aa66:	187b      	adds	r3, r7, r1
   8aa68:	4293      	cmp	r3, r2
   8aa6a:	f280 80e8 	bge.w	8ac3e <_realloc_r+0x256>
   8aa6e:	4631      	mov	r1, r6
   8aa70:	4640      	mov	r0, r8
   8aa72:	f7ff f883 	bl	89b7c <_malloc_r>
   8aa76:	4606      	mov	r6, r0
   8aa78:	b1e0      	cbz	r0, 8aab4 <_realloc_r+0xcc>
   8aa7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8aa7e:	f1a0 0208 	sub.w	r2, r0, #8
   8aa82:	f023 0301 	bic.w	r3, r3, #1
   8aa86:	444b      	add	r3, r9
   8aa88:	4293      	cmp	r3, r2
   8aa8a:	f000 80d2 	beq.w	8ac32 <_realloc_r+0x24a>
   8aa8e:	1f3a      	subs	r2, r7, #4
   8aa90:	2a24      	cmp	r2, #36	; 0x24
   8aa92:	f200 80f5 	bhi.w	8ac80 <_realloc_r+0x298>
   8aa96:	2a13      	cmp	r2, #19
   8aa98:	f200 80ac 	bhi.w	8abf4 <_realloc_r+0x20c>
   8aa9c:	4603      	mov	r3, r0
   8aa9e:	4622      	mov	r2, r4
   8aaa0:	6811      	ldr	r1, [r2, #0]
   8aaa2:	6019      	str	r1, [r3, #0]
   8aaa4:	6851      	ldr	r1, [r2, #4]
   8aaa6:	6059      	str	r1, [r3, #4]
   8aaa8:	6892      	ldr	r2, [r2, #8]
   8aaaa:	609a      	str	r2, [r3, #8]
   8aaac:	4621      	mov	r1, r4
   8aaae:	4640      	mov	r0, r8
   8aab0:	f7fe fd0e 	bl	894d0 <_free_r>
   8aab4:	4640      	mov	r0, r8
   8aab6:	f7ff fbed 	bl	8a294 <__malloc_unlock>
   8aaba:	4630      	mov	r0, r6
   8aabc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aac0:	f025 0507 	bic.w	r5, r5, #7
   8aac4:	2d00      	cmp	r5, #0
   8aac6:	462a      	mov	r2, r5
   8aac8:	da9e      	bge.n	8aa08 <_realloc_r+0x20>
   8aaca:	230c      	movs	r3, #12
   8aacc:	2600      	movs	r6, #0
   8aace:	f8c8 3000 	str.w	r3, [r8]
   8aad2:	4630      	mov	r0, r6
   8aad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aad8:	461f      	mov	r7, r3
   8aada:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8aade:	60d3      	str	r3, [r2, #12]
   8aae0:	609a      	str	r2, [r3, #8]
   8aae2:	1b7b      	subs	r3, r7, r5
   8aae4:	2b0f      	cmp	r3, #15
   8aae6:	d822      	bhi.n	8ab2e <_realloc_r+0x146>
   8aae8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8aaec:	f003 0301 	and.w	r3, r3, #1
   8aaf0:	433b      	orrs	r3, r7
   8aaf2:	f8c9 3004 	str.w	r3, [r9, #4]
   8aaf6:	444f      	add	r7, r9
   8aaf8:	687b      	ldr	r3, [r7, #4]
   8aafa:	f043 0301 	orr.w	r3, r3, #1
   8aafe:	607b      	str	r3, [r7, #4]
   8ab00:	4626      	mov	r6, r4
   8ab02:	4640      	mov	r0, r8
   8ab04:	f7ff fbc6 	bl	8a294 <__malloc_unlock>
   8ab08:	4630      	mov	r0, r6
   8ab0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ab0e:	07c9      	lsls	r1, r1, #31
   8ab10:	d4ad      	bmi.n	8aa6e <_realloc_r+0x86>
   8ab12:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8ab16:	eba9 0a03 	sub.w	sl, r9, r3
   8ab1a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8ab1e:	f021 0103 	bic.w	r1, r1, #3
   8ab22:	e7a0      	b.n	8aa66 <_realloc_r+0x7e>
   8ab24:	4611      	mov	r1, r2
   8ab26:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ab2a:	f7ff b827 	b.w	89b7c <_malloc_r>
   8ab2e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8ab32:	f043 0301 	orr.w	r3, r3, #1
   8ab36:	f001 0101 	and.w	r1, r1, #1
   8ab3a:	4329      	orrs	r1, r5
   8ab3c:	f8c9 1004 	str.w	r1, [r9, #4]
   8ab40:	eb09 0105 	add.w	r1, r9, r5
   8ab44:	604b      	str	r3, [r1, #4]
   8ab46:	444f      	add	r7, r9
   8ab48:	687b      	ldr	r3, [r7, #4]
   8ab4a:	4640      	mov	r0, r8
   8ab4c:	f043 0301 	orr.w	r3, r3, #1
   8ab50:	3108      	adds	r1, #8
   8ab52:	607b      	str	r3, [r7, #4]
   8ab54:	f7fe fcbc 	bl	894d0 <_free_r>
   8ab58:	e7d2      	b.n	8ab00 <_realloc_r+0x118>
   8ab5a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   8ab5e:	f020 0b03 	bic.w	fp, r0, #3
   8ab62:	eb07 0c0b 	add.w	ip, r7, fp
   8ab66:	f105 0010 	add.w	r0, r5, #16
   8ab6a:	4584      	cmp	ip, r0
   8ab6c:	da4d      	bge.n	8ac0a <_realloc_r+0x222>
   8ab6e:	07c9      	lsls	r1, r1, #31
   8ab70:	f53f af7d 	bmi.w	8aa6e <_realloc_r+0x86>
   8ab74:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8ab78:	eba9 0a01 	sub.w	sl, r9, r1
   8ab7c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8ab80:	f021 0103 	bic.w	r1, r1, #3
   8ab84:	448b      	add	fp, r1
   8ab86:	44bb      	add	fp, r7
   8ab88:	4558      	cmp	r0, fp
   8ab8a:	f73f af6c 	bgt.w	8aa66 <_realloc_r+0x7e>
   8ab8e:	4656      	mov	r6, sl
   8ab90:	f8da 100c 	ldr.w	r1, [sl, #12]
   8ab94:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8ab98:	1f3a      	subs	r2, r7, #4
   8ab9a:	2a24      	cmp	r2, #36	; 0x24
   8ab9c:	60c1      	str	r1, [r0, #12]
   8ab9e:	6088      	str	r0, [r1, #8]
   8aba0:	f200 80db 	bhi.w	8ad5a <_realloc_r+0x372>
   8aba4:	2a13      	cmp	r2, #19
   8aba6:	f240 80d6 	bls.w	8ad56 <_realloc_r+0x36e>
   8abaa:	6821      	ldr	r1, [r4, #0]
   8abac:	2a1b      	cmp	r2, #27
   8abae:	f8ca 1008 	str.w	r1, [sl, #8]
   8abb2:	6861      	ldr	r1, [r4, #4]
   8abb4:	f8ca 100c 	str.w	r1, [sl, #12]
   8abb8:	f200 80e0 	bhi.w	8ad7c <_realloc_r+0x394>
   8abbc:	3408      	adds	r4, #8
   8abbe:	f10a 0210 	add.w	r2, sl, #16
   8abc2:	6821      	ldr	r1, [r4, #0]
   8abc4:	6011      	str	r1, [r2, #0]
   8abc6:	6861      	ldr	r1, [r4, #4]
   8abc8:	6051      	str	r1, [r2, #4]
   8abca:	68a1      	ldr	r1, [r4, #8]
   8abcc:	6091      	str	r1, [r2, #8]
   8abce:	ebab 0205 	sub.w	r2, fp, r5
   8abd2:	eb0a 0105 	add.w	r1, sl, r5
   8abd6:	f042 0201 	orr.w	r2, r2, #1
   8abda:	6099      	str	r1, [r3, #8]
   8abdc:	604a      	str	r2, [r1, #4]
   8abde:	f8da 3004 	ldr.w	r3, [sl, #4]
   8abe2:	4640      	mov	r0, r8
   8abe4:	f003 0301 	and.w	r3, r3, #1
   8abe8:	431d      	orrs	r5, r3
   8abea:	f8ca 5004 	str.w	r5, [sl, #4]
   8abee:	f7ff fb51 	bl	8a294 <__malloc_unlock>
   8abf2:	e76e      	b.n	8aad2 <_realloc_r+0xea>
   8abf4:	6823      	ldr	r3, [r4, #0]
   8abf6:	2a1b      	cmp	r2, #27
   8abf8:	6003      	str	r3, [r0, #0]
   8abfa:	6863      	ldr	r3, [r4, #4]
   8abfc:	6043      	str	r3, [r0, #4]
   8abfe:	d868      	bhi.n	8acd2 <_realloc_r+0x2ea>
   8ac00:	f104 0208 	add.w	r2, r4, #8
   8ac04:	f100 0308 	add.w	r3, r0, #8
   8ac08:	e74a      	b.n	8aaa0 <_realloc_r+0xb8>
   8ac0a:	eb09 0205 	add.w	r2, r9, r5
   8ac0e:	ebac 0c05 	sub.w	ip, ip, r5
   8ac12:	609a      	str	r2, [r3, #8]
   8ac14:	f04c 0301 	orr.w	r3, ip, #1
   8ac18:	6053      	str	r3, [r2, #4]
   8ac1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8ac1e:	4640      	mov	r0, r8
   8ac20:	f003 0301 	and.w	r3, r3, #1
   8ac24:	431d      	orrs	r5, r3
   8ac26:	f844 5c04 	str.w	r5, [r4, #-4]
   8ac2a:	f7ff fb33 	bl	8a294 <__malloc_unlock>
   8ac2e:	4626      	mov	r6, r4
   8ac30:	e74f      	b.n	8aad2 <_realloc_r+0xea>
   8ac32:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8ac36:	f023 0303 	bic.w	r3, r3, #3
   8ac3a:	441f      	add	r7, r3
   8ac3c:	e751      	b.n	8aae2 <_realloc_r+0xfa>
   8ac3e:	4656      	mov	r6, sl
   8ac40:	f8da 100c 	ldr.w	r1, [sl, #12]
   8ac44:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8ac48:	1f3a      	subs	r2, r7, #4
   8ac4a:	2a24      	cmp	r2, #36	; 0x24
   8ac4c:	60c1      	str	r1, [r0, #12]
   8ac4e:	6088      	str	r0, [r1, #8]
   8ac50:	d84c      	bhi.n	8acec <_realloc_r+0x304>
   8ac52:	2a13      	cmp	r2, #19
   8ac54:	d948      	bls.n	8ace8 <_realloc_r+0x300>
   8ac56:	6821      	ldr	r1, [r4, #0]
   8ac58:	2a1b      	cmp	r2, #27
   8ac5a:	f8ca 1008 	str.w	r1, [sl, #8]
   8ac5e:	6861      	ldr	r1, [r4, #4]
   8ac60:	f8ca 100c 	str.w	r1, [sl, #12]
   8ac64:	d856      	bhi.n	8ad14 <_realloc_r+0x32c>
   8ac66:	3408      	adds	r4, #8
   8ac68:	f10a 0210 	add.w	r2, sl, #16
   8ac6c:	461f      	mov	r7, r3
   8ac6e:	6823      	ldr	r3, [r4, #0]
   8ac70:	46d1      	mov	r9, sl
   8ac72:	6013      	str	r3, [r2, #0]
   8ac74:	6863      	ldr	r3, [r4, #4]
   8ac76:	6053      	str	r3, [r2, #4]
   8ac78:	68a3      	ldr	r3, [r4, #8]
   8ac7a:	4634      	mov	r4, r6
   8ac7c:	6093      	str	r3, [r2, #8]
   8ac7e:	e730      	b.n	8aae2 <_realloc_r+0xfa>
   8ac80:	4621      	mov	r1, r4
   8ac82:	f7ff fa85 	bl	8a190 <memmove>
   8ac86:	e711      	b.n	8aaac <_realloc_r+0xc4>
   8ac88:	4656      	mov	r6, sl
   8ac8a:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8ac8e:	60cb      	str	r3, [r1, #12]
   8ac90:	6099      	str	r1, [r3, #8]
   8ac92:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8ac96:	f8da 300c 	ldr.w	r3, [sl, #12]
   8ac9a:	1f3a      	subs	r2, r7, #4
   8ac9c:	2a24      	cmp	r2, #36	; 0x24
   8ac9e:	60cb      	str	r3, [r1, #12]
   8aca0:	6099      	str	r1, [r3, #8]
   8aca2:	d82d      	bhi.n	8ad00 <_realloc_r+0x318>
   8aca4:	2a13      	cmp	r2, #19
   8aca6:	d929      	bls.n	8acfc <_realloc_r+0x314>
   8aca8:	6823      	ldr	r3, [r4, #0]
   8acaa:	2a1b      	cmp	r2, #27
   8acac:	f8ca 3008 	str.w	r3, [sl, #8]
   8acb0:	6863      	ldr	r3, [r4, #4]
   8acb2:	f8ca 300c 	str.w	r3, [sl, #12]
   8acb6:	d842      	bhi.n	8ad3e <_realloc_r+0x356>
   8acb8:	3408      	adds	r4, #8
   8acba:	f10a 0310 	add.w	r3, sl, #16
   8acbe:	6822      	ldr	r2, [r4, #0]
   8acc0:	4667      	mov	r7, ip
   8acc2:	601a      	str	r2, [r3, #0]
   8acc4:	6862      	ldr	r2, [r4, #4]
   8acc6:	46d1      	mov	r9, sl
   8acc8:	605a      	str	r2, [r3, #4]
   8acca:	68a2      	ldr	r2, [r4, #8]
   8accc:	4634      	mov	r4, r6
   8acce:	609a      	str	r2, [r3, #8]
   8acd0:	e707      	b.n	8aae2 <_realloc_r+0xfa>
   8acd2:	68a3      	ldr	r3, [r4, #8]
   8acd4:	2a24      	cmp	r2, #36	; 0x24
   8acd6:	6083      	str	r3, [r0, #8]
   8acd8:	68e3      	ldr	r3, [r4, #12]
   8acda:	60c3      	str	r3, [r0, #12]
   8acdc:	d026      	beq.n	8ad2c <_realloc_r+0x344>
   8acde:	f104 0210 	add.w	r2, r4, #16
   8ace2:	f100 0310 	add.w	r3, r0, #16
   8ace6:	e6db      	b.n	8aaa0 <_realloc_r+0xb8>
   8ace8:	4632      	mov	r2, r6
   8acea:	e7bf      	b.n	8ac6c <_realloc_r+0x284>
   8acec:	4621      	mov	r1, r4
   8acee:	4630      	mov	r0, r6
   8acf0:	461f      	mov	r7, r3
   8acf2:	46d1      	mov	r9, sl
   8acf4:	f7ff fa4c 	bl	8a190 <memmove>
   8acf8:	4634      	mov	r4, r6
   8acfa:	e6f2      	b.n	8aae2 <_realloc_r+0xfa>
   8acfc:	4633      	mov	r3, r6
   8acfe:	e7de      	b.n	8acbe <_realloc_r+0x2d6>
   8ad00:	4621      	mov	r1, r4
   8ad02:	4630      	mov	r0, r6
   8ad04:	4667      	mov	r7, ip
   8ad06:	46d1      	mov	r9, sl
   8ad08:	f7ff fa42 	bl	8a190 <memmove>
   8ad0c:	4634      	mov	r4, r6
   8ad0e:	e6e8      	b.n	8aae2 <_realloc_r+0xfa>
   8ad10:	20000988 	.word	0x20000988
   8ad14:	68a1      	ldr	r1, [r4, #8]
   8ad16:	2a24      	cmp	r2, #36	; 0x24
   8ad18:	f8ca 1010 	str.w	r1, [sl, #16]
   8ad1c:	68e1      	ldr	r1, [r4, #12]
   8ad1e:	f8ca 1014 	str.w	r1, [sl, #20]
   8ad22:	d020      	beq.n	8ad66 <_realloc_r+0x37e>
   8ad24:	3410      	adds	r4, #16
   8ad26:	f10a 0218 	add.w	r2, sl, #24
   8ad2a:	e79f      	b.n	8ac6c <_realloc_r+0x284>
   8ad2c:	6923      	ldr	r3, [r4, #16]
   8ad2e:	f104 0218 	add.w	r2, r4, #24
   8ad32:	6103      	str	r3, [r0, #16]
   8ad34:	6963      	ldr	r3, [r4, #20]
   8ad36:	6143      	str	r3, [r0, #20]
   8ad38:	f100 0318 	add.w	r3, r0, #24
   8ad3c:	e6b0      	b.n	8aaa0 <_realloc_r+0xb8>
   8ad3e:	68a3      	ldr	r3, [r4, #8]
   8ad40:	2a24      	cmp	r2, #36	; 0x24
   8ad42:	f8ca 3010 	str.w	r3, [sl, #16]
   8ad46:	68e3      	ldr	r3, [r4, #12]
   8ad48:	f8ca 3014 	str.w	r3, [sl, #20]
   8ad4c:	d022      	beq.n	8ad94 <_realloc_r+0x3ac>
   8ad4e:	3410      	adds	r4, #16
   8ad50:	f10a 0318 	add.w	r3, sl, #24
   8ad54:	e7b3      	b.n	8acbe <_realloc_r+0x2d6>
   8ad56:	4632      	mov	r2, r6
   8ad58:	e733      	b.n	8abc2 <_realloc_r+0x1da>
   8ad5a:	4621      	mov	r1, r4
   8ad5c:	4630      	mov	r0, r6
   8ad5e:	f7ff fa17 	bl	8a190 <memmove>
   8ad62:	4b17      	ldr	r3, [pc, #92]	; (8adc0 <_realloc_r+0x3d8>)
   8ad64:	e733      	b.n	8abce <_realloc_r+0x1e6>
   8ad66:	6922      	ldr	r2, [r4, #16]
   8ad68:	3418      	adds	r4, #24
   8ad6a:	f8ca 2018 	str.w	r2, [sl, #24]
   8ad6e:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8ad72:	f8ca 201c 	str.w	r2, [sl, #28]
   8ad76:	f10a 0220 	add.w	r2, sl, #32
   8ad7a:	e777      	b.n	8ac6c <_realloc_r+0x284>
   8ad7c:	68a1      	ldr	r1, [r4, #8]
   8ad7e:	2a24      	cmp	r2, #36	; 0x24
   8ad80:	f8ca 1010 	str.w	r1, [sl, #16]
   8ad84:	68e1      	ldr	r1, [r4, #12]
   8ad86:	f8ca 1014 	str.w	r1, [sl, #20]
   8ad8a:	d00e      	beq.n	8adaa <_realloc_r+0x3c2>
   8ad8c:	3410      	adds	r4, #16
   8ad8e:	f10a 0218 	add.w	r2, sl, #24
   8ad92:	e716      	b.n	8abc2 <_realloc_r+0x1da>
   8ad94:	6923      	ldr	r3, [r4, #16]
   8ad96:	3418      	adds	r4, #24
   8ad98:	f8ca 3018 	str.w	r3, [sl, #24]
   8ad9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8ada0:	f8ca 301c 	str.w	r3, [sl, #28]
   8ada4:	f10a 0320 	add.w	r3, sl, #32
   8ada8:	e789      	b.n	8acbe <_realloc_r+0x2d6>
   8adaa:	6922      	ldr	r2, [r4, #16]
   8adac:	3418      	adds	r4, #24
   8adae:	f8ca 2018 	str.w	r2, [sl, #24]
   8adb2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8adb6:	f8ca 201c 	str.w	r2, [sl, #28]
   8adba:	f10a 0220 	add.w	r2, sl, #32
   8adbe:	e700      	b.n	8abc2 <_realloc_r+0x1da>
   8adc0:	20000988 	.word	0x20000988

0008adc4 <frexp>:
   8adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8adc6:	2700      	movs	r7, #0
   8adc8:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8ae28 <frexp+0x64>
   8adcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8add0:	4563      	cmp	r3, ip
   8add2:	4604      	mov	r4, r0
   8add4:	460d      	mov	r5, r1
   8add6:	6017      	str	r7, [r2, #0]
   8add8:	dc23      	bgt.n	8ae22 <frexp+0x5e>
   8adda:	4684      	mov	ip, r0
   8addc:	ea53 0c0c 	orrs.w	ip, r3, ip
   8ade0:	d01f      	beq.n	8ae22 <frexp+0x5e>
   8ade2:	f8df c048 	ldr.w	ip, [pc, #72]	; 8ae2c <frexp+0x68>
   8ade6:	4616      	mov	r6, r2
   8ade8:	ea01 0c0c 	and.w	ip, r1, ip
   8adec:	460a      	mov	r2, r1
   8adee:	f1bc 0f00 	cmp.w	ip, #0
   8adf2:	d109      	bne.n	8ae08 <frexp+0x44>
   8adf4:	2200      	movs	r2, #0
   8adf6:	4b0e      	ldr	r3, [pc, #56]	; (8ae30 <frexp+0x6c>)
   8adf8:	f000 fd1a 	bl	8b830 <__aeabi_dmul>
   8adfc:	f06f 0735 	mvn.w	r7, #53	; 0x35
   8ae00:	4604      	mov	r4, r0
   8ae02:	460a      	mov	r2, r1
   8ae04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ae08:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   8ae0c:	151b      	asrs	r3, r3, #20
   8ae0e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   8ae12:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8ae16:	443b      	add	r3, r7
   8ae18:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   8ae1c:	6033      	str	r3, [r6, #0]
   8ae1e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8ae22:	4620      	mov	r0, r4
   8ae24:	4629      	mov	r1, r5
   8ae26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ae28:	7fefffff 	.word	0x7fefffff
   8ae2c:	7ff00000 	.word	0x7ff00000
   8ae30:	43500000 	.word	0x43500000

0008ae34 <_sbrk_r>:
   8ae34:	2200      	movs	r2, #0
   8ae36:	b538      	push	{r3, r4, r5, lr}
   8ae38:	4d06      	ldr	r5, [pc, #24]	; (8ae54 <_sbrk_r+0x20>)
   8ae3a:	4604      	mov	r4, r0
   8ae3c:	4608      	mov	r0, r1
   8ae3e:	602a      	str	r2, [r5, #0]
   8ae40:	f7f9 ffea 	bl	84e18 <_sbrk>
   8ae44:	1c43      	adds	r3, r0, #1
   8ae46:	d000      	beq.n	8ae4a <_sbrk_r+0x16>
   8ae48:	bd38      	pop	{r3, r4, r5, pc}
   8ae4a:	682b      	ldr	r3, [r5, #0]
   8ae4c:	2b00      	cmp	r3, #0
   8ae4e:	d0fb      	beq.n	8ae48 <_sbrk_r+0x14>
   8ae50:	6023      	str	r3, [r4, #0]
   8ae52:	bd38      	pop	{r3, r4, r5, pc}
   8ae54:	200019b0 	.word	0x200019b0

0008ae58 <__sread>:
   8ae58:	b510      	push	{r4, lr}
   8ae5a:	460c      	mov	r4, r1
   8ae5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ae60:	f000 fac8 	bl	8b3f4 <_read_r>
   8ae64:	2800      	cmp	r0, #0
   8ae66:	db03      	blt.n	8ae70 <__sread+0x18>
   8ae68:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8ae6a:	4403      	add	r3, r0
   8ae6c:	6523      	str	r3, [r4, #80]	; 0x50
   8ae6e:	bd10      	pop	{r4, pc}
   8ae70:	89a3      	ldrh	r3, [r4, #12]
   8ae72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8ae76:	81a3      	strh	r3, [r4, #12]
   8ae78:	bd10      	pop	{r4, pc}
   8ae7a:	bf00      	nop

0008ae7c <__swrite>:
   8ae7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8ae80:	460c      	mov	r4, r1
   8ae82:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8ae86:	461f      	mov	r7, r3
   8ae88:	05cb      	lsls	r3, r1, #23
   8ae8a:	4605      	mov	r5, r0
   8ae8c:	4616      	mov	r6, r2
   8ae8e:	d40b      	bmi.n	8aea8 <__swrite+0x2c>
   8ae90:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8ae94:	81a1      	strh	r1, [r4, #12]
   8ae96:	463b      	mov	r3, r7
   8ae98:	4632      	mov	r2, r6
   8ae9a:	4628      	mov	r0, r5
   8ae9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8aea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8aea4:	f000 b920 	b.w	8b0e8 <_write_r>
   8aea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8aeac:	2302      	movs	r3, #2
   8aeae:	2200      	movs	r2, #0
   8aeb0:	f000 fa8a 	bl	8b3c8 <_lseek_r>
   8aeb4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8aeb8:	e7ea      	b.n	8ae90 <__swrite+0x14>
   8aeba:	bf00      	nop

0008aebc <__sseek>:
   8aebc:	b510      	push	{r4, lr}
   8aebe:	460c      	mov	r4, r1
   8aec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8aec4:	f000 fa80 	bl	8b3c8 <_lseek_r>
   8aec8:	89a3      	ldrh	r3, [r4, #12]
   8aeca:	1c42      	adds	r2, r0, #1
   8aecc:	bf0e      	itee	eq
   8aece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8aed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8aed6:	6520      	strne	r0, [r4, #80]	; 0x50
   8aed8:	81a3      	strh	r3, [r4, #12]
   8aeda:	bd10      	pop	{r4, pc}

0008aedc <__sclose>:
   8aedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8aee0:	f000 b9ba 	b.w	8b258 <_close_r>

0008aee4 <__ssprint_r>:
   8aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aee8:	6893      	ldr	r3, [r2, #8]
   8aeea:	4691      	mov	r9, r2
   8aeec:	b083      	sub	sp, #12
   8aeee:	2b00      	cmp	r3, #0
   8aef0:	d06e      	beq.n	8afd0 <__ssprint_r+0xec>
   8aef2:	6817      	ldr	r7, [r2, #0]
   8aef4:	4680      	mov	r8, r0
   8aef6:	460c      	mov	r4, r1
   8aef8:	6808      	ldr	r0, [r1, #0]
   8aefa:	688d      	ldr	r5, [r1, #8]
   8aefc:	3708      	adds	r7, #8
   8aefe:	e044      	b.n	8af8a <__ssprint_r+0xa6>
   8af00:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   8af04:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   8af08:	d02e      	beq.n	8af68 <__ssprint_r+0x84>
   8af0a:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   8af0e:	1a45      	subs	r5, r0, r1
   8af10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8af14:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   8af18:	19aa      	adds	r2, r5, r6
   8af1a:	ea4f 0a63 	mov.w	sl, r3, asr #1
   8af1e:	1c53      	adds	r3, r2, #1
   8af20:	4553      	cmp	r3, sl
   8af22:	4652      	mov	r2, sl
   8af24:	bf84      	itt	hi
   8af26:	469a      	movhi	sl, r3
   8af28:	4652      	movhi	r2, sl
   8af2a:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   8af2e:	d036      	beq.n	8af9e <__ssprint_r+0xba>
   8af30:	4611      	mov	r1, r2
   8af32:	4640      	mov	r0, r8
   8af34:	f7fe fe22 	bl	89b7c <_malloc_r>
   8af38:	2800      	cmp	r0, #0
   8af3a:	d03a      	beq.n	8afb2 <__ssprint_r+0xce>
   8af3c:	462a      	mov	r2, r5
   8af3e:	6921      	ldr	r1, [r4, #16]
   8af40:	9001      	str	r0, [sp, #4]
   8af42:	f7fa f943 	bl	851cc <memcpy>
   8af46:	89a2      	ldrh	r2, [r4, #12]
   8af48:	9b01      	ldr	r3, [sp, #4]
   8af4a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8af4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8af52:	81a2      	strh	r2, [r4, #12]
   8af54:	1958      	adds	r0, r3, r5
   8af56:	ebaa 0505 	sub.w	r5, sl, r5
   8af5a:	60a5      	str	r5, [r4, #8]
   8af5c:	f8c4 a014 	str.w	sl, [r4, #20]
   8af60:	4635      	mov	r5, r6
   8af62:	46b2      	mov	sl, r6
   8af64:	6123      	str	r3, [r4, #16]
   8af66:	6020      	str	r0, [r4, #0]
   8af68:	4659      	mov	r1, fp
   8af6a:	4652      	mov	r2, sl
   8af6c:	f7ff f910 	bl	8a190 <memmove>
   8af70:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8af74:	68a1      	ldr	r1, [r4, #8]
   8af76:	6820      	ldr	r0, [r4, #0]
   8af78:	1b4d      	subs	r5, r1, r5
   8af7a:	4450      	add	r0, sl
   8af7c:	1b9e      	subs	r6, r3, r6
   8af7e:	60a5      	str	r5, [r4, #8]
   8af80:	6020      	str	r0, [r4, #0]
   8af82:	f8c9 6008 	str.w	r6, [r9, #8]
   8af86:	b31e      	cbz	r6, 8afd0 <__ssprint_r+0xec>
   8af88:	3708      	adds	r7, #8
   8af8a:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8af8e:	2e00      	cmp	r6, #0
   8af90:	d0fa      	beq.n	8af88 <__ssprint_r+0xa4>
   8af92:	42b5      	cmp	r5, r6
   8af94:	46aa      	mov	sl, r5
   8af96:	d9b3      	bls.n	8af00 <__ssprint_r+0x1c>
   8af98:	4635      	mov	r5, r6
   8af9a:	46b2      	mov	sl, r6
   8af9c:	e7e4      	b.n	8af68 <__ssprint_r+0x84>
   8af9e:	4640      	mov	r0, r8
   8afa0:	f7ff fd22 	bl	8a9e8 <_realloc_r>
   8afa4:	4603      	mov	r3, r0
   8afa6:	2800      	cmp	r0, #0
   8afa8:	d1d4      	bne.n	8af54 <__ssprint_r+0x70>
   8afaa:	4640      	mov	r0, r8
   8afac:	6921      	ldr	r1, [r4, #16]
   8afae:	f7fe fa8f 	bl	894d0 <_free_r>
   8afb2:	230c      	movs	r3, #12
   8afb4:	2200      	movs	r2, #0
   8afb6:	f04f 30ff 	mov.w	r0, #4294967295
   8afba:	f8c8 3000 	str.w	r3, [r8]
   8afbe:	89a3      	ldrh	r3, [r4, #12]
   8afc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8afc4:	81a3      	strh	r3, [r4, #12]
   8afc6:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8afca:	b003      	add	sp, #12
   8afcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8afd0:	2300      	movs	r3, #0
   8afd2:	4618      	mov	r0, r3
   8afd4:	f8c9 3004 	str.w	r3, [r9, #4]
   8afd8:	b003      	add	sp, #12
   8afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8afde:	bf00      	nop

0008afe0 <__swbuf_r>:
   8afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8afe2:	4606      	mov	r6, r0
   8afe4:	460d      	mov	r5, r1
   8afe6:	4614      	mov	r4, r2
   8afe8:	b110      	cbz	r0, 8aff0 <__swbuf_r+0x10>
   8afea:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8afec:	2b00      	cmp	r3, #0
   8afee:	d043      	beq.n	8b078 <__swbuf_r+0x98>
   8aff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8aff4:	69a3      	ldr	r3, [r4, #24]
   8aff6:	0710      	lsls	r0, r2, #28
   8aff8:	60a3      	str	r3, [r4, #8]
   8affa:	b291      	uxth	r1, r2
   8affc:	d51b      	bpl.n	8b036 <__swbuf_r+0x56>
   8affe:	6923      	ldr	r3, [r4, #16]
   8b000:	b1cb      	cbz	r3, 8b036 <__swbuf_r+0x56>
   8b002:	b2ed      	uxtb	r5, r5
   8b004:	0489      	lsls	r1, r1, #18
   8b006:	462f      	mov	r7, r5
   8b008:	d522      	bpl.n	8b050 <__swbuf_r+0x70>
   8b00a:	6822      	ldr	r2, [r4, #0]
   8b00c:	6961      	ldr	r1, [r4, #20]
   8b00e:	1ad3      	subs	r3, r2, r3
   8b010:	4299      	cmp	r1, r3
   8b012:	dd29      	ble.n	8b068 <__swbuf_r+0x88>
   8b014:	3301      	adds	r3, #1
   8b016:	68a1      	ldr	r1, [r4, #8]
   8b018:	3901      	subs	r1, #1
   8b01a:	60a1      	str	r1, [r4, #8]
   8b01c:	1c51      	adds	r1, r2, #1
   8b01e:	6021      	str	r1, [r4, #0]
   8b020:	7015      	strb	r5, [r2, #0]
   8b022:	6962      	ldr	r2, [r4, #20]
   8b024:	429a      	cmp	r2, r3
   8b026:	d02a      	beq.n	8b07e <__swbuf_r+0x9e>
   8b028:	89a3      	ldrh	r3, [r4, #12]
   8b02a:	07db      	lsls	r3, r3, #31
   8b02c:	d501      	bpl.n	8b032 <__swbuf_r+0x52>
   8b02e:	2d0a      	cmp	r5, #10
   8b030:	d025      	beq.n	8b07e <__swbuf_r+0x9e>
   8b032:	4638      	mov	r0, r7
   8b034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b036:	4621      	mov	r1, r4
   8b038:	4630      	mov	r0, r6
   8b03a:	f7fc ff8f 	bl	87f5c <__swsetup_r>
   8b03e:	bb20      	cbnz	r0, 8b08a <__swbuf_r+0xaa>
   8b040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b044:	b2ed      	uxtb	r5, r5
   8b046:	b291      	uxth	r1, r2
   8b048:	0489      	lsls	r1, r1, #18
   8b04a:	462f      	mov	r7, r5
   8b04c:	6923      	ldr	r3, [r4, #16]
   8b04e:	d4dc      	bmi.n	8b00a <__swbuf_r+0x2a>
   8b050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b054:	81a2      	strh	r2, [r4, #12]
   8b056:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b058:	6961      	ldr	r1, [r4, #20]
   8b05a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8b05e:	6662      	str	r2, [r4, #100]	; 0x64
   8b060:	6822      	ldr	r2, [r4, #0]
   8b062:	1ad3      	subs	r3, r2, r3
   8b064:	4299      	cmp	r1, r3
   8b066:	dcd5      	bgt.n	8b014 <__swbuf_r+0x34>
   8b068:	4621      	mov	r1, r4
   8b06a:	4630      	mov	r0, r6
   8b06c:	f7fe f880 	bl	89170 <_fflush_r>
   8b070:	b958      	cbnz	r0, 8b08a <__swbuf_r+0xaa>
   8b072:	2301      	movs	r3, #1
   8b074:	6822      	ldr	r2, [r4, #0]
   8b076:	e7ce      	b.n	8b016 <__swbuf_r+0x36>
   8b078:	f7fe f8ae 	bl	891d8 <__sinit>
   8b07c:	e7b8      	b.n	8aff0 <__swbuf_r+0x10>
   8b07e:	4621      	mov	r1, r4
   8b080:	4630      	mov	r0, r6
   8b082:	f7fe f875 	bl	89170 <_fflush_r>
   8b086:	2800      	cmp	r0, #0
   8b088:	d0d3      	beq.n	8b032 <__swbuf_r+0x52>
   8b08a:	f04f 37ff 	mov.w	r7, #4294967295
   8b08e:	e7d0      	b.n	8b032 <__swbuf_r+0x52>

0008b090 <_wcrtomb_r>:
   8b090:	b570      	push	{r4, r5, r6, lr}
   8b092:	4605      	mov	r5, r0
   8b094:	461c      	mov	r4, r3
   8b096:	b084      	sub	sp, #16
   8b098:	b139      	cbz	r1, 8b0aa <_wcrtomb_r+0x1a>
   8b09a:	4e0b      	ldr	r6, [pc, #44]	; (8b0c8 <_wcrtomb_r+0x38>)
   8b09c:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   8b0a0:	47b0      	blx	r6
   8b0a2:	1c43      	adds	r3, r0, #1
   8b0a4:	d009      	beq.n	8b0ba <_wcrtomb_r+0x2a>
   8b0a6:	b004      	add	sp, #16
   8b0a8:	bd70      	pop	{r4, r5, r6, pc}
   8b0aa:	460a      	mov	r2, r1
   8b0ac:	4906      	ldr	r1, [pc, #24]	; (8b0c8 <_wcrtomb_r+0x38>)
   8b0ae:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   8b0b2:	a901      	add	r1, sp, #4
   8b0b4:	47b0      	blx	r6
   8b0b6:	1c43      	adds	r3, r0, #1
   8b0b8:	d1f5      	bne.n	8b0a6 <_wcrtomb_r+0x16>
   8b0ba:	2200      	movs	r2, #0
   8b0bc:	238a      	movs	r3, #138	; 0x8a
   8b0be:	6022      	str	r2, [r4, #0]
   8b0c0:	602b      	str	r3, [r5, #0]
   8b0c2:	b004      	add	sp, #16
   8b0c4:	bd70      	pop	{r4, r5, r6, pc}
   8b0c6:	bf00      	nop
   8b0c8:	2000081c 	.word	0x2000081c

0008b0cc <__ascii_wctomb>:
   8b0cc:	4603      	mov	r3, r0
   8b0ce:	b149      	cbz	r1, 8b0e4 <__ascii_wctomb+0x18>
   8b0d0:	2aff      	cmp	r2, #255	; 0xff
   8b0d2:	d802      	bhi.n	8b0da <__ascii_wctomb+0xe>
   8b0d4:	2001      	movs	r0, #1
   8b0d6:	700a      	strb	r2, [r1, #0]
   8b0d8:	4770      	bx	lr
   8b0da:	228a      	movs	r2, #138	; 0x8a
   8b0dc:	f04f 30ff 	mov.w	r0, #4294967295
   8b0e0:	601a      	str	r2, [r3, #0]
   8b0e2:	4770      	bx	lr
   8b0e4:	4608      	mov	r0, r1
   8b0e6:	4770      	bx	lr

0008b0e8 <_write_r>:
   8b0e8:	b538      	push	{r3, r4, r5, lr}
   8b0ea:	460c      	mov	r4, r1
   8b0ec:	4611      	mov	r1, r2
   8b0ee:	2200      	movs	r2, #0
   8b0f0:	4684      	mov	ip, r0
   8b0f2:	4d07      	ldr	r5, [pc, #28]	; (8b110 <_write_r+0x28>)
   8b0f4:	4620      	mov	r0, r4
   8b0f6:	602a      	str	r2, [r5, #0]
   8b0f8:	461a      	mov	r2, r3
   8b0fa:	4664      	mov	r4, ip
   8b0fc:	f7f9 f988 	bl	84410 <_write>
   8b100:	1c43      	adds	r3, r0, #1
   8b102:	d000      	beq.n	8b106 <_write_r+0x1e>
   8b104:	bd38      	pop	{r3, r4, r5, pc}
   8b106:	682b      	ldr	r3, [r5, #0]
   8b108:	2b00      	cmp	r3, #0
   8b10a:	d0fb      	beq.n	8b104 <_write_r+0x1c>
   8b10c:	6023      	str	r3, [r4, #0]
   8b10e:	bd38      	pop	{r3, r4, r5, pc}
   8b110:	200019b0 	.word	0x200019b0

0008b114 <__register_exitproc>:
   8b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b118:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8b198 <__register_exitproc+0x84>
   8b11c:	4606      	mov	r6, r0
   8b11e:	f8da 0000 	ldr.w	r0, [sl]
   8b122:	4698      	mov	r8, r3
   8b124:	460f      	mov	r7, r1
   8b126:	4691      	mov	r9, r2
   8b128:	f7fe fc7c 	bl	89a24 <__retarget_lock_acquire_recursive>
   8b12c:	4b1b      	ldr	r3, [pc, #108]	; (8b19c <__register_exitproc+0x88>)
   8b12e:	681b      	ldr	r3, [r3, #0]
   8b130:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8b134:	b324      	cbz	r4, 8b180 <__register_exitproc+0x6c>
   8b136:	6865      	ldr	r5, [r4, #4]
   8b138:	2d1f      	cmp	r5, #31
   8b13a:	dc26      	bgt.n	8b18a <__register_exitproc+0x76>
   8b13c:	b95e      	cbnz	r6, 8b156 <__register_exitproc+0x42>
   8b13e:	1c6b      	adds	r3, r5, #1
   8b140:	3502      	adds	r5, #2
   8b142:	f8da 0000 	ldr.w	r0, [sl]
   8b146:	6063      	str	r3, [r4, #4]
   8b148:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8b14c:	f7fe fc6c 	bl	89a28 <__retarget_lock_release_recursive>
   8b150:	2000      	movs	r0, #0
   8b152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b156:	2301      	movs	r3, #1
   8b158:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8b15c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8b160:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8b164:	40ab      	lsls	r3, r5
   8b166:	431a      	orrs	r2, r3
   8b168:	2e02      	cmp	r6, #2
   8b16a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8b16e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8b172:	d1e4      	bne.n	8b13e <__register_exitproc+0x2a>
   8b174:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8b178:	4313      	orrs	r3, r2
   8b17a:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8b17e:	e7de      	b.n	8b13e <__register_exitproc+0x2a>
   8b180:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8b184:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8b188:	e7d5      	b.n	8b136 <__register_exitproc+0x22>
   8b18a:	f8da 0000 	ldr.w	r0, [sl]
   8b18e:	f7fe fc4b 	bl	89a28 <__retarget_lock_release_recursive>
   8b192:	f04f 30ff 	mov.w	r0, #4294967295
   8b196:	e7dc      	b.n	8b152 <__register_exitproc+0x3e>
   8b198:	20000818 	.word	0x20000818
   8b19c:	0008c220 	.word	0x0008c220

0008b1a0 <__assert_func>:
   8b1a0:	4614      	mov	r4, r2
   8b1a2:	b500      	push	{lr}
   8b1a4:	461a      	mov	r2, r3
   8b1a6:	4b0a      	ldr	r3, [pc, #40]	; (8b1d0 <__assert_func+0x30>)
   8b1a8:	460d      	mov	r5, r1
   8b1aa:	681b      	ldr	r3, [r3, #0]
   8b1ac:	b085      	sub	sp, #20
   8b1ae:	68de      	ldr	r6, [r3, #12]
   8b1b0:	4603      	mov	r3, r0
   8b1b2:	b14c      	cbz	r4, 8b1c8 <__assert_func+0x28>
   8b1b4:	4907      	ldr	r1, [pc, #28]	; (8b1d4 <__assert_func+0x34>)
   8b1b6:	9101      	str	r1, [sp, #4]
   8b1b8:	4630      	mov	r0, r6
   8b1ba:	4907      	ldr	r1, [pc, #28]	; (8b1d8 <__assert_func+0x38>)
   8b1bc:	9402      	str	r4, [sp, #8]
   8b1be:	9500      	str	r5, [sp, #0]
   8b1c0:	f000 f8c8 	bl	8b354 <fiprintf>
   8b1c4:	f000 f92c 	bl	8b420 <abort>
   8b1c8:	4904      	ldr	r1, [pc, #16]	; (8b1dc <__assert_func+0x3c>)
   8b1ca:	460c      	mov	r4, r1
   8b1cc:	e7f3      	b.n	8b1b6 <__assert_func+0x16>
   8b1ce:	bf00      	nop
   8b1d0:	200003e8 	.word	0x200003e8
   8b1d4:	0008c4dc 	.word	0x0008c4dc
   8b1d8:	0008c4ec 	.word	0x0008c4ec
   8b1dc:	0008c21c 	.word	0x0008c21c

0008b1e0 <_calloc_r>:
   8b1e0:	b538      	push	{r3, r4, r5, lr}
   8b1e2:	fba1 1402 	umull	r1, r4, r1, r2
   8b1e6:	bb84      	cbnz	r4, 8b24a <_calloc_r+0x6a>
   8b1e8:	f7fe fcc8 	bl	89b7c <_malloc_r>
   8b1ec:	4605      	mov	r5, r0
   8b1ee:	b1d8      	cbz	r0, 8b228 <_calloc_r+0x48>
   8b1f0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8b1f4:	f022 0203 	bic.w	r2, r2, #3
   8b1f8:	3a04      	subs	r2, #4
   8b1fa:	2a24      	cmp	r2, #36	; 0x24
   8b1fc:	d816      	bhi.n	8b22c <_calloc_r+0x4c>
   8b1fe:	2a13      	cmp	r2, #19
   8b200:	d919      	bls.n	8b236 <_calloc_r+0x56>
   8b202:	2a1b      	cmp	r2, #27
   8b204:	e9c0 4400 	strd	r4, r4, [r0]
   8b208:	d91c      	bls.n	8b244 <_calloc_r+0x64>
   8b20a:	2300      	movs	r3, #0
   8b20c:	2a24      	cmp	r2, #36	; 0x24
   8b20e:	bf14      	ite	ne
   8b210:	f100 0210 	addne.w	r2, r0, #16
   8b214:	f100 0218 	addeq.w	r2, r0, #24
   8b218:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8b21c:	bf04      	itt	eq
   8b21e:	6104      	streq	r4, [r0, #16]
   8b220:	6144      	streq	r4, [r0, #20]
   8b222:	e9c2 3300 	strd	r3, r3, [r2]
   8b226:	6093      	str	r3, [r2, #8]
   8b228:	4628      	mov	r0, r5
   8b22a:	bd38      	pop	{r3, r4, r5, pc}
   8b22c:	4621      	mov	r1, r4
   8b22e:	f7fa f843 	bl	852b8 <memset>
   8b232:	4628      	mov	r0, r5
   8b234:	bd38      	pop	{r3, r4, r5, pc}
   8b236:	4602      	mov	r2, r0
   8b238:	2300      	movs	r3, #0
   8b23a:	4628      	mov	r0, r5
   8b23c:	e9c2 3300 	strd	r3, r3, [r2]
   8b240:	6093      	str	r3, [r2, #8]
   8b242:	bd38      	pop	{r3, r4, r5, pc}
   8b244:	f100 0208 	add.w	r2, r0, #8
   8b248:	e7f6      	b.n	8b238 <_calloc_r+0x58>
   8b24a:	f000 f817 	bl	8b27c <__errno>
   8b24e:	230c      	movs	r3, #12
   8b250:	2500      	movs	r5, #0
   8b252:	6003      	str	r3, [r0, #0]
   8b254:	e7e8      	b.n	8b228 <_calloc_r+0x48>
   8b256:	bf00      	nop

0008b258 <_close_r>:
   8b258:	2200      	movs	r2, #0
   8b25a:	b538      	push	{r3, r4, r5, lr}
   8b25c:	4d06      	ldr	r5, [pc, #24]	; (8b278 <_close_r+0x20>)
   8b25e:	4604      	mov	r4, r0
   8b260:	4608      	mov	r0, r1
   8b262:	602a      	str	r2, [r5, #0]
   8b264:	f7f9 fdf2 	bl	84e4c <_close>
   8b268:	1c43      	adds	r3, r0, #1
   8b26a:	d000      	beq.n	8b26e <_close_r+0x16>
   8b26c:	bd38      	pop	{r3, r4, r5, pc}
   8b26e:	682b      	ldr	r3, [r5, #0]
   8b270:	2b00      	cmp	r3, #0
   8b272:	d0fb      	beq.n	8b26c <_close_r+0x14>
   8b274:	6023      	str	r3, [r4, #0]
   8b276:	bd38      	pop	{r3, r4, r5, pc}
   8b278:	200019b0 	.word	0x200019b0

0008b27c <__errno>:
   8b27c:	4b01      	ldr	r3, [pc, #4]	; (8b284 <__errno+0x8>)
   8b27e:	6818      	ldr	r0, [r3, #0]
   8b280:	4770      	bx	lr
   8b282:	bf00      	nop
   8b284:	200003e8 	.word	0x200003e8

0008b288 <_fclose_r>:
   8b288:	b570      	push	{r4, r5, r6, lr}
   8b28a:	2900      	cmp	r1, #0
   8b28c:	d04b      	beq.n	8b326 <_fclose_r+0x9e>
   8b28e:	4606      	mov	r6, r0
   8b290:	460c      	mov	r4, r1
   8b292:	b110      	cbz	r0, 8b29a <_fclose_r+0x12>
   8b294:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b296:	2b00      	cmp	r3, #0
   8b298:	d048      	beq.n	8b32c <_fclose_r+0xa4>
   8b29a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b29c:	07d8      	lsls	r0, r3, #31
   8b29e:	d534      	bpl.n	8b30a <_fclose_r+0x82>
   8b2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b2a4:	2b00      	cmp	r3, #0
   8b2a6:	d03e      	beq.n	8b326 <_fclose_r+0x9e>
   8b2a8:	4621      	mov	r1, r4
   8b2aa:	4630      	mov	r0, r6
   8b2ac:	f7fd fece 	bl	8904c <__sflush_r>
   8b2b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8b2b2:	4605      	mov	r5, r0
   8b2b4:	b133      	cbz	r3, 8b2c4 <_fclose_r+0x3c>
   8b2b6:	4630      	mov	r0, r6
   8b2b8:	69e1      	ldr	r1, [r4, #28]
   8b2ba:	4798      	blx	r3
   8b2bc:	2800      	cmp	r0, #0
   8b2be:	bfb8      	it	lt
   8b2c0:	f04f 35ff 	movlt.w	r5, #4294967295
   8b2c4:	89a3      	ldrh	r3, [r4, #12]
   8b2c6:	061a      	lsls	r2, r3, #24
   8b2c8:	d43b      	bmi.n	8b342 <_fclose_r+0xba>
   8b2ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b2cc:	b141      	cbz	r1, 8b2e0 <_fclose_r+0x58>
   8b2ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8b2d2:	4299      	cmp	r1, r3
   8b2d4:	d002      	beq.n	8b2dc <_fclose_r+0x54>
   8b2d6:	4630      	mov	r0, r6
   8b2d8:	f7fe f8fa 	bl	894d0 <_free_r>
   8b2dc:	2300      	movs	r3, #0
   8b2de:	6323      	str	r3, [r4, #48]	; 0x30
   8b2e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8b2e2:	b121      	cbz	r1, 8b2ee <_fclose_r+0x66>
   8b2e4:	4630      	mov	r0, r6
   8b2e6:	f7fe f8f3 	bl	894d0 <_free_r>
   8b2ea:	2300      	movs	r3, #0
   8b2ec:	6463      	str	r3, [r4, #68]	; 0x44
   8b2ee:	f7fd fff9 	bl	892e4 <__sfp_lock_acquire>
   8b2f2:	2200      	movs	r2, #0
   8b2f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b2f6:	81a2      	strh	r2, [r4, #12]
   8b2f8:	07db      	lsls	r3, r3, #31
   8b2fa:	d527      	bpl.n	8b34c <_fclose_r+0xc4>
   8b2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b2fe:	f7fe fb8f 	bl	89a20 <__retarget_lock_close_recursive>
   8b302:	f7fd fff5 	bl	892f0 <__sfp_lock_release>
   8b306:	4628      	mov	r0, r5
   8b308:	bd70      	pop	{r4, r5, r6, pc}
   8b30a:	89a3      	ldrh	r3, [r4, #12]
   8b30c:	0599      	lsls	r1, r3, #22
   8b30e:	d4cb      	bmi.n	8b2a8 <_fclose_r+0x20>
   8b310:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b312:	f7fe fb87 	bl	89a24 <__retarget_lock_acquire_recursive>
   8b316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b31a:	2b00      	cmp	r3, #0
   8b31c:	d1c4      	bne.n	8b2a8 <_fclose_r+0x20>
   8b31e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8b320:	f015 0501 	ands.w	r5, r5, #1
   8b324:	d008      	beq.n	8b338 <_fclose_r+0xb0>
   8b326:	2500      	movs	r5, #0
   8b328:	4628      	mov	r0, r5
   8b32a:	bd70      	pop	{r4, r5, r6, pc}
   8b32c:	f7fd ff54 	bl	891d8 <__sinit>
   8b330:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b332:	07d8      	lsls	r0, r3, #31
   8b334:	d4b4      	bmi.n	8b2a0 <_fclose_r+0x18>
   8b336:	e7e8      	b.n	8b30a <_fclose_r+0x82>
   8b338:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b33a:	f7fe fb75 	bl	89a28 <__retarget_lock_release_recursive>
   8b33e:	4628      	mov	r0, r5
   8b340:	bd70      	pop	{r4, r5, r6, pc}
   8b342:	4630      	mov	r0, r6
   8b344:	6921      	ldr	r1, [r4, #16]
   8b346:	f7fe f8c3 	bl	894d0 <_free_r>
   8b34a:	e7be      	b.n	8b2ca <_fclose_r+0x42>
   8b34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b34e:	f7fe fb6b 	bl	89a28 <__retarget_lock_release_recursive>
   8b352:	e7d3      	b.n	8b2fc <_fclose_r+0x74>

0008b354 <fiprintf>:
   8b354:	b40e      	push	{r1, r2, r3}
   8b356:	b500      	push	{lr}
   8b358:	4a07      	ldr	r2, [pc, #28]	; (8b378 <fiprintf+0x24>)
   8b35a:	b082      	sub	sp, #8
   8b35c:	ab03      	add	r3, sp, #12
   8b35e:	4601      	mov	r1, r0
   8b360:	6810      	ldr	r0, [r2, #0]
   8b362:	f853 2b04 	ldr.w	r2, [r3], #4
   8b366:	9301      	str	r3, [sp, #4]
   8b368:	f7fb feea 	bl	87140 <_vfiprintf_r>
   8b36c:	b002      	add	sp, #8
   8b36e:	f85d eb04 	ldr.w	lr, [sp], #4
   8b372:	b003      	add	sp, #12
   8b374:	4770      	bx	lr
   8b376:	bf00      	nop
   8b378:	200003e8 	.word	0x200003e8

0008b37c <_fstat_r>:
   8b37c:	b570      	push	{r4, r5, r6, lr}
   8b37e:	2600      	movs	r6, #0
   8b380:	4d07      	ldr	r5, [pc, #28]	; (8b3a0 <_fstat_r+0x24>)
   8b382:	4604      	mov	r4, r0
   8b384:	4608      	mov	r0, r1
   8b386:	4611      	mov	r1, r2
   8b388:	602e      	str	r6, [r5, #0]
   8b38a:	f7f9 fd62 	bl	84e52 <_fstat>
   8b38e:	1c43      	adds	r3, r0, #1
   8b390:	d000      	beq.n	8b394 <_fstat_r+0x18>
   8b392:	bd70      	pop	{r4, r5, r6, pc}
   8b394:	682b      	ldr	r3, [r5, #0]
   8b396:	2b00      	cmp	r3, #0
   8b398:	d0fb      	beq.n	8b392 <_fstat_r+0x16>
   8b39a:	6023      	str	r3, [r4, #0]
   8b39c:	bd70      	pop	{r4, r5, r6, pc}
   8b39e:	bf00      	nop
   8b3a0:	200019b0 	.word	0x200019b0

0008b3a4 <_isatty_r>:
   8b3a4:	2200      	movs	r2, #0
   8b3a6:	b538      	push	{r3, r4, r5, lr}
   8b3a8:	4d06      	ldr	r5, [pc, #24]	; (8b3c4 <_isatty_r+0x20>)
   8b3aa:	4604      	mov	r4, r0
   8b3ac:	4608      	mov	r0, r1
   8b3ae:	602a      	str	r2, [r5, #0]
   8b3b0:	f7f9 fd54 	bl	84e5c <_isatty>
   8b3b4:	1c43      	adds	r3, r0, #1
   8b3b6:	d000      	beq.n	8b3ba <_isatty_r+0x16>
   8b3b8:	bd38      	pop	{r3, r4, r5, pc}
   8b3ba:	682b      	ldr	r3, [r5, #0]
   8b3bc:	2b00      	cmp	r3, #0
   8b3be:	d0fb      	beq.n	8b3b8 <_isatty_r+0x14>
   8b3c0:	6023      	str	r3, [r4, #0]
   8b3c2:	bd38      	pop	{r3, r4, r5, pc}
   8b3c4:	200019b0 	.word	0x200019b0

0008b3c8 <_lseek_r>:
   8b3c8:	b538      	push	{r3, r4, r5, lr}
   8b3ca:	460c      	mov	r4, r1
   8b3cc:	4611      	mov	r1, r2
   8b3ce:	2200      	movs	r2, #0
   8b3d0:	4684      	mov	ip, r0
   8b3d2:	4d07      	ldr	r5, [pc, #28]	; (8b3f0 <_lseek_r+0x28>)
   8b3d4:	4620      	mov	r0, r4
   8b3d6:	602a      	str	r2, [r5, #0]
   8b3d8:	461a      	mov	r2, r3
   8b3da:	4664      	mov	r4, ip
   8b3dc:	f7f9 fd40 	bl	84e60 <_lseek>
   8b3e0:	1c43      	adds	r3, r0, #1
   8b3e2:	d000      	beq.n	8b3e6 <_lseek_r+0x1e>
   8b3e4:	bd38      	pop	{r3, r4, r5, pc}
   8b3e6:	682b      	ldr	r3, [r5, #0]
   8b3e8:	2b00      	cmp	r3, #0
   8b3ea:	d0fb      	beq.n	8b3e4 <_lseek_r+0x1c>
   8b3ec:	6023      	str	r3, [r4, #0]
   8b3ee:	bd38      	pop	{r3, r4, r5, pc}
   8b3f0:	200019b0 	.word	0x200019b0

0008b3f4 <_read_r>:
   8b3f4:	b538      	push	{r3, r4, r5, lr}
   8b3f6:	460c      	mov	r4, r1
   8b3f8:	4611      	mov	r1, r2
   8b3fa:	2200      	movs	r2, #0
   8b3fc:	4684      	mov	ip, r0
   8b3fe:	4d07      	ldr	r5, [pc, #28]	; (8b41c <_read_r+0x28>)
   8b400:	4620      	mov	r0, r4
   8b402:	602a      	str	r2, [r5, #0]
   8b404:	461a      	mov	r2, r3
   8b406:	4664      	mov	r4, ip
   8b408:	f7f9 fddc 	bl	84fc4 <_read>
   8b40c:	1c43      	adds	r3, r0, #1
   8b40e:	d000      	beq.n	8b412 <_read_r+0x1e>
   8b410:	bd38      	pop	{r3, r4, r5, pc}
   8b412:	682b      	ldr	r3, [r5, #0]
   8b414:	2b00      	cmp	r3, #0
   8b416:	d0fb      	beq.n	8b410 <_read_r+0x1c>
   8b418:	6023      	str	r3, [r4, #0]
   8b41a:	bd38      	pop	{r3, r4, r5, pc}
   8b41c:	200019b0 	.word	0x200019b0

0008b420 <abort>:
   8b420:	2006      	movs	r0, #6
   8b422:	b508      	push	{r3, lr}
   8b424:	f000 f804 	bl	8b430 <raise>
   8b428:	2001      	movs	r0, #1
   8b42a:	f7f9 fd1b 	bl	84e64 <_exit>
   8b42e:	bf00      	nop

0008b430 <raise>:
   8b430:	b538      	push	{r3, r4, r5, lr}
   8b432:	4b15      	ldr	r3, [pc, #84]	; (8b488 <raise+0x58>)
   8b434:	281f      	cmp	r0, #31
   8b436:	681d      	ldr	r5, [r3, #0]
   8b438:	d820      	bhi.n	8b47c <raise+0x4c>
   8b43a:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   8b43e:	4604      	mov	r4, r0
   8b440:	b162      	cbz	r2, 8b45c <raise+0x2c>
   8b442:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   8b446:	b14b      	cbz	r3, 8b45c <raise+0x2c>
   8b448:	2b01      	cmp	r3, #1
   8b44a:	d015      	beq.n	8b478 <raise+0x48>
   8b44c:	1c59      	adds	r1, r3, #1
   8b44e:	d00f      	beq.n	8b470 <raise+0x40>
   8b450:	2500      	movs	r5, #0
   8b452:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   8b456:	4798      	blx	r3
   8b458:	4628      	mov	r0, r5
   8b45a:	bd38      	pop	{r3, r4, r5, pc}
   8b45c:	4628      	mov	r0, r5
   8b45e:	f000 f829 	bl	8b4b4 <_getpid_r>
   8b462:	4622      	mov	r2, r4
   8b464:	4601      	mov	r1, r0
   8b466:	4628      	mov	r0, r5
   8b468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b46c:	f000 b80e 	b.w	8b48c <_kill_r>
   8b470:	2316      	movs	r3, #22
   8b472:	2001      	movs	r0, #1
   8b474:	602b      	str	r3, [r5, #0]
   8b476:	bd38      	pop	{r3, r4, r5, pc}
   8b478:	2000      	movs	r0, #0
   8b47a:	bd38      	pop	{r3, r4, r5, pc}
   8b47c:	2316      	movs	r3, #22
   8b47e:	f04f 30ff 	mov.w	r0, #4294967295
   8b482:	602b      	str	r3, [r5, #0]
   8b484:	bd38      	pop	{r3, r4, r5, pc}
   8b486:	bf00      	nop
   8b488:	200003e8 	.word	0x200003e8

0008b48c <_kill_r>:
   8b48c:	b570      	push	{r4, r5, r6, lr}
   8b48e:	2600      	movs	r6, #0
   8b490:	4d07      	ldr	r5, [pc, #28]	; (8b4b0 <_kill_r+0x24>)
   8b492:	4604      	mov	r4, r0
   8b494:	4608      	mov	r0, r1
   8b496:	4611      	mov	r1, r2
   8b498:	602e      	str	r6, [r5, #0]
   8b49a:	f7f9 fced 	bl	84e78 <_kill>
   8b49e:	1c43      	adds	r3, r0, #1
   8b4a0:	d000      	beq.n	8b4a4 <_kill_r+0x18>
   8b4a2:	bd70      	pop	{r4, r5, r6, pc}
   8b4a4:	682b      	ldr	r3, [r5, #0]
   8b4a6:	2b00      	cmp	r3, #0
   8b4a8:	d0fb      	beq.n	8b4a2 <_kill_r+0x16>
   8b4aa:	6023      	str	r3, [r4, #0]
   8b4ac:	bd70      	pop	{r4, r5, r6, pc}
   8b4ae:	bf00      	nop
   8b4b0:	200019b0 	.word	0x200019b0

0008b4b4 <_getpid_r>:
   8b4b4:	f7f9 bce1 	b.w	84e7a <_getpid>

0008b4b8 <__aeabi_drsub>:
   8b4b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8b4bc:	e002      	b.n	8b4c4 <__adddf3>
   8b4be:	bf00      	nop

0008b4c0 <__aeabi_dsub>:
   8b4c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008b4c4 <__adddf3>:
   8b4c4:	b530      	push	{r4, r5, lr}
   8b4c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8b4ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8b4ce:	ea94 0f05 	teq	r4, r5
   8b4d2:	bf08      	it	eq
   8b4d4:	ea90 0f02 	teqeq	r0, r2
   8b4d8:	bf1f      	itttt	ne
   8b4da:	ea54 0c00 	orrsne.w	ip, r4, r0
   8b4de:	ea55 0c02 	orrsne.w	ip, r5, r2
   8b4e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8b4e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b4ea:	f000 80e2 	beq.w	8b6b2 <__adddf3+0x1ee>
   8b4ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8b4f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8b4f6:	bfb8      	it	lt
   8b4f8:	426d      	neglt	r5, r5
   8b4fa:	dd0c      	ble.n	8b516 <__adddf3+0x52>
   8b4fc:	442c      	add	r4, r5
   8b4fe:	ea80 0202 	eor.w	r2, r0, r2
   8b502:	ea81 0303 	eor.w	r3, r1, r3
   8b506:	ea82 0000 	eor.w	r0, r2, r0
   8b50a:	ea83 0101 	eor.w	r1, r3, r1
   8b50e:	ea80 0202 	eor.w	r2, r0, r2
   8b512:	ea81 0303 	eor.w	r3, r1, r3
   8b516:	2d36      	cmp	r5, #54	; 0x36
   8b518:	bf88      	it	hi
   8b51a:	bd30      	pophi	{r4, r5, pc}
   8b51c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8b520:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8b524:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8b528:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8b52c:	d002      	beq.n	8b534 <__adddf3+0x70>
   8b52e:	4240      	negs	r0, r0
   8b530:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b534:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8b538:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8b53c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8b540:	d002      	beq.n	8b548 <__adddf3+0x84>
   8b542:	4252      	negs	r2, r2
   8b544:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8b548:	ea94 0f05 	teq	r4, r5
   8b54c:	f000 80a7 	beq.w	8b69e <__adddf3+0x1da>
   8b550:	f1a4 0401 	sub.w	r4, r4, #1
   8b554:	f1d5 0e20 	rsbs	lr, r5, #32
   8b558:	db0d      	blt.n	8b576 <__adddf3+0xb2>
   8b55a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8b55e:	fa22 f205 	lsr.w	r2, r2, r5
   8b562:	1880      	adds	r0, r0, r2
   8b564:	f141 0100 	adc.w	r1, r1, #0
   8b568:	fa03 f20e 	lsl.w	r2, r3, lr
   8b56c:	1880      	adds	r0, r0, r2
   8b56e:	fa43 f305 	asr.w	r3, r3, r5
   8b572:	4159      	adcs	r1, r3
   8b574:	e00e      	b.n	8b594 <__adddf3+0xd0>
   8b576:	f1a5 0520 	sub.w	r5, r5, #32
   8b57a:	f10e 0e20 	add.w	lr, lr, #32
   8b57e:	2a01      	cmp	r2, #1
   8b580:	fa03 fc0e 	lsl.w	ip, r3, lr
   8b584:	bf28      	it	cs
   8b586:	f04c 0c02 	orrcs.w	ip, ip, #2
   8b58a:	fa43 f305 	asr.w	r3, r3, r5
   8b58e:	18c0      	adds	r0, r0, r3
   8b590:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8b594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b598:	d507      	bpl.n	8b5aa <__adddf3+0xe6>
   8b59a:	f04f 0e00 	mov.w	lr, #0
   8b59e:	f1dc 0c00 	rsbs	ip, ip, #0
   8b5a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   8b5a6:	eb6e 0101 	sbc.w	r1, lr, r1
   8b5aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8b5ae:	d31b      	bcc.n	8b5e8 <__adddf3+0x124>
   8b5b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8b5b4:	d30c      	bcc.n	8b5d0 <__adddf3+0x10c>
   8b5b6:	0849      	lsrs	r1, r1, #1
   8b5b8:	ea5f 0030 	movs.w	r0, r0, rrx
   8b5bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8b5c0:	f104 0401 	add.w	r4, r4, #1
   8b5c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8b5c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8b5cc:	f080 809a 	bcs.w	8b704 <__adddf3+0x240>
   8b5d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8b5d4:	bf08      	it	eq
   8b5d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8b5da:	f150 0000 	adcs.w	r0, r0, #0
   8b5de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b5e2:	ea41 0105 	orr.w	r1, r1, r5
   8b5e6:	bd30      	pop	{r4, r5, pc}
   8b5e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8b5ec:	4140      	adcs	r0, r0
   8b5ee:	eb41 0101 	adc.w	r1, r1, r1
   8b5f2:	3c01      	subs	r4, #1
   8b5f4:	bf28      	it	cs
   8b5f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8b5fa:	d2e9      	bcs.n	8b5d0 <__adddf3+0x10c>
   8b5fc:	f091 0f00 	teq	r1, #0
   8b600:	bf04      	itt	eq
   8b602:	4601      	moveq	r1, r0
   8b604:	2000      	moveq	r0, #0
   8b606:	fab1 f381 	clz	r3, r1
   8b60a:	bf08      	it	eq
   8b60c:	3320      	addeq	r3, #32
   8b60e:	f1a3 030b 	sub.w	r3, r3, #11
   8b612:	f1b3 0220 	subs.w	r2, r3, #32
   8b616:	da0c      	bge.n	8b632 <__adddf3+0x16e>
   8b618:	320c      	adds	r2, #12
   8b61a:	dd08      	ble.n	8b62e <__adddf3+0x16a>
   8b61c:	f102 0c14 	add.w	ip, r2, #20
   8b620:	f1c2 020c 	rsb	r2, r2, #12
   8b624:	fa01 f00c 	lsl.w	r0, r1, ip
   8b628:	fa21 f102 	lsr.w	r1, r1, r2
   8b62c:	e00c      	b.n	8b648 <__adddf3+0x184>
   8b62e:	f102 0214 	add.w	r2, r2, #20
   8b632:	bfd8      	it	le
   8b634:	f1c2 0c20 	rsble	ip, r2, #32
   8b638:	fa01 f102 	lsl.w	r1, r1, r2
   8b63c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8b640:	bfdc      	itt	le
   8b642:	ea41 010c 	orrle.w	r1, r1, ip
   8b646:	4090      	lslle	r0, r2
   8b648:	1ae4      	subs	r4, r4, r3
   8b64a:	bfa2      	ittt	ge
   8b64c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8b650:	4329      	orrge	r1, r5
   8b652:	bd30      	popge	{r4, r5, pc}
   8b654:	ea6f 0404 	mvn.w	r4, r4
   8b658:	3c1f      	subs	r4, #31
   8b65a:	da1c      	bge.n	8b696 <__adddf3+0x1d2>
   8b65c:	340c      	adds	r4, #12
   8b65e:	dc0e      	bgt.n	8b67e <__adddf3+0x1ba>
   8b660:	f104 0414 	add.w	r4, r4, #20
   8b664:	f1c4 0220 	rsb	r2, r4, #32
   8b668:	fa20 f004 	lsr.w	r0, r0, r4
   8b66c:	fa01 f302 	lsl.w	r3, r1, r2
   8b670:	ea40 0003 	orr.w	r0, r0, r3
   8b674:	fa21 f304 	lsr.w	r3, r1, r4
   8b678:	ea45 0103 	orr.w	r1, r5, r3
   8b67c:	bd30      	pop	{r4, r5, pc}
   8b67e:	f1c4 040c 	rsb	r4, r4, #12
   8b682:	f1c4 0220 	rsb	r2, r4, #32
   8b686:	fa20 f002 	lsr.w	r0, r0, r2
   8b68a:	fa01 f304 	lsl.w	r3, r1, r4
   8b68e:	ea40 0003 	orr.w	r0, r0, r3
   8b692:	4629      	mov	r1, r5
   8b694:	bd30      	pop	{r4, r5, pc}
   8b696:	fa21 f004 	lsr.w	r0, r1, r4
   8b69a:	4629      	mov	r1, r5
   8b69c:	bd30      	pop	{r4, r5, pc}
   8b69e:	f094 0f00 	teq	r4, #0
   8b6a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8b6a6:	bf06      	itte	eq
   8b6a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8b6ac:	3401      	addeq	r4, #1
   8b6ae:	3d01      	subne	r5, #1
   8b6b0:	e74e      	b.n	8b550 <__adddf3+0x8c>
   8b6b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b6b6:	bf18      	it	ne
   8b6b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b6bc:	d029      	beq.n	8b712 <__adddf3+0x24e>
   8b6be:	ea94 0f05 	teq	r4, r5
   8b6c2:	bf08      	it	eq
   8b6c4:	ea90 0f02 	teqeq	r0, r2
   8b6c8:	d005      	beq.n	8b6d6 <__adddf3+0x212>
   8b6ca:	ea54 0c00 	orrs.w	ip, r4, r0
   8b6ce:	bf04      	itt	eq
   8b6d0:	4619      	moveq	r1, r3
   8b6d2:	4610      	moveq	r0, r2
   8b6d4:	bd30      	pop	{r4, r5, pc}
   8b6d6:	ea91 0f03 	teq	r1, r3
   8b6da:	bf1e      	ittt	ne
   8b6dc:	2100      	movne	r1, #0
   8b6de:	2000      	movne	r0, #0
   8b6e0:	bd30      	popne	{r4, r5, pc}
   8b6e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8b6e6:	d105      	bne.n	8b6f4 <__adddf3+0x230>
   8b6e8:	0040      	lsls	r0, r0, #1
   8b6ea:	4149      	adcs	r1, r1
   8b6ec:	bf28      	it	cs
   8b6ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8b6f2:	bd30      	pop	{r4, r5, pc}
   8b6f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8b6f8:	bf3c      	itt	cc
   8b6fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8b6fe:	bd30      	popcc	{r4, r5, pc}
   8b700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b704:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8b708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8b70c:	f04f 0000 	mov.w	r0, #0
   8b710:	bd30      	pop	{r4, r5, pc}
   8b712:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b716:	bf1a      	itte	ne
   8b718:	4619      	movne	r1, r3
   8b71a:	4610      	movne	r0, r2
   8b71c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8b720:	bf1c      	itt	ne
   8b722:	460b      	movne	r3, r1
   8b724:	4602      	movne	r2, r0
   8b726:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8b72a:	bf06      	itte	eq
   8b72c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8b730:	ea91 0f03 	teqeq	r1, r3
   8b734:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8b738:	bd30      	pop	{r4, r5, pc}
   8b73a:	bf00      	nop

0008b73c <__aeabi_ui2d>:
   8b73c:	f090 0f00 	teq	r0, #0
   8b740:	bf04      	itt	eq
   8b742:	2100      	moveq	r1, #0
   8b744:	4770      	bxeq	lr
   8b746:	b530      	push	{r4, r5, lr}
   8b748:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b74c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b750:	f04f 0500 	mov.w	r5, #0
   8b754:	f04f 0100 	mov.w	r1, #0
   8b758:	e750      	b.n	8b5fc <__adddf3+0x138>
   8b75a:	bf00      	nop

0008b75c <__aeabi_i2d>:
   8b75c:	f090 0f00 	teq	r0, #0
   8b760:	bf04      	itt	eq
   8b762:	2100      	moveq	r1, #0
   8b764:	4770      	bxeq	lr
   8b766:	b530      	push	{r4, r5, lr}
   8b768:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b76c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b770:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8b774:	bf48      	it	mi
   8b776:	4240      	negmi	r0, r0
   8b778:	f04f 0100 	mov.w	r1, #0
   8b77c:	e73e      	b.n	8b5fc <__adddf3+0x138>
   8b77e:	bf00      	nop

0008b780 <__aeabi_f2d>:
   8b780:	0042      	lsls	r2, r0, #1
   8b782:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8b786:	ea4f 0131 	mov.w	r1, r1, rrx
   8b78a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8b78e:	bf1f      	itttt	ne
   8b790:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8b794:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8b798:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8b79c:	4770      	bxne	lr
   8b79e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8b7a2:	bf08      	it	eq
   8b7a4:	4770      	bxeq	lr
   8b7a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8b7aa:	bf04      	itt	eq
   8b7ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8b7b0:	4770      	bxeq	lr
   8b7b2:	b530      	push	{r4, r5, lr}
   8b7b4:	f44f 7460 	mov.w	r4, #896	; 0x380
   8b7b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b7bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8b7c0:	e71c      	b.n	8b5fc <__adddf3+0x138>
   8b7c2:	bf00      	nop

0008b7c4 <__aeabi_ul2d>:
   8b7c4:	ea50 0201 	orrs.w	r2, r0, r1
   8b7c8:	bf08      	it	eq
   8b7ca:	4770      	bxeq	lr
   8b7cc:	b530      	push	{r4, r5, lr}
   8b7ce:	f04f 0500 	mov.w	r5, #0
   8b7d2:	e00a      	b.n	8b7ea <__aeabi_l2d+0x16>

0008b7d4 <__aeabi_l2d>:
   8b7d4:	ea50 0201 	orrs.w	r2, r0, r1
   8b7d8:	bf08      	it	eq
   8b7da:	4770      	bxeq	lr
   8b7dc:	b530      	push	{r4, r5, lr}
   8b7de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8b7e2:	d502      	bpl.n	8b7ea <__aeabi_l2d+0x16>
   8b7e4:	4240      	negs	r0, r0
   8b7e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b7ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b7ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b7f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8b7f6:	f43f aed8 	beq.w	8b5aa <__adddf3+0xe6>
   8b7fa:	f04f 0203 	mov.w	r2, #3
   8b7fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8b802:	bf18      	it	ne
   8b804:	3203      	addne	r2, #3
   8b806:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8b80a:	bf18      	it	ne
   8b80c:	3203      	addne	r2, #3
   8b80e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8b812:	f1c2 0320 	rsb	r3, r2, #32
   8b816:	fa00 fc03 	lsl.w	ip, r0, r3
   8b81a:	fa20 f002 	lsr.w	r0, r0, r2
   8b81e:	fa01 fe03 	lsl.w	lr, r1, r3
   8b822:	ea40 000e 	orr.w	r0, r0, lr
   8b826:	fa21 f102 	lsr.w	r1, r1, r2
   8b82a:	4414      	add	r4, r2
   8b82c:	e6bd      	b.n	8b5aa <__adddf3+0xe6>
   8b82e:	bf00      	nop

0008b830 <__aeabi_dmul>:
   8b830:	b570      	push	{r4, r5, r6, lr}
   8b832:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8b836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8b83a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8b83e:	bf1d      	ittte	ne
   8b840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8b844:	ea94 0f0c 	teqne	r4, ip
   8b848:	ea95 0f0c 	teqne	r5, ip
   8b84c:	f000 f8de 	bleq	8ba0c <__aeabi_dmul+0x1dc>
   8b850:	442c      	add	r4, r5
   8b852:	ea81 0603 	eor.w	r6, r1, r3
   8b856:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8b85a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8b85e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8b862:	bf18      	it	ne
   8b864:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8b868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b86c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b870:	d038      	beq.n	8b8e4 <__aeabi_dmul+0xb4>
   8b872:	fba0 ce02 	umull	ip, lr, r0, r2
   8b876:	f04f 0500 	mov.w	r5, #0
   8b87a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8b87e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8b882:	fbe0 e503 	umlal	lr, r5, r0, r3
   8b886:	f04f 0600 	mov.w	r6, #0
   8b88a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8b88e:	f09c 0f00 	teq	ip, #0
   8b892:	bf18      	it	ne
   8b894:	f04e 0e01 	orrne.w	lr, lr, #1
   8b898:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8b89c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8b8a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8b8a4:	d204      	bcs.n	8b8b0 <__aeabi_dmul+0x80>
   8b8a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8b8aa:	416d      	adcs	r5, r5
   8b8ac:	eb46 0606 	adc.w	r6, r6, r6
   8b8b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8b8b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8b8b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8b8bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8b8c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8b8c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8b8c8:	bf88      	it	hi
   8b8ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8b8ce:	d81e      	bhi.n	8b90e <__aeabi_dmul+0xde>
   8b8d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8b8d4:	bf08      	it	eq
   8b8d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8b8da:	f150 0000 	adcs.w	r0, r0, #0
   8b8de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b8e2:	bd70      	pop	{r4, r5, r6, pc}
   8b8e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8b8e8:	ea46 0101 	orr.w	r1, r6, r1
   8b8ec:	ea40 0002 	orr.w	r0, r0, r2
   8b8f0:	ea81 0103 	eor.w	r1, r1, r3
   8b8f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8b8f8:	bfc2      	ittt	gt
   8b8fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   8b8fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8b902:	bd70      	popgt	{r4, r5, r6, pc}
   8b904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b908:	f04f 0e00 	mov.w	lr, #0
   8b90c:	3c01      	subs	r4, #1
   8b90e:	f300 80ab 	bgt.w	8ba68 <__aeabi_dmul+0x238>
   8b912:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8b916:	bfde      	ittt	le
   8b918:	2000      	movle	r0, #0
   8b91a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8b91e:	bd70      	pople	{r4, r5, r6, pc}
   8b920:	f1c4 0400 	rsb	r4, r4, #0
   8b924:	3c20      	subs	r4, #32
   8b926:	da35      	bge.n	8b994 <__aeabi_dmul+0x164>
   8b928:	340c      	adds	r4, #12
   8b92a:	dc1b      	bgt.n	8b964 <__aeabi_dmul+0x134>
   8b92c:	f104 0414 	add.w	r4, r4, #20
   8b930:	f1c4 0520 	rsb	r5, r4, #32
   8b934:	fa00 f305 	lsl.w	r3, r0, r5
   8b938:	fa20 f004 	lsr.w	r0, r0, r4
   8b93c:	fa01 f205 	lsl.w	r2, r1, r5
   8b940:	ea40 0002 	orr.w	r0, r0, r2
   8b944:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8b948:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8b94c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8b950:	fa21 f604 	lsr.w	r6, r1, r4
   8b954:	eb42 0106 	adc.w	r1, r2, r6
   8b958:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b95c:	bf08      	it	eq
   8b95e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b962:	bd70      	pop	{r4, r5, r6, pc}
   8b964:	f1c4 040c 	rsb	r4, r4, #12
   8b968:	f1c4 0520 	rsb	r5, r4, #32
   8b96c:	fa00 f304 	lsl.w	r3, r0, r4
   8b970:	fa20 f005 	lsr.w	r0, r0, r5
   8b974:	fa01 f204 	lsl.w	r2, r1, r4
   8b978:	ea40 0002 	orr.w	r0, r0, r2
   8b97c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b980:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8b984:	f141 0100 	adc.w	r1, r1, #0
   8b988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b98c:	bf08      	it	eq
   8b98e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b992:	bd70      	pop	{r4, r5, r6, pc}
   8b994:	f1c4 0520 	rsb	r5, r4, #32
   8b998:	fa00 f205 	lsl.w	r2, r0, r5
   8b99c:	ea4e 0e02 	orr.w	lr, lr, r2
   8b9a0:	fa20 f304 	lsr.w	r3, r0, r4
   8b9a4:	fa01 f205 	lsl.w	r2, r1, r5
   8b9a8:	ea43 0302 	orr.w	r3, r3, r2
   8b9ac:	fa21 f004 	lsr.w	r0, r1, r4
   8b9b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b9b4:	fa21 f204 	lsr.w	r2, r1, r4
   8b9b8:	ea20 0002 	bic.w	r0, r0, r2
   8b9bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8b9c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b9c4:	bf08      	it	eq
   8b9c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b9ca:	bd70      	pop	{r4, r5, r6, pc}
   8b9cc:	f094 0f00 	teq	r4, #0
   8b9d0:	d10f      	bne.n	8b9f2 <__aeabi_dmul+0x1c2>
   8b9d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8b9d6:	0040      	lsls	r0, r0, #1
   8b9d8:	eb41 0101 	adc.w	r1, r1, r1
   8b9dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b9e0:	bf08      	it	eq
   8b9e2:	3c01      	subeq	r4, #1
   8b9e4:	d0f7      	beq.n	8b9d6 <__aeabi_dmul+0x1a6>
   8b9e6:	ea41 0106 	orr.w	r1, r1, r6
   8b9ea:	f095 0f00 	teq	r5, #0
   8b9ee:	bf18      	it	ne
   8b9f0:	4770      	bxne	lr
   8b9f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8b9f6:	0052      	lsls	r2, r2, #1
   8b9f8:	eb43 0303 	adc.w	r3, r3, r3
   8b9fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8ba00:	bf08      	it	eq
   8ba02:	3d01      	subeq	r5, #1
   8ba04:	d0f7      	beq.n	8b9f6 <__aeabi_dmul+0x1c6>
   8ba06:	ea43 0306 	orr.w	r3, r3, r6
   8ba0a:	4770      	bx	lr
   8ba0c:	ea94 0f0c 	teq	r4, ip
   8ba10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8ba14:	bf18      	it	ne
   8ba16:	ea95 0f0c 	teqne	r5, ip
   8ba1a:	d00c      	beq.n	8ba36 <__aeabi_dmul+0x206>
   8ba1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8ba20:	bf18      	it	ne
   8ba22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8ba26:	d1d1      	bne.n	8b9cc <__aeabi_dmul+0x19c>
   8ba28:	ea81 0103 	eor.w	r1, r1, r3
   8ba2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8ba30:	f04f 0000 	mov.w	r0, #0
   8ba34:	bd70      	pop	{r4, r5, r6, pc}
   8ba36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8ba3a:	bf06      	itte	eq
   8ba3c:	4610      	moveq	r0, r2
   8ba3e:	4619      	moveq	r1, r3
   8ba40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8ba44:	d019      	beq.n	8ba7a <__aeabi_dmul+0x24a>
   8ba46:	ea94 0f0c 	teq	r4, ip
   8ba4a:	d102      	bne.n	8ba52 <__aeabi_dmul+0x222>
   8ba4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8ba50:	d113      	bne.n	8ba7a <__aeabi_dmul+0x24a>
   8ba52:	ea95 0f0c 	teq	r5, ip
   8ba56:	d105      	bne.n	8ba64 <__aeabi_dmul+0x234>
   8ba58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8ba5c:	bf1c      	itt	ne
   8ba5e:	4610      	movne	r0, r2
   8ba60:	4619      	movne	r1, r3
   8ba62:	d10a      	bne.n	8ba7a <__aeabi_dmul+0x24a>
   8ba64:	ea81 0103 	eor.w	r1, r1, r3
   8ba68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8ba6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8ba70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8ba74:	f04f 0000 	mov.w	r0, #0
   8ba78:	bd70      	pop	{r4, r5, r6, pc}
   8ba7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8ba7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8ba82:	bd70      	pop	{r4, r5, r6, pc}

0008ba84 <__aeabi_ddiv>:
   8ba84:	b570      	push	{r4, r5, r6, lr}
   8ba86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8ba8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8ba8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8ba92:	bf1d      	ittte	ne
   8ba94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8ba98:	ea94 0f0c 	teqne	r4, ip
   8ba9c:	ea95 0f0c 	teqne	r5, ip
   8baa0:	f000 f8a7 	bleq	8bbf2 <__aeabi_ddiv+0x16e>
   8baa4:	eba4 0405 	sub.w	r4, r4, r5
   8baa8:	ea81 0e03 	eor.w	lr, r1, r3
   8baac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8bab0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8bab4:	f000 8088 	beq.w	8bbc8 <__aeabi_ddiv+0x144>
   8bab8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8babc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8bac0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8bac4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8bac8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8bacc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8bad0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8bad4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8bad8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8badc:	429d      	cmp	r5, r3
   8bade:	bf08      	it	eq
   8bae0:	4296      	cmpeq	r6, r2
   8bae2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8bae6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8baea:	d202      	bcs.n	8baf2 <__aeabi_ddiv+0x6e>
   8baec:	085b      	lsrs	r3, r3, #1
   8baee:	ea4f 0232 	mov.w	r2, r2, rrx
   8baf2:	1ab6      	subs	r6, r6, r2
   8baf4:	eb65 0503 	sbc.w	r5, r5, r3
   8baf8:	085b      	lsrs	r3, r3, #1
   8bafa:	ea4f 0232 	mov.w	r2, r2, rrx
   8bafe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8bb02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8bb06:	ebb6 0e02 	subs.w	lr, r6, r2
   8bb0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8bb0e:	bf22      	ittt	cs
   8bb10:	1ab6      	subcs	r6, r6, r2
   8bb12:	4675      	movcs	r5, lr
   8bb14:	ea40 000c 	orrcs.w	r0, r0, ip
   8bb18:	085b      	lsrs	r3, r3, #1
   8bb1a:	ea4f 0232 	mov.w	r2, r2, rrx
   8bb1e:	ebb6 0e02 	subs.w	lr, r6, r2
   8bb22:	eb75 0e03 	sbcs.w	lr, r5, r3
   8bb26:	bf22      	ittt	cs
   8bb28:	1ab6      	subcs	r6, r6, r2
   8bb2a:	4675      	movcs	r5, lr
   8bb2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8bb30:	085b      	lsrs	r3, r3, #1
   8bb32:	ea4f 0232 	mov.w	r2, r2, rrx
   8bb36:	ebb6 0e02 	subs.w	lr, r6, r2
   8bb3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8bb3e:	bf22      	ittt	cs
   8bb40:	1ab6      	subcs	r6, r6, r2
   8bb42:	4675      	movcs	r5, lr
   8bb44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8bb48:	085b      	lsrs	r3, r3, #1
   8bb4a:	ea4f 0232 	mov.w	r2, r2, rrx
   8bb4e:	ebb6 0e02 	subs.w	lr, r6, r2
   8bb52:	eb75 0e03 	sbcs.w	lr, r5, r3
   8bb56:	bf22      	ittt	cs
   8bb58:	1ab6      	subcs	r6, r6, r2
   8bb5a:	4675      	movcs	r5, lr
   8bb5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8bb60:	ea55 0e06 	orrs.w	lr, r5, r6
   8bb64:	d018      	beq.n	8bb98 <__aeabi_ddiv+0x114>
   8bb66:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8bb6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8bb6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8bb72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8bb76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8bb7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8bb7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8bb82:	d1c0      	bne.n	8bb06 <__aeabi_ddiv+0x82>
   8bb84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8bb88:	d10b      	bne.n	8bba2 <__aeabi_ddiv+0x11e>
   8bb8a:	ea41 0100 	orr.w	r1, r1, r0
   8bb8e:	f04f 0000 	mov.w	r0, #0
   8bb92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8bb96:	e7b6      	b.n	8bb06 <__aeabi_ddiv+0x82>
   8bb98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8bb9c:	bf04      	itt	eq
   8bb9e:	4301      	orreq	r1, r0
   8bba0:	2000      	moveq	r0, #0
   8bba2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8bba6:	bf88      	it	hi
   8bba8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8bbac:	f63f aeaf 	bhi.w	8b90e <__aeabi_dmul+0xde>
   8bbb0:	ebb5 0c03 	subs.w	ip, r5, r3
   8bbb4:	bf04      	itt	eq
   8bbb6:	ebb6 0c02 	subseq.w	ip, r6, r2
   8bbba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8bbbe:	f150 0000 	adcs.w	r0, r0, #0
   8bbc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8bbc6:	bd70      	pop	{r4, r5, r6, pc}
   8bbc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8bbcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8bbd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8bbd4:	bfc2      	ittt	gt
   8bbd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   8bbda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8bbde:	bd70      	popgt	{r4, r5, r6, pc}
   8bbe0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8bbe4:	f04f 0e00 	mov.w	lr, #0
   8bbe8:	3c01      	subs	r4, #1
   8bbea:	e690      	b.n	8b90e <__aeabi_dmul+0xde>
   8bbec:	ea45 0e06 	orr.w	lr, r5, r6
   8bbf0:	e68d      	b.n	8b90e <__aeabi_dmul+0xde>
   8bbf2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8bbf6:	ea94 0f0c 	teq	r4, ip
   8bbfa:	bf08      	it	eq
   8bbfc:	ea95 0f0c 	teqeq	r5, ip
   8bc00:	f43f af3b 	beq.w	8ba7a <__aeabi_dmul+0x24a>
   8bc04:	ea94 0f0c 	teq	r4, ip
   8bc08:	d10a      	bne.n	8bc20 <__aeabi_ddiv+0x19c>
   8bc0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8bc0e:	f47f af34 	bne.w	8ba7a <__aeabi_dmul+0x24a>
   8bc12:	ea95 0f0c 	teq	r5, ip
   8bc16:	f47f af25 	bne.w	8ba64 <__aeabi_dmul+0x234>
   8bc1a:	4610      	mov	r0, r2
   8bc1c:	4619      	mov	r1, r3
   8bc1e:	e72c      	b.n	8ba7a <__aeabi_dmul+0x24a>
   8bc20:	ea95 0f0c 	teq	r5, ip
   8bc24:	d106      	bne.n	8bc34 <__aeabi_ddiv+0x1b0>
   8bc26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8bc2a:	f43f aefd 	beq.w	8ba28 <__aeabi_dmul+0x1f8>
   8bc2e:	4610      	mov	r0, r2
   8bc30:	4619      	mov	r1, r3
   8bc32:	e722      	b.n	8ba7a <__aeabi_dmul+0x24a>
   8bc34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8bc38:	bf18      	it	ne
   8bc3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8bc3e:	f47f aec5 	bne.w	8b9cc <__aeabi_dmul+0x19c>
   8bc42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8bc46:	f47f af0d 	bne.w	8ba64 <__aeabi_dmul+0x234>
   8bc4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8bc4e:	f47f aeeb 	bne.w	8ba28 <__aeabi_dmul+0x1f8>
   8bc52:	e712      	b.n	8ba7a <__aeabi_dmul+0x24a>

0008bc54 <__gedf2>:
   8bc54:	f04f 3cff 	mov.w	ip, #4294967295
   8bc58:	e006      	b.n	8bc68 <__cmpdf2+0x4>
   8bc5a:	bf00      	nop

0008bc5c <__ledf2>:
   8bc5c:	f04f 0c01 	mov.w	ip, #1
   8bc60:	e002      	b.n	8bc68 <__cmpdf2+0x4>
   8bc62:	bf00      	nop

0008bc64 <__cmpdf2>:
   8bc64:	f04f 0c01 	mov.w	ip, #1
   8bc68:	f84d cd04 	str.w	ip, [sp, #-4]!
   8bc6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8bc70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bc74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8bc78:	bf18      	it	ne
   8bc7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8bc7e:	d01b      	beq.n	8bcb8 <__cmpdf2+0x54>
   8bc80:	b001      	add	sp, #4
   8bc82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8bc86:	bf0c      	ite	eq
   8bc88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8bc8c:	ea91 0f03 	teqne	r1, r3
   8bc90:	bf02      	ittt	eq
   8bc92:	ea90 0f02 	teqeq	r0, r2
   8bc96:	2000      	moveq	r0, #0
   8bc98:	4770      	bxeq	lr
   8bc9a:	f110 0f00 	cmn.w	r0, #0
   8bc9e:	ea91 0f03 	teq	r1, r3
   8bca2:	bf58      	it	pl
   8bca4:	4299      	cmppl	r1, r3
   8bca6:	bf08      	it	eq
   8bca8:	4290      	cmpeq	r0, r2
   8bcaa:	bf2c      	ite	cs
   8bcac:	17d8      	asrcs	r0, r3, #31
   8bcae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8bcb2:	f040 0001 	orr.w	r0, r0, #1
   8bcb6:	4770      	bx	lr
   8bcb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8bcbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bcc0:	d102      	bne.n	8bcc8 <__cmpdf2+0x64>
   8bcc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8bcc6:	d107      	bne.n	8bcd8 <__cmpdf2+0x74>
   8bcc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8bccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bcd0:	d1d6      	bne.n	8bc80 <__cmpdf2+0x1c>
   8bcd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8bcd6:	d0d3      	beq.n	8bc80 <__cmpdf2+0x1c>
   8bcd8:	f85d 0b04 	ldr.w	r0, [sp], #4
   8bcdc:	4770      	bx	lr
   8bcde:	bf00      	nop

0008bce0 <__aeabi_cdrcmple>:
   8bce0:	4684      	mov	ip, r0
   8bce2:	4610      	mov	r0, r2
   8bce4:	4662      	mov	r2, ip
   8bce6:	468c      	mov	ip, r1
   8bce8:	4619      	mov	r1, r3
   8bcea:	4663      	mov	r3, ip
   8bcec:	e000      	b.n	8bcf0 <__aeabi_cdcmpeq>
   8bcee:	bf00      	nop

0008bcf0 <__aeabi_cdcmpeq>:
   8bcf0:	b501      	push	{r0, lr}
   8bcf2:	f7ff ffb7 	bl	8bc64 <__cmpdf2>
   8bcf6:	2800      	cmp	r0, #0
   8bcf8:	bf48      	it	mi
   8bcfa:	f110 0f00 	cmnmi.w	r0, #0
   8bcfe:	bd01      	pop	{r0, pc}

0008bd00 <__aeabi_dcmpeq>:
   8bd00:	f84d ed08 	str.w	lr, [sp, #-8]!
   8bd04:	f7ff fff4 	bl	8bcf0 <__aeabi_cdcmpeq>
   8bd08:	bf0c      	ite	eq
   8bd0a:	2001      	moveq	r0, #1
   8bd0c:	2000      	movne	r0, #0
   8bd0e:	f85d fb08 	ldr.w	pc, [sp], #8
   8bd12:	bf00      	nop

0008bd14 <__aeabi_dcmplt>:
   8bd14:	f84d ed08 	str.w	lr, [sp, #-8]!
   8bd18:	f7ff ffea 	bl	8bcf0 <__aeabi_cdcmpeq>
   8bd1c:	bf34      	ite	cc
   8bd1e:	2001      	movcc	r0, #1
   8bd20:	2000      	movcs	r0, #0
   8bd22:	f85d fb08 	ldr.w	pc, [sp], #8
   8bd26:	bf00      	nop

0008bd28 <__aeabi_dcmple>:
   8bd28:	f84d ed08 	str.w	lr, [sp, #-8]!
   8bd2c:	f7ff ffe0 	bl	8bcf0 <__aeabi_cdcmpeq>
   8bd30:	bf94      	ite	ls
   8bd32:	2001      	movls	r0, #1
   8bd34:	2000      	movhi	r0, #0
   8bd36:	f85d fb08 	ldr.w	pc, [sp], #8
   8bd3a:	bf00      	nop

0008bd3c <__aeabi_dcmpge>:
   8bd3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8bd40:	f7ff ffce 	bl	8bce0 <__aeabi_cdrcmple>
   8bd44:	bf94      	ite	ls
   8bd46:	2001      	movls	r0, #1
   8bd48:	2000      	movhi	r0, #0
   8bd4a:	f85d fb08 	ldr.w	pc, [sp], #8
   8bd4e:	bf00      	nop

0008bd50 <__aeabi_dcmpgt>:
   8bd50:	f84d ed08 	str.w	lr, [sp, #-8]!
   8bd54:	f7ff ffc4 	bl	8bce0 <__aeabi_cdrcmple>
   8bd58:	bf34      	ite	cc
   8bd5a:	2001      	movcc	r0, #1
   8bd5c:	2000      	movcs	r0, #0
   8bd5e:	f85d fb08 	ldr.w	pc, [sp], #8
   8bd62:	bf00      	nop

0008bd64 <__aeabi_dcmpun>:
   8bd64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8bd68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bd6c:	d102      	bne.n	8bd74 <__aeabi_dcmpun+0x10>
   8bd6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8bd72:	d10a      	bne.n	8bd8a <__aeabi_dcmpun+0x26>
   8bd74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8bd78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bd7c:	d102      	bne.n	8bd84 <__aeabi_dcmpun+0x20>
   8bd7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8bd82:	d102      	bne.n	8bd8a <__aeabi_dcmpun+0x26>
   8bd84:	f04f 0000 	mov.w	r0, #0
   8bd88:	4770      	bx	lr
   8bd8a:	f04f 0001 	mov.w	r0, #1
   8bd8e:	4770      	bx	lr

0008bd90 <__aeabi_d2iz>:
   8bd90:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8bd94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8bd98:	d215      	bcs.n	8bdc6 <__aeabi_d2iz+0x36>
   8bd9a:	d511      	bpl.n	8bdc0 <__aeabi_d2iz+0x30>
   8bd9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8bda0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8bda4:	d912      	bls.n	8bdcc <__aeabi_d2iz+0x3c>
   8bda6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8bdaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8bdae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8bdb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8bdb6:	fa23 f002 	lsr.w	r0, r3, r2
   8bdba:	bf18      	it	ne
   8bdbc:	4240      	negne	r0, r0
   8bdbe:	4770      	bx	lr
   8bdc0:	f04f 0000 	mov.w	r0, #0
   8bdc4:	4770      	bx	lr
   8bdc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8bdca:	d105      	bne.n	8bdd8 <__aeabi_d2iz+0x48>
   8bdcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8bdd0:	bf08      	it	eq
   8bdd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8bdd6:	4770      	bx	lr
   8bdd8:	f04f 0000 	mov.w	r0, #0
   8bddc:	4770      	bx	lr
   8bdde:	bf00      	nop

0008bde0 <__aeabi_uldivmod>:
   8bde0:	b953      	cbnz	r3, 8bdf8 <__aeabi_uldivmod+0x18>
   8bde2:	b94a      	cbnz	r2, 8bdf8 <__aeabi_uldivmod+0x18>
   8bde4:	2900      	cmp	r1, #0
   8bde6:	bf08      	it	eq
   8bde8:	2800      	cmpeq	r0, #0
   8bdea:	bf1c      	itt	ne
   8bdec:	f04f 31ff 	movne.w	r1, #4294967295
   8bdf0:	f04f 30ff 	movne.w	r0, #4294967295
   8bdf4:	f000 b976 	b.w	8c0e4 <__aeabi_idiv0>
   8bdf8:	f1ad 0c08 	sub.w	ip, sp, #8
   8bdfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8be00:	f000 f806 	bl	8be10 <__udivmoddi4>
   8be04:	f8dd e004 	ldr.w	lr, [sp, #4]
   8be08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8be0c:	b004      	add	sp, #16
   8be0e:	4770      	bx	lr

0008be10 <__udivmoddi4>:
   8be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8be14:	9e08      	ldr	r6, [sp, #32]
   8be16:	460d      	mov	r5, r1
   8be18:	4604      	mov	r4, r0
   8be1a:	4688      	mov	r8, r1
   8be1c:	2b00      	cmp	r3, #0
   8be1e:	d14d      	bne.n	8bebc <__udivmoddi4+0xac>
   8be20:	428a      	cmp	r2, r1
   8be22:	4694      	mov	ip, r2
   8be24:	d968      	bls.n	8bef8 <__udivmoddi4+0xe8>
   8be26:	fab2 f282 	clz	r2, r2
   8be2a:	b152      	cbz	r2, 8be42 <__udivmoddi4+0x32>
   8be2c:	fa01 f302 	lsl.w	r3, r1, r2
   8be30:	f1c2 0120 	rsb	r1, r2, #32
   8be34:	fa20 f101 	lsr.w	r1, r0, r1
   8be38:	fa0c fc02 	lsl.w	ip, ip, r2
   8be3c:	ea41 0803 	orr.w	r8, r1, r3
   8be40:	4094      	lsls	r4, r2
   8be42:	ea4f 411c 	mov.w	r1, ip, lsr #16
   8be46:	fbb8 f7f1 	udiv	r7, r8, r1
   8be4a:	fa1f fe8c 	uxth.w	lr, ip
   8be4e:	fb01 8817 	mls	r8, r1, r7, r8
   8be52:	fb07 f00e 	mul.w	r0, r7, lr
   8be56:	0c23      	lsrs	r3, r4, #16
   8be58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8be5c:	4298      	cmp	r0, r3
   8be5e:	d90a      	bls.n	8be76 <__udivmoddi4+0x66>
   8be60:	eb1c 0303 	adds.w	r3, ip, r3
   8be64:	f107 35ff 	add.w	r5, r7, #4294967295
   8be68:	f080 811e 	bcs.w	8c0a8 <__udivmoddi4+0x298>
   8be6c:	4298      	cmp	r0, r3
   8be6e:	f240 811b 	bls.w	8c0a8 <__udivmoddi4+0x298>
   8be72:	3f02      	subs	r7, #2
   8be74:	4463      	add	r3, ip
   8be76:	1a1b      	subs	r3, r3, r0
   8be78:	fbb3 f0f1 	udiv	r0, r3, r1
   8be7c:	fb01 3310 	mls	r3, r1, r0, r3
   8be80:	fb00 fe0e 	mul.w	lr, r0, lr
   8be84:	b2a4      	uxth	r4, r4
   8be86:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8be8a:	45a6      	cmp	lr, r4
   8be8c:	d90a      	bls.n	8bea4 <__udivmoddi4+0x94>
   8be8e:	eb1c 0404 	adds.w	r4, ip, r4
   8be92:	f100 33ff 	add.w	r3, r0, #4294967295
   8be96:	f080 8109 	bcs.w	8c0ac <__udivmoddi4+0x29c>
   8be9a:	45a6      	cmp	lr, r4
   8be9c:	f240 8106 	bls.w	8c0ac <__udivmoddi4+0x29c>
   8bea0:	4464      	add	r4, ip
   8bea2:	3802      	subs	r0, #2
   8bea4:	2100      	movs	r1, #0
   8bea6:	eba4 040e 	sub.w	r4, r4, lr
   8beaa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8beae:	b11e      	cbz	r6, 8beb8 <__udivmoddi4+0xa8>
   8beb0:	2300      	movs	r3, #0
   8beb2:	40d4      	lsrs	r4, r2
   8beb4:	e9c6 4300 	strd	r4, r3, [r6]
   8beb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bebc:	428b      	cmp	r3, r1
   8bebe:	d908      	bls.n	8bed2 <__udivmoddi4+0xc2>
   8bec0:	2e00      	cmp	r6, #0
   8bec2:	f000 80ee 	beq.w	8c0a2 <__udivmoddi4+0x292>
   8bec6:	2100      	movs	r1, #0
   8bec8:	e9c6 0500 	strd	r0, r5, [r6]
   8becc:	4608      	mov	r0, r1
   8bece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bed2:	fab3 f183 	clz	r1, r3
   8bed6:	2900      	cmp	r1, #0
   8bed8:	d14a      	bne.n	8bf70 <__udivmoddi4+0x160>
   8beda:	42ab      	cmp	r3, r5
   8bedc:	d302      	bcc.n	8bee4 <__udivmoddi4+0xd4>
   8bede:	4282      	cmp	r2, r0
   8bee0:	f200 80fc 	bhi.w	8c0dc <__udivmoddi4+0x2cc>
   8bee4:	1a84      	subs	r4, r0, r2
   8bee6:	eb65 0303 	sbc.w	r3, r5, r3
   8beea:	2001      	movs	r0, #1
   8beec:	4698      	mov	r8, r3
   8beee:	2e00      	cmp	r6, #0
   8bef0:	d0e2      	beq.n	8beb8 <__udivmoddi4+0xa8>
   8bef2:	e9c6 4800 	strd	r4, r8, [r6]
   8bef6:	e7df      	b.n	8beb8 <__udivmoddi4+0xa8>
   8bef8:	b902      	cbnz	r2, 8befc <__udivmoddi4+0xec>
   8befa:	deff      	udf	#255	; 0xff
   8befc:	fab2 f282 	clz	r2, r2
   8bf00:	2a00      	cmp	r2, #0
   8bf02:	f040 8091 	bne.w	8c028 <__udivmoddi4+0x218>
   8bf06:	eba1 000c 	sub.w	r0, r1, ip
   8bf0a:	2101      	movs	r1, #1
   8bf0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8bf10:	fa1f fe8c 	uxth.w	lr, ip
   8bf14:	fbb0 f3f7 	udiv	r3, r0, r7
   8bf18:	fb07 0013 	mls	r0, r7, r3, r0
   8bf1c:	0c25      	lsrs	r5, r4, #16
   8bf1e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8bf22:	fb0e f003 	mul.w	r0, lr, r3
   8bf26:	42a8      	cmp	r0, r5
   8bf28:	d908      	bls.n	8bf3c <__udivmoddi4+0x12c>
   8bf2a:	eb1c 0505 	adds.w	r5, ip, r5
   8bf2e:	f103 38ff 	add.w	r8, r3, #4294967295
   8bf32:	d202      	bcs.n	8bf3a <__udivmoddi4+0x12a>
   8bf34:	42a8      	cmp	r0, r5
   8bf36:	f200 80ce 	bhi.w	8c0d6 <__udivmoddi4+0x2c6>
   8bf3a:	4643      	mov	r3, r8
   8bf3c:	1a2d      	subs	r5, r5, r0
   8bf3e:	fbb5 f0f7 	udiv	r0, r5, r7
   8bf42:	fb07 5510 	mls	r5, r7, r0, r5
   8bf46:	fb0e fe00 	mul.w	lr, lr, r0
   8bf4a:	b2a4      	uxth	r4, r4
   8bf4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8bf50:	45a6      	cmp	lr, r4
   8bf52:	d908      	bls.n	8bf66 <__udivmoddi4+0x156>
   8bf54:	eb1c 0404 	adds.w	r4, ip, r4
   8bf58:	f100 35ff 	add.w	r5, r0, #4294967295
   8bf5c:	d202      	bcs.n	8bf64 <__udivmoddi4+0x154>
   8bf5e:	45a6      	cmp	lr, r4
   8bf60:	f200 80b6 	bhi.w	8c0d0 <__udivmoddi4+0x2c0>
   8bf64:	4628      	mov	r0, r5
   8bf66:	eba4 040e 	sub.w	r4, r4, lr
   8bf6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8bf6e:	e79e      	b.n	8beae <__udivmoddi4+0x9e>
   8bf70:	f1c1 0720 	rsb	r7, r1, #32
   8bf74:	408b      	lsls	r3, r1
   8bf76:	fa22 fc07 	lsr.w	ip, r2, r7
   8bf7a:	ea4c 0c03 	orr.w	ip, ip, r3
   8bf7e:	fa25 fa07 	lsr.w	sl, r5, r7
   8bf82:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8bf86:	fbba f8f9 	udiv	r8, sl, r9
   8bf8a:	fa20 f307 	lsr.w	r3, r0, r7
   8bf8e:	fb09 aa18 	mls	sl, r9, r8, sl
   8bf92:	408d      	lsls	r5, r1
   8bf94:	fa1f fe8c 	uxth.w	lr, ip
   8bf98:	431d      	orrs	r5, r3
   8bf9a:	fa00 f301 	lsl.w	r3, r0, r1
   8bf9e:	fb08 f00e 	mul.w	r0, r8, lr
   8bfa2:	0c2c      	lsrs	r4, r5, #16
   8bfa4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   8bfa8:	42a0      	cmp	r0, r4
   8bfaa:	fa02 f201 	lsl.w	r2, r2, r1
   8bfae:	d90b      	bls.n	8bfc8 <__udivmoddi4+0x1b8>
   8bfb0:	eb1c 0404 	adds.w	r4, ip, r4
   8bfb4:	f108 3aff 	add.w	sl, r8, #4294967295
   8bfb8:	f080 8088 	bcs.w	8c0cc <__udivmoddi4+0x2bc>
   8bfbc:	42a0      	cmp	r0, r4
   8bfbe:	f240 8085 	bls.w	8c0cc <__udivmoddi4+0x2bc>
   8bfc2:	f1a8 0802 	sub.w	r8, r8, #2
   8bfc6:	4464      	add	r4, ip
   8bfc8:	1a24      	subs	r4, r4, r0
   8bfca:	fbb4 f0f9 	udiv	r0, r4, r9
   8bfce:	fb09 4410 	mls	r4, r9, r0, r4
   8bfd2:	fb00 fe0e 	mul.w	lr, r0, lr
   8bfd6:	b2ad      	uxth	r5, r5
   8bfd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8bfdc:	45a6      	cmp	lr, r4
   8bfde:	d908      	bls.n	8bff2 <__udivmoddi4+0x1e2>
   8bfe0:	eb1c 0404 	adds.w	r4, ip, r4
   8bfe4:	f100 35ff 	add.w	r5, r0, #4294967295
   8bfe8:	d26c      	bcs.n	8c0c4 <__udivmoddi4+0x2b4>
   8bfea:	45a6      	cmp	lr, r4
   8bfec:	d96a      	bls.n	8c0c4 <__udivmoddi4+0x2b4>
   8bfee:	3802      	subs	r0, #2
   8bff0:	4464      	add	r4, ip
   8bff2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   8bff6:	fba0 9502 	umull	r9, r5, r0, r2
   8bffa:	eba4 040e 	sub.w	r4, r4, lr
   8bffe:	42ac      	cmp	r4, r5
   8c000:	46c8      	mov	r8, r9
   8c002:	46ae      	mov	lr, r5
   8c004:	d356      	bcc.n	8c0b4 <__udivmoddi4+0x2a4>
   8c006:	d053      	beq.n	8c0b0 <__udivmoddi4+0x2a0>
   8c008:	2e00      	cmp	r6, #0
   8c00a:	d069      	beq.n	8c0e0 <__udivmoddi4+0x2d0>
   8c00c:	ebb3 0208 	subs.w	r2, r3, r8
   8c010:	eb64 040e 	sbc.w	r4, r4, lr
   8c014:	fa22 f301 	lsr.w	r3, r2, r1
   8c018:	fa04 f707 	lsl.w	r7, r4, r7
   8c01c:	431f      	orrs	r7, r3
   8c01e:	40cc      	lsrs	r4, r1
   8c020:	e9c6 7400 	strd	r7, r4, [r6]
   8c024:	2100      	movs	r1, #0
   8c026:	e747      	b.n	8beb8 <__udivmoddi4+0xa8>
   8c028:	fa0c fc02 	lsl.w	ip, ip, r2
   8c02c:	f1c2 0120 	rsb	r1, r2, #32
   8c030:	fa25 f301 	lsr.w	r3, r5, r1
   8c034:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8c038:	fa20 f101 	lsr.w	r1, r0, r1
   8c03c:	4095      	lsls	r5, r2
   8c03e:	430d      	orrs	r5, r1
   8c040:	fbb3 f1f7 	udiv	r1, r3, r7
   8c044:	fb07 3311 	mls	r3, r7, r1, r3
   8c048:	fa1f fe8c 	uxth.w	lr, ip
   8c04c:	0c28      	lsrs	r0, r5, #16
   8c04e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8c052:	fb01 f30e 	mul.w	r3, r1, lr
   8c056:	4283      	cmp	r3, r0
   8c058:	fa04 f402 	lsl.w	r4, r4, r2
   8c05c:	d908      	bls.n	8c070 <__udivmoddi4+0x260>
   8c05e:	eb1c 0000 	adds.w	r0, ip, r0
   8c062:	f101 38ff 	add.w	r8, r1, #4294967295
   8c066:	d22f      	bcs.n	8c0c8 <__udivmoddi4+0x2b8>
   8c068:	4283      	cmp	r3, r0
   8c06a:	d92d      	bls.n	8c0c8 <__udivmoddi4+0x2b8>
   8c06c:	3902      	subs	r1, #2
   8c06e:	4460      	add	r0, ip
   8c070:	1ac0      	subs	r0, r0, r3
   8c072:	fbb0 f3f7 	udiv	r3, r0, r7
   8c076:	fb07 0013 	mls	r0, r7, r3, r0
   8c07a:	b2ad      	uxth	r5, r5
   8c07c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8c080:	fb03 f00e 	mul.w	r0, r3, lr
   8c084:	42a8      	cmp	r0, r5
   8c086:	d908      	bls.n	8c09a <__udivmoddi4+0x28a>
   8c088:	eb1c 0505 	adds.w	r5, ip, r5
   8c08c:	f103 38ff 	add.w	r8, r3, #4294967295
   8c090:	d216      	bcs.n	8c0c0 <__udivmoddi4+0x2b0>
   8c092:	42a8      	cmp	r0, r5
   8c094:	d914      	bls.n	8c0c0 <__udivmoddi4+0x2b0>
   8c096:	3b02      	subs	r3, #2
   8c098:	4465      	add	r5, ip
   8c09a:	1a28      	subs	r0, r5, r0
   8c09c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8c0a0:	e738      	b.n	8bf14 <__udivmoddi4+0x104>
   8c0a2:	4631      	mov	r1, r6
   8c0a4:	4630      	mov	r0, r6
   8c0a6:	e707      	b.n	8beb8 <__udivmoddi4+0xa8>
   8c0a8:	462f      	mov	r7, r5
   8c0aa:	e6e4      	b.n	8be76 <__udivmoddi4+0x66>
   8c0ac:	4618      	mov	r0, r3
   8c0ae:	e6f9      	b.n	8bea4 <__udivmoddi4+0x94>
   8c0b0:	454b      	cmp	r3, r9
   8c0b2:	d2a9      	bcs.n	8c008 <__udivmoddi4+0x1f8>
   8c0b4:	ebb9 0802 	subs.w	r8, r9, r2
   8c0b8:	eb65 0e0c 	sbc.w	lr, r5, ip
   8c0bc:	3801      	subs	r0, #1
   8c0be:	e7a3      	b.n	8c008 <__udivmoddi4+0x1f8>
   8c0c0:	4643      	mov	r3, r8
   8c0c2:	e7ea      	b.n	8c09a <__udivmoddi4+0x28a>
   8c0c4:	4628      	mov	r0, r5
   8c0c6:	e794      	b.n	8bff2 <__udivmoddi4+0x1e2>
   8c0c8:	4641      	mov	r1, r8
   8c0ca:	e7d1      	b.n	8c070 <__udivmoddi4+0x260>
   8c0cc:	46d0      	mov	r8, sl
   8c0ce:	e77b      	b.n	8bfc8 <__udivmoddi4+0x1b8>
   8c0d0:	4464      	add	r4, ip
   8c0d2:	3802      	subs	r0, #2
   8c0d4:	e747      	b.n	8bf66 <__udivmoddi4+0x156>
   8c0d6:	3b02      	subs	r3, #2
   8c0d8:	4465      	add	r5, ip
   8c0da:	e72f      	b.n	8bf3c <__udivmoddi4+0x12c>
   8c0dc:	4608      	mov	r0, r1
   8c0de:	e706      	b.n	8beee <__udivmoddi4+0xde>
   8c0e0:	4631      	mov	r1, r6
   8c0e2:	e6e9      	b.n	8beb8 <__udivmoddi4+0xa8>

0008c0e4 <__aeabi_idiv0>:
   8c0e4:	4770      	bx	lr
   8c0e6:	bf00      	nop
   8c0e8:	78383025 	.word	0x78383025
   8c0ec:	00000000 	.word	0x00000000
   8c0f0:	2074634f 	.word	0x2074634f
   8c0f4:	32203532 	.word	0x32203532
   8c0f8:	00313230 	.word	0x00313230
   8c0fc:	333a3631 	.word	0x333a3631
   8c100:	37343a33 	.word	0x37343a33
   8c104:	00000000 	.word	0x00000000
   8c108:	70696843 	.word	0x70696843
   8c10c:	73696857 	.word	0x73696857
   8c110:	65726570 	.word	0x65726570
   8c114:	57432d72 	.word	0x57432d72
   8c118:	20353033 	.word	0x20353033
   8c11c:	696c6e4f 	.word	0x696c6e4f
   8c120:	202e656e 	.word	0x202e656e
   8c124:	6d726946 	.word	0x6d726946
   8c128:	65726177 	.word	0x65726177
   8c12c:	69756220 	.word	0x69756220
   8c130:	203a646c 	.word	0x203a646c
   8c134:	252f7325 	.word	0x252f7325
   8c138:	00000a73 	.word	0x00000a73
   8c13c:	69726553 	.word	0x69726553
   8c140:	6e206c61 	.word	0x6e206c61
   8c144:	65626d75 	.word	0x65626d75
   8c148:	25203a72 	.word	0x25203a72
   8c14c:	00000a73 	.word	0x00000a73
   8c150:	74746553 	.word	0x74746553
   8c154:	20676e69 	.word	0x20676e69
   8c158:	46207075 	.word	0x46207075
   8c15c:	20414750 	.word	0x20414750
   8c160:	6d6d6f43 	.word	0x6d6d6f43
   8c164:	63696e75 	.word	0x63696e75
   8c168:	6f697461 	.word	0x6f697461
   8c16c:	00000a6e 	.word	0x00000a6e
   8c170:	6e657645 	.word	0x6e657645
   8c174:	6f4c2074 	.word	0x6f4c2074
   8c178:	4520706f 	.word	0x4520706f
   8c17c:	7265746e 	.word	0x7265746e
   8c180:	202c6465 	.word	0x202c6465
   8c184:	74696177 	.word	0x74696177
   8c188:	2e676e69 	.word	0x2e676e69
   8c18c:	000a2e2e 	.word	0x000a2e2e
   8c190:	00000000 	.word	0x00000000
   8c194:	45ab8912 	.word	0x45ab8912
   8c198:	ff88d8cd 	.word	0xff88d8cd

0008c19c <BUILD_DATE>:
   8c19c:	2074634f 32203532 00313230              Oct 25 2021.

0008c1a8 <BUILD_TIME>:
   8c1a8:	333a3631 37343a33 00000000 00000000     16:33:47........
   8c1b8:	00000000 aaaaaa00 aaaaaaaa eeeeeeaa     ................
   8c1c8:	eeeeeeee fffffeee ffffffff ffffffff     ................
   8c1d8:	dfbf7fff fdfbf7ef dfbf7efc fdfbf7ef     .........~......
   8c1e8:	0000007e                                ~...

0008c1ec <LED_DESCRIPTOR>:
   8c1ec:	0000004f 00000001 00000050 00000001     O.......P.......
   8c1fc:	00000051 00000001 74697845 20676e69     Q.......Exiting 
   8c20c:	68746977 61747320 20737574 0a2e6425     with status %d..
   8c21c:	00000000                                ....

0008c220 <_global_impure_ptr>:
   8c220:	200003f0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8c230:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8c240:	66656463 00000000 33323130 37363534     cdef....01234567
   8c250:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8c260:	0000296c 00000030                       l)..0...

0008c268 <blanks.1>:
   8c268:	20202020 20202020 20202020 20202020                     

0008c278 <zeroes.0>:
   8c278:	30303030 30303030 30303030 30303030     0000000000000000

0008c288 <blanks.1>:
   8c288:	20202020 20202020 20202020 20202020                     

0008c298 <zeroes.0>:
   8c298:	30303030 30303030 30303030 30303030     0000000000000000
   8c2a8:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8c2b8:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8c2c8:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8c2d8:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8c2e8:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8c2f8:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8c308:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8c318:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8c328:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8c338:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8c348:	00000063 00000043 49534f50 00000058     c...C...POSIX...
   8c358:	0000002e 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8c368:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8c378:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8c388:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8c398:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8c3a8:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8c3b8:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8c3c8:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8c3d8:	0000632e 00000000                       .c......

0008c3e0 <__mprec_bigtens>:
   8c3e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8c3f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8c400:	7f73bf3c 75154fdd                       <.s..O.u

0008c408 <__mprec_tens>:
   8c408:	00000000 3ff00000 00000000 40240000     .......?......$@
   8c418:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8c428:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8c438:	00000000 412e8480 00000000 416312d0     .......A......cA
   8c448:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8c458:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8c468:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8c478:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8c488:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8c498:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8c4a8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8c4b8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8c4c8:	79d99db4 44ea7843                       ...yCx.D

0008c4d0 <p05.0>:
   8c4d0:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8c4e0:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8c4f0:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8c500:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8c510:	2520656e 25732564 00000a73              ne %d%s%s...

0008c51c <_ctype_>:
   8c51c:	20202000 20202020 28282020 20282828     .         ((((( 
   8c52c:	20202020 20202020 20202020 20202020                     
   8c53c:	10108820 10101010 10101010 10101010      ...............
   8c54c:	04040410 04040404 10040404 10101010     ................
   8c55c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8c56c:	01010101 01010101 01010101 10101010     ................
   8c57c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8c58c:	02020202 02020202 02020202 10101010     ................
   8c59c:	00000020 00000000 00000000 00000000      ...............
   8c5ac:	00000000 00000000 00000000 00000000     ................
   8c5bc:	00000000 00000000 00000000 00000000     ................
   8c5cc:	00000000 00000000 00000000 00000000     ................
   8c5dc:	00000000 00000000 00000000 00000000     ................
   8c5ec:	00000000 00000000 00000000 00000000     ................
   8c5fc:	00000000 00000000 00000000 00000000     ................
   8c60c:	00000000 00000000 00000000 00000000     ................
   8c61c:	00000000                                ....

0008c620 <_init>:
   8c620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c622:	bf00      	nop
   8c624:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c626:	bc08      	pop	{r3}
   8c628:	469e      	mov	lr, r3
   8c62a:	4770      	bx	lr

0008c62c <__init_array_start>:
   8c62c:	00088031 	.word	0x00088031

0008c630 <__frame_dummy_init_array_entry>:
   8c630:	000800e1                                ....

0008c634 <_fini>:
   8c634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c636:	bf00      	nop
   8c638:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c63a:	bc08      	pop	{r3}
   8c63c:	469e      	mov	lr, r3
   8c63e:	4770      	bx	lr

0008c640 <__do_global_dtors_aux_fini_array_entry>:
   8c640:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b510      	push	{r4, lr}
20000002:	b082      	sub	sp, #8
20000004:	9c04      	ldr	r4, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b37b      	cbz	r3, 20000068 <efc_perform_read_sequence+0x68>
20000008:	4684      	mov	ip, r0
2000000a:	469e      	mov	lr, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000c:	6803      	ldr	r3, [r0, #0]
2000000e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000012:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000014:	b2c9      	uxtb	r1, r1
20000016:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
2000001a:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001c:	f8dc 3008 	ldr.w	r3, [ip, #8]
20000020:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000022:	9801      	ldr	r0, [sp, #4]
20000024:	f010 0001 	ands.w	r0, r0, #1
20000028:	d1f8      	bne.n	2000001c <efc_perform_read_sequence+0x1c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000002a:	4603      	mov	r3, r0
2000002c:	e006      	b.n	2000003c <efc_perform_read_sequence+0x3c>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000002e:	0099      	lsls	r1, r3, #2
20000030:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
20000034:	6809      	ldr	r1, [r1, #0]
20000036:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000003a:	3301      	adds	r3, #1
2000003c:	42a3      	cmp	r3, r4
2000003e:	d3f6      	bcc.n	2000002e <efc_perform_read_sequence+0x2e>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000040:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000042:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000046:	f8cc 2004 	str.w	r2, [ip, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000004a:	f8dc 3008 	ldr.w	r3, [ip, #8]
2000004e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000050:	9b01      	ldr	r3, [sp, #4]
20000052:	f013 0f01 	tst.w	r3, #1
20000056:	d0f8      	beq.n	2000004a <efc_perform_read_sequence+0x4a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000058:	f8dc 3000 	ldr.w	r3, [ip]
2000005c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000060:	f8cc 3000 	str.w	r3, [ip]

	return EFC_RC_OK;
}
20000064:	b002      	add	sp, #8
20000066:	bd10      	pop	{r4, pc}
		return EFC_RC_INVALID;
20000068:	2002      	movs	r0, #2
2000006a:	e7fb      	b.n	20000064 <efc_perform_read_sequence+0x64>

2000006c <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
2000006c:	6001      	str	r1, [r0, #0]
}
2000006e:	4770      	bx	lr

20000070 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000070:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
20000072:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000074:	6883      	ldr	r3, [r0, #8]
20000076:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000078:	9b01      	ldr	r3, [sp, #4]
2000007a:	f013 0f01 	tst.w	r3, #1
2000007e:	d0f9      	beq.n	20000074 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000080:	9801      	ldr	r0, [sp, #4]
}
20000082:	f000 0006 	and.w	r0, r0, #6
20000086:	b002      	add	sp, #8
20000088:	4770      	bx	lr

2000008a <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
2000008a:	f3bf 8f5f 	dmb	sy
2000008e:	3801      	subs	r0, #1
20000090:	d1fb      	bne.n	2000008a <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000092:	4770      	bx	lr

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a22      	ldr	r2, [pc, #136]	; (20000124 <SystemInit+0x90>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4b1d      	ldr	r3, [pc, #116]	; (20000128 <SystemInit+0x94>)
200000b4:	4a1d      	ldr	r2, [pc, #116]	; (2000012c <SystemInit+0x98>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	4b1b      	ldr	r3, [pc, #108]	; (20000128 <SystemInit+0x94>)
200000ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fa      	beq.n	200000b8 <SystemInit+0x24>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4b19      	ldr	r3, [pc, #100]	; (20000128 <SystemInit+0x94>)
200000c4:	4a1a      	ldr	r2, [pc, #104]	; (20000130 <SystemInit+0x9c>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	4b17      	ldr	r3, [pc, #92]	; (20000128 <SystemInit+0x94>)
200000ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fa      	beq.n	200000c8 <SystemInit+0x34>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	4b11      	ldr	r3, [pc, #68]	; (20000128 <SystemInit+0x94>)
200000e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000e4:	f013 0f08 	tst.w	r3, #8
200000e8:	d0fa      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	4a11      	ldr	r2, [pc, #68]	; (20000134 <SystemInit+0xa0>)
200000ee:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000f0:	4b0d      	ldr	r3, [pc, #52]	; (20000128 <SystemInit+0x94>)
200000f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000f4:	f013 0f02 	tst.w	r3, #2
200000f8:	d0fa      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	2211      	movs	r2, #17
200000fe:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000100:	4b09      	ldr	r3, [pc, #36]	; (20000128 <SystemInit+0x94>)
20000102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000104:	f013 0f08 	tst.w	r3, #8
20000108:	d0fa      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	2212      	movs	r2, #18
2000010e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000110:	4b05      	ldr	r3, [pc, #20]	; (20000128 <SystemInit+0x94>)
20000112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000114:	f013 0f08 	tst.w	r3, #8
20000118:	d0fa      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	4a07      	ldr	r2, [pc, #28]	; (2000013c <SystemInit+0xa8>)
2000011e:	601a      	str	r2, [r3, #0]
}
20000120:	4770      	bx	lr
20000122:	bf00      	nop
20000124:	400e0800 	.word	0x400e0800
20000128:	400e0400 	.word	0x400e0400
2000012c:	00370809 	.word	0x00370809
20000130:	01370809 	.word	0x01370809
20000134:	200f3f01 	.word	0x200f3f01
20000138:	200003e4 	.word	0x200003e4
2000013c:	05b8d800 	.word	0x05b8d800

20000140 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000140:	4b19      	ldr	r3, [pc, #100]	; (200001a8 <system_init_flash+0x68>)
20000142:	4298      	cmp	r0, r3
20000144:	d206      	bcs.n	20000154 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000146:	2300      	movs	r3, #0
20000148:	4a18      	ldr	r2, [pc, #96]	; (200001ac <system_init_flash+0x6c>)
2000014a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000014c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000150:	6013      	str	r3, [r2, #0]
20000152:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000154:	4b16      	ldr	r3, [pc, #88]	; (200001b0 <system_init_flash+0x70>)
20000156:	4298      	cmp	r0, r3
20000158:	d207      	bcs.n	2000016a <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
2000015a:	f44f 7380 	mov.w	r3, #256	; 0x100
2000015e:	4a13      	ldr	r2, [pc, #76]	; (200001ac <system_init_flash+0x6c>)
20000160:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20000162:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000166:	6013      	str	r3, [r2, #0]
20000168:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
2000016a:	4b12      	ldr	r3, [pc, #72]	; (200001b4 <system_init_flash+0x74>)
2000016c:	4298      	cmp	r0, r3
2000016e:	d807      	bhi.n	20000180 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000170:	f44f 7300 	mov.w	r3, #512	; 0x200
20000174:	4a0d      	ldr	r2, [pc, #52]	; (200001ac <system_init_flash+0x6c>)
20000176:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000178:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000017c:	6013      	str	r3, [r2, #0]
2000017e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000180:	4b0d      	ldr	r3, [pc, #52]	; (200001b8 <system_init_flash+0x78>)
20000182:	4298      	cmp	r0, r3
20000184:	d807      	bhi.n	20000196 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000186:	f44f 7340 	mov.w	r3, #768	; 0x300
2000018a:	4a08      	ldr	r2, [pc, #32]	; (200001ac <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000196:	f44f 6380 	mov.w	r3, #1024	; 0x400
2000019a:	4a04      	ldr	r2, [pc, #16]	; (200001ac <system_init_flash+0x6c>)
2000019c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000019e:	f502 7200 	add.w	r2, r2, #512	; 0x200
200001a2:	6013      	str	r3, [r2, #0]
	}
}
200001a4:	4770      	bx	lr
200001a6:	bf00      	nop
200001a8:	016e3600 	.word	0x016e3600
200001ac:	400e0800 	.word	0x400e0800
200001b0:	02625a00 	.word	0x02625a00
200001b4:	044aa1ff 	.word	0x044aa1ff
200001b8:	0501bcff 	.word	0x0501bcff

200001bc <usb_serial_number>:
200001bc:	30303030 30303030 30303030 44414544     000000000000DEAD
200001cc:	46454542 00000000 00000000 00000000     BEEF............
200001dc:	00000000                                ....

200001e0 <xram>:
200001e0:	60000000                                ...`

200001e4 <pin_spi1_cs>:
200001e4:	ffffffff                                ....

200001e8 <pin_spi1_miso>:
200001e8:	ffffffff                                ....

200001ec <pin_spi1_mosi>:
200001ec:	ffffffff                                ....

200001f0 <pin_spi1_sck>:
200001f0:	ffffffff                                ....

200001f4 <XPROG_Param_EEPageSize>:
200001f4:	00000020                                 ...

200001f8 <XPROG_Param_NVMBase>:
200001f8:	010001c0                                ....

200001fc <XPROG_Param_NVMCMDRegAddr>:
200001fc:	                                         3

200001fd <XPROG_Param_NVMCSRRegAddr>:
200001fd:	                                         2..

20000200 <defaultTimeoutTicks>:
20000200:	000001f4                                ....

20000204 <main_b_vendor_enable>:
20000204:	                                         ..

20000206 <vccint_setting>:
20000206:	                                         ..

20000208 <MS_BOS_PACKET>:
20000208:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
20000218:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
20000228:	00000000                                ....

2000022c <MS_OS_DESC>:
2000022c:	0000000a 06030000 0014009e 49570003     ..............WI
2000023c:	4253554e 00000000 00000000 00800000     NUSB............
2000024c:	00070004 00440028 00760065 00630069     ....(.D.e.v.i.c.
2000025c:	00490065 0074006e 00720065 00610066     e.I.n.t.e.r.f.a.
2000026c:	00650063 00550047 00440049 004e0000     c.e.G.U.I.D...N.
2000027c:	0030007b 00430041 00320045 00330042     {.0.A.C.E.2.B.3.
2000028c:	002d0045 00420032 00450033 0032002d     E.-.2.B.3.E.-.2.
2000029c:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
200002ac:	0034002d 00300033 00300035 00430041     -.4.3.0.5.0.A.C.
200002bc:	00320045 00330042 007d0045 00000000     E.2.B.3.E.}.....

200002cc <udc_string_desc>:
200002cc:	00000300 00000000 00000000 00000000     ................
200002dc:	00000000 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000 00000000 00000000 00000000     ................
2000030c:	00000000                                ....

20000310 <udc_string_desc_languageid>:
20000310:	04090304                                ....

20000314 <udc_string_manufacturer_name>:
20000314:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000324:	636e4920 0000002e                        Inc....

2000032c <udc_string_product_name>:
2000032c:	70696843 73696857 65726570 57432072     ChipWhisperer CW
2000033c:	00353033                                305.

20000340 <udi_api_vendor>:
20000340:	0008486d 00084891 000848a9 00084861     mH...H...H..aH..
20000350:	00000000                                ....

20000354 <g_interrupt_enabled>:
20000354:	00000001                                ....

20000358 <udc_config>:
20000358:	200003c0 20000378 200003c0 200003d4     ... x.. ... ... 
20000368:	20000370 00000000                       p.. ....

20000370 <udc_config_hs>:
20000370:	200003a0 200003e0                       ... ... 

20000378 <udc_config_lsfs>:
20000378:	20000380 200003e0                       ... ... 

20000380 <udc_desc_fs>:
20000380:	00200209 80000101 000409fa ffff0200     .. .............
20000390:	050700ff 00400281 02050700 00004002     ......@......@..

200003a0 <udc_desc_hs>:
200003a0:	00200209 80000101 000409fa ffff0200     .. .............
200003b0:	050700ff 02000281 02050700 00020002     ................

200003c0 <udc_device_desc>:
200003c0:	02000112 40000000 c3052b3e 02010100     .......@>+......
200003d0:	00000103                                ....

200003d4 <udc_device_qual>:
200003d4:	0200060a 40000000 00000001              .......@....

200003e0 <udi_apis>:
200003e0:	20000340                                @.. 

200003e4 <SystemCoreClock>:
200003e4:	003d0900                                ..=.

200003e8 <_impure_ptr>:
200003e8:	200003f0 00000000                       ... ....

200003f0 <impure_data>:
200003f0:	00000000 200006dc 20000744 200007ac     ....... D.. ... 
20000400:	00000000 00000000 00000000 00000000     ................
20000410:	00000000 00000000 00000000 00000000     ................
20000420:	00000000 00000000 00000000 00000000     ................
20000430:	00000000 00000000 00000000 00000000     ................
20000440:	00000000 00000000 00000000 00000000     ................
20000450:	00000000 00000000 00000000 00000000     ................
20000460:	00000000 00000000 00000000 00000000     ................
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000001 00000000     ................
200004a0:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000000 00000000     ................
200004f0:	00000000 00000000 00000000 00000000     ................
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000 00000000 00000000     ................
200007e0:	00000000 00000000 00000000 00000000     ................
200007f0:	00000000 00000000 00000000 00000000     ................
20000800:	00000000 00000000 00000000 00000000     ................
20000810:	00000000 00000000                       ........

20000818 <__atexit_recursive_mutex>:
20000818:	2000196c                                l.. 

2000081c <__global_locale>:
2000081c:	00000043 00000000 00000000 00000000     C...............
2000082c:	00000000 00000000 00000000 00000000     ................
2000083c:	00000043 00000000 00000000 00000000     C...............
2000084c:	00000000 00000000 00000000 00000000     ................
2000085c:	00000043 00000000 00000000 00000000     C...............
2000086c:	00000000 00000000 00000000 00000000     ................
2000087c:	00000043 00000000 00000000 00000000     C...............
2000088c:	00000000 00000000 00000000 00000000     ................
2000089c:	00000043 00000000 00000000 00000000     C...............
200008ac:	00000000 00000000 00000000 00000000     ................
200008bc:	00000043 00000000 00000000 00000000     C...............
200008cc:	00000000 00000000 00000000 00000000     ................
200008dc:	00000043 00000000 00000000 00000000     C...............
200008ec:	00000000 00000000 00000000 00000000     ................
200008fc:	0008b0cd 0008a0d5 00000000 0008c51c     ................
2000090c:	0008c358 0008c21c 0008c21c 0008c21c     X...............
2000091c:	0008c21c 0008c21c 0008c21c 0008c21c     ................
2000092c:	0008c21c 0008c21c ffffffff ffffffff     ................
2000093c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
2000094c:	00000000 00000000 00000000 00000000     ................
2000095c:	00000000 00000000 53410000 00494943     ..........ASCII.
2000096c:	00000000 00000000 00000000 00000000     ................
2000097c:	00000000 00000000 00000000              ............

20000988 <__malloc_av_>:
20000988:	00000000 00000000 20000988 20000988     ........... ... 
20000998:	20000990 20000990 20000998 20000998     ... ... ... ... 
200009a8:	200009a0 200009a0 200009a8 200009a8     ... ... ... ... 
200009b8:	200009b0 200009b0 200009b8 200009b8     ... ... ... ... 
200009c8:	200009c0 200009c0 200009c8 200009c8     ... ... ... ... 
200009d8:	200009d0 200009d0 200009d8 200009d8     ... ... ... ... 
200009e8:	200009e0 200009e0 200009e8 200009e8     ... ... ... ... 
200009f8:	200009f0 200009f0 200009f8 200009f8     ... ... ... ... 
20000a08:	20000a00 20000a00 20000a08 20000a08     ... ... ... ... 
20000a18:	20000a10 20000a10 20000a18 20000a18     ... ... ... ... 
20000a28:	20000a20 20000a20 20000a28 20000a28      ..  .. (.. (.. 
20000a38:	20000a30 20000a30 20000a38 20000a38     0.. 0.. 8.. 8.. 
20000a48:	20000a40 20000a40 20000a48 20000a48     @.. @.. H.. H.. 
20000a58:	20000a50 20000a50 20000a58 20000a58     P.. P.. X.. X.. 
20000a68:	20000a60 20000a60 20000a68 20000a68     `.. `.. h.. h.. 
20000a78:	20000a70 20000a70 20000a78 20000a78     p.. p.. x.. x.. 
20000a88:	20000a80 20000a80 20000a88 20000a88     ... ... ... ... 
20000a98:	20000a90 20000a90 20000a98 20000a98     ... ... ... ... 
20000aa8:	20000aa0 20000aa0 20000aa8 20000aa8     ... ... ... ... 
20000ab8:	20000ab0 20000ab0 20000ab8 20000ab8     ... ... ... ... 
20000ac8:	20000ac0 20000ac0 20000ac8 20000ac8     ... ... ... ... 
20000ad8:	20000ad0 20000ad0 20000ad8 20000ad8     ... ... ... ... 
20000ae8:	20000ae0 20000ae0 20000ae8 20000ae8     ... ... ... ... 
20000af8:	20000af0 20000af0 20000af8 20000af8     ... ... ... ... 
20000b08:	20000b00 20000b00 20000b08 20000b08     ... ... ... ... 
20000b18:	20000b10 20000b10 20000b18 20000b18     ... ... ... ... 
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 
20000bb8:	20000bb0 20000bb0 20000bb8 20000bb8     ... ... ... ... 
20000bc8:	20000bc0 20000bc0 20000bc8 20000bc8     ... ... ... ... 
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 
20000c58:	20000c50 20000c50 20000c58 20000c58     P.. P.. X.. X.. 
20000c68:	20000c60 20000c60 20000c68 20000c68     `.. `.. h.. h.. 
20000c78:	20000c70 20000c70 20000c78 20000c78     p.. p.. x.. x.. 
20000c88:	20000c80 20000c80 20000c88 20000c88     ... ... ... ... 
20000c98:	20000c90 20000c90 20000c98 20000c98     ... ... ... ... 
20000ca8:	20000ca0 20000ca0 20000ca8 20000ca8     ... ... ... ... 
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80                       ... ... 

20000d90 <__malloc_sbrk_base>:
20000d90:	ffffffff                                ....

20000d94 <__malloc_trim_threshold>:
20000d94:	00020000                                ....
